[+++ b/okhttp/src/main/java/okhttp3/Handshake.java, +import java.io.IOException;, +  public static Handshake get(SSLSession session) throws IOException {, +    if ("SSL_NULL_WITH_NULL_NULL".equals(cipherSuiteString)) {, +      throw new IOException("cipherSuite == SSL_NULL_WITH_NULL_NULL");, +    }, +    if ("NONE".equals(tlsVersionString)) throw new IOException("tlsVersion == NONE");, +++ b/okhttp/src/main/java/okhttp3/Handshake.java, +import java.io.IOException;, +  public static Handshake get(SSLSession session) throws IOException {, +    if ("SSL_NULL_WITH_NULL_NULL".equals(cipherSuiteString)) {, +      throw new IOException("cipherSuite == SSL_NULL_WITH_NULL_NULL");, +    }, +    if ("NONE".equals(tlsVersionString)) throw new IOException("tlsVersion == NONE");, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java]
[+++ b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java, +  static final class CountingSink extends ForwardingSink {]
[+++ b/pom.xml, +    <version>20130303</version>, +++ b/pom.xml, +    <version>20130303</version>, +++ b/src/main/java/com/google/mockwebserver/MockWebServer.java, +        } else if (!request.startsWith("POST ") && !request.startsWith("PUT ")) {]
[+++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +    assertEquals(TlsVersion.TLS_1_0, fallbackRequest.getTlsVersion());, +++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +    assertEquals(TlsVersion.TLS_1_0, fallbackRequest.getTlsVersion());, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, + *, + * <p>This class is intended to be used for testing. It uses small keys (1024 bit RSA) because they, + * are quick to generate., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc5208">PKCS, +   * #8</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +  /** Build a held certificate with reasonable defaults for testing. */, +      generator.setSignatureAlgorithm("SHA256WithRSAEncryption");, +        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA", "BC");, +        keyPairGenerator.initialize(1024, new SecureRandom());, +++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +    assertEquals(TlsVersion.TLS_1_0, fallbackRequest.getTlsVersion());, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, + *, + * <p>This class is intended to be used for testing. It uses small keys (1024 bit RSA) because they, + * are quick to generate., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc5208">PKCS, +   * #8</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +  /** Build a held certificate with reasonable defaults for testing. */, +      generator.setSignatureAlgorithm("SHA256WithRSAEncryption");, +        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA", "BC");, +        keyPairGenerator.initialize(1024, new SecureRandom());, +++ b/okhttp-tls/src/test/java/okhttp3/tls/HeldCertificateTest.java, +++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +    assertEquals(TlsVersion.TLS_1_0, fallbackRequest.getTlsVersion());, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, + *, + * <p>This class is intended to be used for testing. It uses small keys (1024 bit RSA) because they, + * are quick to generate., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc5208">PKCS, +   * #8</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +  /** Build a held certificate with reasonable defaults for testing. */, +      generator.setSignatureAlgorithm("SHA256WithRSAEncryption");, +        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA", "BC");, +        keyPairGenerator.initialize(1024, new SecureRandom());, +++ b/okhttp-tls/src/test/java/okhttp3/tls/HeldCertificateTest.java]
[+++ b/okhttp/build.gradle, +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.net.Proxy;, +import java.net.ProxySelector;, +import java.net.Socket;, +import java.security.GeneralSecurityException;, +import java.time.Duration;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Random;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.TimeUnit;, +import javax.annotation.Nullable;, +import javax.net.SocketFactory;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.X509TrustManager;, +import okhttp3.internal.Internal;, +import okhttp3.internal.InternalKtKt;, +import okhttp3.internal.Util;, +import okhttp3.internal.cache.InternalCache;, +import okhttp3.internal.connection.Exchange;, +import okhttp3.internal.connection.RealConnectionPool;, +import okhttp3.internal.platform.Platform;, +import okhttp3.internal.proxy.NullProxySelector;, +import okhttp3.internal.tls.CertificateChainCleaner;, +import okhttp3.internal.tls.OkHostnameVerifier;, +import okhttp3.internal.ws.RealWebSocket;, +import okio.Sink;, +import okio.Source;, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;, +, +import static okhttp3.internal.InternalKtKt.addressEqualsNonHost;, +import static okhttp3.internal.InternalKtKt.certificatePinnerWithCertificateChainCleaner;, +import static okhttp3.internal.Util.checkDuration;, +, +/**, + * Factory for {@linkplain Call calls}, which can be used to send HTTP requests and read their, + * responses., + *, + * <h3>OkHttpClients should be shared</h3>, + *, + * <p>OkHttp performs best when you create a single {@code OkHttpClient} instance and reuse it for, + * all of your HTTP calls. This is because each client holds its own connection pool and thread, + * pools. Reusing connections and threads reduces latency and saves memory. Conversely, creating a, + * client for each request wastes resources on idle pools., + *, + * <p>Use {@code new OkHttpClient()} to create a shared instance with the default settings:, + * <pre>   {@code, + *, + *   // The singleton HTTP client., + *   public final OkHttpClient client = new OkHttpClient();, + * }</pre>, + *, + * <p>Or use {@code new OkHttpClient.Builder()} to create a shared instance with custom settings:, + * <pre>   {@code, + *, + *   // The singleton HTTP client., + *   public final OkHttpClient client = new OkHttpClient.Builder(), + *       .addInterceptor(new HttpLoggingInterceptor()), + *       .cache(new Cache(cacheDir, cacheSize)), + *       .build();, + * }</pre>, + *, + * <h3>Customize your client with newBuilder()</h3>, + *, + * <p>You can customize a shared OkHttpClient instance with {@link #newBuilder()}. This builds a, + * client that shares the same connection pool, thread pools, and configuration. Use the builder, + * methods to configure the derived client for a specific purpose., + *, + * <p>This example shows a call with a short 500 millisecond timeout: <pre>   {@code, + *, + *   OkHttpClient eagerClient = client.newBuilder(), + *       .readTimeout(500, TimeUnit.MILLISECONDS), + *       .build();, + *   Response response = eagerClient.newCall(request).execute();, + * }</pre>, + *, + * <h3>Shutdown isn't necessary</h3>]
[+++ b/okhttp-logging-interceptor/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/okhttp-logging-interceptor/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +/** An OkHttp interceptor which logs HTTP request and response data. */, +@javax.annotation.ParametersAreNonnullByDefault, +package okhttp3.logging;, +++ b/okhttp-logging-interceptor/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +/** An OkHttp interceptor which logs HTTP request and response data. */, +@javax.annotation.ParametersAreNonnullByDefault, +package okhttp3.logging;, +++ b/okhttp/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/okhttp-logging-interceptor/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +/** An OkHttp interceptor which logs HTTP request and response data. */, +@javax.annotation.ParametersAreNonnullByDefault, +package okhttp3.logging;, +++ b/okhttp/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/okhttp/src/main/java/okhttp3/Address.java, +import javax.annotation.Nullable;, +  final @Nullable Proxy proxy;, +  final @Nullable SSLSocketFactory sslSocketFactory;, +  final @Nullable HostnameVerifier hostnameVerifier;, +  final @Nullable CertificatePinner certificatePinner;, +      @Nullable SSLSocketFactory sslSocketFactory, @Nullable HostnameVerifier hostnameVerifier,, +      @Nullable CertificatePinner certificatePinner, Authenticator proxyAuthenticator,, +      @Nullable Proxy proxy, List<Protocol> protocols, List<ConnectionSpec> connectionSpecs,, +      ProxySelector proxySelector) {, +  public @Nullable Proxy proxy() {, +  public @Nullable SSLSocketFactory sslSocketFactory() {, +  public @Nullable HostnameVerifier hostnameVerifier() {, +  public @Nullable CertificatePinner certificatePinner() {, +  @Override public boolean equals(@Nullable Object other) {, +++ b/okhttp-logging-interceptor/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +/** An OkHttp interceptor which logs HTTP request and response data. */, +@javax.annotation.ParametersAreNonnullByDefault, +package okhttp3.logging;, +++ b/okhttp/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +++ b/okhttp/src/main/java/okhttp3/Address.java, +import javax.annotation.Nullable;, +  final @Nullable Proxy proxy;, +  final @Nullable SSLSocketFactory sslSocketFactory;, +  final @Nullable HostnameVerifier hostnameVerifier;, +  final @Nullable CertificatePinner certificatePinner;, +      @Nullable SSLSocketFactory sslSocketFactory, @Nullable HostnameVerifier hostnameVerifier,, +      @Nullable CertificatePinner certificatePinner, Authenticator proxyAuthenticator,, +      @Nullable Proxy proxy, List<Protocol> protocols, List<ConnectionSpec> connectionSpecs,, +      ProxySelector proxySelector) {, +  public @Nullable Proxy proxy() {, +  public @Nullable SSLSocketFactory sslSocketFactory() {, +  public @Nullable HostnameVerifier hostnameVerifier() {, +  public @Nullable CertificatePinner certificatePinner() {, +  @Override public boolean equals(@Nullable Object other) {, +++ b/okhttp/src/main/java/okhttp3/Authenticator.java, +import javax.annotation.Nullable;, +  @Nullable Request authenticate(Route route, Response response) throws IOException;, +++ b/okhttp-logging-interceptor/pom.xml, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>]
[+++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestRule;, +  @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();, +  private OkHttpClient client = clientTestRule.client;, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestRule;, +  @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();, +  private OkHttpClient client = clientTestRule.client;, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import org.junit.rules.TestRule;, +import org.junit.runner.Description;, +import org.junit.runners.model.Statement;, +, +import static okhttp3.TestUtil.defaultClient;, +, +public class OkHttpClientTestRule implements TestRule {, +  public OkHttpClient client = defaultClient();, +, +  @Override, +  public Statement apply(Statement base, Description description) {, +    return statement(base);, +  }, +, +  private Statement statement(final Statement base) {, +    return new Statement() {, +      public void evaluate() throws Throwable {, +        try {, +          base.evaluate();, +        } finally {, +          TestUtil.ensureAllConnectionsReleased(client);, +        }, +      }, +    };, +  }, +}, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestRule;, +  @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();, +  private OkHttpClient client = clientTestRule.client;, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import org.junit.rules.TestRule;, +import org.junit.runner.Description;, +import org.junit.runners.model.Statement;, +, +import static okhttp3.TestUtil.defaultClient;, +, +public class OkHttpClientTestRule implements TestRule {, +  public OkHttpClient client = defaultClient();, +, +  @Override, +  public Statement apply(Statement base, Description description) {, +    return statement(base);, +  }, +, +  private Statement statement(final Statement base) {, +    return new Statement() {, +      public void evaluate() throws Throwable {, +        try {, +          base.evaluate();, +        } finally {, +          TestUtil.ensureAllConnectionsReleased(client);, +        }, +      }, +    };, +  }, +}]
[+++ b/okhttp/build.gradle, +      'okhttp3.CipherSuite#javaName()',, +++ b/okhttp/build.gradle, +      'okhttp3.CipherSuite#javaName()',, +++ /dev/null, +++ b/okhttp/build.gradle, +      'okhttp3.CipherSuite#javaName()',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import java.util.ArrayList, +import java.util.Collections, +, +/**, + * [TLS cipher suites](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml)., + *, + * **Not all cipher suites are supported on all platforms.** As newer cipher suites are created (for, + * stronger privacy, better performance, etc.) they will be adopted by the platform and then exposed, + * here. Cipher suites that are not available on either Android (through API level 24) or Java, + * (through JDK 9) are omitted for brevity., + *, + * See [Android SSLEngine](https://developer.android.com/reference/javax/net/ssl/SSLEngine.html), + * which lists the cipher suites supported by Android., + *, + * See [JDK 10 Providers](https://docs.oracle.com/javase/10/security/oracle-providers.htm), + * which lists the cipher suites supported by Oracle., + *, + * See [NativeCrypto.java](https://github.com/google/conscrypt/blob/master/common/src/main/java/org/conscrypt/NativeCrypto.java), + * from Conscrypt, which lists the cipher suites supported by Conscrypt., + */, +class CipherSuite private constructor(, +  private val javaName: String, +) {, +  /**, +   * Returns the Java name of this cipher suite. For some older cipher suites the Java name has the, +   * prefix `SSL_`, causing the Java name to be different from the instance name which is always, +   * prefixed `TLS_`. For example, `TLS_RSA_EXPORT_WITH_RC4_40_MD5.javaName()` is, +   * `"SSL_RSA_EXPORT_WITH_RC4_40_MD5"`., +   */, +  fun javaName(): String = javaName, +, +  override fun toString(): String = javaName, +, +  companion object {, +    /**, +     * Compares cipher suites names like "TLS_RSA_WITH_NULL_MD5" and "SSL_RSA_WITH_NULL_MD5",, +     * ignoring the "TLS_" or "SSL_" prefix which is not consistent across platforms. In particular, +     * some IBM JVMs use the "SSL_" prefix everywhere whereas Oracle JVMs mix "TLS_" and "SSL_"., +     */, +    internal val ORDER_BY_NAME = object: Comparator<String> {, +      override fun compare(a: String, b: String): Int {, +        var i = 4, +        val limit = Math.min(a.length, b.length), +        while (i < limit) {, +          val charA = a.get(i), +          val charB = b.get(i), +          if (charA != charB) return if (charA < charB) -1 else 1, +          i++, +        }, +        val lengthA = a.length, +        val lengthB = b.length, +        if (lengthA != lengthB) return if (lengthA < lengthB) -1 else 1, +        return 0, +      }, +    }, +, +    /**, +     * Holds interned instances. This needs to be above the init() calls below so that it's, +     * initialized by the time those parts of `<clinit>()` run. Guarded by CipherSuite.class., +     */, +    private val INSTANCES = mutableMapOf<String, CipherSuite>(), +, +    // Last updated 2016-07-03 using cipher suites from Android 24 and Java 9., +, +    // @JvmField val TLS_NULL_WITH_NULL_NULL = init("TLS_NULL_WITH_NULL_NULL", 0x0000), +    @JvmField val TLS_RSA_WITH_NULL_MD5 = init("SSL_RSA_WITH_NULL_MD5", 0x0001), +    @JvmField val TLS_RSA_WITH_NULL_SHA = init("SSL_RSA_WITH_NULL_SHA", 0x0002), +    @JvmField val TLS_RSA_EXPORT_WITH_RC4_40_MD5 = init("SSL_RSA_EXPORT_WITH_RC4_40_MD5", 0x0003), +    @JvmField val TLS_RSA_WITH_RC4_128_MD5 = init("SSL_RSA_WITH_RC4_128_MD5", 0x0004), +    @JvmField val TLS_RSA_WITH_RC4_128_SHA = init("SSL_RSA_WITH_RC4_128_SHA", 0x0005), +    // @JvmField val TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = init("SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5", 0x0006), +    // @JvmField val TLS_RSA_WITH_IDEA_CBC_SHA = init("TLS_RSA_WITH_IDEA_CBC_SHA", 0x0007), +    @JvmField val TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = init("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x0008), +    @JvmField val TLS_RSA_WITH_DES_CBC_SHA = init("SSL_RSA_WITH_DES_CBC_SHA", 0x0009)]
[+++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-ws-tests/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-ws-tests/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-ws/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/CipherSuite.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import static java.lang.Integer.MAX_VALUE;, +, +/**, + * <a href="https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml">TLS cipher, + * suites</a>., + *, + * <p><strong>Not all cipher suites are supported on all platforms.</strong> As newer cipher suites, + * are created (for stronger privacy, better performance, etc.) they will be adopted by the platform, + * and then exposed here. Cipher suites that are not available on either Android (through API level, + * 20) or Java (through JDK 8) are omitted for brevity., + *, + * <p>See also <a href="https://android.googlesource.com/platform/external/conscrypt/+/master/src/main/java/org/conscrypt/NativeCrypto.java">NativeCrypto.java</a>, + * from conscrypt, which lists the cipher suites supported by Android., + */, +public enum CipherSuite {, +  // Last updated 2014-11-11 using cipher suites from Android 21 and Java 8., +, +  // TLS_NULL_WITH_NULL_NULL("TLS_NULL_WITH_NULL_NULL", 0x0000, 5246, MAX_VALUE, MAX_VALUE),, +  TLS_RSA_WITH_NULL_MD5("SSL_RSA_WITH_NULL_MD5", 0x0001, 5246, 6, 10),, +  TLS_RSA_WITH_NULL_SHA("SSL_RSA_WITH_NULL_SHA", 0x0002, 5246, 6, 10),, +  TLS_RSA_EXPORT_WITH_RC4_40_MD5("SSL_RSA_EXPORT_WITH_RC4_40_MD5", 0x0003, 4346, 6, 10),, +  TLS_RSA_WITH_RC4_128_MD5("SSL_RSA_WITH_RC4_128_MD5", 0x0004, 5246, 6, 10),, +  TLS_RSA_WITH_RC4_128_SHA("SSL_RSA_WITH_RC4_128_SHA", 0x0005, 5246, 6, 10),, +  // TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5("SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5", 0x0006, 4346, MAX_VALUE, MAX_VALUE),, +  // TLS_RSA_WITH_IDEA_CBC_SHA("TLS_RSA_WITH_IDEA_CBC_SHA", 0x0007, 5469, MAX_VALUE, MAX_VALUE),, +  TLS_RSA_EXPORT_WITH_DES40_CBC_SHA("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x0008, 4346, 6, 10),, +  TLS_RSA_WITH_DES_CBC_SHA("SSL_RSA_WITH_DES_CBC_SHA", 0x0009, 5469, 6, 10),, +  TLS_RSA_WITH_3DES_EDE_CBC_SHA("SSL_RSA_WITH_3DES_EDE_CBC_SHA", 0x000a, 5246, 6, 10),, +  // TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA("SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA", 0x000b, 4346, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_DSS_WITH_DES_CBC_SHA("TLS_DH_DSS_WITH_DES_CBC_SHA", 0x000c, 5469, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA("TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA", 0x000d, 5246, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA("SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x000e, 4346, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_RSA_WITH_DES_CBC_SHA("TLS_DH_RSA_WITH_DES_CBC_SHA", 0x000f, 5469, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA("TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA", 0x0010, 5246, MAX_VALUE, MAX_VALUE),, +  TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA("SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 0x0011, 4346, 6, 10),, +  TLS_DHE_DSS_WITH_DES_CBC_SHA("SSL_DHE_DSS_WITH_DES_CBC_SHA", 0x0012, 5469, 6, 10),, +  TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 0x0013, 5246, 6, 10),, +  TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA("SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x0014, 4346, 6, 10),, +  TLS_DHE_RSA_WITH_DES_CBC_SHA("SSL_DHE_RSA_WITH_DES_CBC_SHA", 0x0015, 5469, 6, 10),, +  TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA("SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 0x0016, 5246, 6, 10),, +  TLS_DH_anon_EXPORT_WITH_RC4_40_MD5("SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", 0x0017, 4346, 6, 10),, +  TLS_DH_anon_WITH_RC4_128_MD5("SSL_DH_anon_WITH_RC4_128_MD5", 0x0018, 5246, 6, 10),, +  TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA("SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 0x0019, 4346, 6, 10),, +  TLS_DH_anon_WITH_DES_CBC_SHA("SSL_DH_anon_WITH_DES_CBC_SHA", 0x001a, 5469, 6, 10),, +  TLS_DH_anon_WITH_3DES_EDE_CBC_SHA("SSL_DH_anon_WITH_3DES_EDE_CBC_SHA", 0x001b, 5246, 6, 10),, +  TLS_KRB5_WITH_DES_CBC_SHA("TLS_KRB5_WITH_DES_CBC_SHA", 0x001e, 2712, 6, MAX_VALUE),, +  TLS_KRB5_WITH_3DES_EDE_CBC_SHA("TLS_KRB5_WITH_3DES_EDE_CBC_SHA", 0x001f, 2712, 6, MAX_VALUE),, +  TLS_KRB5_WITH_RC4_128_SHA("TLS_KRB5_WITH_RC4_128_SHA", 0x0020, 2712, 6, MAX_VALUE),, +  // TLS_KRB5_WITH_IDEA_CBC_SHA("TLS_KRB5_WITH_IDEA_CBC_SHA", 0x0021, 2712, MAX_VALUE, MAX_VALUE),, +  TLS_KRB5_WITH_DES_CBC_MD5("TLS_KRB5_WITH_DES_CBC_MD5", 0x0022, 2712, 6, MAX_VALUE),, +  TLS_KRB5_WITH_3DES_EDE_CBC_MD5("TLS_KRB5_WITH_3DES_EDE_CBC_MD5", 0x0023, 2712, 6, MAX_VALUE),, +  TLS_KRB5_WITH_RC4_128_MD5("TLS_KRB5_WITH_RC4_128_MD5", 0x0024, 2712, 6, MAX_VALUE),, +  // TLS_KRB5_WITH_IDEA_CBC_MD5("TLS_KRB5_WITH_IDEA_CBC_MD5", 0x0025, 2712, MAX_VALUE, MAX_VALUE),, +  TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", 0x0026, 2712, 6, MAX_VALUE),, +  // TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA", 0x0027, 2712, MAX_VALUE, MAX_VALUE),, +  TLS_KRB5_EXPORT_WITH_RC4_40_SHA("TLS_KRB5_EXPORT_WITH_RC4_40_SHA", 0x0028, 2712, 6, MAX_VALUE),, +  TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", 0x0029, 2712, 6, MAX_VALUE),, +  // TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5", 0x002a, 2712, MAX_VALUE, MAX_VALUE),, +  TLS_KRB5_EXPORT_WITH_RC4_40_MD5("TLS_KRB5_EXPORT_WITH_RC4_40_MD5", 0x002b, 2712, 6, MAX_VALUE),, +  // TLS_PSK_WITH_NULL_SHA("TLS_PSK_WITH_NULL_SHA", 0x002c, 4785, MAX_VALUE, MAX_VALUE),, +  // TLS_DHE_PSK_WITH_NULL_SHA("TLS_DHE_PSK_WITH_NULL_SHA", 0x002d, 4785, MAX_VALUE, MAX_VALUE),, +  // TLS_RSA_PSK_WITH_NULL_SHA("TLS_RSA_PSK_WITH_NULL_SHA", 0x002e, 4785, MAX_VALUE, MAX_VALUE),, +  TLS_RSA_WITH_AES_128_CBC_SHA("TLS_RSA_WITH_AES_128_CBC_SHA", 0x002f, 5246, 6, 10),, +  // TLS_DH_DSS_WITH_AES_128_CBC_SHA("TLS_DH_DSS_WITH_AES_128_CBC_SHA", 0x0030, 5246, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_RSA_WITH_AES_128_CBC_SHA("TLS_DH_RSA_WITH_AES_128_CBC_SHA", 0x0031, 5246, MAX_VALUE, MAX_VALUE),, +  TLS_DHE_DSS_WITH_AES_128_CBC_SHA("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", 0x0032, 5246, 6, 10),, +  TLS_DHE_RSA_WITH_AES_128_CBC_SHA("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", 0x0033, 5246, 6, 10),, +  TLS_DH_anon_WITH_AES_128_CBC_SHA("TLS_DH_anon_WITH_AES_128_CBC_SHA", 0x0034, 5246, 6, 10),, +  TLS_RSA_WITH_AES_256_CBC_SHA("TLS_RSA_WITH_AES_256_CBC_SHA", 0x0035, 5246, 6, 10),, +  // TLS_DH_DSS_WITH_AES_256_CBC_SHA("TLS_DH_DSS_WITH_AES_256_CBC_SHA", 0x0036, 5246, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_RSA_WITH_AES_256_CBC_SHA("TLS_DH_RSA_WITH_AES_256_CBC_SHA", 0x0037, 5246, MAX_VALUE, MAX_VALUE),, +  TLS_DHE_DSS_WITH_AES_256_CBC_SHA("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", 0x0038, 5246, 6, 10),, +  TLS_DHE_RSA_WITH_AES_256_CBC_SHA("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", 0x0039, 5246, 6, 10),, +  TLS_DH_anon_WITH_AES_256_CBC_SHA("TLS_DH_anon_WITH_AES_256_CBC_SHA", 0x003a, 5246, 6, 10),, +  TLS_RSA_WITH_NULL_SHA256("TLS_RSA_WITH_NULL_SHA256", 0x003b, 5246, 7, 21),, +  TLS_RSA_WITH_AES_128_CBC_SHA256("TLS_RSA_WITH_AES_128_CBC_SHA256", 0x003c, 5246, 7, 21),, +  TLS_RSA_WITH_AES_256_CBC_SHA256("TLS_RSA_WITH_AES_256_CBC_SHA256", 0x003d, 5246, 7, 21),, +  // TLS_DH_DSS_WITH_AES_128_CBC_SHA256("TLS_DH_DSS_WITH_AES_128_CBC_SHA256", 0x003e, 5246, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_RSA_WITH_AES_128_CBC_SHA256("TLS_DH_RSA_WITH_AES_128_CBC_SHA256", 0x003f, 5246, MAX_VALUE, MAX_VALUE),, +  TLS_DHE_DSS_WITH_AES_128_CBC_SHA256("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", 0x0040, 5246, 7, 21),, +  // TLS_RSA_WITH_CAMELLIA_128_CBC_SHA("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA", 0x0041, 5932, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA("TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA", 0x0042, 5932, MAX_VALUE, MAX_VALUE),]
[+++ b/pom.xml]
[+++ b/.travis.yml, +  - ./mvnw dependency:resolve -B || true, +  - ./mvnw -DskipTests package checkstyle:check -B, +  - ./mvnw test javadoc:jar source:jar -B, +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B || true, +  - ./mvnw -DskipTests package checkstyle:check -B, +  - ./mvnw test javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_2019-03-14_, +## Version 3.12.2, +, +_2019-03-14_, +, + *  Fix: Don't crash if the HTTPS server returns no certificates in the TLS handshake., + *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`, +    callback., +, +, +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B || true, +  - ./mvnw -DskipTests package checkstyle:check -B, +  - ./mvnw test javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_2019-03-14_, +## Version 3.12.2, +, +_2019-03-14_, +, + *  Fix: Don't crash if the HTTPS server returns no certificates in the TLS handshake., + *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`, +    callback., +, +, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.14.0"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.14.0"), +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B || true, +  - ./mvnw -DskipTests package checkstyle:check -B, +  - ./mvnw test javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_2019-03-14_, +## Version 3.12.2, +, +_2019-03-14_, +, + *  Fix: Don't crash if the HTTPS server returns no certificates in the TLS handshake., + *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`, +    callback., +, +, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.14.0"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.14.0"), +++ b/mockwebserver/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B || true, +  - ./mvnw -DskipTests package checkstyle:check -B, +  - ./mvnw test javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_2019-03-14_, +## Version 3.12.2, +, +_2019-03-14_, +, + *  Fix: Don't crash if the HTTPS server returns no certificates in the TLS handshake., + *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`, +    callback., +, +, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.14.0"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.14.0"), +++ b/mockwebserver/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B || true, +  - ./mvnw -DskipTests package checkstyle:check -B, +  - ./mvnw test javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_2019-03-14_, +## Version 3.12.2, +, +_2019-03-14_, +, + *  Fix: Don't crash if the HTTPS server returns no certificates in the TLS handshake., + *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`, +    callback.]
[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +        Address address = chain.connection().route().address();, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +        Address address = chain.connection().route().address();, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +        route = connection.route();, +        handshake = connection.handshake();, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +        Address address = chain.connection().route().address();, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +        route = connection.route();, +        handshake = connection.handshake();, +++ b/okhttp/src/main/java/okhttp3/Connection.java, +  Route route();, +   * Returns the socket that this connection is using. Returns an {@linkplain, +   * javax.net.ssl.SSLSocket SSL socket} if this connection is HTTPS. If this is an HTTP/2 or SPDY, +   * connection the socket may be shared by multiple concurrent calls., +  Socket socket();, +  /**, +   * Returns the TLS handshake used to establish this connection, or null if the connection is not, +   * HTTPS., +   */, +  Handshake handshake();, +  Protocol protocol();, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +        Address address = chain.connection().route().address();, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +        route = connection.route();, +        handshake = connection.handshake();, +++ b/okhttp/src/main/java/okhttp3/Connection.java, +  Route route();, +   * Returns the socket that this connection is using. Returns an {@linkplain, +   * javax.net.ssl.SSLSocket SSL socket} if this connection is HTTPS. If this is an HTTP/2 or SPDY, +   * connection the socket may be shared by multiple concurrent calls., +  Socket socket();, +  /**, +   * Returns the TLS handshake used to establish this connection, or null if the connection is not, +   * HTTPS., +   */, +  Handshake handshake();, +  Protocol protocol();, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import static okhttp3.internal.Util.closeQuietly;, +, +          && address.equals(connection.route().address), +      closeQuietly(connection.socket());, +    closeQuietly(longestIdleConnection.socket());, +      Internal.logger.warning("A connection to " + connection.route().address().url(), +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +        Address address = chain.connection().route().address();, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +        route = connection.route();, +        handshake = connection.handshake();, +++ b/okhttp/src/main/java/okhttp3/Connection.java, +  Route route();, +   * Returns the socket that this connection is using. Returns an {@linkplain, +   * javax.net.ssl.SSLSocket SSL socket} if this connection is HTTPS. If this is an HTTP/2 or SPDY, +   * connection the socket may be shared by multiple concurrent calls., +  Socket socket();, +  /**, +   * Returns the TLS handshake used to establish this connection, or null if the connection is not, +   * HTTPS., +   */, +  Handshake handshake();, +  Protocol protocol();, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import static okhttp3.internal.Util.closeQuietly;, +, +          && address.equals(connection.route().address), +      closeQuietly(connection.socket());, +    closeQuietly(longestIdleConnection.socket());, +      Internal.logger.warning("A connection to " + connection.route().address().url(), +++ b/okhttp/src/main/java/okhttp3/internal/http/Http1xStream.java, +        request, httpEngine.getConnection().route().proxy().type());]
[+++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>]
[+++ b/CHANGELOG.md, +## Version 2.5.0, +, +_2015-08-25_, +, + *  **OkHttp now rejects request headers that contain invalid characters.** This, +    includes potential security problems (newline characters) as well as simple, +    non-ASCII characters (including international characters and emoji)., +, + *  **Call canceling is more reliable.**  We had a bug where a socket being, +     connected wasn't being closed when the application used `Call.cancel()`., +, + *  **Changing a HttpUrl’s scheme now tracks the default port.** We had a bug, +    where changing a URL from `http` to `https` would leave it on port 80., +, + *  **Okio has been updated to 1.6.0.**, +     ```, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.6.0</version>, +     </dependency>, +     ```, +, + *  New: `Cache.initialize()`. Call this on a background thread to eagerly, +    initialize the response cache., + *  New: Fold `MockWebServerRule` into `MockWebServer`. This makes it easier to, +    write JUnit tests with `MockWebServer`. The `MockWebServer` library now, +    depends on JUnit, though it continues to work with all testing frameworks., + *  Fix: Change `MockWebServer` to use the same logic as OkHttp when determining, +    whether an HTTP request permits a body., + *  Fix: `HttpUrl` now uses the canonical form for IPv6 addresses., + *  Fix: Use `HttpUrl` internally., + *  Fix: Recover from Android 4.2.2 EBADF crashes., + *  Fix: Don't crash with an `IllegalStateException` if an HTTP/2 or SPDY, +    write fails, leaving the connection in an inconsistent state., + *  Fix: Make sure the default user agent is ASCII., +, +, +++ b/CHANGELOG.md, +## Version 2.5.0, +, +_2015-08-25_, +, + *  **OkHttp now rejects request headers that contain invalid characters.** This, +    includes potential security problems (newline characters) as well as simple, +    non-ASCII characters (including international characters and emoji)., +, + *  **Call canceling is more reliable.**  We had a bug where a socket being, +     connected wasn't being closed when the application used `Call.cancel()`., +, + *  **Changing a HttpUrl’s scheme now tracks the default port.** We had a bug, +    where changing a URL from `http` to `https` would leave it on port 80., +, + *  **Okio has been updated to 1.6.0.**, +     ```, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.6.0</version>, +     </dependency>, +     ```, +, + *  New: `Cache.initialize()`. Call this on a background thread to eagerly, +    initialize the response cache., + *  New: Fold `MockWebServerRule` into `MockWebServer`. This makes it easier to, +    write JUnit tests with `MockWebServer`. The `MockWebServer` library now, +    depends on JUnit, though it continues to work with all testing frameworks., + *  Fix: Change `MockWebServer` to use the same logic as OkHttp when determining, +    whether an HTTP request permits a body., + *  Fix: `HttpUrl` now uses the canonical form for IPv6 addresses., + *  Fix: Use `HttpUrl` internally., + *  Fix: Recover from Android 4.2.2 EBADF crashes., + *  Fix: Don't crash with an `IllegalStateException` if an HTTP/2 or SPDY, +    write fails, leaving the connection in an inconsistent state., + *  Fix: Make sure the default user agent is ASCII., +, +, +++ b/pom.xml, +    <okio.version>1.5.0</okio.version>]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.Buffer;, +      result.setChunkedBody(new Buffer().write(body), 1024);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.Buffer;, +      result.setChunkedBody(new Buffer().write(body), 1024);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import okio.Buffer;, +  private Buffer body;, +    setBody(new Buffer());, +  public Buffer getBody() {, +    return body != null ? body.clone() : null; // Defensive copy., +    return bodyStream != null ? bodyStream : getBody().inputStream();, +    return setBody(new Buffer().write(body));, +  }, +, +  public MockResponse setBody(Buffer body) {, +    setHeader("Content-Length", body.size());, +    this.body = body.clone(); // Defensive copy., +    return setBody(new Buffer().writeUtf8(body));, +  public MockResponse setChunkedBody(Buffer body, int maxChunkSize) {, +    Buffer bytesOut = new Buffer();, +    while (!body.exhausted()) {, +      long chunkSize = Math.min(body.size(), maxChunkSize);, +      bytesOut.writeUtf8(Long.toHexString(chunkSize));, +      bytesOut.writeUtf8("\r\n");, +      bytesOut.write(body, chunkSize);, +      bytesOut.writeUtf8("\r\n");, +    bytesOut.writeUtf8("0\r\n\r\n"); // Last chunk + empty trailer + CRLF., +    this.body = bytesOut;, +    return setChunkedBody(new Buffer().writeUtf8(body), maxChunkSize);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.Buffer;, +      result.setChunkedBody(new Buffer().write(body), 1024);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import okio.Buffer;, +  private Buffer body;, +    setBody(new Buffer());, +  public Buffer getBody() {, +    return body != null ? body.clone() : null; // Defensive copy., +    return bodyStream != null ? bodyStream : getBody().inputStream();, +    return setBody(new Buffer().write(body));, +  }, +, +  public MockResponse setBody(Buffer body) {, +    setHeader("Content-Length", body.size());, +    this.body = body.clone(); // Defensive copy., +    return setBody(new Buffer().writeUtf8(body));, +  public MockResponse setChunkedBody(Buffer body, int maxChunkSize) {, +    Buffer bytesOut = new Buffer();, +    while (!body.exhausted()) {, +      long chunkSize = Math.min(body.size(), maxChunkSize);, +      bytesOut.writeUtf8(Long.toHexString(chunkSize));, +      bytesOut.writeUtf8("\r\n");, +      bytesOut.write(body, chunkSize);, +      bytesOut.writeUtf8("\r\n");, +    bytesOut.writeUtf8("0\r\n\r\n"); // Last chunk + empty trailer + CRLF., +    this.body = bytesOut;, +    return setChunkedBody(new Buffer().writeUtf8(body), maxChunkSize);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      Buffer body = response.getBody();, +      if (body == null) body = new Buffer();, +        Buffer pushedBody = pushPromise.getResponse().getBody();, +            stream.getConnection().pushStream(stream.getId(), pushedHeaders, pushedBody.size() > 0);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.Buffer;, +      result.setChunkedBody(new Buffer().write(body), 1024);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import okio.Buffer;, +  private Buffer body;, +    setBody(new Buffer());, +  public Buffer getBody() {, +    return body != null ? body.clone() : null; // Defensive copy., +    return bodyStream != null ? bodyStream : getBody().inputStream();, +    return setBody(new Buffer().write(body));, +  }, +, +  public MockResponse setBody(Buffer body) {, +    setHeader("Content-Length", body.size());, +    this.body = body.clone(); // Defensive copy., +    return setBody(new Buffer().writeUtf8(body));, +  public MockResponse setChunkedBody(Buffer body, int maxChunkSize) {, +    Buffer bytesOut = new Buffer();, +    while (!body.exhausted()) {, +      long chunkSize = Math.min(body.size(), maxChunkSize);, +      bytesOut.writeUtf8(Long.toHexString(chunkSize));, +      bytesOut.writeUtf8("\r\n");, +      bytesOut.write(body, chunkSize);, +      bytesOut.writeUtf8("\r\n");, +    bytesOut.writeUtf8("0\r\n\r\n"); // Last chunk + empty trailer + CRLF., +    this.body = bytesOut;, +    return setChunkedBody(new Buffer().writeUtf8(body), maxChunkSize);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      Buffer body = response.getBody();, +      if (body == null) body = new Buffer();, +        Buffer pushedBody = pushPromise.getResponse().getBody();, +            stream.getConnection().pushStream(stream.getId(), pushedHeaders, pushedBody.size() > 0);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import okio.Buffer;, +      Buffer buffer = new Buffer();]
[+++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    Response response = call.execute();, +, +    Response response = call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    Response response = call.execute();, +, +    Response response = call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +public final class UtilTest {, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    Response response = call.execute();, +, +    Response response = call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +public final class UtilTest {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.platform;, +, +import org.junit.Test;, +, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assume.assumeTrue;, +, +public class Jdk8WithJettyBootPlatformTest {, +  @Test, +  public void testBuildsWithJettyBoot() {, +    assumeTrue(getPlatform().equals("jdk-with-jetty-boot"));, +, +    assertNotNull(Jdk8WithJettyBootPlatform.buildIfSupported());, +  }, +}, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    Response response = call.execute();, +, +    Response response = call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +public final class UtilTest {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.platform;, +, +import org.junit.Test;, +, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assume.assumeTrue;, +, +public class Jdk8WithJettyBootPlatformTest {, +  @Test, +  public void testBuildsWithJettyBoot() {, +    assumeTrue(getPlatform().equals("jdk-with-jetty-boot"));, +, +    assertNotNull(Jdk8WithJettyBootPlatform.buildIfSupported());, +  }, +}, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    Response response = call.execute();, +, +    Response response = call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +public final class UtilTest {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at]
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.WebSocketListener;, +++ b/okhttp-tests/fuzzingserver-config.json, +{, +  "url": "ws://127.0.0.1:9001",, +  "outdir": "./target/fuzzingserver-report",, +  "cases": ["*"],, +  "exclude-cases": [, +    "6.1.1",, +    "6.1.2",, +    "6.1.3",, +    "6.2.1",, +    "6.2.2",, +    "6.2.3",, +    "6.2.4",, +    "6.3.1",, +    "6.3.2",, +    "6.4.1",, +    "6.4.2",, +    "6.4.3",, +    "6.4.4",, +    "6.5.1",, +    "6.5.2",, +    "6.5.3",, +    "6.5.4",, +    "6.5.5",, +    "6.6.1",, +    "6.6.2",, +    "6.6.3",, +    "6.6.4",, +    "6.6.5",, +    "6.6.6",, +    "6.6.7",, +    "6.6.8",, +    "6.6.9",, +    "6.6.10",, +    "6.6.11",, +    "6.7.1",, +    "6.7.2",, +    "6.7.3",, +    "6.7.4",, +    "6.8.1",, +    "6.8.2",, +    "6.9.1",, +    "6.9.2",, +    "6.9.3",, +    "6.9.4",, +    "6.10.1",, +    "6.10.2",, +    "6.10.3",, +    "6.11.1",, +    "6.11.2",, +    "6.11.3",, +    "6.11.4",, +    "6.11.5",, +    "6.12.1",, +    "6.12.2",, +    "6.12.3",, +    "6.12.4",, +    "6.12.5",, +    "6.12.6",, +    "6.12.7",, +    "6.12.8",, +    "6.13.1",, +    "6.13.2",, +    "6.13.3",, +    "6.13.4",, +    "6.13.5",, +    "6.14.1",, +    "6.14.2",, +    "6.14.3",, +    "6.14.4",, +    "6.14.5",, +    "6.14.6",, +    "6.14.7",, +    "6.14.8",, +    "6.14.9",, +    "6.14.10",, +    "6.15.1",, +    "6.16.1",, +    "6.16.2",, +    "6.16.3",, +    "6.17.1",, +    "6.17.2",, +    "6.17.3",, +    "6.17.4",, +    "6.17.5",, +    "6.18.1",]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.log(Level.WARNING, "MockWebServer connection failed", e);, +        // This gnarly block of code will release all sockets and all thread,, +        // even if any close fails., +    if (serverSocket == null) return;, +, +    serverSocket = null;, +          logger.log(Level.WARNING, "MockWebServer connection failed", e);, +          logger.warning("MockWebServer connection didn't make a request");, +          logger.info("Received request: " + request + " and responded: " + response);, +        logger.info("Received request: " + request + " and responded: " + response, +            + " protocol is " + protocol.toString());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.log(Level.WARNING, "MockWebServer connection failed", e);, +        // This gnarly block of code will release all sockets and all thread,, +        // even if any close fails., +    if (serverSocket == null) return;, +, +    serverSocket = null;, +          logger.log(Level.WARNING, "MockWebServer connection failed", e);, +          logger.warning("MockWebServer connection didn't make a request");, +          logger.info("Received request: " + request + " and responded: " + response);, +        logger.info("Received request: " + request + " and responded: " + response, +            + " protocol is " + protocol.toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +, +import static java.lang.Thread.UncaughtExceptionHandler;, +  private MockWebServer server = new MockWebServer();, +  private MockWebServer server2 = new MockWebServer();, +  private UncaughtExceptionHandler defaultUncaughtExceptionHandler;, +, +  private static final SSLContext sslContext = SslContextBuilder.localhost();, +    server = new MockWebServer();, +    server2 = new MockWebServer();, +    defaultUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();, +    server.shutdown();, +    server2.shutdown();, +    Thread.setDefaultUncaughtExceptionHandler(defaultUncaughtExceptionHandler);, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +      certificatePinnerBuilder.add(server.getHostName(), CertificatePinner.pin(certificate));, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +        .add(server.getHostName(), "sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=") // publicobject.com's cert., +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +, +    server.play();, +    server.play();, +    server2.play();, +, +    server.play();, +    cookie.setDomain(server.getCookieDomain());, +        + "c=\"cookie\";$Path=\"/\";$Domain=\"" + server.getCookieDomain(), +    server2.play();, +, +    server.play();, +    server.play();]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.QueueDispatcher;, +  /**, +   * We don't know if the connection will support HTTP/2 until after we've connected. When multiple, +   * connections are requested concurrently OkHttp will pessimistically connect multiple times, then, +   * close any unnecessary connections. This test confirms that behavior works as intended., +   *, +   * <p>This test uses proxy tunnels to get a hook while a connection is being established., +   */, +  @Test public void concurrentHttp2ConnectionsDeduplicated() throws Exception {, +    server.useHttps(sslClient.socketFactory, true);, +, +    // Force a fresh connection pool for the test., +    client.connectionPool().evictAll();, +, +    final QueueDispatcher queueDispatcher = new QueueDispatcher();, +    queueDispatcher.enqueueResponse(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    queueDispatcher.enqueueResponse(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    queueDispatcher.enqueueResponse(new MockResponse(), +        .setBody("call2 response"));, +    queueDispatcher.enqueueResponse(new MockResponse(), +        .setBody("call1 response"));, +, +    // We use a re-entrant dispatcher to initiate one HTTPS connection while the other is in flight., +    server.setDispatcher(new Dispatcher() {, +      int requestCount;, +, +      @Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +        MockResponse result = queueDispatcher.dispatch(request);, +, +        requestCount++;, +        if (requestCount == 1) {, +          // Before handling call1's CONNECT we do all of call2. This part re-entrant!, +          try {, +            Call call2 = client.newCall(new Request.Builder(), +                .url("https://android.com/call2"), +                .build());, +            Response response2 = call2.execute();, +            assertEquals("call2 response", response2.body().string());, +          } catch (IOException e) {, +            throw new RuntimeException(e);, +          }, +        }, +, +        return result;, +      }, +, +      @Override public MockResponse peek() {, +        return queueDispatcher.peek();, +      }, +, +      @Override public void shutdown() {, +        queueDispatcher.shutdown();, +      }, +    });, +, +    client = client.newBuilder(), +        .proxy(server.toProxyAddress()), +        .build();, +, +    Call call1 = client.newCall(new Request.Builder(), +        .url("https://android.com/call1"), +        .build());, +    Response response2 = call1.execute();, +    assertEquals("call1 response", response2.body().string());, +, +    RecordedRequest call1Connect = server.takeRequest();, +    assertEquals("CONNECT", call1Connect.getMethod());, +    assertEquals(0, call1Connect.getSequenceNumber());, +, +    RecordedRequest call2Connect = server.takeRequest();, +    assertEquals("CONNECT", call2Connect.getMethod());, +    assertEquals(0, call2Connect.getSequenceNumber());, +, +    RecordedRequest call2Get = server.takeRequest();, +    assertEquals("GET", call2Get.getMethod());, +    assertEquals("/call2", call2Get.getPath());, +    assertEquals(0, call2Get.getSequenceNumber());, +, +    RecordedRequest call1Get = server.takeRequest();, +    assertEquals("GET", call1Get.getMethod());, +    assertEquals("/call1", call1Get.getPath());, +    assertEquals(1, call1Get.getSequenceNumber());, +, +    assertEquals(1, client.connectionPool().connectionCount());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.QueueDispatcher;, +  /**, +   * We don't know if the connection will support HTTP/2 until after we've connected. When multiple, +   * connections are requested concurrently OkHttp will pessimistically connect multiple times, then, +   * close any unnecessary connections. This test confirms that behavior works as intended., +   *]
[+++ b/checkstyle.xml, +    <!-- Space after 'for' and 'if' -->, +    <module name="RegexpSingleline">, +        <property name="format" value="^\s*(for|if)\b[^ ]"/>, +        <property name="message" value="Space needed before opening parenthesis."/>, +    </module>, +, +    <!-- For each spacing -->, +    <module name="RegexpSingleline">, +        <property name="format" value="^\s*for \(.*?([^ ]:|:[^ ])"/>, +        <property name="message" value="Space needed around ':' character."/>, +    </module>, +, +            <property name="max" value="100"/>, +        <!--<module name="EmptyForIteratorPad"/>-->, +        <!--<module name="NoWhitespaceAfter"/>-->, +        <!--<module name="NoWhitespaceBefore"/>-->, +        <module name="ModifierOrder"/>, +        <!--module name="VisibilityModifier"/-->, +++ b/checkstyle.xml, +    <!-- Space after 'for' and 'if' -->, +    <module name="RegexpSingleline">, +        <property name="format" value="^\s*(for|if)\b[^ ]"/>, +        <property name="message" value="Space needed before opening parenthesis."/>, +    </module>, +, +    <!-- For each spacing -->, +    <module name="RegexpSingleline">, +        <property name="format" value="^\s*for \(.*?([^ ]:|:[^ ])"/>, +        <property name="message" value="Space needed around ':' character."/>, +    </module>, +, +            <property name="max" value="100"/>, +        <!--<module name="EmptyForIteratorPad"/>-->, +        <!--<module name="NoWhitespaceAfter"/>-->, +        <!--<module name="NoWhitespaceBefore"/>-->, +        <module name="ModifierOrder"/>, +        <!--module name="VisibilityModifier"/-->, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +  private static final byte[] NPN_PROTOCOLS = new byte[] {, +      6, 's', 'p', 'd', 'y', '/', '3',, +      8, 'h', 't', 't', 'p', '/', '1', '.', '1', +  };, +  private static final byte[] SPDY3 = new byte[] {, +      's', 'p', 'd', 'y', '/', '3', +  };, +  private static final byte[] HTTP_11 = new byte[] {, +      'h', 't', 't', 'p', '/', '1', '.', '1', +  };, +++ b/checkstyle.xml, +    <!-- Space after 'for' and 'if' -->, +    <module name="RegexpSingleline">, +        <property name="format" value="^\s*(for|if)\b[^ ]"/>, +        <property name="message" value="Space needed before opening parenthesis."/>, +    </module>, +, +    <!-- For each spacing -->, +    <module name="RegexpSingleline">, +        <property name="format" value="^\s*for \(.*?([^ ]:|:[^ ])"/>, +        <property name="message" value="Space needed around ':' character."/>, +    </module>, +, +            <property name="max" value="100"/>, +        <!--<module name="EmptyForIteratorPad"/>-->, +        <!--<module name="NoWhitespaceAfter"/>-->, +        <!--<module name="NoWhitespaceBefore"/>-->, +        <module name="ModifierOrder"/>, +        <!--module name="VisibilityModifier"/-->, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +  private static final byte[] NPN_PROTOCOLS = new byte[] {, +      6, 's', 'p', 'd', 'y', '/', '3',, +      8, 'h', 't', 't', 'p', '/', '1', '.', '1', +  };, +  private static final byte[] SPDY3 = new byte[] {, +      's', 'p', 'd', 'y', '/', '3', +  };, +  private static final byte[] HTTP_11 = new byte[] {, +      'h', 't', 't', 'p', '/', '1', '.', '1', +  };, +++ b/src/main/java/com/squareup/okhttp/internal/Base64.java, +  private static final byte[] MAP = new byte[] {, +      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',, +      'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',, +      'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4',, +      '5', '6', '7', '8', '9', '+', '/', +  };, +++ b/checkstyle.xml, +    <!-- Space after 'for' and 'if' -->, +    <module name="RegexpSingleline">, +        <property name="format" value="^\s*(for|if)\b[^ ]"/>, +        <property name="message" value="Space needed before opening parenthesis."/>, +    </module>, +, +    <!-- For each spacing -->, +    <module name="RegexpSingleline">, +        <property name="format" value="^\s*for \(.*?([^ ]:|:[^ ])"/>, +        <property name="message" value="Space needed around ':' character."/>, +    </module>, +, +            <property name="max" value="100"/>]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.RouteDatabase;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.RouteDatabase;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.RouteDatabase;, +, +      @Override public RouteDatabase routeDatabase(OkHttpClient client) {, +        return client.routeDatabase;, +      }, +  RouteDatabase getRoutesDatabase() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.RouteDatabase;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.RouteDatabase;, +, +      @Override public RouteDatabase routeDatabase(OkHttpClient client) {, +        return client.routeDatabase;, +      }, +  RouteDatabase getRoutesDatabase() {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.RouteDatabase;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.RouteDatabase;, +, +      @Override public RouteDatabase routeDatabase(OkHttpClient client) {, +        return client.routeDatabase;, +      }, +  RouteDatabase getRoutesDatabase() {, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Internal.java, +, +  public abstract RouteDatabase routeDatabase(OkHttpClient client);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.RouteDatabase;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.RouteDatabase;, +, +      @Override public RouteDatabase routeDatabase(OkHttpClient client) {, +        return client.routeDatabase;, +      }, +  RouteDatabase getRoutesDatabase() {, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Internal.java, +, +  public abstract RouteDatabase routeDatabase(OkHttpClient client);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/RouteDatabase.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal;, +, +import com.squareup.okhttp.Route;, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +/**, + * A blacklist of failed routes to avoid when creating a new connection to a, + * target address. This is used so that OkHttp can learn from its mistakes: if, + * there was a failure attempting to connect to a specific IP address, proxy, + * server or TLS mode, that failure is remembered and alternate routes are, + * preferred., + */, +public final class RouteDatabase {, +  private final Set<Route> failedRoutes = new LinkedHashSet<Route>();, +, +  /** Records a failure connecting to {@code failedRoute}. */, +  public synchronized void failed(Route failedRoute) {, +    failedRoutes.add(failedRoute);, +  }, +, +  /** Records success connecting to {@code failedRoute}. */, +  public synchronized void connected(Route route) {, +    failedRoutes.remove(route);, +  }, +, +  /** Returns true if {@code route} has failed recently and should be avoided. */, +  public synchronized boolean shouldPostpone(Route route) {, +    return failedRoutes.contains(route);, +  }, +, +  public synchronized int failedRoutesCount() {, +    return failedRoutes.size();, +  }, +}, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.RouteDatabase;]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +    logger.setLevel(Level.FINE);, +    logger.addHandler(handler);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +    logger.setLevel(Level.FINE);, +    logger.addHandler(handler);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +      super("OkHttp %s", redactedUrl().toString());, +    return string + " to " + redactedUrl();, +  }, +, +  HttpUrl redactedUrl() {, +    return originalRequest.url().resolve("/...");]
[+++ b/okhttp-sse/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-sse/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    call.timeout().clearTimeout();, +++ b/okhttp-sse/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    call.timeout().clearTimeout();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import java.util.concurrent.TimeUnit;, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +    client = client.newBuilder(), +        .callTimeout(100, TimeUnit.MILLISECONDS), +        .build();, +, +    server.enqueue(new MockResponse(), +        .setBodyDelay(500, TimeUnit.MILLISECONDS), +        .setHeader("content-type", "text/event-stream"), +        .setBody("data: hey\n\n"));, +, +    EventSource source = newEventSource();, +, +    assertEquals("/", source.request().url().encodedPath());, +, +    listener.assertOpen();, +    listener.assertEvent(null, null, "hey");, +    listener.assertClose();, +  }, +, +    EventSource.Factory factory = EventSources.createFactory(client);, +++ b/okhttp-sse/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    call.timeout().clearTimeout();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import java.util.concurrent.TimeUnit;, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +    client = client.newBuilder(), +        .callTimeout(100, TimeUnit.MILLISECONDS), +        .build();, +, +    server.enqueue(new MockResponse(), +        .setBodyDelay(500, TimeUnit.MILLISECONDS), +        .setHeader("content-type", "text/event-stream"), +        .setBody("data: hey\n\n"));, +, +    EventSource source = newEventSource();, +, +    assertEquals("/", source.request().url().encodedPath());, +, +    listener.assertOpen();, +    listener.assertEvent(null, null, "hey");, +    listener.assertClose();, +  }, +, +    EventSource.Factory factory = EventSources.createFactory(client);, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.UnknownHostException;, +import java.util.ArrayList;]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.2.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.2.0', +  <version>3.2.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0', +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.2.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.2.0', +  <version>3.2.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0', +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.2.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.2.0', +  <version>3.2.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0', +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.2.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.2.0', +  <version>3.2.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0', +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +      server.useHttps(sslContext.getSocketFactory(), false);, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.2.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.2.0', +  <version>3.2.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0', +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +      server.useHttps(sslContext.getSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +          SSLContext sslContext = SslContextBuilder.localhost();, +          SSLEngine engine = sslContext.createSSLEngine();, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.2.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.2.0', +  <version>3.2.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0', +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +      server.useHttps(sslContext.getSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +          SSLContext sslContext = SslContextBuilder.localhost();, +          SSLEngine engine = sslContext.createSSLEngine();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +      SSLSocketFactory socketFactory = sslContext.getSocketFactory();, +          .sslSocketFactory(socketFactory), +++ b/CHANGELOG.md, +++ b/README.md]
[+++ b/.gitignore, +*.class, +, +# Package Files #, +*.jar, +*.war, +*.ear, +++ b/.gitignore, +*.class, +, +# Package Files #, +*.jar, +*.war, +*.ear, +++ /dev/null, +++ b/.gitignore, +*.class, +, +# Package Files #, +*.jar, +*.war, +*.ear, +++ /dev/null, +++ b/README.md, +okhttp, +======, +, +An HTTP+SPDY client for Android and Java applications, +++ b/.gitignore, +*.class, +, +# Package Files #, +*.jar, +*.war, +*.ear, +++ /dev/null, +++ b/README.md, +okhttp, +======, +, +An HTTP+SPDY client for Android and Java applications, +++ /dev/null, +++ b/.gitignore, +*.class, +, +# Package Files #, +*.jar, +*.war, +*.ear, +++ /dev/null, +++ b/README.md, +okhttp, +======, +, +An HTTP+SPDY client for Android and Java applications, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +*.class, +, +# Package Files #, +*.jar, +*.war, +*.ear, +++ /dev/null, +++ b/README.md, +okhttp, +======, +, +An HTTP+SPDY client for Android and Java applications, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +*.class, +, +# Package Files #, +*.jar, +*.war, +*.ear, +++ /dev/null, +++ b/README.md, +okhttp, +======, +, +An HTTP+SPDY client for Android and Java applications, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +*.class, +, +# Package Files #, +*.jar, +*.war, +*.ear, +++ /dev/null, +++ b/README.md, +okhttp]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertNull(client.getResponseCache());, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertNull(client.getResponseCache());, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertNull(client.getResponseCache());, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertNull(client.getResponseCache());, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertNull(client.getResponseCache());, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import com.squareup.okhttp.internal.huc.CacheAdapter;, +    client.client().setAuthenticator(, +        new RecordingOkAuthenticator(Credentials.basic("jesse", "secret")));, +    Internal.instance.setCache(client.client(), new CacheAdapter(new AbstractResponseCache() {, +    }));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertNull(client.getResponseCache());, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import com.squareup.okhttp.internal.huc.CacheAdapter;, +    client.client().setAuthenticator(, +        new RecordingOkAuthenticator(Credentials.basic("jesse", "secret")));, +    Internal.instance.setCache(client.client(), new CacheAdapter(new AbstractResponseCache() {, +    }));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLEncodingTest.java, +import com.squareup.okhttp.internal.huc.CacheAdapter;, +    Internal.instance.setCache(client, new CacheAdapter(new AbstractResponseCache() {, +    }));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertNull(client.getResponseCache());, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import com.squareup.okhttp.internal.huc.CacheAdapter;, +    client.client().setAuthenticator(, +        new RecordingOkAuthenticator(Credentials.basic("jesse", "secret")));, +    Internal.instance.setCache(client.client(), new CacheAdapter(new AbstractResponseCache() {, +    }));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLEncodingTest.java, +import com.squareup.okhttp.internal.huc.CacheAdapter;, +    Internal.instance.setCache(client, new CacheAdapter(new AbstractResponseCache() {, +    }));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/CacheAdapterTest.java, +    Internal.instance.setCache(client, new CacheAdapter(responseCache));, +    Internal.instance.setCache(client, new CacheAdapter(responseCache));, +    Internal.instance.setCache(client, new CacheAdapter(responseCache));, +    Internal.instance.setCache(client, new CacheAdapter(responseCache));, +    Internal.instance.setCache(client, new CacheAdapter(responseCache));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertNull(client.getResponseCache());, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +    client.setResponseCache(new AbstractResponseCache() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.http.AuthenticatorAdapter;]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft07Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.spdy;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.List;, +import okio.Buffer;, +import okio.ByteString;, +import org.junit.Before;, +import org.junit.Test;, +, +import static com.squareup.okhttp.internal.Util.headerEntries;, +import static okio.ByteString.decodeHex;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public class HpackDraft07Test {, +, +  private final Buffer bytesIn = new Buffer();, +  private HpackDraft07.Reader hpackReader;, +  private Buffer bytesOut = new Buffer();, +  private HpackDraft07.Writer hpackWriter;, +, +  @Before public void reset() {, +    hpackReader = newReader(bytesIn);, +    hpackWriter = new HpackDraft07.Writer(bytesOut);, +  }, +, +  /**, +   * Variable-length quantity special cases strings which are longer than 127, +   * bytes.  Values such as cookies can be 4KiB, and should be possible to send., +   *, +   * <p> http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-07#section-4.1.1, +   */, +  @Test public void largeHeaderValue() throws IOException {, +    char[] value = new char[4096];, +    Arrays.fill(value, '!');, +    List<Header> headerBlock = headerEntries("cookie", new String(value));, +, +    hpackWriter.writeHeaders(headerBlock);, +    bytesIn.writeAll(bytesOut);, +    hpackReader.readHeaders();, +    hpackReader.emitReferenceSet();, +, +    assertEquals(0, hpackReader.headerCount);, +, +    assertEquals(headerBlock, hpackReader.getAndReset());, +  }, +, +  /**, +   * HPACK has a max header table size, which can be smaller than the max header message., +   * Ensure the larger header content is not lost., +   */, +  @Test public void tooLargeToHPackIsStillEmitted() throws IOException {, +    bytesIn.writeByte(0x00); // Literal indexed, +    bytesIn.writeByte(0x0a); // Literal name (len = 10), +    bytesIn.writeUtf8("custom-key");, +, +    bytesIn.writeByte(0x0d); // Literal value (len = 13), +    bytesIn.writeUtf8("custom-header");, +, +    hpackReader.maxHeaderTableByteCountSetting(1);, +    hpackReader.readHeaders();, +    hpackReader.emitReferenceSet();, +, +    assertEquals(0, hpackReader.headerCount);, +, +    assertEquals(headerEntries("custom-key", "custom-header"), hpackReader.getAndReset());, +  }, +, +  /** Oldest entries are evicted to support newer ones. */, +  @Test public void testEviction() throws IOException {, +    bytesIn.writeByte(0x40); // Literal indexed, +    bytesIn.writeByte(0x0a); // Literal name (len = 10), +    bytesIn.writeUtf8("custom-foo");, +, +    bytesIn.writeByte(0x0d); // Literal value (len = 13), +    bytesIn.writeUtf8("custom-header");, +, +    bytesIn.writeByte(0x40); // Literal indexed, +    bytesIn.writeByte(0x0a); // Literal name (len = 10)]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +  @Test public void cache() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +  @Test public void cache() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingReceiver.java, +      for (RecordedResponse recordedResponse : responses) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +  @Test public void cache() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingReceiver.java, +      for (RecordedResponse recordedResponse : responses) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SyncApiTest.java, +  @Test public void cache() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +  @Test public void cache() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingReceiver.java, +      for (RecordedResponse recordedResponse : responses) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SyncApiTest.java, +  @Test public void cache() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +            // Cache body includes original content-length and content-type data., +            .body(engine.responseSource().usesCache(), +                ? engine.getResponse().body(), +                : new RealResponseBody(response, engine.getResponseBody())), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +  @Test public void cache() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingReceiver.java, +      for (RecordedResponse recordedResponse : responses) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SyncApiTest.java, +  @Test public void cache() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +            // Cache body includes original content-length and content-type data., +            .body(engine.responseSource().usesCache(), +                ? engine.getResponse().body(), +                : new RealResponseBody(response, engine.getResponseBody())), +++ b/samples/crawler/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp.sample</groupId>, +    <artifactId>sample-parent</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>crawler</artifactId>, +  <name>Sample: Crawler</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>org.jsoup</groupId>, +      <artifactId>jsoup</artifactId>, +      <version>1.7.3</version>, +    </dependency>, +  </dependencies>, +</project>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +  @Test public void cache() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingReceiver.java, +      for (RecordedResponse recordedResponse : responses) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SyncApiTest.java, +  @Test public void cache() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +            // Cache body includes original content-length and content-type data., +            .body(engine.responseSource().usesCache(), +                ? engine.getResponse().body(), +                : new RealResponseBody(response, engine.getResponseBody())), +++ b/samples/crawler/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp.sample</groupId>, +    <artifactId>sample-parent</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>crawler</artifactId>, +  <name>Sample: Crawler</name>, +, +  <dependencies>, +    <dependency>]
[+++ b/build.gradle, +    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.7.1', +  apply plugin: 'net.ltgt.errorprone', +  dependencies {, +    errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1', +    errorprone 'com.google.errorprone:error_prone_core:2.3.3', +  }, +++ b/build.gradle, +    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.7.1', +  apply plugin: 'net.ltgt.errorprone', +  dependencies {, +    errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1', +    errorprone 'com.google.errorprone:error_prone_core:2.3.3', +  }, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +    String[] result = new String[array.length + 1];, +    System.arraycopy(array, 0, result, 0, array.length);]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      InetAddress inetAddress = socket.getLocalAddress();, +      int localPort = socket.getLocalPort();, +      this.requestUrl =, +          HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, localPort, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      InetAddress inetAddress = socket.getLocalAddress();, +      int localPort = socket.getLocalPort();, +      this.requestUrl =, +          HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, localPort, path));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +import java.net.Inet4Address;, +import java.net.InetSocketAddress;, +import java.util.Random;, +    private final InetAddress localAddress;, +    private final int remotePort;, +    private final InetAddress remoteAddress;, +    private final int localPort;, +    private FakeSocket(int localPort) {, +      this(Inet4Address.getLoopbackAddress(), localPort);, +    }, +, +    private FakeSocket(InetAddress inetAddress, int localPort) {, +      this(inetAddress, localPort, inetAddress, 1234);, +    }, +, +    private FakeSocket(InetAddress localAddress, int localPort, InetAddress remoteAddress, int remotePort) {, +      this.localAddress = localAddress;, +      this.localPort = localPort;, +      this.remoteAddress = remoteAddress;, +      this.remotePort = remotePort;, +      return remoteAddress;, +    }, +, +    @Override public InetAddress getLocalAddress() {, +      return localAddress;, +      return localPort;, +    }, +, +    @Override public int getPort() {, +      return remotePort;, +, +  @Test public void testUsesLocal() throws UnknownHostException {, +    Socket socket =, +        new FakeSocket(InetAddress.getByAddress("127.0.0.1", new byte[] { 127, 0, 0, 1 }), 80);, +, +    RecordedRequest request =, +        new RecordedRequest("GET / HTTP/1.1", headers, Collections.<Integer>emptyList(), 0,, +            new Buffer(), 0, socket);, +, +    assertEquals("http://127.0.0.1/", request.getRequestUrl().toString());, +  }]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new FakeDns()), +        .build());, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NO_CONTENT), +    try {, +      connection.getInputStream();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("HTTP 204 had non-zero Content-Length: 25", expected.getMessage());, +    }, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new FakeDns()), +        .build());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new FakeDns()), +        .build());, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NO_CONTENT), +    try {, +      connection.getInputStream();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("HTTP 204 had non-zero Content-Length: 25", expected.getMessage());, +    }, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new FakeDns()), +        .build());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/PipeTest.java, +    pipe.sink.timeout().timeout(1000, TimeUnit.MILLISECONDS);, +    assertElapsed(1000.0, start);, +    pipe.source.timeout().timeout(1000, TimeUnit.MILLISECONDS);, +    assertElapsed(1000.0, start);, +   * sleeping 1000 ms, then reading 3 bytes. That should make for an approximate timeline like, +   * this:, +   *    0: writer writes 'abc', blocks 0: reader sleeps until 1000, +   * 1000: reader reads 'abc', sleeps until 2000, +   * 1000: writer writes 'def', blocks, +   * 2000: reader reads 'def', sleeps until 3000, +   * 2000: writer writes 'ghi', blocks, +   * 3000: reader reads 'ghi', sleeps until 4000, +   * 3000: writer writes 'jkl', returns, +   * 24000: reader reads 'jkl', returns, +          Thread.sleep(1000L);, +          Thread.sleep(1000L);, +          Thread.sleep(1000L);, +          Thread.sleep(1000L);, +    assertElapsed(3000.0, start);, +    }, 1000, TimeUnit.MILLISECONDS);, +      assertElapsed(1000.0, start);, +          Thread.sleep(1000);, +          Thread.sleep(1000);, +    assertElapsed(2000.0, start);, +          Thread.sleep(1000);, +          Thread.sleep(1000);, +      assertElapsed(2000.0, start);, +          Thread.sleep(1000);, +          Thread.sleep(1000);, +      assertElapsed(2000.0, start);, +    }, 1000, TimeUnit.MILLISECONDS);, +    assertElapsed(1000.0, start);, +   * The writer has 12 bytes to write. It alternates sleeping 1000 ms, then writing 3 bytes. The, +   *    0: writer sleeps until 1000, +   *    0: reader blocks, +   * 1000: writer writes 'abc', sleeps until 2000, +   * 1000: reader reads 'abc', +   * 2000: writer writes 'def', sleeps until 3000, +   * 2000: reader reads 'def', +   * 3000: writer writes 'ghi', sleeps until 4000, +   * 3000: reader reads 'ghi', +   * 4000: writer writes 'jkl', returns, +   * 4000: reader reads 'jkl', returns, +          Thread.sleep(1000L);, +          Thread.sleep(1000L);, +          Thread.sleep(1000L);, +          Thread.sleep(1000L);, +    assertElapsed(1000.0, start);, +    assertElapsed(2000.0, start);, +    assertElapsed(3000.0, start);, +    assertElapsed(4000.0, start);, +   * -50..+450 milliseconds., +    assertEquals(duration, now() - start - 200d, 250.0);]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/LICENSE.txt, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffers;, +      InputStream bodyIn = OkBuffers.buffer(stream.getSource()).inputStream();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffers;, +      InputStream bodyIn = OkBuffers.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +public class Main extends HelpOption implements Runnable {, +    try {, +      Response response = client.execute(request);, +      if (showHeaders) {, +        System.out.println(response.statusLine());, +        Headers headers = response.headers();, +        for (int i = 0, count = headers.size(); i < count; i++) {, +          System.out.println(headers.name(i) + ": " + headers.value(i));, +        }, +        System.out.println();, +      }, +      Response.Body body = response.body();, +      byte[] buffer = new byte[1024];, +      while (body.ready()) {, +        int c = body.byteStream().read(buffer);, +        if (c == -1) {, +          return;, +        }, +        System.out.write(buffer, 0, c);, +      }, +      body.close();, +    } catch (IOException e) {, +      e.printStackTrace();, +    } finally {, +      close();, +    }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffers;, +      InputStream bodyIn = OkBuffers.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +public class Main extends HelpOption implements Runnable {, +    try {, +      Response response = client.execute(request);, +      if (showHeaders) {, +        System.out.println(response.statusLine());, +        Headers headers = response.headers();, +        for (int i = 0, count = headers.size(); i < count; i++) {, +          System.out.println(headers.name(i) + ": " + headers.value(i));, +        }, +        System.out.println();, +      }, +      Response.Body body = response.body();, +      byte[] buffer = new byte[1024];, +      while (body.ready()) {, +        int c = body.byteStream().read(buffer);, +        if (c == -1) {, +          return;, +        }, +        System.out.write(buffer, 0, c);, +      }, +      body.close();, +    } catch (IOException e) {, +      e.printStackTrace();, +    } finally {, +      close();, +    }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  private static final char[] DIGITS =, +      { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };, +, +      return bytesToHexString(md5bytes);, +  private static String bytesToHexString(byte[] bytes) {, +    char[] digits = DIGITS;, +    char[] buf = new char[bytes.length * 2];, +    int c = 0;, +    for (byte b : bytes) {, +      buf[c++] = digits[(b >> 4) & 0xf];, +      buf[c++] = digits[b & 0xf];, +    }, +    return new String(buf);, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffers;, +      InputStream bodyIn = OkBuffers.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +public class Main extends HelpOption implements Runnable {, +    try {, +      Response response = client.execute(request);, +      if (showHeaders) {, +        System.out.println(response.statusLine());, +        Headers headers = response.headers();, +        for (int i = 0, count = headers.size(); i < count; i++) {, +          System.out.println(headers.name(i) + ": " + headers.value(i));, +        }, +        System.out.println();, +      }, +      Response.Body body = response.body();, +      byte[] buffer = new byte[1024];, +      while (body.ready()) {, +        int c = body.byteStream().read(buffer);, +        if (c == -1) {, +          return;]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import java.io.IOException;, +import okio.Buffer;, +import okio.BufferedSink;, +import org.junit.Test;, +, +import static com.squareup.okhttp.internal.Util.UTF_8;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public final class MultipartTest {, +  @Test public void onePartRequired() throws Exception {, +    try {, +      new Multipart.Builder().build();, +      fail();, +    } catch (IllegalStateException e) {, +      assertEquals("Multipart body must have at least one part.", e.getMessage());, +    }, +  }, +, +  @Test public void singlePart() throws Exception {, +    String expected = "", +        + "--123\r\n", +        + "Content-Length: 13\r\n", +        + "\r\n", +        + "Hello, World!\r\n", +        + "--123--\r\n";, +, +    Multipart multipart = new Multipart.Builder("123"), +        .addPart(RequestBody.create(null, "Hello, World!")), +        .build();, +, +    assertEquals("123", multipart.boundary());, +    assertEquals(Multipart.MIXED, multipart.type());, +    assertEquals("multipart/mixed; boundary=123", multipart.contentType().toString());, +    assertEquals(1, multipart.parts().size());, +    assertEquals(53, multipart.contentLength());, +, +    Buffer buffer = new Buffer();, +    multipart.writeTo(buffer);, +    assertEquals(buffer.size(), multipart.contentLength());, +    assertEquals(expected, buffer.readUtf8());, +  }, +, +  @Test public void threeParts() throws Exception {, +    String expected = "", +        + "--123\r\n", +        + "Content-Length: 5\r\n", +        + "\r\n", +        + "Quick\r\n", +        + "--123\r\n", +        + "Content-Length: 5\r\n", +        + "\r\n", +        + "Brown\r\n", +        + "--123\r\n", +        + "Content-Length: 3\r\n", +        + "\r\n", +        + "Fox\r\n", +        + "--123--\r\n";, +, +    Multipart multipart = new Multipart.Builder("123"), +        .addPart(RequestBody.create(null, "Quick")), +        .addPart(RequestBody.create(null, "Brown")), +        .addPart(RequestBody.create(null, "Fox")), +        .build();, +, +    assertEquals("123", multipart.boundary());, +    assertEquals(Multipart.MIXED, multipart.type());, +    assertEquals("multipart/mixed; boundary=123", multipart.contentType().toString());, +    assertEquals(3, multipart.parts().size());, +    assertEquals(112, multipart.contentLength());, +, +    Buffer buffer = new Buffer();, +    multipart.writeTo(buffer);, +    assertEquals(buffer.size(), multipart.contentLength());, +    assertEquals(expected, buffer.readUtf8());, +  }, +, +  @Test public void fieldAndTwoFiles() throws Exception {, +    String expected = "", +        + "--AaB03x\r\n"]
[+++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import java.util.List;, +  private final RecordingEventListener listener = new RecordingEventListener();, +  private OkHttpClient client = defaultClient(), +      .newBuilder(), +      .eventListener(listener), +      .build();, +, +  @Test public void requestBodyEndsAfterResponseBody() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    MockDuplexResponseBody mockDuplexResponseBody = enqueueResponseWithBody(, +        new MockResponse(), +            .clearHeaders(),, +        new MockDuplexResponseBody(), +            .exhaustResponse(), +            .receiveRequest("request A\n"), +            .exhaustRequest());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .post(new AsyncRequestBody()), +        .build());, +, +    try (Response response = call.execute()) {, +      BufferedSource responseBody = response.body().source();, +      assertTrue(responseBody.exhausted());, +, +      BufferedSink requestBody = ((AsyncRequestBody) call.request().body()).takeSink();, +      requestBody.writeUtf8("request A\n");, +      requestBody.close();, +    }, +, +    mockDuplexResponseBody.awaitSuccess();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, +        "SecureConnectStart", "SecureConnectEnd", "ConnectEnd", "ConnectionAcquired",, +        "RequestHeadersStart", "RequestHeadersEnd", "RequestBodyStart", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "RequestBodyEnd",, +        "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import java.util.List;, +  private final RecordingEventListener listener = new RecordingEventListener();, +  private OkHttpClient client = defaultClient(), +      .newBuilder(), +      .eventListener(listener), +      .build();, +, +  @Test public void requestBodyEndsAfterResponseBody() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    MockDuplexResponseBody mockDuplexResponseBody = enqueueResponseWithBody(, +        new MockResponse(), +            .clearHeaders(),, +        new MockDuplexResponseBody(), +            .exhaustResponse(), +            .receiveRequest("request A\n"), +            .exhaustRequest());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .post(new AsyncRequestBody()), +        .build());, +, +    try (Response response = call.execute()) {, +      BufferedSource responseBody = response.body().source();, +      assertTrue(responseBody.exhausted());, +, +      BufferedSink requestBody = ((AsyncRequestBody) call.request().body()).takeSink();, +      requestBody.writeUtf8("request A\n");, +      requestBody.close();, +    }, +, +    mockDuplexResponseBody.awaitSuccess();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, +        "SecureConnectStart", "SecureConnectEnd", "ConnectEnd", "ConnectionAcquired",, +        "RequestHeadersStart", "RequestHeadersEnd", "RequestBodyStart", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "RequestBodyEnd",, +        "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        return 1024 * 1024 * 256;, +          sink.write(new byte[1024 * 256]);, +  @Test public void requestBodyMultipleFailuresReportedOnlyOnce() {, +    RequestBody requestBody = new RequestBody() {, +      @Override public MediaType contentType() {, +        return MediaType.get("text/plain");, +      }, +, +      @Override public long contentLength() {, +        return 1024 * 1024 * 256;, +      }, +, +      @Override public void writeTo(BufferedSink sink) throws IOException {, +        int failureCount = 0;, +        for (int i = 0; i < 1024; i++) {]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.Failure;, +public class Main extends HelpOption implements Runnable, Response.Receiver {, +    client.enqueue(request, this);, +    // Immediately begin triggering an executor shutdown so that after execution of the above, +    // request the threads do not stick around until timeout., +    client.getDispatcher().getExecutorService().shutdown();, +  @Override public void onFailure(Failure failure) {, +    failure.exception().printStackTrace();, +    close();, +  }, +, +  @Override public boolean onResponse(Response response) throws IOException {, +    if (showHeaders) {, +      System.out.println(response.statusLine());, +      Headers headers = response.headers();, +      for (int i = 0, count = headers.size(); i < count; i++) {, +        System.out.println(headers.name(i) + ": " + headers.value(i));, +      }, +      System.out.println();, +    }, +, +    Response.Body body = response.body();, +    byte[] buffer = new byte[1024];, +    while (body.ready()) {, +      int c = body.byteStream().read(buffer);, +      if (c == -1) {, +        close();, +        return true;, +      }, +, +      System.out.write(buffer, 0, c);, +    }, +    close();, +    return false;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.Failure;, +public class Main extends HelpOption implements Runnable, Response.Receiver {, +    client.enqueue(request, this);, +    // Immediately begin triggering an executor shutdown so that after execution of the above, +    // request the threads do not stick around until timeout., +    client.getDispatcher().getExecutorService().shutdown();, +  @Override public void onFailure(Failure failure) {, +    failure.exception().printStackTrace();, +    close();, +  }, +, +  @Override public boolean onResponse(Response response) throws IOException {, +    if (showHeaders) {, +      System.out.println(response.statusLine());, +      Headers headers = response.headers();, +      for (int i = 0, count = headers.size(); i < count; i++) {, +        System.out.println(headers.name(i) + ": " + headers.value(i));, +      }, +      System.out.println();, +    }, +, +    Response.Body body = response.body();, +    byte[] buffer = new byte[1024];, +    while (body.ready()) {, +      int c = body.byteStream().read(buffer);, +      if (c == -1) {, +        close();, +        return true;, +      }, +, +      System.out.write(buffer, 0, c);, +    }, +    close();, +    return false;, +  }, +, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, +      return ByteString.of(md5bytes).hex();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.Failure;, +public class Main extends HelpOption implements Runnable, Response.Receiver {, +    client.enqueue(request, this);, +    // Immediately begin triggering an executor shutdown so that after execution of the above, +    // request the threads do not stick around until timeout., +    client.getDispatcher().getExecutorService().shutdown();, +  @Override public void onFailure(Failure failure) {, +    failure.exception().printStackTrace();, +    close();, +  }]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml]
[+++ b/pom.xml]
[+++ b/.buildscript/deploy_snapshot.sh, +  ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/deploy_snapshot.sh, +  ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.travis.yml, +  - openjdk8, +  - openjdk11, +before_install:, +  - mvn -N io.takari:maven:wrapper -Dmaven=3.6.0, +  - echo "MAVEN_OPTS='-Dmaven.repo.local=$HOME/.m2/repository -Xmx1g -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss:SSS'" > ~/.mavenrc, +install:, +  - ./mvnw dependency:resolve -B, +, +script:, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/.buildscript/deploy_snapshot.sh, +  ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.travis.yml, +  - openjdk8, +  - openjdk11, +before_install:, +  - mvn -N io.takari:maven:wrapper -Dmaven=3.6.0, +  - echo "MAVEN_OPTS='-Dmaven.repo.local=$HOME/.m2/repository -Xmx1g -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss:SSS'" > ~/.mavenrc, +install:, +  - ./mvnw dependency:resolve -B, +, +script:, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +import static java.util.Arrays.asList;, +import static okhttp3.Protocol.HTTP_1_1;, +import static okhttp3.Protocol.HTTP_2;, +            + "tlsVersion=TLS_1_[23] ", +            + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +    server.setProtocols(asList(HTTP_2, HTTP_1_1));, +            "connectFailed: null javax\\.net\\.ssl\\.SSLProtocolException: (?:Unexpected handshake message: client_hello|Handshake message sequence violation, 1)"), +            "callFailed: javax\\.net\\.ssl\\.SSLProtocolException: (?:Unexpected handshake message: client_hello|Handshake message sequence violation, 1)"), +++ b/.buildscript/deploy_snapshot.sh, +  ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.travis.yml, +  - openjdk8, +  - openjdk11, +before_install:, +  - mvn -N io.takari:maven:wrapper -Dmaven=3.6.0, +  - echo "MAVEN_OPTS='-Dmaven.repo.local=$HOME/.m2/repository -Xmx1g -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss:SSS'" > ~/.mavenrc, +install:, +  - ./mvnw dependency:resolve -B, +, +script:, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +import static java.util.Arrays.asList;, +import static okhttp3.Protocol.HTTP_1_1;, +import static okhttp3.Protocol.HTTP_2;, +            + "tlsVersion=TLS_1_[23] ", +            + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +    server.setProtocols(asList(HTTP_2, HTTP_1_1));, +            "connectFailed: null javax\\.net\\.ssl\\.SSLProtocolException: (?:Unexpected handshake message: client_hello|Handshake message sequence violation, 1)"), +            "callFailed: javax\\.net\\.ssl\\.SSLProtocolException: (?:Unexpected handshake message: client_hello|Handshake message sequence violation, 1)"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.internal.platform.PlatformTest.getJvmSpecVersion;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +import static org.junit.Assume.assumeFalse;, +    // TODO https://github.com/square/okhttp/issues/4598, +    // No appropriate protocol (protocol is disabled or cipher suites are inappropriate), +    assumeFalse(getJvmSpecVersion().equals("11"));, +, +    // TODO https://github.com/square/okhttp/issues/4598, +    // No appropriate protocol (protocol is disabled or cipher suites are inappropriate), +    assumeFalse(getJvmSpecVersion().equals("11"));, +, +    // TODO https://github.com/square/okhttp/issues/4598, +//    java.util.NoSuchElementException, +//    at java.base/java.util.ArrayDeque.removeFirst(ArrayDeque.java:363), +//    at okhttp3.internal.tls.BasicCertificateChainCleaner.clean(BasicCertificateChainCleaner.java:58), +//    at okhttp3.CertificatePinner.check(CertificatePinner.java:166), +    assumeFalse(getJvmSpecVersion().equals("11"));, +, +++ b/.buildscript/deploy_snapshot.sh, +  ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.travis.yml, +  - openjdk8, +  - openjdk11, +before_install:, +  - mvn -N io.takari:maven:wrapper -Dmaven=3.6.0, +  - echo "MAVEN_OPTS='-Dmaven.repo.local=$HOME/.m2/repository -Xmx1g -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss:SSS'" > ~/.mavenrc, +install:, +  - ./mvnw dependency:resolve -B, +, +script:, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +import static java.util.Arrays.asList;, +import static okhttp3.Protocol.HTTP_1_1;, +import static okhttp3.Protocol.HTTP_2;, +            + "tlsVersion=TLS_1_[23] "]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, +      return ByteString.of(md5bytes).hex();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, +      return ByteString.of(md5bytes).hex();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import okio.Okio;, +      this.source = Okio.buffer(source);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, +      return ByteString.of(md5bytes).hex();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import okio.Okio;, +      this.source = Okio.buffer(source);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/NameValueBlockReader.java, +import okio.Okio;, +    this.source = Okio.buffer(inflaterSource);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, +      return ByteString.of(md5bytes).hex();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import okio.Okio;, +      this.source = Okio.buffer(source);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/NameValueBlockReader.java, +import okio.Okio;, +    this.source = Okio.buffer(inflaterSource);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +import okio.Okio;, +      this("", client, Okio.buffer(Okio.source(socket.getInputStream())),, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, +      return ByteString.of(md5bytes).hex();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import okio.Okio;, +      this.source = Okio.buffer(source);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/NameValueBlockReader.java, +import okio.Okio;, +    this.source = Okio.buffer(inflaterSource);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +import okio.Okio;, +      this("", client, Okio.buffer(Okio.source(socket.getInputStream())),, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/ByteStringTest.java, +import static org.junit.Assert.fail;, +    ByteString byteString = ByteString.decodeHex("000102");, +    assertTrue(byteString.equals(ByteString.decodeHex("000102")));, +    assertFalse(byteString.equals(ByteString.decodeHex("000201")));, +    ByteString byteString = ByteString.decodeHex("0102");, +    assertEquals(byteString.hashCode(), ByteString.decodeHex("0102").hashCode());, +    assertEquals(ByteString.decodeHex("6162"), ByteString.read(in, 2));, +    assertEquals(ByteString.decodeHex("63"), ByteString.read(in, 1));, +    ByteString.decodeHex("616263").write(out);, +    assertEquals(ByteString.decodeHex("ff"), ByteString.decodeBase64("//=="));, +    assertEquals(ByteString.decodeHex("ffff"), ByteString.decodeBase64("///="));, +    assertEquals(ByteString.decodeHex("ffffff"), ByteString.decodeBase64("////"));, +    assertEquals(ByteString.decodeHex("ffffffffffff"), ByteString.decodeBase64("////////"));, +  @Test public void decodeBase64WithWhitespace() {, +  @Test public void encodeHex() throws Exception {, +    assertEquals("000102", ByteString.of((byte) 0x0, (byte) 0x1, (byte) 0x2).hex());, +, +  @Test public void decodeHex() throws Exception {, +    assertEquals(ByteString.of((byte) 0x0, (byte) 0x1, (byte) 0x2), ByteString.decodeHex("000102"));, +  }, +, +  @Test public void decodeHexOddNumberOfChars() throws Exception {, +    try {, +      ByteString.decodeHex("aaa");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void decodeHexInvalidChar() throws Exception {, +    try {, +      ByteString.decodeHex("a\u0000");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java]
[+++ b/okhttp/src/main/java/okhttp3/internal/cache2/FileOperator.java, +      long bytesWritten = fileChannel.transferFrom(source, pos, byteCount);, +      byteCount -= bytesWritten;, +      long bytesRead = fileChannel.transferTo(pos, byteCount, sink);]
[+++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +  private volatile StreamAllocation streamAllocation;, +    StreamAllocation streamAllocation = new StreamAllocation(client.connectionPool(),, +        createAddress(request.url()), call, eventListener, callStackTrace);, +    this.streamAllocation = streamAllocation;, +        if (!recover(e.getLastConnectException(), streamAllocation, false, request)) {, +        if (!recover(e, streamAllocation, requestSendStarted, request)) throw e;, +      Request followUp = followUpRequest(response, streamAllocation.connection());, +        this.streamAllocation = streamAllocation;, +  private boolean recover(IOException e, StreamAllocation streamAllocation,, +      boolean requestSendStarted, Request userRequest) {, +  private Request followUpRequest(Response userResponse, Connection connection) throws IOException {]
[+++ b/benchmarks/pom.xml, +      <id>npn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.npn</groupId>, +          <artifactId>npn-boot</artifactId>, +++ b/benchmarks/pom.xml, +      <id>npn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.npn</groupId>, +          <artifactId>npn-boot</artifactId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN/NPN protocols are in use. Only useful with TLS. */, +++ b/benchmarks/pom.xml, +      <id>npn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.npn</groupId>, +          <artifactId>npn-boot</artifactId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN/NPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +   * Sets whether NPN is used on incoming HTTPS connections to negotiate a, +   * protocol like HTTP/1.1 or SPDY/3. Call this method to disable NPN and, +   * SPDY., +   * @deprecated Use {@link #setProtocolNegotiationEnabled}., +   */, +  public void setNpnEnabled(boolean npnEnabled) {, +    this.protocolNegotiationEnabled = npnEnabled;, +  }, +, +  /**, +   * Sets whether ALPN or NPN is used on incoming HTTPS connections to, +   * Indicates the protocols supported by NPN on incoming HTTPS connections., +   * This list is ignored when npn is disabled., +   *, +   * @param protocols the protocols to use, in order of preference. The list, +   *     must contain "http/1.1". It must not contain null., +   * @deprecated Use {@link #setProtocols(java.util.List)}., +   */, +  public void setNpnProtocols(List<Protocol> protocols) {, +    setProtocols(protocols);, +  }, +, +  /**, +   * Indicates the protocols supported by NPN or ALPN on incoming HTTPS, +++ b/benchmarks/pom.xml, +      <id>npn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.npn</groupId>, +          <artifactId>npn-boot</artifactId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN/NPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +   * Sets whether NPN is used on incoming HTTPS connections to negotiate a, +   * protocol like HTTP/1.1 or SPDY/3. Call this method to disable NPN and, +   * SPDY., +   * @deprecated Use {@link #setProtocolNegotiationEnabled}., +   */, +  public void setNpnEnabled(boolean npnEnabled) {, +    this.protocolNegotiationEnabled = npnEnabled;, +  }, +, +  /**, +   * Sets whether ALPN or NPN is used on incoming HTTPS connections to, +   * Indicates the protocols supported by NPN on incoming HTTPS connections., +   * This list is ignored when npn is disabled., +   *, +   * @param protocols the protocols to use, in order of preference. The list, +   *     must contain "http/1.1". It must not contain null., +   * @deprecated Use {@link #setProtocols(java.util.List)}., +   */, +  public void setNpnProtocols(List<Protocol> protocols) {, +    setProtocols(protocols);, +  }, +, +  /**, +   * Indicates the protocols supported by NPN or ALPN on incoming HTTPS, +++ b/okcurl/pom.xml, +      <groupId>org.mortbay.jetty.npn</groupId>, +      <artifactId>npn-boot</artifactId>, +    </dependency>, +    <dependency>, +++ b/benchmarks/pom.xml, +      <id>npn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.npn</groupId>, +          <artifactId>npn-boot</artifactId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN/NPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +   * Sets whether NPN is used on incoming HTTPS connections to negotiate a, +   * protocol like HTTP/1.1 or SPDY/3. Call this method to disable NPN and, +   * SPDY., +   * @deprecated Use {@link #setProtocolNegotiationEnabled}., +   */, +  public void setNpnEnabled(boolean npnEnabled) {, +    this.protocolNegotiationEnabled = npnEnabled;, +  }, +, +  /**, +   * Sets whether ALPN or NPN is used on incoming HTTPS connections to, +   * Indicates the protocols supported by NPN on incoming HTTPS connections., +   * This list is ignored when npn is disabled., +   *, +   * @param protocols the protocols to use, in order of preference. The list, +   *     must contain "http/1.1". It must not contain null.]
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import java.util.ArrayList;, +import java.util.concurrent.CountDownLatch;, +import okhttp3.Call;, +import okhttp3.Callback;, +import okhttp3.internal.Util;, +    List<Call> networkRequests = new ArrayList<>(2);, +    List<Exception> failures = new ArrayList<>(2);, +    List<InetAddress> results = new ArrayList<>(5);, +, +    buildRequest(hostname, networkRequests, results, failures, DnsRecordCodec.TYPE_A);, +, +    if (includeIPv6) {, +      buildRequest(hostname, networkRequests, results, failures, DnsRecordCodec.TYPE_AAAA);, +    }, +, +    executeRequests(hostname, networkRequests, results, failures);, +, +    if (!results.isEmpty()) {, +      return results;, +    }, +, +    return throwBestFailure(hostname, failures);, +  }, +, +  private void buildRequest(String hostname, List<Call> networkRequests, List<InetAddress> results,, +      List<Exception> failures, int type) {, +    Request request = buildRequest(hostname, type);, +    Response response = getCacheOnlyResponse(request);, +, +    if (response != null) {, +      processResponse(response, hostname, results, failures);, +    } else {, +      networkRequests.add(client.newCall(request));, +    }, +  }, +, +  private void executeRequests(final String hostname, List<Call> networkRequests,, +      final List<InetAddress> responses, final List<Exception> failures) {, +    final CountDownLatch latch = new CountDownLatch(networkRequests.size());, +, +    for (Call call : networkRequests) {, +      call.enqueue(new Callback() {, +        @Override public void onFailure(Call call, IOException e) {, +          synchronized (failures) {, +            failures.add(e);, +          }, +          latch.countDown();, +        }, +, +        @Override public void onResponse(Call call, Response response) {, +          processResponse(response, hostname, responses, failures);, +          latch.countDown();, +        }, +      });, +    }, +, +      latch.await();, +    } catch (InterruptedException e) {, +      failures.add(e);, +    }, +  }, +  private void processResponse(Response response, String hostname, List<InetAddress> results,, +      List<Exception> failures) {, +    try {, +      List<InetAddress> addresses = readResponse(hostname, response);, +      synchronized (results) {, +        results.addAll(addresses);, +      }, +      synchronized (failures) {, +        failures.add(e);, +      }, +    }, +  }, +, +  private List<InetAddress> throwBestFailure(String hostname, List<Exception> failures), +      throws UnknownHostException {, +    if (failures.size() == 0) {, +      throw new UnknownHostException(hostname);, +    }, +, +    Exception failure = failures.get(0);, +, +    if (failure instanceof UnknownHostException) {, +      throw (UnknownHostException) failure;, +    }, +, +    unknownHostException.initCause(failure);, +, +    for (int i = 1; i < failures.size(); i++) {, +      Util.addSuppressedIfPossible(unknownHostException, failures.get(i));, +    }, +, +  private @Nullable Response getCacheOnlyResponse(Request request) {, +      try {, +        Request cacheRequest = request.newBuilder().cacheControl(CacheControl.FORCE_CACHE).build();, +        Response cacheResponse = client.newCall(cacheRequest).execute();, +        if (cacheResponse.code() != 504) {, +          return cacheResponse;, +        }]
[+++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final HpackDraft10.Reader hpackReader = new HpackDraft10.Reader(4096, bytesIn);, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final HpackDraft10.Reader hpackReader = new HpackDraft10.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private HpackDraft10.Writer hpackWriter = new HpackDraft10.Writer(bytesOut);, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +  private Response.Callback callback;, +    callback = new Response.Callback() {, +    client.call(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +  private Response.Callback callback;, +    callback = new Response.Callback() {, +    client.call(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +  private RecordingCallback callback = new RecordingCallback();, +    client.call(request).execute(callback);, +    callback.await(request.url()), +    client.call(new Request.Builder().url(server.getUrl("/a")).build()).execute(callback);, +    callback.await(server.getUrl("/a")).assertBody("abc");, +    client.call(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    callback.await(server.getUrl("/b")).assertBody("def");, +    client.call(new Request.Builder().url(server.getUrl("/c")).build()).execute(callback);, +    callback.await(server.getUrl("/c")).assertBody("ghi");, +    client.call(request).execute(callback);, +    callback.await(request.url()).assertHandshake();, +    client.call(request).execute(callback);, +    callback.await(request.url()).assertBody("abc");, +    client.call(request).execute(callback);, +    callback.await(request.url()), +    client.call(request1).execute(callback);, +    callback.await(request1.url()).assertCode(200).assertBody("A");, +    client.call(request2).execute(callback);, +    callback.await(request2.url()).assertCode(200).assertBody("A");, +    client.call(request1).execute(callback);, +    callback.await(request1.url()).assertCode(200).assertBody("A");, +    client.call(request2).execute(callback);, +    callback.await(request2.url()).assertCode(200).assertBody("B");, +    client.call(request).execute(callback);, +    callback.await(server.getUrl("/c")), +    client.call(request).execute(callback);, +    callback.await(server.getUrl("/20")), +    client.call(request).execute(callback);, +    callback.await(server.getUrl("/20")).assertFailure("Too many redirects: 21");, +    client.call(requestA).execute(callback);, +    client.call(requestB).execute(callback);, +    callback.await(requestA.url()).assertBody("A");, +    // At this point we know the callback is ready, and that it will receive a cancel failure., +    callback.await(requestB.url()).assertFailure("Canceled");, +    client.call(requestA).execute(callback);, +    callback.await(requestA.url()).assertFailure("Canceled");, +    final Call call = client.call(request);, +    call.execute(new Response.Callback() {, +        call.cancel();, +    client.call(request).execute(new Response.Callback() {, +        client.call(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    callback.await(server.getUrl("/b")).assertCode(200).assertBody("def");, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +  private Response.Callback callback;, +    callback = new Response.Callback() {, +    client.call(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +  private RecordingCallback callback = new RecordingCallback();, +    client.call(request).execute(callback);, +    callback.await(request.url()), +    client.call(new Request.Builder().url(server.getUrl("/a")).build()).execute(callback);, +    callback.await(server.getUrl("/a")).assertBody("abc");, +    client.call(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    callback.await(server.getUrl("/b")).assertBody("def");, +    client.call(new Request.Builder().url(server.getUrl("/c")).build()).execute(callback);, +    callback.await(server.getUrl("/c")).assertBody("ghi");, +    client.call(request).execute(callback);, +    callback.await(request.url()).assertHandshake();, +    client.call(request).execute(callback);, +    callback.await(request.url()).assertBody("abc");, +    client.call(request).execute(callback);, +    callback.await(request.url()), +    client.call(request1).execute(callback);, +    callback.await(request1.url()).assertCode(200).assertBody("A");, +    client.call(request2).execute(callback);, +    callback.await(request2.url()).assertCode(200).assertBody("A");, +    client.call(request1).execute(callback);, +    callback.await(request1.url()).assertCode(200).assertBody("A");, +    client.call(request2).execute(callback);, +    callback.await(request2.url()).assertCode(200).assertBody("B");, +    client.call(request).execute(callback);, +    callback.await(server.getUrl("/c")), +    client.call(request).execute(callback);, +    callback.await(server.getUrl("/20")), +    client.call(request).execute(callback);, +    callback.await(server.getUrl("/20")).assertFailure("Too many redirects: 21");, +    client.call(requestA).execute(callback);, +    client.call(requestB).execute(callback);, +    callback.await(requestA.url()).assertBody("A");, +    // At this point we know the callback is ready, and that it will receive a cancel failure., +    callback.await(requestB.url()).assertFailure("Canceled");, +    client.call(requestA).execute(callback);, +    callback.await(requestA.url()).assertFailure("Canceled");, +    final Call call = client.call(request);, +    call.execute(new Response.Callback() {, +        call.cancel();, +    client.call(request).execute(new Response.Callback() {, +        client.call(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    callback.await(server.getUrl("/b")).assertCode(200).assertBody("def");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/DispatcherTest.java, +  RecordingCallback callback = new RecordingCallback();]
[+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +      if (protocols.contains(Protocol.SPDY_3)) {, +      }, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +      if (protocols.contains(Protocol.SPDY_3)) {, +      }, +++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_131</id>, +      <activation>, +        <jdk>1.8.0_131</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ b/checkstyle.xml, +        <!--<module name="NeedBraces"/>-->]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.DoubleInetAddressDns;, +import okhttp3.internal.RecordingOkAuthenticator;, +import okhttp3.internal.SingleInetAddressDns;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.internal.Util;, +import okhttp3.internal.Version;, +import okhttp3.internal.http.FakeDns;, +import okhttp3.internal.io.InMemoryFileSystem;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, +import okhttp3.mockwebserver.SocketPolicy;, +import okhttp3.testing.RecordingHostnameVerifier;, +import static okhttp3.internal.Internal.logger;, +    client.setProxyAuthenticator(new RecordingOkAuthenticator("password"));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.DoubleInetAddressDns;, +import okhttp3.internal.RecordingOkAuthenticator;, +import okhttp3.internal.SingleInetAddressDns;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.internal.Util;, +import okhttp3.internal.Version;, +import okhttp3.internal.http.FakeDns;, +import okhttp3.internal.io.InMemoryFileSystem;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, +import okhttp3.mockwebserver.SocketPolicy;, +import okhttp3.testing.RecordingHostnameVerifier;, +import static okhttp3.internal.Internal.logger;, +    client.setProxyAuthenticator(new RecordingOkAuthenticator("password"));, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import okhttp3.internal.RecordingAuthenticator;, +import okhttp3.internal.http.AuthenticatorAdapter;, +import okhttp3.internal.http.RecordingProxySelector;, +import okhttp3.internal.tls.OkHostnameVerifier;, +    assertSame(AuthenticatorAdapter.INSTANCE, client.getProxyAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.DoubleInetAddressDns;, +import okhttp3.internal.RecordingOkAuthenticator;, +import okhttp3.internal.SingleInetAddressDns;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.internal.Util;, +import okhttp3.internal.Version;, +import okhttp3.internal.http.FakeDns;, +import okhttp3.internal.io.InMemoryFileSystem;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, +import okhttp3.mockwebserver.SocketPolicy;, +import okhttp3.testing.RecordingHostnameVerifier;, +import static okhttp3.internal.Internal.logger;, +    client.setProxyAuthenticator(new RecordingOkAuthenticator("password"));, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import okhttp3.internal.RecordingAuthenticator;, +import okhttp3.internal.http.AuthenticatorAdapter;, +import okhttp3.internal.http.RecordingProxySelector;, +import okhttp3.internal.tls.OkHostnameVerifier;, +    assertSame(AuthenticatorAdapter.INSTANCE, client.getProxyAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/RecordingOkAuthenticator.java, +import java.io.IOException;, +import okhttp3.Authenticator;, +import okhttp3.Request;, +import okhttp3.Response;, +import okhttp3.Route;, +  @Override public Request authenticate(Route route, Response response) throws IOException {, +    proxies.add(route.proxy());, +    String header = response.code() == 407 ? "Proxy-Authorization" : "Authorization";, +        .addHeader(header, credential), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.DoubleInetAddressDns;, +import okhttp3.internal.RecordingOkAuthenticator;, +import okhttp3.internal.SingleInetAddressDns;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.internal.Util;, +import okhttp3.internal.Version;, +import okhttp3.internal.http.FakeDns;, +import okhttp3.internal.io.InMemoryFileSystem;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, +import okhttp3.mockwebserver.SocketPolicy;, +import okhttp3.testing.RecordingHostnameVerifier;, +import static okhttp3.internal.Internal.logger;, +    client.setProxyAuthenticator(new RecordingOkAuthenticator("password"));, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import okhttp3.internal.RecordingAuthenticator;, +import okhttp3.internal.http.AuthenticatorAdapter;, +import okhttp3.internal.http.RecordingProxySelector;, +import okhttp3.internal.tls.OkHostnameVerifier;, +    assertSame(AuthenticatorAdapter.INSTANCE, client.getProxyAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/RecordingOkAuthenticator.java, +import java.io.IOException;, +import okhttp3.Authenticator;, +import okhttp3.Request;]
[+++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +  /** Don't combine chunked with HTTP_2; that's not allowed. */, +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +  /** Don't combine chunked with HTTP_2; that's not allowed. */, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import java.util.Collections;, +/** A basic HTTP_2 server that serves the contents of a local directory. */, +        if (protocol != Protocol.HTTP_2) {, +    Platform.get().configureTlsExtensions(sslSocket, null,, +        Collections.singletonList(Protocol.HTTP_2));, +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +  /** Don't combine chunked with HTTP_2; that's not allowed. */, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import java.util.Collections;, +/** A basic HTTP_2 server that serves the contents of a local directory. */, +        if (protocol != Protocol.HTTP_2) {, +    Platform.get().configureTlsExtensions(sslSocket, null,, +        Collections.singletonList(Protocol.HTTP_2));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +  private List<Protocol> protocols = Util.immutableList(Protocol.HTTP_2, Protocol.HTTP_1_1);, +        if (protocol == Protocol.HTTP_2) {, +        } else if (protocol != Protocol.HTTP_1_1) {, +          throw new AssertionError();, +      String requestLine = method + ' ' + path + " HTTP/1.1";, +      List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for HTTP/2., +      List<Header> http2Headers = new ArrayList<>();, +      http2Headers.add(new Header(Header.RESPONSE_STATUS, statusParts[1]));, +        http2Headers.add(new Header(headers.name(i), headers.value(i)));, +      stream.reply(http2Headers, closeStreamAfterHeaders);, +        pushedHeaders.add(new Header(Header.TARGET_AUTHORITY, url(pushPromise.path()).host()));, +        List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for HTTP/2., +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +  /** Don't combine chunked with HTTP_2; that's not allowed. */, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import java.util.Collections;, +/** A basic HTTP_2 server that serves the contents of a local directory. */, +        if (protocol != Protocol.HTTP_2) {, +    Platform.get().configureTlsExtensions(sslSocket, null,, +        Collections.singletonList(Protocol.HTTP_2));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +  private List<Protocol> protocols = Util.immutableList(Protocol.HTTP_2, Protocol.HTTP_1_1);, +        if (protocol == Protocol.HTTP_2) {, +        } else if (protocol != Protocol.HTTP_1_1) {, +          throw new AssertionError();, +      String requestLine = method + ' ' + path + " HTTP/1.1";, +      List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for HTTP/2., +      List<Header> http2Headers = new ArrayList<>();, +      http2Headers.add(new Header(Header.RESPONSE_STATUS, statusParts[1]));, +        http2Headers.add(new Header(headers.name(i), headers.value(i)));, +      stream.reply(http2Headers, closeStreamAfterHeaders);, +        pushedHeaders.add(new Header(Header.TARGET_AUTHORITY, url(pushPromise.path()).host()));, +        List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for HTTP/2., +++ b/okcurl/README.md, +HTTP/2) against web servers., +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +  /** Don't combine chunked with HTTP_2; that's not allowed. */, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import java.util.Collections;, +/** A basic HTTP_2 server that serves the contents of a local directory. */, +        if (protocol != Protocol.HTTP_2) {, +    Platform.get().configureTlsExtensions(sslSocket, null,, +        Collections.singletonList(Protocol.HTTP_2));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +  private List<Protocol> protocols = Util.immutableList(Protocol.HTTP_2, Protocol.HTTP_1_1);, +        if (protocol == Protocol.HTTP_2) {, +        } else if (protocol != Protocol.HTTP_1_1) {, +          throw new AssertionError();, +      String requestLine = method + ' ' + path + " HTTP/1.1";, +      List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for HTTP/2., +      List<Header> http2Headers = new ArrayList<>();, +      http2Headers.add(new Header(Header.RESPONSE_STATUS, statusParts[1]));, +        http2Headers.add(new Header(headers.name(i), headers.value(i)));, +      stream.reply(http2Headers, closeStreamAfterHeaders);, +        pushedHeaders.add(new Header(Header.TARGET_AUTHORITY, url(pushPromise.path()).host()));, +        List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for HTTP/2., +++ b/okcurl/README.md, +HTTP/2) against web servers., +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java]
[+++ b/pom.xml, +    <version>20130403</version>, +++ b/pom.xml, +    <version>20130403</version>, +++ b/src/main/java/com/google/mockwebserver/MockResponse.java, +     * Returns the raw HTTP payload, or null if this response is streamed., +     */, +    public byte[] getBody() {, +        return body;, +    }, +, +    /**]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelImmediatelyAfterEnqueue() throws Exception {, +    call.cancel();, +  @Test public void cancelAll() throws Exception {, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    call.enqueue(callback);, +    client.dispatcher().cancelAll();, +    callback.await(server.url("/")).assertFailure("Canceled");, +  }, +, +    Request request = new Request.Builder().url(server.url("/a")).build();, +    final Call call = client.newCall(request);, +, +        call.cancel();, +      call.execute();, +, +    Request requestA = new Request.Builder().url(server.url("/a")).build();, +    Request requestB = new Request.Builder().url(server.url("/b")).build();, +    final Call callA = client.newCall(requestA);, +    final Call callB = client.newCall(requestB);, +, +        callB.cancel();, +    callA.enqueue(callback);, +    callB.enqueue(callback);, +    Request requestA = new Request.Builder().url(server.url("/a")).build();, +    Request request = new Request.Builder().url(server.url("/a")).build();, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelImmediatelyAfterEnqueue() throws Exception {, +    call.cancel();, +  @Test public void cancelAll() throws Exception {, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    call.enqueue(callback);, +    client.dispatcher().cancelAll();, +    callback.await(server.url("/")).assertFailure("Canceled");, +  }, +, +    Request request = new Request.Builder().url(server.url("/a")).build();, +    final Call call = client.newCall(request);, +, +        call.cancel();, +      call.execute();, +, +    Request requestA = new Request.Builder().url(server.url("/a")).build();, +    Request requestB = new Request.Builder().url(server.url("/b")).build();, +    final Call callA = client.newCall(requestA);, +    final Call callB = client.newCall(requestB);, +, +        callB.cancel();, +    callA.enqueue(callback);, +    callB.enqueue(callback);, +    Request requestA = new Request.Builder().url(server.url("/a")).build();, +    Request request = new Request.Builder().url(server.url("/a")).build();, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +import java.io.IOException;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import java.util.concurrent.CountDownLatch;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +    Call c1 = client.newCall(newRequest("http://a/1", "tag1"));, +    Call c2 = client.newCall(newRequest("http://a/2"));, +    c1.enqueue(callback);, +    c2.enqueue(callback);, +    c1.cancel();, +  @Test public void asyncCallAccessors() throws Exception {, +    dispatcher.setMaxRequests(3);, +    Call a1 = client.newCall(newRequest("http://a/1"));, +    Call a2 = client.newCall(newRequest("http://a/2"));, +    Call a3 = client.newCall(newRequest("http://a/3"));, +    Call a4 = client.newCall(newRequest("http://a/4"));, +    Call a5 = client.newCall(newRequest("http://a/5"));, +    a1.enqueue(callback);, +    a2.enqueue(callback);, +    a3.enqueue(callback);, +    a4.enqueue(callback);, +    a5.enqueue(callback);, +    assertEquals(3, dispatcher.runningCallsCount());, +    assertEquals(2, dispatcher.queuedCallsCount());, +    assertEquals(set(a1, a2, a3), set(dispatcher.runningCalls()));, +    assertEquals(set(a4, a5), set(dispatcher.queuedCalls()));, +  }, +, +  @Test public void synchronousCallAccessors() throws Exception {, +    final CountDownLatch ready = new CountDownLatch(2);, +    final CountDownLatch waiting = new CountDownLatch(1);, +    client = client.newBuilder(), +        .addInterceptor(, +            new Interceptor() {, +              @Override public Response intercept(Chain chain) throws IOException {, +                try {, +                  ready.countDown();, +                  waiting.await();, +                } catch (InterruptedException e) {, +                  throw new AssertionError();, +                }]
[+++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the, +      Work or Derivative Works thereof in any medium, with or without, +      modifications, and in Source or Object form, provided that You, +      meet the following conditions:, +, +      (a) You must give any other recipients of the Work or, +          Derivative Works a copy of this License; and, +, +      (b) You must cause any modified files to carry prominent notices, +          stating that You changed the files; and]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.publicsuffix;, +, +import java.io.IOException;, +import java.io.InputStream;, +import okio.Buffer;, +import okio.BufferedSource;, +import okio.GzipSource;, +import okio.Okio;, +import org.junit.Test;, +, +import static okhttp3.internal.publicsuffix.PublicSuffixDatabase.PUBLIC_SUFFIX_RESOURCE;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +, +public final class PublicSuffixDatabaseTest {, +  private final PublicSuffixDatabase publicSuffixDatabase = new PublicSuffixDatabase();, +, +  @Test public void longestMatchWins() {, +    Buffer buffer = new Buffer(), +        .writeUtf8("com\n"), +        .writeUtf8("my.square.com\n"), +        .writeUtf8("square.com\n");, +    publicSuffixDatabase.setListBytes(buffer.readByteArray(), new byte[]{});, +, +    assertEquals("example.com", publicSuffixDatabase.getEffectiveTldPlusOne("example.com"));, +    assertEquals("example.com", publicSuffixDatabase.getEffectiveTldPlusOne("foo.example.com"));, +    assertEquals("bar.square.com",, +        publicSuffixDatabase.getEffectiveTldPlusOne("foo.bar.square.com"));, +    assertEquals("foo.my.square.com",, +        publicSuffixDatabase.getEffectiveTldPlusOne("foo.my.square.com"));, +  }, +, +  @Test public void wildcardMatch() {, +    Buffer buffer = new Buffer(), +        .writeUtf8("*.square.com\n"), +        .writeUtf8("com\n"), +        .writeUtf8("example.com\n");, +    publicSuffixDatabase.setListBytes(buffer.readByteArray(), new byte[]{});, +, +    assertNull(publicSuffixDatabase.getEffectiveTldPlusOne("my.square.com"));, +    assertEquals("foo.my.square.com",, +        publicSuffixDatabase.getEffectiveTldPlusOne("foo.my.square.com"));, +    assertEquals("foo.my.square.com",, +        publicSuffixDatabase.getEffectiveTldPlusOne("bar.foo.my.square.com"));, +  }, +, +  @Test public void boundarySearches() {, +    Buffer buffer = new Buffer(), +        .writeUtf8("bbb\n"), +        .writeUtf8("ddd\n"), +        .writeUtf8("fff\n");, +    publicSuffixDatabase.setListBytes(buffer.readByteArray(), new byte[]{});, +, +    assertNull(publicSuffixDatabase.getEffectiveTldPlusOne("aaa"));, +    assertNull(publicSuffixDatabase.getEffectiveTldPlusOne("ggg"));, +    assertNull(publicSuffixDatabase.getEffectiveTldPlusOne("ccc"));, +    assertNull(publicSuffixDatabase.getEffectiveTldPlusOne("eee"));, +  }, +, +  @Test public void exceptionRule() {, +    Buffer exception = new Buffer(), +        .writeUtf8("my.square.jp\n");, +    Buffer buffer = new Buffer(), +        .writeUtf8("*.jp\n"), +        .writeUtf8("*.square.jp\n"), +        .writeUtf8("example.com\n"), +        .writeUtf8("square.com\n");, +    publicSuffixDatabase.setListBytes(buffer.readByteArray(), exception.readByteArray());, +, +    assertEquals("my.square.jp", publicSuffixDatabase.getEffectiveTldPlusOne("my.square.jp"));, +    assertEquals("my.square.jp", publicSuffixDatabase.getEffectiveTldPlusOne("foo.my.square.jp"));, +    assertNull(publicSuffixDatabase.getEffectiveTldPlusOne("my1.square.jp"));, +  }, +, +  @Test public void noEffectiveTldPlusOne() {, +    Buffer exception = new Buffer(), +        .writeUtf8("my.square.jp\n");, +    Buffer buffer = new Buffer(), +        .writeUtf8("*.jp\n"), +        .writeUtf8("*.square.jp\n"), +        .writeUtf8("example.com\n"), +        .writeUtf8("square.com\n");, +    publicSuffixDatabase.setListBytes(buffer.readByteArray(), exception.readByteArray());, +]
[+++ b/benchmarks/pom.xml, +    <version>3.1.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.1</version>, +++ b/okcurl/pom.xml, +    <version>3.1.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.1</version>, +++ b/okcurl/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.1</version>, +++ b/okcurl/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.1</version>, +++ b/okcurl/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.1</version>, +++ b/okcurl/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.1</version>, +++ b/okcurl/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.1.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.1</version>, +++ b/okcurl/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.1.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.1</version>, +++ b/okcurl/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.1</version>]
[+++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +import okhttp3.ResponseBody;, +      ResponseBody body = response.body();, +, +      //noinspection ConstantConditions main body is never null, +      MediaType contentType = body.contentType();, +      // Replace the body with an empty one so the callbacks can't see real data., +      ServerSentEventReader reader = new ServerSentEventReader(body.source(), this);]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(408), +        .setHeader("Connection", "Close"), +        .setBody("You took too long!"));, +    server.enqueue(new MockResponse().setBody("Body"));, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +  @Test public void requestBodyRetransmittedOnClientRequestTimeout() throws Exception {, +        .setResponseCode(408), +    Request request = new Request.Builder(), +        .build();, +    Response response = client.newCall(request).execute();, +  @Test public void disableClientRequestTimeoutRetry() throws IOException {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(408), +        .setHeader("Connection", "Close"), +        .setBody("You took too long!"));, +, +    client = client.newBuilder(), +        .retryOnConnectionFailure(false), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +, +    assertEquals(408, response.code());, +    assertEquals("You took too long!", response.body().string());, +  }, +, +  @Test public void maxClientRequestTimeoutRetries() throws IOException {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(408), +        .setHeader("Connection", "Close"), +        .setBody("You took too long!"));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(408), +        .setHeader("Connection", "Close"), +        .setBody("You took too long!"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +, +    assertEquals(408, response.code());, +    assertEquals("You took too long!", response.body().string());, +, +    assertEquals(2, server.getRequestCount());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(408), +        .setHeader("Connection", "Close"), +        .setBody("You took too long!"));, +    server.enqueue(new MockResponse().setBody("Body"));, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +  @Test public void requestBodyRetransmittedOnClientRequestTimeout() throws Exception {, +        .setResponseCode(408), +    Request request = new Request.Builder(), +        .build();, +    Response response = client.newCall(request).execute();, +  @Test public void disableClientRequestTimeoutRetry() throws IOException {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(408), +        .setHeader("Connection", "Close"), +        .setBody("You took too long!"));, +, +    client = client.newBuilder(), +        .retryOnConnectionFailure(false), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +, +    assertEquals(408, response.code());, +    assertEquals("You took too long!", response.body().string());, +  }, +, +  @Test public void maxClientRequestTimeoutRetries() throws IOException {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(408), +        .setHeader("Connection", "Close")]
[+++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +Download [the latest JAR][3] or configure this dependency:, +Download [the latest JAR][4] or configure this dependency:, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., + [1]: https://square.github.io/okhttp, + [2]: https://github.com/square/okhttp/wiki, + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +Download [the latest JAR][3] or configure this dependency:, +Download [the latest JAR][4] or configure this dependency:, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., + [1]: https://square.github.io/okhttp, + [2]: https://github.com/square/okhttp/wiki, + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      Collections.newSetFromMap(new ConcurrentHashMap<>());, +      Collections.newSetFromMap(new ConcurrentHashMap<>());, +++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +Download [the latest JAR][3] or configure this dependency:, +Download [the latest JAR][4] or configure this dependency:, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., + [1]: https://square.github.io/okhttp, + [2]: https://github.com/square/okhttp/wiki, + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      Collections.newSetFromMap(new ConcurrentHashMap<>());, +      Collections.newSetFromMap(new ConcurrentHashMap<>());, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CacheRequest put(, +      URI uri, URLConnection urlConnection) throws IOException {, +++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +Download [the latest JAR][3] or configure this dependency:, +Download [the latest JAR][4] or configure this dependency:, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., + [1]: https://square.github.io/okhttp, + [2]: https://github.com/square/okhttp/wiki, + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      Collections.newSetFromMap(new ConcurrentHashMap<>());, +      Collections.newSetFromMap(new ConcurrentHashMap<>());, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CacheRequest put(, +      URI uri, URLConnection urlConnection) throws IOException {, +++ b/okhttp-android-support/src/test/java/okhttp3/AbstractResponseCache.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CacheResponse get(URI uri, String requestMethod,, +  @Override public @Nullable CacheRequest put(, +      URI uri, URLConnection connection) throws IOException {, +++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +Download [the latest JAR][3] or configure this dependency:, +Download [the latest JAR][4] or configure this dependency:, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., + [1]: https://square.github.io/okhttp, + [2]: https://github.com/square/okhttp/wiki, + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      Collections.newSetFromMap(new ConcurrentHashMap<>());, +      Collections.newSetFromMap(new ConcurrentHashMap<>());, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CacheRequest put(, +      URI uri, URLConnection urlConnection) throws IOException {, +++ b/okhttp-android-support/src/test/java/okhttp3/AbstractResponseCache.java, +import javax.annotation.Nullable;, +  @Override public @Nullable CacheResponse get(URI uri, String requestMethod,, +  @Override public @Nullable CacheRequest put(, +      URI uri, URLConnection connection) throws IOException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    assertNull(httpUrlConnection.getHeaderFieldKey(0));, +++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +Download [the latest JAR][3] or configure this dependency:, +Download [the latest JAR][4] or configure this dependency:, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., + [1]: https://square.github.io/okhttp, + [2]: https://github.com/square/okhttp/wiki, + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      Collections.newSetFromMap(new ConcurrentHashMap<>());, +      Collections.newSetFromMap(new ConcurrentHashMap<>());, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.info(MockWebServer.this + " starting to accept connections");, +          logger.log(Level.WARNING, MockWebServer.this + " failed unexpectedly", e);, +        // Release all sockets and all threads, even if any close fails., +            logger.info(MockWebServer.this + " done accepting connections: " + e.getMessage());, +          logger.log(Level.WARNING, MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " failed", e);, +          logger.warning(MockWebServer.this + " connection from " + raw.getInetAddress(), +              + " didn't make a request");, +          logger.info(MockWebServer.this + " received request: " + request, +              + " and responded: " + response);, +  @Override public String toString() {, +    return "MockWebServer[" + port + "]";, +  }, +, +        logger.info(MockWebServer.this + " received request: " + request, +            + " and responded: " + response + " protocol is " + protocol.toString());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.info(MockWebServer.this + " starting to accept connections");, +          logger.log(Level.WARNING, MockWebServer.this + " failed unexpectedly", e);, +        // Release all sockets and all threads, even if any close fails., +            logger.info(MockWebServer.this + " done accepting connections: " + e.getMessage());, +          logger.log(Level.WARNING, MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " failed", e);, +          logger.warning(MockWebServer.this + " connection from " + raw.getInetAddress(), +              + " didn't make a request");, +          logger.info(MockWebServer.this + " received request: " + request, +              + " and responded: " + response);, +  @Override public String toString() {, +    return "MockWebServer[" + port + "]";, +  }, +, +        logger.info(MockWebServer.this + " received request: " + request, +            + " and responded: " + response + " protocol is " + protocol.toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import org.junit.Rule;, +import org.junit.rules.TestRule;, +import org.junit.rules.Timeout;, +  private static final SSLContext sslContext = SslContextBuilder.localhost();, +, +  @Rule public TestRule timeout = new Timeout(30_000);, +, +  @Rule public MockWebServerRule server = new MockWebServerRule();, +  @Rule public MockWebServerRule server2 = new MockWebServerRule();, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +      certificatePinnerBuilder.add(server.get().getHostName(), CertificatePinner.pin(certificate));, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +, +    // Pin publicobject.com's cert., +        .add(server.get().getHostName(), "sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw="), +    cookie.setDomain(server.get().getCookieDomain());, +        + "c=\"cookie\";$Path=\"/\";$Domain=\"" + server.get().getCookieDomain(), +    } catch (IOException expected) {, +      assertEquals("Too many redirects: 21", expected.getMessage());, +    } catch (IOException expected) {, +    } catch (IOException expected) {, +    server.get().setDispatcher(new Dispatcher() {, +    } catch (IOException expected) {, +    server.get().setDispatcher(new Dispatcher() {, +    server.get().setDispatcher(new Dispatcher() {, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().setProtocols(client.getProtocols());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.info(MockWebServer.this + " starting to accept connections");, +          logger.log(Level.WARNING, MockWebServer.this + " failed unexpectedly", e);, +        // Release all sockets and all threads, even if any close fails., +            logger.info(MockWebServer.this + " done accepting connections: " + e.getMessage());, +          logger.log(Level.WARNING, MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " failed", e);, +          logger.warning(MockWebServer.this + " connection from " + raw.getInetAddress(), +              + " didn't make a request");, +          logger.info(MockWebServer.this + " received request: " + request, +              + " and responded: " + response);, +  @Override public String toString() {, +    return "MockWebServer[" + port + "]";, +  }, +, +        logger.info(MockWebServer.this + " received request: " + request, +            + " and responded: " + response + " protocol is " + protocol.toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import org.junit.Rule;, +import org.junit.rules.TestRule;, +import org.junit.rules.Timeout;, +  private static final SSLContext sslContext = SslContextBuilder.localhost();, +, +  @Rule public TestRule timeout = new Timeout(30_000);, +, +  @Rule public MockWebServerRule server = new MockWebServerRule();, +  @Rule public MockWebServerRule server2 = new MockWebServerRule();, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);]
[+++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +  tasks.withType(JavaCompile).configureEach {, +    options.errorprone {, +      check("MissingOverride", CheckSeverity.ERROR), +    }, +  }, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +  tasks.withType(JavaCompile).configureEach {, +    options.errorprone {, +      check("MissingOverride", CheckSeverity.ERROR), +    }, +  }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    @Override LogRecorder assertLogMatch(String pattern) {, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +  tasks.withType(JavaCompile).configureEach {, +    options.errorprone {, +      check("MissingOverride", CheckSeverity.ERROR), +    }, +  }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    @Override LogRecorder assertLogMatch(String pattern) {, +++ b/okhttp/src/test/java/okhttp3/DelegatingSSLSocket.java, +  @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, +  @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, +  @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, +  @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, +  @SuppressWarnings({, +      "MissingOverride", // Can only override with JDK 9+, +      "unchecked" // Using reflection to delegate., +  }), +  @SuppressWarnings({, +      "MissingOverride", // Can only override with JDK 9+, +      "unchecked" // Using reflection to delegate., +  }), +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +  tasks.withType(JavaCompile).configureEach {, +    options.errorprone {, +      check("MissingOverride", CheckSeverity.ERROR), +    }, +  }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    @Override LogRecorder assertLogMatch(String pattern) {, +++ b/okhttp/src/test/java/okhttp3/DelegatingSSLSocket.java, +  @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, +  @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, +  @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, +  @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, +  @SuppressWarnings({, +      "MissingOverride", // Can only override with JDK 9+, +      "unchecked" // Using reflection to delegate., +  }), +  @SuppressWarnings({, +      "MissingOverride", // Can only override with JDK 9+, +      "unchecked" // Using reflection to delegate., +  }), +++ b/okhttp/src/test/java/okhttp3/URLConnectionTest.java, +      @Override public Socket createSocket() {, +      @Override public Socket createSocket(InetAddress host, int port) {, +      @Override public Socket createSocket(InetAddress address, int port, InetAddress localAddress,, +      @Override public Socket createSocket(String host, int port) {, +      @Override public Socket createSocket(String host, int port, InetAddress localHost, int localPort) {, +    @Override public X509Certificate[] getAcceptedIssuers() {, +    @Override public void checkClientTrusted(X509Certificate[] chain, String authType) {, +    @Override public void checkServerTrusted(X509Certificate[] chain, String authType) {, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +  tasks.withType(JavaCompile).configureEach {, +    options.errorprone {, +      check("MissingOverride", CheckSeverity.ERROR), +    }, +  }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    @Override LogRecorder assertLogMatch(String pattern) {, +++ b/okhttp/src/test/java/okhttp3/DelegatingSSLSocket.java, +  @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, +  @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, +  @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, +  @SuppressWarnings("MissingOverride") // Can only override with JDK 9+, +  @SuppressWarnings({, +      "MissingOverride", // Can only override with JDK 9+, +      "unchecked" // Using reflection to delegate., +  }), +  @SuppressWarnings({, +      "MissingOverride", // Can only override with JDK 9+, +      "unchecked" // Using reflection to delegate., +  }), +++ b/okhttp/src/test/java/okhttp3/URLConnectionTest.java, +      @Override public Socket createSocket() {, +      @Override public Socket createSocket(InetAddress host, int port) {, +      @Override public Socket createSocket(InetAddress address, int port, InetAddress localAddress,]
[+++ b/pom.xml, +    <version>0.8-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, +      @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, +      @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.net.Socket;, +  public abstract Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, +      @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.net.Socket;, +  public abstract Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +import java.net.Socket;, +    Socket socket = null;, +        socket = Internal.instance.deduplicate(connectionPool, address, this);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(noNewStreams, false, true);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(false, true, false);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(true, false, false);, +    closeQuietly(socket);, +  private Socket deallocate(boolean noNewStreams, boolean released, boolean streamFinished) {, +    Socket socket = null;, +            socket = connection.socket();, +    return socket;, +    Socket socket;, +      socket = deallocate(noNewStreams, false, true);, +    closeQuietly(socket);, +  public Socket releaseAndAcquire(RealConnection newConnection) {, +    Socket socket = deallocate(true, false, false);, +    return socket;, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, +      @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.net.Socket;, +  public abstract Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +import java.net.Socket;, +    Socket socket = null;, +        socket = Internal.instance.deduplicate(connectionPool, address, this);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(noNewStreams, false, true);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(false, true, false);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(true, false, false);, +    closeQuietly(socket);, +  private Socket deallocate(boolean noNewStreams, boolean released, boolean streamFinished) {, +    Socket socket = null;, +            socket = connection.socket();, +    return socket;, +    Socket socket;, +      socket = deallocate(noNewStreams, false, true);, +    closeQuietly(socket);, +  public Socket releaseAndAcquire(RealConnection newConnection) {, +    Socket socket = deallocate(true, false, false);, +    return socket;, +++ b/pom.xml, +]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // Ensure that the (shared) connection pool is in a consistent state., +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // Ensure that the (shared) connection pool is in a consistent state., +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    // Ensure the test has released all connections., +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().connectionCount());, +  @Test public void canRetryNormalRequestBody() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(503), +        .setHeader("Retry-After", "0"), +        .setBody("please retry"));, +    server.enqueue(new MockResponse(), +        .setBody("thank you for retrying"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(new RequestBody() {, +          int attempt = 0;, +, +          @Override public @Nullable MediaType contentType() {, +            return null;, +          }, +, +          @Override public void writeTo(BufferedSink sink) throws IOException {, +            sink.writeUtf8("attempt " + (attempt++));, +          }, +        }), +        .build();, +    Response response = client.newCall(request).execute();, +    assertEquals(200, response.code());, +    assertEquals("thank you for retrying", response.body().string());, +, +    assertEquals("attempt 0", server.takeRequest().getBody().readUtf8());, +    assertEquals("attempt 1", server.takeRequest().getBody().readUtf8());, +    assertEquals(2, server.getRequestCount());, +  }, +, +  @Test public void cannotRetryOneShotRequestBody() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(503), +        .setHeader("Retry-After", "0"), +        .setBody("please retry"));, +    server.enqueue(new MockResponse(), +        .setBody("thank you for retrying"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(new RequestBody() {, +          int attempt = 0;, +, +          @Override public @Nullable MediaType contentType() {, +            return null;, +          }, +, +          @Override public void writeTo(BufferedSink sink) throws IOException {, +            sink.writeUtf8("attempt " + (attempt++));, +          }, +, +          @Override public boolean isOneShot() {, +            return true;, +          }, +        }), +        .build();, +    Response response = client.newCall(request).execute();, +    assertEquals(503, response.code());, +    assertEquals("please retry", response.body().string());, +, +    assertEquals("attempt 0", server.takeRequest().getBody().readUtf8());, +    assertEquals(1, server.getRequestCount());, +  }, +, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // Ensure that the (shared) connection pool is in a consistent state., +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    // Ensure the test has released all connections., +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().connectionCount());, +  @Test public void canRetryNormalRequestBody() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(503), +        .setHeader("Retry-After", "0"), +        .setBody("please retry"));, +    server.enqueue(new MockResponse(), +        .setBody("thank you for retrying"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(new RequestBody() {]
[+++ b/website/index.html, +    <meta name="description" content="An HTTP &amp; SPDY client for Android and Java applications">, +    <link href="static/bootstrap-combined.min.css" rel="stylesheet">, +    <link href="static/app-theme.css" rel="stylesheet">, +    <section id="subtitle">, +      <div class="container">, +        <div class="row">, +          <div class="span12">, +            <h2>An <strong>HTTP &amp; SPDY</strong> client for Android and Java applications</h2>, +          </div>, +        </div>, +      </div>, +    </section>, +            <div class="content-nav" data-spy="affix" data-offset-top="80">, +++ b/website/index.html, +    <meta name="description" content="An HTTP &amp; SPDY client for Android and Java applications">, +    <link href="static/bootstrap-combined.min.css" rel="stylesheet">, +    <link href="static/app-theme.css" rel="stylesheet">, +    <section id="subtitle">, +      <div class="container">, +        <div class="row">, +          <div class="span12">, +            <h2>An <strong>HTTP &amp; SPDY</strong> client for Android and Java applications</h2>, +          </div>, +        </div>, +      </div>, +    </section>, +            <div class="content-nav" data-spy="affix" data-offset-top="80">, +++ b/website/static/app-theme.css, +/* http://www.colorhexa.com/487fb9 */, +, +/*** Primary ***/, +, +header,, +#subtitle,, +a.dl {, +  background-color: #48b7b9;, +}, +, +.content-nav li.active a,, +.content-nav li.active a:hover {, +  border-left-color: #48b7b9;, +}, +, +/*** One step left on the monochromatic scale ***/, +, +header menu li a:hover,, +a.dl:hover {, +  background-color: #40a6a7;, +}, +a {, +  color: #40a6a7;, +}, +, +/*** Three steps left on the monochromatic scale ***/, +, +a:hover {, +  color: #328183;, +}, +, +, +/****************************************************************\, + **** Syntax highlighting styles ********************************, +\****************************************************************/, +, +.pln { color: #000; }, +.str { color: #399395; }, +.kwd { color: #666; }, +.com { color: #800; }, +.typ { color: #222; }, +.lit { color: #666; }, +.pun { color: #888; }, +.opn { color: #888; }, +.clo { color: #888; }, +.tag { color: #399395; }, +.atn { color: #606; }, +.atv { color: #080; }, +.dec { color: #606; }, +.var { color: #606; }, +.fun { color: #f00; }, +++ b/website/index.html, +    <meta name="description" content="An HTTP &amp; SPDY client for Android and Java applications">, +    <link href="static/bootstrap-combined.min.css" rel="stylesheet">, +    <link href="static/app-theme.css" rel="stylesheet">, +    <section id="subtitle">, +      <div class="container">, +        <div class="row">, +          <div class="span12">, +            <h2>An <strong>HTTP &amp; SPDY</strong> client for Android and Java applications</h2>, +          </div>, +        </div>, +      </div>, +    </section>, +            <div class="content-nav" data-spy="affix" data-offset-top="80">, +++ b/website/static/app-theme.css, +/* http://www.colorhexa.com/487fb9 */, +, +/*** Primary ***/, +, +header,]
[+++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], +	path = okhttp-hpacktests/src/test/resources/hpack-test-case, +	url = git://github.com/http2jp/hpack-test-case.git, +++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], +	path = okhttp-hpacktests/src/test/resources/hpack-test-case, +	url = git://github.com/http2jp/hpack-test-case.git, +++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is, +    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, +    used `Throwable`., + *  Fix: Fixed a caching bug where we weren't storing rewritten request headers, +    like `Accept-Encoding`., + *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, +    large downloads, + *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.), +, +## Version 2.0.0-RC2, +, +_2014-06-11_, +, +This update fixes problems in 2.0.0-RC1. Read the 2.0.0-RC1 changes for, +advice on upgrading from 1.x to 2.x., +, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, +    connections were neither closed nor pooled., + *  Fix: Revert builder-style return types from OkHttpClient's timeout methods, +    for binary compatibility with OkHttp 1.x., + *  Fix: Don't skip client stream 1 on SPDY/3.1. This fixes SPDY connectivity to, +    `https://google.com`, which doesn't follow the SPDY/3.1 spec!, + *  Fix: Always configure NPN headers. This fixes connectivity to, +    `https://facebook.com` when SPDY and HTTP/2 are both disabled. Otherwise an, +    unexpected NPN response is received and OkHttp crashes., + *  Fix: Write continuation frames when HPACK data is larger than 16383 bytes., + *  Fix: Don't drop uncaught exceptions thrown in async calls., + *  Fix: Throw an exception eagerly when a request body is not legal. Previously, +    we ignored the problem at request-building time, only to crash later with a, +    `NullPointerException`., + *  Fix: Include a backwards-compatible `OkHttp-Response-Source` header with, +    `OkUrlFactory `responses., + *  Fix: Don't include a default User-Agent header in requests made with the Call, +    API. Requests made with OkUrlFactory will continue to have a default user, +    agent., + *  New: Guava-like API to create headers:, +, +    ```, +    Headers headers = Headers.of(name1, value1, name2, value2, ...)., +    ```, +, + *  New: Make the content-type header optional for request bodies., + *  New: `Response.isSuccessful()` is a convenient API to check response codes., + *  New: The response body can now be read outside of the callback. Response, +    bodies must always be closed, otherwise they will leak connections!, + *  New: APIs to create multipart request bodies (`MultipartBuilder`) and form, +    encoding bodies (`FormEncodingBuilder`)., +, +## Version 2.0.0-RC1, +, +_2014-05-23_, +, +OkHttp 2 is designed around a new API that is true to HTTP, with classes for, +requests, responses, headers, and calls. It uses modern Java patterns like, +immutability and chained builders. The API now offers asynchronous callbacks, +in addition to synchronous blocking calls., +, +#### API Changes, +, + *  **New Request and Response types,** each with their own builder. There's also, +    a `RequestBody` class to write the request body to the network and a, +    `ResponseBody` to read the response body from the network. The standalone, +    `Headers` class offers full access to the HTTP headers., +, + *  **Okio dependency added.** OkHttp now depends on, +    [Okio](https://github.com/square/okio), an I/O library that makes it easier, +    to access, store and process data. Using this library internally makes OkHttp, +    faster while consuming less memory. You can write a `RequestBody` as an Okio, +    `BufferedSink` and a `ResponseBody` as an Okio `BufferedSource`. Standard, +    `InputStream` and `OutputStream` access is also available., +, + *  **New Call and Callback types** execute requests and receive their, +    responses. Both types of calls can be canceled via the `Call` or the, +    `OkHttpClient`., +, + *  **URLConnection support has moved to the okhttp-urlconnection module.**, +    If you're upgrading from 1.x, this change will impact you. You will need to, +    add the `okhttp-urlconnection` module to your project and use the, +    `OkUrlFactory` to create new instances of `HttpURLConnection`:, +, +    ```, +    // OkHttp 1.x:, +    HttpURLConnection connection = client.open(url);, +]
[+++ b/mockwebserver/pom.xml, +      <artifactId>okhttp</artifactId>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp</artifactId>, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp</artifactId>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/pom.xml, +    <animal.sniffer.version>1.15</animal.sniffer.version>]
[+++ b/pom.xml, +    </profile>]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getLocalHost();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getLocalHost();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, +    Logger logger = Logger.getLogger(Http20Draft15.class.getName() + "$FrameLogger");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getLocalHost();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, +    Logger logger = Logger.getLogger(Http20Draft15.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +When new interop tests are available, you should update, +HpackDecodeInteropGoodTest#GOOD_INTEROP_TESTS with the directory name., +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getLocalHost();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, +    Logger logger = Logger.getLogger(Http20Draft15.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +When new interop tests are available, you should update, +HpackDecodeInteropGoodTest#GOOD_INTEROP_TESTS with the directory name., +, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +      <version>2.2.4</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getLocalHost();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, +    Logger logger = Logger.getLogger(Http20Draft15.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +When new interop tests are available, you should update, +HpackDecodeInteropGoodTest#GOOD_INTEROP_TESTS with the directory name., +, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +      <version>2.2.4</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final HpackDraft09.Reader hpackReader = new HpackDraft09.Reader(4096, bytesIn);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getLocalHost();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, +    Logger logger = Logger.getLogger(Http20Draft15.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +When new interop tests are available, you should update, +HpackDecodeInteropGoodTest#GOOD_INTEROP_TESTS with the directory name., +, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +      <version>2.2.4</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final HpackDraft09.Reader hpackReader = new HpackDraft09.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private HpackDraft09.Writer hpackWriter = new HpackDraft09.Writer(bytesOut);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getLocalHost();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, +    Logger logger = Logger.getLogger(Http20Draft15.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +When new interop tests are available, you should update, +HpackDecodeInteropGoodTest#GOOD_INTEROP_TESTS with the directory name., +, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +      <version>2.2.4</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final HpackDraft09.Reader hpackReader = new HpackDraft09.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private HpackDraft09.Writer hpackWriter = new HpackDraft09.Writer(bytesOut);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java, +import static junit.framework.Assert.assertEquals;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getLocalHost();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, +    Logger logger = Logger.getLogger(Http20Draft15.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/okhttp/build.gradle, +  classExcludes = [, +      // Package-private in 3.x, internal in 4.0.0:, +      'okhttp3.Cache$CacheResponseBody$1',, +  ], +      'okhttp3.Cache#delete()',, +      'okhttp3.Cache#directory()',, +      'okhttp3.Cache#evictAll()',, +      'okhttp3.Cache#hitCount()',, +      'okhttp3.Cache#initialize()',, +      'okhttp3.Cache#isClosed()',, +      'okhttp3.Cache#maxSize()',, +      'okhttp3.Cache#networkCount()',, +      'okhttp3.Cache#requestCount()',, +      'okhttp3.Cache#size()',, +      'okhttp3.Cache#urls()',, +      'okhttp3.Cache#writeAbortCount()',, +      'okhttp3.Cache#writeSuccessCount()',, +++ b/.gitignore, +++ b/okhttp/build.gradle, +  classExcludes = [, +      // Package-private in 3.x, internal in 4.0.0:, +      'okhttp3.Cache$CacheResponseBody$1',, +  ], +      'okhttp3.Cache#delete()',, +      'okhttp3.Cache#directory()',, +      'okhttp3.Cache#evictAll()',, +      'okhttp3.Cache#hitCount()',, +      'okhttp3.Cache#initialize()',, +      'okhttp3.Cache#isClosed()',, +      'okhttp3.Cache#maxSize()',, +      'okhttp3.Cache#networkCount()',, +      'okhttp3.Cache#requestCount()',, +      'okhttp3.Cache#size()',, +      'okhttp3.Cache#urls()',, +      'okhttp3.Cache#writeAbortCount()',, +      'okhttp3.Cache#writeSuccessCount()',, +++ b/okhttp/src/main/java/okhttp3/Address.kt, + * Copyright (C) 2019 The Android Open Source Project, +++ b/.gitignore, +++ b/okhttp/build.gradle, +  classExcludes = [, +      // Package-private in 3.x, internal in 4.0.0:, +      'okhttp3.Cache$CacheResponseBody$1',, +  ], +      'okhttp3.Cache#delete()',, +      'okhttp3.Cache#directory()',, +      'okhttp3.Cache#evictAll()',, +      'okhttp3.Cache#hitCount()',, +      'okhttp3.Cache#initialize()',, +      'okhttp3.Cache#isClosed()',, +      'okhttp3.Cache#maxSize()',, +      'okhttp3.Cache#networkCount()',, +      'okhttp3.Cache#requestCount()',, +      'okhttp3.Cache#size()',, +      'okhttp3.Cache#urls()',, +      'okhttp3.Cache#writeAbortCount()',, +      'okhttp3.Cache#writeSuccessCount()',, +++ b/okhttp/src/main/java/okhttp3/Address.kt, + * Copyright (C) 2019 The Android Open Source Project, +++ /dev/null, +++ b/.gitignore, +++ b/okhttp/build.gradle, +  classExcludes = [, +      // Package-private in 3.x, internal in 4.0.0:, +      'okhttp3.Cache$CacheResponseBody$1',, +  ], +      'okhttp3.Cache#delete()',, +      'okhttp3.Cache#directory()',, +      'okhttp3.Cache#evictAll()',, +      'okhttp3.Cache#hitCount()',, +      'okhttp3.Cache#initialize()',, +      'okhttp3.Cache#isClosed()',, +      'okhttp3.Cache#maxSize()',, +      'okhttp3.Cache#networkCount()',, +      'okhttp3.Cache#requestCount()',, +      'okhttp3.Cache#size()',, +      'okhttp3.Cache#urls()',, +      'okhttp3.Cache#writeAbortCount()',, +      'okhttp3.Cache#writeSuccessCount()',, +++ b/okhttp/src/main/java/okhttp3/Address.kt, + * Copyright (C) 2019 The Android Open Source Project, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/Cache.kt, +/*, + * Copyright (C) 2010 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]
[+++ b/README.md, + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/README.md, + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/README.md, + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, +    Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/README.md, + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, +    Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft14Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.http;, +, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.PushPromise;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import java.util.Arrays;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class HttpOverHttp20Draft14Test extends HttpOverSpdyTest {, +, +  public HttpOverHttp20Draft14Test() {, +    super(Protocol.HTTP_2);, +    this.hostHeader = ":authority";, +  }, +, +  @Test public void serverSendsPushPromise_GET() throws Exception {, +    MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet"), +        .withPush(new PushPromise("GET", "/foo/bar", Arrays.asList("foo: bar"),, +            new MockResponse().setBody("bar").setStatus("HTTP/1.1 200 Sweet")));, +    server.enqueue(response);, +    server.play();, +, +    connection = client.open(server.getUrl("/foo"));, +    assertContent("ABCDE", connection, Integer.MAX_VALUE);, +    assertEquals(200, connection.getResponseCode());, +    assertEquals("Sweet", connection.getResponseMessage());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /foo HTTP/1.1", request.getRequestLine());, +    assertContains(request.getHeaders(), ":scheme: https");, +    assertContains(request.getHeaders(), hostHeader + ": ", +        + server.getHostName() + ":" + server.getPort());, +, +    RecordedRequest pushedRequest = server.takeRequest();, +    assertEquals("GET /foo/bar HTTP/1.1", pushedRequest.getRequestLine());, +    assertEquals(Arrays.asList("foo: bar"), pushedRequest.getHeaders());, +  }, +, +  @Test public void serverSendsPushPromise_HEAD() throws Exception {, +    MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet"), +        .withPush(new PushPromise("HEAD", "/foo/bar", Arrays.asList("foo: bar"),, +            new MockResponse().setStatus("HTTP/1.1 204 Sweet")));, +    server.enqueue(response);, +    server.play();, +, +    connection = client.open(server.getUrl("/foo"));, +    assertContent("ABCDE", connection, Integer.MAX_VALUE);, +    assertEquals(200, connection.getResponseCode());, +    assertEquals("Sweet", connection.getResponseMessage());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /foo HTTP/1.1", request.getRequestLine());, +    assertContains(request.getHeaders(), ":scheme: https");, +    assertContains(request.getHeaders(), hostHeader + ": "]
[+++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/src/main/java/okhttp3/internal/SslContextBuilder.java, + * Constructs an SSL context for testing. This uses Bouncy Castle to generate a self-signed, + * certificate for a single hostname such as "localhost"., + * <p>The crypto performed by this class is relatively slow. Clients should reuse SSL context, + * instances where possible., +   * @param hostName the subject of the host. For TLS this should be the domain name that the client, +   * uses to identify the server., +   * Generates a certificate for {@code hostName} containing {@code keyPair}'s public key, signed by, +   * {@code keyPair}'s private key., +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/src/main/java/okhttp3/internal/SslContextBuilder.java, + * Constructs an SSL context for testing. This uses Bouncy Castle to generate a self-signed, + * certificate for a single hostname such as "localhost"., + * <p>The crypto performed by this class is relatively slow. Clients should reuse SSL context, + * instances where possible., +   * @param hostName the subject of the host. For TLS this should be the domain name that the client, +   * uses to identify the server., +   * Generates a certificate for {@code hostName} containing {@code keyPair}'s public key, signed by, +   * {@code keyPair}'s private key., +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.Protocol;, +import okhttp3.internal.Platform;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.internal.Util;, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/src/main/java/okhttp3/internal/SslContextBuilder.java, + * Constructs an SSL context for testing. This uses Bouncy Castle to generate a self-signed, + * certificate for a single hostname such as "localhost"., + * <p>The crypto performed by this class is relatively slow. Clients should reuse SSL context, + * instances where possible., +   * @param hostName the subject of the host. For TLS this should be the domain name that the client, +   * uses to identify the server., +   * Generates a certificate for {@code hostName} containing {@code keyPair}'s public key, signed by, +   * {@code keyPair}'s private key., +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.Protocol;, +import okhttp3.internal.Platform;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.internal.Util;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +   * Returns a response to satisfy {@code request}. This method may block (for instance, to wait on, +   * a CountdownLatch)., +   * Returns an early guess of the next response, used for policy on how an incoming request should, +   * be received. The default implementation returns an empty response. Mischievous implementations, +   * can return other values to test HTTP edge cases, such as unhappy socket policies or throttled, +   * request bodies., +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/src/main/java/okhttp3/internal/SslContextBuilder.java, + * Constructs an SSL context for testing. This uses Bouncy Castle to generate a self-signed, + * certificate for a single hostname such as "localhost"., + * <p>The crypto performed by this class is relatively slow. Clients should reuse SSL context, + * instances where possible., +   * @param hostName the subject of the host. For TLS this should be the domain name that the client, +   * uses to identify the server., +   * Generates a certificate for {@code hostName} containing {@code keyPair}'s public key, signed by, +   * {@code keyPair}'s private key., +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.Protocol;, +import okhttp3.internal.Platform;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.internal.Util;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +   * Returns a response to satisfy {@code request}. This method may block (for instance, to wait on, +   * a CountdownLatch)., +   * Returns an early guess of the next response, used for policy on how an incoming request should, +   * be received. The default implementation returns an empty response. Mischievous implementations, +   * can return other values to test HTTP edge cases, such as unhappy socket policies or throttled, +   * request bodies., +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +   * Removes all HTTP headers including any "Content-Length" and "Transfer-encoding" headers that, +   * were added by default., +   * Adds {@code header} as an HTTP header. For well-formed HTTP {@code header} should contain a, +   * name followed by a colon and a value., +   * Adds a new header with the name and value. This may be used to add multiple headers with the, +   * same name., +   * Adds a new header with the name and value. This may be used to add multiple headers with the, +   * same name. Unlike {@link #addHeader(String, Object)} this does not validate the name and, +   * value., +   * Removes all headers named {@code name}, then adds a new header with the name and value., +   * Sets the response body to {@code body}, chunked every {@code maxChunkSize} bytes.]
[+++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.ws.WebSocketListener;, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.ws.WebSocketListener;, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.ws.WebSocketListener;, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +  private static final RequestBody EMPTY_REQUEST_BODY = RequestBody.create(null, new byte[0]);, +, +        ? EMPTY_REQUEST_BODY, +        ? EMPTY_REQUEST_BODY, +++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.ws.WebSocketListener;, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +  private static final RequestBody EMPTY_REQUEST_BODY = RequestBody.create(null, new byte[0]);, +, +        ? EMPTY_REQUEST_BODY, +        ? EMPTY_REQUEST_BODY, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +        body = RequestBody.create(null, new byte[0]);, +++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.ws.WebSocketListener;, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +  private static final RequestBody EMPTY_REQUEST_BODY = RequestBody.create(null, new byte[0]);, +, +        ? EMPTY_REQUEST_BODY, +        ? EMPTY_REQUEST_BODY, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +        body = RequestBody.create(null, new byte[0]);, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +        .signedBy(serverCa), +        .signedBy(clientCa), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +        .signedBy(serverCa), +        .signedBy(clientCa), +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +        .signedBy(root), +        .signedBy(certA), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(certB), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(certB), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(selfSigned), +        .signedBy(trusted), +        .signedBy(certA), +        .signedBy(unknownSigner), +        .signedBy(trusted), +        .signedBy(intermediateCa), +          .signedBy(!result.isEmpty() ? result.get(0) : null), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +        .signedBy(serverCa), +        .signedBy(clientCa), +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +        .signedBy(root), +        .signedBy(certA), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(certB), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(certB), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(selfSigned), +        .signedBy(trusted), +        .signedBy(certA), +        .signedBy(unknownSigner), +        .signedBy(trusted), +        .signedBy(intermediateCa), +          .signedBy(!result.isEmpty() ? result.get(0) : null), +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +        .signedBy(rootCa), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +        .signedBy(serverCa), +        .signedBy(clientCa), +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +        .signedBy(root), +        .signedBy(certA), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(certB), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(certB), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(selfSigned), +        .signedBy(trusted), +        .signedBy(certA), +        .signedBy(unknownSigner), +        .signedBy(trusted), +        .signedBy(intermediateCa), +          .signedBy(!result.isEmpty() ? result.get(0) : null), +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +        .signedBy(rootCa), +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java, +        .signedBy(rootCa), +        .signedBy(intermediateCa), +        .signedBy(rootCa), +        .signedBy(intermediateCa), +        .signedBy(rootCa), +        .signedBy(goodIntermediateCa), +        .signedBy(rootCa), +        .signedBy(compromisedIntermediateCa), +        .signedBy(rootCa), +        .signedBy(compromisedRootCa), +        .signedBy(compromisedIntermediateCa), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +        .signedBy(serverCa), +        .signedBy(clientCa), +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +        .signedBy(root), +        .signedBy(certA), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(root), +        .signedBy(certA), +        .signedBy(certB), +        .signedBy(root)]
[+++ b/benchmarks/pom.xml, +    <dependency>, +      <groupId>io.netty</groupId>, +      <artifactId>netty-transport</artifactId>, +      <version>4.0.15.Final</version>, +    </dependency>, +    <dependency>, +      <groupId>io.netty</groupId>, +      <artifactId>netty-handler</artifactId>, +      <version>4.0.15.Final</version>, +    </dependency>, +    <dependency>, +      <groupId>io.netty</groupId>, +      <artifactId>netty-codec-http</artifactId>, +      <version>4.0.15.Final</version>, +    </dependency>, +++ b/benchmarks/pom.xml, +    <dependency>, +      <groupId>io.netty</groupId>, +      <artifactId>netty-transport</artifactId>, +      <version>4.0.15.Final</version>, +    </dependency>, +    <dependency>, +      <groupId>io.netty</groupId>, +      <artifactId>netty-handler</artifactId>, +      <version>4.0.15.Final</version>, +    </dependency>, +    <dependency>, +      <groupId>io.netty</groupId>, +      <artifactId>netty-codec-http</artifactId>, +      <version>4.0.15.Final</version>, +    </dependency>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.benchmarks;, +, +import com.squareup.okhttp.internal.SslContextBuilder;, +import java.io.IOException;, +import java.io.InputStream;, +import java.net.URL;, +import java.util.concurrent.TimeUnit;, +import java.util.zip.GZIPInputStream;, +import javax.net.ssl.SSLContext;, +import org.apache.http.Header;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.conn.ClientConnectionManager;, +import org.apache.http.conn.scheme.Scheme;, +import org.apache.http.conn.ssl.SSLSocketFactory;, +import org.apache.http.impl.client.DefaultHttpClient;, +import org.apache.http.impl.conn.PoolingClientConnectionManager;, +, +/** Benchmark Apache HTTP client. */, +class ApacheHttpClient extends SynchronousHttpClient {, +  private static final boolean VERBOSE = false;, +, +  private HttpClient client;, +, +  @Override public void prepare(Benchmark benchmark) {, +    super.prepare(benchmark);, +    ClientConnectionManager connectionManager = new PoolingClientConnectionManager();, +    if (benchmark.tls) {, +      SSLContext sslContext = SslContextBuilder.localhost();, +      connectionManager.getSchemeRegistry().register(, +          new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +    }, +    client = new DefaultHttpClient(connectionManager);, +  }, +, +  @Override public Runnable request(URL url) {, +    return new ApacheHttpClientRequest(url);, +  }, +, +  class ApacheHttpClientRequest implements Runnable {, +    private final URL url;, +, +    public ApacheHttpClientRequest(URL url) {, +      this.url = url;, +    }, +, +    public void run() {, +      byte[] buffer = new byte[1024];, +      long start = System.nanoTime();, +      try {, +        HttpResponse response = client.execute(new HttpGet(url.toString()));]
[+++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is, +    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, +    used `Throwable`., + *  Fix: Fixed a caching bug where we weren't storing rewritten request headers, +    like `Accept-Encoding`., + *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, +    large downloads, + *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.), +, +++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is, +    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, +    used `Throwable`., + *  Fix: Fixed a caching bug where we weren't storing rewritten request headers, +    like `Accept-Encoding`., + *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, +    large downloads, + *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.), +, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is, +    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, +    used `Throwable`., + *  Fix: Fixed a caching bug where we weren't storing rewritten request headers, +    like `Accept-Encoding`., + *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, +    large downloads, + *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.), +, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is, +    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, +    used `Throwable`., + *  Fix: Fixed a caching bug where we weren't storing rewritten request headers, +    like `Accept-Encoding`., + *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, +    large downloads, + *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.), +, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is, +    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, +    used `Throwable`., + *  Fix: Fixed a caching bug where we weren't storing rewritten request headers, +    like `Accept-Encoding`., + *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, +    large downloads, + *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.), +, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml]
[+++ b/benchmarks/pom.xml, +        <version>1.5.0</version>, +            <version>1.15</version>, +++ b/benchmarks/pom.xml, +        <version>1.5.0</version>, +            <version>1.15</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/benchmarks/pom.xml, +        <version>1.5.0</version>, +            <version>1.15</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/benchmarks/pom.xml, +        <version>1.5.0</version>, +            <version>1.15</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/benchmarks/pom.xml, +        <version>1.5.0</version>, +            <version>1.15</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/benchmarks/pom.xml, +        <version>1.5.0</version>, +            <version>1.15</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-logging-interceptor/pom.xml, +        <version>3.0.2</version>, +++ b/benchmarks/pom.xml, +        <version>1.5.0</version>, +            <version>1.15</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-logging-interceptor/pom.xml, +        <version>3.0.2</version>, +++ b/okhttp-testing-support/pom.xml, +        <version>3.0.2</version>, +++ b/benchmarks/pom.xml, +        <version>1.5.0</version>, +            <version>1.15</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>]
[+++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +Version 1.1.0 *(2013-06-15)*, +----------------------------, +, + * Fix: Connection reuse was broken for most HTTPS connections due to a bug in, +   the way the hostname verifier was selected., + * Fix: Locking bug in SpdyConnection., + * Fix: Ignore null header values (for compatibility with HttpURLConnection)., + * Add URLStreamHandlerFactory support so that `URL.openConnection()` uses, +   OkHttp., + * Expose the transport ("http/1.1", "spdy/3", etc.) via magic request headers., +   Use `X-Android-Transports` to write the preferred transports and, +   `X-Android-Selected-Transport` to read the negotiated transport., +, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +Version 1.1.0 *(2013-06-15)*, +----------------------------, +, + * Fix: Connection reuse was broken for most HTTPS connections due to a bug in, +   the way the hostname verifier was selected., + * Fix: Locking bug in SpdyConnection., + * Fix: Ignore null header values (for compatibility with HttpURLConnection)., + * Add URLStreamHandlerFactory support so that `URL.openConnection()` uses, +   OkHttp., + * Expose the transport ("http/1.1", "spdy/3", etc.) via magic request headers., +   Use `X-Android-Transports` to write the preferred transports and, +   `X-Android-Selected-Transport` to read the negotiated transport., +, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +Version 1.1.0 *(2013-06-15)*, +----------------------------, +, + * Fix: Connection reuse was broken for most HTTPS connections due to a bug in, +   the way the hostname verifier was selected., + * Fix: Locking bug in SpdyConnection., + * Fix: Ignore null header values (for compatibility with HttpURLConnection)., + * Add URLStreamHandlerFactory support so that `URL.openConnection()` uses, +   OkHttp., + * Expose the transport ("http/1.1", "spdy/3", etc.) via magic request headers., +   Use `X-Android-Transports` to write the preferred transports and, +   `X-Android-Selected-Transport` to read the negotiated transport., +, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler) throws IOException {, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler, HttpContext context) throws IOException {, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +Version 1.1.0 *(2013-06-15)*, +----------------------------, +, + * Fix: Connection reuse was broken for most HTTPS connections due to a bug in, +   the way the hostname verifier was selected., + * Fix: Locking bug in SpdyConnection., + * Fix: Ignore null header values (for compatibility with HttpURLConnection)., + * Add URLStreamHandlerFactory support so that `URL.openConnection()` uses, +   OkHttp., + * Expose the transport ("http/1.1", "spdy/3", etc.) via magic request headers., +   Use `X-Android-Transports` to write the preferred transports and, +   `X-Android-Selected-Transport` to read the negotiated transport., +, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler) throws IOException {, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler, HttpContext context) throws IOException {]
[+++ b/pom.xml, +    <okio.version>1.13.0</okio.version>]
[+++ b/okhttp-apache/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.0.3-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.io.Closeable;, +  Closeable deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.io.Closeable;, +  Closeable deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.io.Closeable;, +      @Override public Closeable deduplicate(, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.io.Closeable;, +  Closeable deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.io.Closeable;, +      @Override public Closeable deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.io.Closeable;, +  public abstract Closeable deduplicate(, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.io.Closeable;, +  Closeable deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.io.Closeable;, +      @Override public Closeable deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.io.Closeable;, +  public abstract Closeable deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +import java.io.Closeable;, +    Closeable closeable = null;, +        closeable = Internal.instance.deduplicate(connectionPool, address, this);, +    closeQuietly(closeable);, +    Closeable closeable;, +      closeable = deallocate(noNewStreams, false, true);, +    closeQuietly(closeable);, +    Closeable closeable;, +      closeable = deallocate(false, true, false);, +    closeQuietly(closeable);, +    Closeable closeable;, +      closeable = deallocate(true, false, false);, +    closeQuietly(closeable);, +  private Closeable deallocate(boolean noNewStreams, boolean released, boolean streamFinished) {, +    Closeable closeable = null;, +            closeable = connection.socket();, +    return closeable;, +    Closeable closeable;, +      closeable = deallocate(noNewStreams, false, true);, +    closeQuietly(closeable);, +  public Closeable releaseAndAcquire(RealConnection newConnection) {, +    Closeable closeable = deallocate(true, false, false);, +    return closeable;, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.io.Closeable;, +  Closeable deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.io.Closeable;, +      @Override public Closeable deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.io.Closeable;, +  public abstract Closeable deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +import java.io.Closeable;, +    Closeable closeable = null;, +        closeable = Internal.instance.deduplicate(connectionPool, address, this);, +    closeQuietly(closeable);, +    Closeable closeable;, +      closeable = deallocate(noNewStreams, false, true);, +    closeQuietly(closeable);, +    Closeable closeable;, +      closeable = deallocate(false, true, false);, +    closeQuietly(closeable);, +    Closeable closeable;, +      closeable = deallocate(true, false, false);, +    closeQuietly(closeable);, +  private Closeable deallocate(boolean noNewStreams, boolean released, boolean streamFinished) {, +    Closeable closeable = null;, +            closeable = connection.socket();, +    return closeable;, +    Closeable closeable;, +      closeable = deallocate(noNewStreams, false, true);, +    closeQuietly(closeable);, +  public Closeable releaseAndAcquire(RealConnection newConnection) {, +    Closeable closeable = deallocate(true, false, false);, +    return closeable;, +++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_121</id>, +      <activation>, +        <jdk>1.8.0_121</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ b/benchmarks/pom.xml, +    <version>3.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0</version>]
[+++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, +  1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., +  2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, +  1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., +  2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/pom.xml, +  <build>, +    <plugins>, +    <plugin>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>exec-maven-plugin</artifactId>, +      <executions>, +        <execution>, +          <goals>, +            <goal>java</goal>, +          </goals>, +        </execution>, +      </executions>, +      <configuration>, +        <executable>java</executable>, +        <arguments>, +          <argument>-Xms512m</argument>, +          <argument>-Xmx512m</argument>, +          <commandlineArgs>-Xbootclasspath/p:${settings.localRepository}/org/mortbay/jetty/npn/npn-boot/${npn.version}/npn-boot-${npn.version}.jar</commandlineArgs>, +          <argument>-classpath</argument>, +          <classpath/>, +          <argument>com.squareup.okhttp.benchmarks.Benchmark</argument>, +        </arguments>, +      </configuration>, +    </plugin>, +    </plugins>, +  </build>, +++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, +  1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., +  2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/pom.xml, +  <build>, +    <plugins>, +    <plugin>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>exec-maven-plugin</artifactId>, +      <executions>, +        <execution>, +          <goals>, +            <goal>java</goal>, +          </goals>, +        </execution>, +      </executions>, +      <configuration>, +        <executable>java</executable>, +        <arguments>, +          <argument>-Xms512m</argument>, +          <argument>-Xmx512m</argument>, +          <commandlineArgs>-Xbootclasspath/p:${settings.localRepository}/org/mortbay/jetty/npn/npn-boot/${npn.version}/npn-boot-${npn.version}.jar</commandlineArgs>, +          <argument>-classpath</argument>, +          <classpath/>, +          <argument>com.squareup.okhttp.benchmarks.Benchmark</argument>, +        </arguments>, +      </configuration>, +    </plugin>, +    </plugins>, +  </build>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +      byte[] buffer = new byte[1024];, +        // Consume the response body., +        int total = 0;, +        for (int count; (count = in.read(buffer)) != -1; ) {, +          total += count;, +        }, +        in.close();, +++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, +  1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., +  2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/pom.xml, +  <build>]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, +    server.start();, +    byte[] bytes = new byte[bodyByteCount];, +    random.nextBytes(bytes);, +    Buffer body = new Buffer().write(bytes);, +      Buffer gzipBody = new Buffer();, +      GzipSink gzipSink = new GzipSink(gzipBody);, +      gzipSink.write(body, body.size());, +      gzipSink.close();, +      body = gzipBody;, +      result.setChunkedBody(body, 1024);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, +    server.start();, +    byte[] bytes = new byte[bodyByteCount];, +    random.nextBytes(bytes);, +    Buffer body = new Buffer().write(bytes);, +      Buffer gzipBody = new Buffer();, +      GzipSink gzipSink = new GzipSink(gzipBody);, +      gzipSink.write(body, body.size());, +      gzipSink.close();, +      body = gzipBody;, +      result.setChunkedBody(body, 1024);, +++ b/mockwebserver/README.md, +  server.start();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, +    server.start();, +    byte[] bytes = new byte[bodyByteCount];, +    random.nextBytes(bytes);, +    Buffer body = new Buffer().write(bytes);, +      Buffer gzipBody = new Buffer();, +      GzipSink gzipSink = new GzipSink(gzipBody);, +      gzipSink.write(body, body.size());, +      gzipSink.close();, +      body = gzipBody;, +      result.setChunkedBody(body, 1024);, +++ b/mockwebserver/README.md, +  server.start();, +++ b/mockwebserver/pom.xml, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +            <link>http://square.github.io/okio/</link>, +          </links>, +        </configuration>, +      </plugin>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, +    server.start();, +    byte[] bytes = new byte[bodyByteCount];, +    random.nextBytes(bytes);, +    Buffer body = new Buffer().write(bytes);, +      Buffer gzipBody = new Buffer();, +      GzipSink gzipSink = new GzipSink(gzipBody);, +      gzipSink.write(body, body.size());, +      gzipSink.close();, +      body = gzipBody;, +      result.setChunkedBody(body, 1024);, +++ b/mockwebserver/README.md, +  server.start();, +++ b/mockwebserver/pom.xml, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +            <link>http://square.github.io/okio/</link>, +          </links>, +        </configuration>, +      </plugin>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, +    server.start();, +    byte[] bytes = new byte[bodyByteCount];, +    random.nextBytes(bytes);, +    Buffer body = new Buffer().write(bytes);, +      Buffer gzipBody = new Buffer();, +      GzipSink gzipSink = new GzipSink(gzipBody);, +      gzipSink.write(body, body.size());, +      gzipSink.close();, +      body = gzipBody;, +      result.setChunkedBody(body, 1024);, +++ b/mockwebserver/README.md, +  server.start();, +++ b/mockwebserver/pom.xml, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +            <link>http://square.github.io/okio/</link>, +          </links>, +        </configuration>, +      </plugin>]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import java.io.InterruptedIOException;, +import static org.junit.Assert.assertTrue;, +  @Test public void threadIsInterruptedOnFirstRead() {, +    Thread.currentThread().interrupt();, +    try {, +      String result = publicSuffixDatabase.getEffectiveTldPlusOne("squareup.com");, +      assertEquals("squareup.com", result);, +    } finally {, +      assertTrue(Thread.interrupted());, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import java.io.InterruptedIOException;, +import static org.junit.Assert.assertTrue;, +  @Test public void threadIsInterruptedOnFirstRead() {, +    Thread.currentThread().interrupt();, +    try {, +      String result = publicSuffixDatabase.getEffectiveTldPlusOne("squareup.com");, +      assertEquals("squareup.com", result);, +    } finally {, +      assertTrue(Thread.interrupted());, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +import java.io.InterruptedIOException;, +      readTheListUninterruptibly();, +  /**, +   * Reads the public suffix list treating the operation as uninterruptible. We always want to read, +   * the list otherwise we'll be left in a bad state. If the thread was interrupted prior to this, +   * operation, it will be re-interrupted after the list is read., +   */, +  private void readTheListUninterruptibly() {, +    boolean interrupted = false;, +    try {, +      while (true) {, +        try {, +          readTheList();, +          return;, +        } catch (InterruptedIOException e) {, +          interrupted = true;, +        } catch (IOException e) {, +          Platform.get().log(Platform.WARN, "Failed to read public suffix list", e);, +          return;, +        }, +      }, +    } finally {, +      if (interrupted) {, +        Thread.currentThread().interrupt();, +      }, +    }, +  }, +  private void readTheList() throws IOException {, +    byte[] publicSuffixListBytes;, +    byte[] publicSuffixExceptionListBytes;, +, +    InputStream resource = PublicSuffixDatabase.class.getClassLoader().getResourceAsStream(, +    if (resource == null) return;, +    BufferedSource bufferedSource = Okio.buffer(new GzipSource(Okio.source(resource)));]
[+++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>]
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +      unknownHostException.addSuppressed(failures.get(i));, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +      unknownHostException.addSuppressed(failures.get(i));, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +      unknownHostException.addSuppressed(failures.get(i));, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.java, +    firstException.addSuppressed(e);]
[+++ /dev/null, +++ /dev/null, +++ b/benchmarks/pom.xml, +++ /dev/null, +++ b/benchmarks/pom.xml, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +++ /dev/null, +++ b/benchmarks/pom.xml, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java, +import io.netty.buffer.PooledByteBufAllocator;, +import io.netty.channel.ChannelOption;, +        .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT), +++ /dev/null, +++ b/benchmarks/pom.xml, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java, +import io.netty.buffer.PooledByteBufAllocator;, +import io.netty.channel.ChannelOption;, +        .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT), +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            // TODO: expose means to select which protocols to advertise., +            Platform.get().setNpnProtocols(sslSocket, Protocol.HTTP2_SPDY3_AND_HTTP);, +++ /dev/null, +++ b/benchmarks/pom.xml, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java, +import io.netty.buffer.PooledByteBufAllocator;, +import io.netty.channel.ChannelOption;, +        .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT), +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            // TODO: expose means to select which protocols to advertise., +            Platform.get().setNpnProtocols(sslSocket, Protocol.HTTP2_SPDY3_AND_HTTP);, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.setNpnEnabled(true);]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.security.cert.Certificate;, +import java.util.ArrayList;, +import java.util.List;, +import javax.net.ssl.SSLPeerUnverifiedException;, +import okhttp3.internal.HeldCertificate;, +import okhttp3.internal.tls.CertificateChainCleaner;, +import okhttp3.internal.tls.RealTrustRootIndex;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public final class CertificateChainCleanerTest {, +  @Test public void normalizeSingleSelfSignedCertificate() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    CertificateChainCleaner council = new CertificateChainCleaner(, +        new RealTrustRootIndex(root.certificate));, +    assertEquals(list(root), council.clean(list(root)));, +  }, +, +  @Test public void normalizeUnknownSelfSignedCertificate() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    CertificateChainCleaner council = new CertificateChainCleaner(new RealTrustRootIndex());, +, +    try {, +      council.clean(list(root));, +      fail();, +    } catch (SSLPeerUnverifiedException expected) {, +    }, +  }, +, +  @Test public void orderedChainOfCertificatesWithRoot() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    HeldCertificate certA = new HeldCertificate.Builder(), +        .serialNumber("2"), +        .issuedBy(root), +        .build();, +    HeldCertificate certB = new HeldCertificate.Builder(), +        .serialNumber("3"), +        .issuedBy(certA), +        .build();, +, +    CertificateChainCleaner council = new CertificateChainCleaner(, +        new RealTrustRootIndex(root.certificate));, +    assertEquals(list(certB, certA, root), council.clean(list(certB, certA, root)));, +  }, +, +  @Test public void orderedChainOfCertificatesWithoutRoot() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    HeldCertificate certA = new HeldCertificate.Builder(), +        .serialNumber("2"), +        .issuedBy(root), +        .build();, +    HeldCertificate certB = new HeldCertificate.Builder(), +        .serialNumber("3"), +        .issuedBy(certA), +        .build();, +, +    CertificateChainCleaner council = new CertificateChainCleaner(, +        new RealTrustRootIndex(root.certificate));, +    assertEquals(list(certB, certA, root), council.clean(list(certB, certA))); // Root is added!, +  }, +, +  @Test public void unorderedChainOfCertificatesWithRoot() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    HeldCertificate certA = new HeldCertificate.Builder(), +        .serialNumber("2"), +        .issuedBy(root), +        .build();, +    HeldCertificate certB = new HeldCertificate.Builder()]
[+++ b/.github/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1]., +, +, + [1]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1, +++ b/.github/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1]., +, +, + [1]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1, +++ b/.github/ISSUE_TEMPLATE.md, +What kind of issue is this?, +, + - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do, +       something, or to understand why something isn't working the way you expect it to, use Stack, +       Overflow. https://stackoverflow.com/questions/tagged/okhttp, +, + - [ ] Bug report. If you’ve found a bug, spend the time to write a failing test. Bugs with tests, +       get fixed. Here’s an example: https://gist.github.com/swankjesse/981fcae102f513eb13ed, +, + - [ ] Feature Request. Start by telling us what problem you’re trying to solve. Often a solution, +       already exists! Don’t send pull requests to implement new features without first getting our, +       support. Sometimes we leave features out on purpose to keep the project small., +++ b/.github/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1]., +, +, + [1]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1, +++ b/.github/ISSUE_TEMPLATE.md, +What kind of issue is this?, +, + - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do, +       something, or to understand why something isn't working the way you expect it to, use Stack, +       Overflow. https://stackoverflow.com/questions/tagged/okhttp, +, + - [ ] Bug report. If you’ve found a bug, spend the time to write a failing test. Bugs with tests, +       get fixed. Here’s an example: https://gist.github.com/swankjesse/981fcae102f513eb13ed, +, + - [ ] Feature Request. Start by telling us what problem you’re trying to solve. Often a solution, +       already exists! Don’t send pull requests to implement new features without first getting our, +       support. Sometimes we leave features out on purpose to keep the project small., +++ /dev/null]
[+++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>org.conscrypt</groupId>, +      <artifactId>conscrypt-openjdk-uber</artifactId>, +      <version>1.0.1</version>, +    </dependency>, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>org.conscrypt</groupId>, +      <artifactId>conscrypt-openjdk-uber</artifactId>, +      <version>1.0.1</version>, +    </dependency>, +++ b/okhttp-tests/src/test/java/okhttp3/ConscryptTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.security.Security;, +import java.util.Arrays;, +import okhttp3.internal.platform.ConscryptPlatform;, +import okhttp3.internal.platform.Platform;, +import org.conscrypt.OpenSSLProvider;, +import org.junit.Assume;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +, +public class ConscryptTest {, +  public static final CipherSuite[] MANDATORY_CIPHER_SUITES = new CipherSuite[] {, +      CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,, +      CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,, +      CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,, +      CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,, +      CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,, +      CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, +  };, +, +  private OkHttpClient client = buildClient();, +, +  private OkHttpClient buildClient() {, +    ConnectionSpec spec = new ConnectionSpec.Builder(true), +        .cipherSuites(MANDATORY_CIPHER_SUITES) // Check we are using strong ciphers, +        .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2) // and modern TLS, +        .supportsTlsExtensions(true), +        .build();, +, +    return new OkHttpClient.Builder().connectionSpecs(Arrays.asList(spec)).build();, +  }, +, +  private static void assumeConscrypt() {, +    Assume.assumeTrue("conscrypt".equals(System.getProperty("okhttp.platform")));, +  }, +, +  private static void assumeNetwork() {, +    try {, +      InetAddress.getByName("www.google.com");, +    } catch (UnknownHostException uhe) {, +      Assume.assumeNoException(uhe);, +    }, +  }, +, +  @Test, +  public void testMozilla() throws IOException {, +    assumeNetwork();, +    assumeConscrypt();, +, +    Request request = new Request.Builder().url("https://mozilla.org/robots.txt").build();, +, +    Response response = client.newCall(request).execute();, +, +    assertEquals(Protocol.HTTP_2, response.protocol());, +  }, +, +  @Test, +  public void testGoogle() throws IOException {, +    assumeNetwork();, +    assumeConscrypt();, +, +    Request request = new Request.Builder().url("https://google.com/robots.txt").build();, +, +    Response response = client.newCall(request).execute();, +]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +      addHeaderLenient(headers, header);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +      addHeaderLenient(headers, header);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, ": A");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +      addHeaderLenient(headers, header);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, ": A");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +  private final RecordingEventListener listener = new RecordingEventListener();, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    server.enqueue(new MockResponse().setBody("retry success"));, +    Headers.Builder headersBuilder = new Headers.Builder();, +    headersBuilder.add("Content-Length", "0");, +    addHeaderLenient(headersBuilder, "a\tb: c\u007fd");, +    addHeaderLenient(headersBuilder, ": ef");, +    addHeaderLenient(headersBuilder, "\ud83c\udf69: \u2615\ufe0f");, +    Headers headers = headersBuilder.build();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +      addHeaderLenient(headers, header);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, ": A");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +  private final RecordingEventListener listener = new RecordingEventListener();, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    server.enqueue(new MockResponse().setBody("retry success"));, +    Headers.Builder headersBuilder = new Headers.Builder();, +    headersBuilder.add("Content-Length", "0");, +    addHeaderLenient(headersBuilder, "a\tb: c\u007fd");, +    addHeaderLenient(headersBuilder, ": ef");, +    addHeaderLenient(headersBuilder, "\ud83c\udf69: \u2615\ufe0f");, +    Headers headers = headersBuilder.build();, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    } catch (NullPointerException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +      addHeaderLenient(headers, header);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, ": A");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +  private final RecordingEventListener listener = new RecordingEventListener();, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    server.enqueue(new MockResponse().setBody("retry success"));, +    Headers.Builder headersBuilder = new Headers.Builder();, +    headersBuilder.add("Content-Length", "0");, +    addHeaderLenient(headersBuilder, "a\tb: c\u007fd");, +    addHeaderLenient(headersBuilder, ": ef");, +    addHeaderLenient(headersBuilder, "\ud83c\udf69: \u2615\ufe0f");, +    Headers headers = headersBuilder.build();, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    } catch (NullPointerException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +++ b/okhttp-tests/src/test/java/okhttp3/RequestTest.java, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the]
[+++ b/src/main/java/com/squareup/okhttp/ExtendedResponseCache.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp;, +, +import java.io.IOException;, +import java.net.CacheResponse;, +import java.net.HttpURLConnection;, +, +/**, + * A response cache that supports statistics tracking and updating stored, + * responses. Implementations of {@link java.net.ResponseCache} should implement this, + * interface to receive additional support from the HTTP engine., + */, +public interface ExtendedResponseCache {, +, +    /**, +     * Track an HTTP response being satisfied by {@code source}., +     */, +    void trackResponse(ResponseSource source);, +, +    /**, +     * Track an conditional GET that was satisfied by this cache., +     */, +    void trackConditionalCacheHit();, +, +    /**, +     * Updates stored HTTP headers using a hit on a conditional GET., +     */, +    void update(CacheResponse conditionalCacheHit, HttpURLConnection httpConnection), +            throws IOException;, +}, +++ b/src/main/java/com/squareup/okhttp/ExtendedResponseCache.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp;, +, +import java.io.IOException;, +import java.net.CacheResponse;, +import java.net.HttpURLConnection;, +, +/**, + * A response cache that supports statistics tracking and updating stored, + * responses. Implementations of {@link java.net.ResponseCache} should implement this, + * interface to receive additional support from the HTTP engine., + */, +public interface ExtendedResponseCache {, +, +    /**, +     * Track an HTTP response being satisfied by {@code source}., +     */, +    void trackResponse(ResponseSource source);, +, +    /**, +     * Track an conditional GET that was satisfied by this cache., +     */, +    void trackConditionalCacheHit();, +, +    /**, +     * Updates stored HTTP headers using a hit on a conditional GET., +     */, +    void update(CacheResponse conditionalCacheHit, HttpURLConnection httpConnection), +            throws IOException;, +}, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import java.net.CookieHandler;, +import java.net.ProxySelector;, +import java.net.ResponseCache;, +    private ProxySelector proxySelector;, +    private CookieHandler cookieHandler;, +    private ResponseCache responseCache;, +    /**]
[+++ b/pom.xml, +    <version>20121111</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()), null);, +        stream.close(ErrorCode.NO_ERROR, null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()), null);, +        stream.close(ErrorCode.NO_ERROR, null);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    // TODO https://github.com/square/okhttp/issues/4703, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()), null);, +        stream.close(ErrorCode.NO_ERROR, null);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    // TODO https://github.com/square/okhttp/issues/4703, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import java.io.EOFException;, +  @Rule public final TestRule timeout = new Timeout(5_000, TimeUnit.MILLISECONDS);, +    stream1.close(ErrorCode.CANCEL, null);, +    } catch (EOFException expected) {, +      assertEquals("Expected a SETTINGS frame but was 1", expected.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()), null);, +        stream.close(ErrorCode.NO_ERROR, null);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    // TODO https://github.com/square/okhttp/issues/4703, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import java.io.EOFException;, +  @Rule public final TestRule timeout = new Timeout(5_000, TimeUnit.MILLISECONDS);, +    stream1.close(ErrorCode.CANCEL, null);, +    } catch (EOFException expected) {, +      assertEquals("Expected a SETTINGS frame but was 1", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java, +    // TODO https://github.com/square/okhttp/issues/4703, +    // TODO https://github.com/square/okhttp/issues/4703, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()), null);, +        stream.close(ErrorCode.NO_ERROR, null);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    // TODO https://github.com/square/okhttp/issues/4703, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import java.io.EOFException;, +  @Rule public final TestRule timeout = new Timeout(5_000, TimeUnit.MILLISECONDS);, +    stream1.close(ErrorCode.CANCEL, null);, +    } catch (EOFException expected) {, +      assertEquals("Expected a SETTINGS frame but was 1", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java, +    // TODO https://github.com/square/okhttp/issues/4703, +    // TODO https://github.com/square/okhttp/issues/4703, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +    stream.close(ErrorCode.REFUSED_STREAM, null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()), null);, +        stream.close(ErrorCode.NO_ERROR, null);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    // TODO https://github.com/square/okhttp/issues/4703, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import java.io.EOFException;, +  @Rule public final TestRule timeout = new Timeout(5_000, TimeUnit.MILLISECONDS);, +    stream1.close(ErrorCode.CANCEL, null);, +    } catch (EOFException expected) {, +      assertEquals("Expected a SETTINGS frame but was 1", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java, +    // TODO https://github.com/square/okhttp/issues/4703, +    // TODO https://github.com/square/okhttp/issues/4703, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +    stream.close(ErrorCode.REFUSED_STREAM, null);, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +import javax.annotation.Nullable;, +            failConnection(e);, +                failConnection(e);, +        failConnection(null);, +      failConnection(e);, +  @Override public void close() {, +    close(ErrorCode.NO_ERROR, ErrorCode.CANCEL, null);, +  void close(ErrorCode connectionCode, ErrorCode streamCode, @Nullable IOException cause) {, +    } catch (IOException ignored) {, +          stream.close(streamCode, cause);, +        } catch (IOException ignored) {, +    } catch (IOException ignored) {, +    } catch (IOException ignored) {, +  private void failConnection(@Nullable IOException e) {, +    close(ErrorCode.PROTOCOL_ERROR, ErrorCode.PROTOCOL_ERROR, e);, +      IOException errorException = null;, +        errorException = e;, +        close(connectionErrorCode, streamErrorCode, errorException);, +                  newStream.close(ErrorCode.PROTOCOL_ERROR, e);, +              failConnection(e);, +        stream.close(REFUSED_STREAM, null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()), null);, +        stream.close(ErrorCode.NO_ERROR, null);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    // TODO https://github.com/square/okhttp/issues/4703, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import java.io.EOFException;, +  @Rule public final TestRule timeout = new Timeout(5_000, TimeUnit.MILLISECONDS);, +    stream1.close(ErrorCode.CANCEL, null);, +    } catch (EOFException expected) {, +      assertEquals("Expected a SETTINGS frame but was 1", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java, +    // TODO https://github.com/square/okhttp/issues/4703]
[+++ b/okhttp/build.gradle, +      'okhttp3.Request#body()',, +      'okhttp3.Request#cacheControl()',, +      'okhttp3.Request#header(java.lang.String)',, +      'okhttp3.Request#headers()',, +      'okhttp3.Request#headers(java.lang.String)',, +      'okhttp3.Request#isHttps()',, +      'okhttp3.Request#method()',, +      'okhttp3.Request#newBuilder()',, +      'okhttp3.Request#tag()',, +      'okhttp3.Request#tag(java.lang.Class)',, +      'okhttp3.Request#url()',, +      'okhttp3.Response#body()',, +      'okhttp3.Response#cacheControl()',, +      'okhttp3.Response#cacheResponse()',, +      'okhttp3.Response#challenges()',, +      'okhttp3.Response#code()',, +      'okhttp3.Response#handshake()',, +      'okhttp3.Response#header(java.lang.String)',, +      'okhttp3.Response#header(java.lang.String, java.lang.String)',, +      'okhttp3.Response#headers(java.lang.String)',, +      'okhttp3.Response#headers()',, +      'okhttp3.Response#isRedirect()',, +      'okhttp3.Response#isSuccessful()',, +      'okhttp3.Response#message()',, +      'okhttp3.Response#networkResponse()',, +      'okhttp3.Response#newBuilder()',, +      'okhttp3.Response#peekBody(long)',, +      'okhttp3.Response#priorResponse()',, +      'okhttp3.Response#protocol()',, +      'okhttp3.Response#receivedResponseAtMillis()',, +      'okhttp3.Response#request()',, +      'okhttp3.Response#sentRequestAtMillis()',, +      'okhttp3.Response#trailers()',, +++ b/okhttp/build.gradle, +      'okhttp3.Request#body()',, +      'okhttp3.Request#cacheControl()',, +      'okhttp3.Request#header(java.lang.String)',, +      'okhttp3.Request#headers()',, +      'okhttp3.Request#headers(java.lang.String)',, +      'okhttp3.Request#isHttps()',, +      'okhttp3.Request#method()',, +      'okhttp3.Request#newBuilder()',, +      'okhttp3.Request#tag()',, +      'okhttp3.Request#tag(java.lang.Class)',, +      'okhttp3.Request#url()',, +      'okhttp3.Response#body()',, +      'okhttp3.Response#cacheControl()',, +      'okhttp3.Response#cacheResponse()',, +      'okhttp3.Response#challenges()',, +      'okhttp3.Response#code()',, +      'okhttp3.Response#handshake()',, +      'okhttp3.Response#header(java.lang.String)',, +      'okhttp3.Response#header(java.lang.String, java.lang.String)',, +      'okhttp3.Response#headers(java.lang.String)',, +      'okhttp3.Response#headers()',, +      'okhttp3.Response#isRedirect()',, +      'okhttp3.Response#isSuccessful()',, +      'okhttp3.Response#message()',, +      'okhttp3.Response#networkResponse()',, +      'okhttp3.Response#newBuilder()',, +      'okhttp3.Response#peekBody(long)',, +      'okhttp3.Response#priorResponse()',, +      'okhttp3.Response#protocol()',, +      'okhttp3.Response#receivedResponseAtMillis()',, +      'okhttp3.Response#request()',, +      'okhttp3.Response#sentRequestAtMillis()',, +      'okhttp3.Response#trailers()',, +++ /dev/null, +++ b/okhttp/build.gradle, +      'okhttp3.Request#body()',, +      'okhttp3.Request#cacheControl()',, +      'okhttp3.Request#header(java.lang.String)',, +      'okhttp3.Request#headers()',, +      'okhttp3.Request#headers(java.lang.String)',, +      'okhttp3.Request#isHttps()',, +      'okhttp3.Request#method()',, +      'okhttp3.Request#newBuilder()',, +      'okhttp3.Request#tag()',, +      'okhttp3.Request#tag(java.lang.Class)',, +      'okhttp3.Request#url()',, +      'okhttp3.Response#body()',, +      'okhttp3.Response#cacheControl()',, +      'okhttp3.Response#cacheResponse()',, +      'okhttp3.Response#challenges()',, +      'okhttp3.Response#code()',, +      'okhttp3.Response#handshake()',, +      'okhttp3.Response#header(java.lang.String)',, +      'okhttp3.Response#header(java.lang.String, java.lang.String)',, +      'okhttp3.Response#headers(java.lang.String)',, +      'okhttp3.Response#headers()',, +      'okhttp3.Response#isRedirect()',, +      'okhttp3.Response#isSuccessful()',, +      'okhttp3.Response#message()',, +      'okhttp3.Response#networkResponse()',, +      'okhttp3.Response#newBuilder()',, +      'okhttp3.Response#peekBody(long)',, +      'okhttp3.Response#priorResponse()',, +      'okhttp3.Response#protocol()',, +      'okhttp3.Response#receivedResponseAtMillis()',]
[+++ b/okhttp/build.gradle, +      'okhttp3.CipherSuite#javaName()',, +++ b/okhttp/build.gradle, +      'okhttp3.CipherSuite#javaName()',, +++ /dev/null, +++ b/okhttp/build.gradle, +      'okhttp3.CipherSuite#javaName()',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import java.util.ArrayList, +import java.util.Collections, +, +/**, + * [TLS cipher suites](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml)., + *, + * **Not all cipher suites are supported on all platforms.** As newer cipher suites are created (for, + * stronger privacy, better performance, etc.) they will be adopted by the platform and then exposed, + * here. Cipher suites that are not available on either Android (through API level 24) or Java, + * (through JDK 9) are omitted for brevity., + *, + * See [Android SSLEngine](https://developer.android.com/reference/javax/net/ssl/SSLEngine.html), + * which lists the cipher suites supported by Android., + *, + * See [JDK 10 Providers](https://docs.oracle.com/javase/10/security/oracle-providers.htm), + * which lists the cipher suites supported by Oracle., + *, + * See [NativeCrypto.java](https://github.com/google/conscrypt/blob/master/common/src/main/java/org/conscrypt/NativeCrypto.java), + * from Conscrypt, which lists the cipher suites supported by Conscrypt., + */, +class CipherSuite private constructor(, +  private val javaName: String, +) {, +  /**, +   * Returns the Java name of this cipher suite. For some older cipher suites the Java name has the, +   * prefix `SSL_`, causing the Java name to be different from the instance name which is always, +   * prefixed `TLS_`. For example, `TLS_RSA_EXPORT_WITH_RC4_40_MD5.javaName()` is, +   * `"SSL_RSA_EXPORT_WITH_RC4_40_MD5"`., +   */, +  fun javaName(): String = javaName, +, +  override fun toString(): String = javaName, +, +  companion object {, +    /**, +     * Compares cipher suites names like "TLS_RSA_WITH_NULL_MD5" and "SSL_RSA_WITH_NULL_MD5",, +     * ignoring the "TLS_" or "SSL_" prefix which is not consistent across platforms. In particular, +     * some IBM JVMs use the "SSL_" prefix everywhere whereas Oracle JVMs mix "TLS_" and "SSL_"., +     */, +    internal val ORDER_BY_NAME = object: Comparator<String> {, +      override fun compare(a: String, b: String): Int {, +        var i = 4, +        val limit = Math.min(a.length, b.length), +        while (i < limit) {, +          val charA = a.get(i), +          val charB = b.get(i), +          if (charA != charB) return if (charA < charB) -1 else 1, +          i++, +        }, +        val lengthA = a.length, +        val lengthB = b.length, +        if (lengthA != lengthB) return if (lengthA < lengthB) -1 else 1, +        return 0, +      }, +    }, +, +    /**, +     * Holds interned instances. This needs to be above the init() calls below so that it's, +     * initialized by the time those parts of `<clinit>()` run. Guarded by CipherSuite.class., +     */, +    private val INSTANCES = mutableMapOf<String, CipherSuite>(), +, +    // Last updated 2016-07-03 using cipher suites from Android 24 and Java 9., +, +    // @JvmField val TLS_NULL_WITH_NULL_NULL = init("TLS_NULL_WITH_NULL_NULL", 0x0000), +    @JvmField val TLS_RSA_WITH_NULL_MD5 = init("SSL_RSA_WITH_NULL_MD5", 0x0001), +    @JvmField val TLS_RSA_WITH_NULL_SHA = init("SSL_RSA_WITH_NULL_SHA", 0x0002), +    @JvmField val TLS_RSA_EXPORT_WITH_RC4_40_MD5 = init("SSL_RSA_EXPORT_WITH_RC4_40_MD5", 0x0003), +    @JvmField val TLS_RSA_WITH_RC4_128_MD5 = init("SSL_RSA_WITH_RC4_128_MD5", 0x0004), +    @JvmField val TLS_RSA_WITH_RC4_128_SHA = init("SSL_RSA_WITH_RC4_128_SHA", 0x0005), +    // @JvmField val TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = init("SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5", 0x0006), +    // @JvmField val TLS_RSA_WITH_IDEA_CBC_SHA = init("TLS_RSA_WITH_IDEA_CBC_SHA", 0x0007), +    @JvmField val TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = init("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x0008), +    @JvmField val TLS_RSA_WITH_DES_CBC_SHA = init("SSL_RSA_WITH_DES_CBC_SHA", 0x0009)]
[+++ b/okhttp/pom.xml, +++ b/okhttp/pom.xml, +++ /dev/null, +++ b/okhttp/pom.xml, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.net.ProtocolException;, +import java.security.Permission;, +import java.security.Principal;, +import java.security.cert.Certificate;, +import java.util.List;, +import java.util.Map;, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLPeerUnverifiedException;, +public final class HttpsURLConnectionImpl extends HttpsURLConnection {, +, +  /** Reuse HttpURLConnectionImpl. */, +    super(url);, +    delegate = new HttpURLConnectionImpl(url, client);, +  @Override public String getCipherSuite() {, +    Handshake handshake = handshake();, +    return handshake != null ? handshake.cipherSuite() : null;, +  @Override public Certificate[] getLocalCertificates() {, +    Handshake handshake = handshake();, +    if (handshake == null) return null;, +    List<Certificate> result = handshake.localCertificates();, +    return !result.isEmpty() ? result.toArray(new Certificate[result.size()]) : null;, +  }, +, +  @Override public Certificate[] getServerCertificates() throws SSLPeerUnverifiedException {, +    Handshake handshake = handshake();, +    if (handshake == null) return null;, +    List<Certificate> result = handshake.peerCertificates();, +    return !result.isEmpty() ? result.toArray(new Certificate[result.size()]) : null;, +  }, +, +  @Override public Principal getPeerPrincipal() throws SSLPeerUnverifiedException {, +    Handshake handshake = handshake();, +    return handshake != null ? handshake.peerPrincipal() : null;, +  }, +, +  @Override public Principal getLocalPrincipal() {, +    Handshake handshake = handshake();, +    return handshake != null ? handshake.localPrincipal() : null;, +  }, +, +  private Handshake handshake() {, +  @Override public void disconnect() {, +    delegate.disconnect();, +  }, +, +  @Override public InputStream getErrorStream() {, +    return delegate.getErrorStream();, +  }, +, +  @Override public String getRequestMethod() {, +    return delegate.getRequestMethod();, +  }, +, +  @Override public int getResponseCode() throws IOException {, +    return delegate.getResponseCode();, +  }, +, +  @Override public String getResponseMessage() throws IOException {, +    return delegate.getResponseMessage();, +  }, +, +  @Override public void setRequestMethod(String method) throws ProtocolException {, +    delegate.setRequestMethod(method);, +  }, +, +  @Override public boolean usingProxy() {, +    return delegate.usingProxy();, +  }, +, +  @Override public boolean getInstanceFollowRedirects() {, +    return delegate.getInstanceFollowRedirects();, +  }, +, +  @Override public void setInstanceFollowRedirects(boolean followRedirects) {, +    delegate.setInstanceFollowRedirects(followRedirects);, +  }, +, +  @Override public void connect() throws IOException {, +    connected = true;, +    delegate.connect();, +  }, +, +  @Override public boolean getAllowUserInteraction() {, +    return delegate.getAllowUserInteraction();, +  }, +, +  @Override public Object getContent() throws IOException {, +    return delegate.getContent();, +  }, +, +  @SuppressWarnings("unchecked") // Spec does not generify]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.spdy;, +, +import com.squareup.okhttp.internal.Util;, +import java.io.IOException;, +import java.io.InterruptedIOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.ByteString;, +import okio.Okio;, +import okio.Sink;, +import okio.Source;, +import org.junit.After;, +import org.junit.Test;, +, +import static com.squareup.okhttp.internal.Util.headerEntries;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.CANCEL;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.INTERNAL_ERROR;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.INVALID_STREAM;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.PROTOCOL_ERROR;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.REFUSED_STREAM;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.STREAM_IN_USE;, +import static com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE;, +import static com.squareup.okhttp.internal.spdy.Settings.PERSIST_VALUE;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_DATA;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_GOAWAY;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_PING;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_RST_STREAM;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_SETTINGS;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_WINDOW_UPDATE;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class SpdyConnectionTest {, +  private static final Variant SPDY3 = new Spdy3();, +  private static final Variant HTTP_2 = new Http20Draft12();, +  private final MockSpdyPeer peer = new MockSpdyPeer();, +, +  @After public void tearDown() throws Exception {, +    peer.close();, +  }, +, +  @Test public void clientCreatesStreamAndServerReplies() throws Exception {, +    // write the mocking script, +    peer.acceptFrame(); // SYN_STREAM, +    peer.sendFrame(), +        .synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("robot"));, +    peer.acceptFrame(); // DATA, +    peer.play();, +, +    // play it back, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyStream stream = connection.newStream(headerEntries("b", "banana"), true, true);, +    assertEquals(headerEntries("a", "android"), stream.getResponseHeaders());, +    assertStreamData("robot", stream.getSource());, +    BufferedSink out = Okio.buffer(stream.getSink());, +    out.writeUtf8("c3po");, +    out.close();, +    assertEquals(0, connection.openStreamCount());, +, +    // verify the peer received what was expected, +    MockSpdyPeer.InFrame synStream = peer.takeFrame();, +    assertEquals(TYPE_HEADERS, synStream.type);, +    assertEquals(HeadersMode.SPDY_SYN_STREAM, synStream.headersMode);, +    assertFalse(synStream.inFinished);, +    assertFalse(synStream.outFinished);]
[+++ b/okhttp/src/main/java/okhttp3/RealCall.kt, +    fun newRealCall(, +++ b/okhttp/src/main/java/okhttp3/RealCall.kt, +    fun newRealCall(, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +   * Returns the system property, or defaultValue if the system property is null or]
[+++ b/.github/CONTRIBUTING.md, +Some general advice, +, +- Don’t change public API lightly, avoid if possible, and include your reasoning in the PR if essential.  It causes pain for developers who use OkHttp and sometimes runtime errors., +- Favour a working external library if appropriate.  There are many examples of OkHttp libraries that can sit on top or hook in via existing APIs., +- Get working code on a personal branch with tests before you submit a PR., +- OkHttp is a small and light dependency.  Don't introduce new dependencies or major new functionality., +- OkHttp targets the intersection of RFC correct *and* widely implemented.  Incorrect implementations that are very widely implemented e.g. a bug in Apache, Nginx, Google, Firefox should also be handled., +, +++ b/.github/CONTRIBUTING.md, +Some general advice, +, +- Don’t change public API lightly, avoid if possible, and include your reasoning in the PR if essential.  It causes pain for developers who use OkHttp and sometimes runtime errors., +- Favour a working external library if appropriate.  There are many examples of OkHttp libraries that can sit on top or hook in via existing APIs., +- Get working code on a personal branch with tests before you submit a PR., +- OkHttp is a small and light dependency.  Don't introduce new dependencies or major new functionality., +- OkHttp targets the intersection of RFC correct *and* widely implemented.  Incorrect implementations that are very widely implemented e.g. a bug in Apache, Nginx, Google, Firefox should also be handled., +, +++ b/bom/pom.xml, +  <version>3.13.0-SNAPSHOT</version>, +++ b/.github/CONTRIBUTING.md, +Some general advice, +, +- Don’t change public API lightly, avoid if possible, and include your reasoning in the PR if essential.  It causes pain for developers who use OkHttp and sometimes runtime errors., +- Favour a working external library if appropriate.  There are many examples of OkHttp libraries that can sit on top or hook in via existing APIs., +- Get working code on a personal branch with tests before you submit a PR., +- OkHttp is a small and light dependency.  Don't introduce new dependencies or major new functionality., +- OkHttp targets the intersection of RFC correct *and* widely implemented.  Incorrect implementations that are very widely implemented e.g. a bug in Apache, Nginx, Google, Firefox should also be handled., +, +++ b/bom/pom.xml, +  <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/okhttp3/internal/duplex/MwsDuplexAccess.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.duplex;, +, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.internal.duplex.DuplexResponseBody;, +, +/**, + * Internal access to MockWebServer APIs. Don't use this, don't use internal, these APIs are not, + * stable., + */, +public abstract class MwsDuplexAccess {, +  public static MwsDuplexAccess instance;, +, +  public abstract void setBody(MockResponse mockResponse, DuplexResponseBody duplexResponseBody);, +}, +++ b/.github/CONTRIBUTING.md, +Some general advice, +, +- Don’t change public API lightly, avoid if possible, and include your reasoning in the PR if essential.  It causes pain for developers who use OkHttp and sometimes runtime errors., +- Favour a working external library if appropriate.  There are many examples of OkHttp libraries that can sit on top or hook in via existing APIs., +- Get working code on a personal branch with tests before you submit a PR., +- OkHttp is a small and light dependency.  Don't introduce new dependencies or major new functionality., +- OkHttp targets the intersection of RFC correct *and* widely implemented.  Incorrect implementations that are very widely implemented e.g. a bug in Apache, Nginx, Google, Firefox should also be handled., +, +++ b/bom/pom.xml, +  <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/okhttp3/internal/duplex/MwsDuplexAccess.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.duplex;, +, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.internal.duplex.DuplexResponseBody;, +, +/**, + * Internal access to MockWebServer APIs. Don't use this, don't use internal, these APIs are not, + * stable., + */, +public abstract class MwsDuplexAccess {, +  public static MwsDuplexAccess instance;, +]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/CHANGELOG.md, +Change Log, +==========, +, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS.]
[+++ b/pom.xml, +    <version>20120905</version>, +++ b/pom.xml, +    <version>20120905</version>, +++ b/src/main/java/com/google/mockwebserver/QueueDispatcher.java, +    private boolean failFast;, +        if (failFast && responseQueue.peek() == null) {, +            // Fail fast if there's no response queued up., +            return new MockResponse().setResponseCode(404);, +        }, +, +, +    public void setFailFast(boolean failFast) {, +        this.failFast = failFast;, +    }]
[+++ b/.travis.yml, +addons:, +  apt:, +    packages:, +      - oracle-java8-installer # Updates JDK 8 to the latest available., +, +++ b/.travis.yml, +addons:, +  apt:, +    packages:, +      - oracle-java8-installer # Updates JDK 8 to the latest available., +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/OptionalMethodTest.java, +import org.junit.Ignore;, +  @Ignore("Despite returning false for isSupported, invocation actually succeeds."), +      return;, +    fail();, +      return;, +    fail();, +++ b/.travis.yml, +addons:, +  apt:, +    packages:, +      - oracle-java8-installer # Updates JDK 8 to the latest available., +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/OptionalMethodTest.java, +import org.junit.Ignore;, +  @Ignore("Despite returning false for isSupported, invocation actually succeeds."), +      return;, +    fail();, +      return;, +    fail();, +++ b/pom.xml, +          <version>3.6.1</version>, +            <compilerId>javac-with-errorprone</compilerId>, +            <forceJavacCompilerUse>true</forceJavacCompilerUse>, +          <dependencies>, +            <dependency>, +              <groupId>org.codehaus.plexus</groupId>, +              <artifactId>plexus-compiler-javac-errorprone</artifactId>, +              <version>2.8.1</version>, +            </dependency>, +            <dependency>, +              <groupId>com.google.errorprone</groupId>, +              <artifactId>error_prone_core</artifactId>, +              <version>2.0.16</version>, +            </dependency>, +          </dependencies>]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.RecordingEventListener.CallFailed;, +import okhttp3.RecordingEventListener.ConnectFailed;, +import org.junit.Ignore;, +  @Test public void canceledCallEventSequence() throws IOException {, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    call.cancel();, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("Canceled", expected.getMessage());, +    }, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "CallFailed");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertSame(call, callFailed.call);, +    assertTrue(callFailed.ioe instanceof UnknownHostException);, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertSame(call, callFailed.call);, +    assertTrue(callFailed.ioe instanceof UnknownHostException);, +    ConnectFailed connectFailed = listener.removeUpToEvent(ConnectFailed.class);, +    assertSame(call, connectFailed.call);, +    assertEquals(expectedAddress, connectFailed.inetSocketAddress);, +    assertNull(connectFailed.protocol);, +    assertNotNull(connectFailed.ioe);, +    listener.removeUpToEvent(ConnectFailed.class);, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertSame(call, callFailed.call);, +    assertNotNull(callFailed.ioe);, +    listener.removeUpToEvent(ConnectFailed.class);, +  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd"), +  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd"), +  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd"), +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertNotNull(callFailed.ioe);, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertNotNull(callFailed.ioe);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.RecordingEventListener.CallFailed;, +import okhttp3.RecordingEventListener.ConnectFailed;, +import org.junit.Ignore;, +  @Test public void canceledCallEventSequence() throws IOException {, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    call.cancel();, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("Canceled", expected.getMessage());, +    }, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "CallFailed");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertSame(call, callFailed.call);, +    assertTrue(callFailed.ioe instanceof UnknownHostException);, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertSame(call, callFailed.call);, +    assertTrue(callFailed.ioe instanceof UnknownHostException);, +    ConnectFailed connectFailed = listener.removeUpToEvent(ConnectFailed.class);, +    assertSame(call, connectFailed.call);, +    assertEquals(expectedAddress, connectFailed.inetSocketAddress);, +    assertNull(connectFailed.protocol);, +    assertNotNull(connectFailed.ioe);, +    listener.removeUpToEvent(ConnectFailed.class);, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertSame(call, callFailed.call);, +    assertNotNull(callFailed.ioe);, +    listener.removeUpToEvent(ConnectFailed.class);, +  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd"), +  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd"), +  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd"), +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertNotNull(callFailed.ioe);, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertNotNull(callFailed.ioe);, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +    return eventClass.cast(event);, +  @Override public void dnsEnd(Call call, String domainName, List<InetAddress> inetAddressList) {, +    logEvent(new DnsEnd(call, domainName, inetAddressList));, +  @Override public void secureConnectEnd(Call call, Handshake handshake) {, +    logEvent(new SecureConnectEnd(call, handshake));, +      @Nullable Proxy proxy, Protocol protocol) {, +    logEvent(new ConnectEnd(call, inetSocketAddress, proxy, protocol));, +  }, +, +  @Override public void connectFailed(Call call, InetSocketAddress inetSocketAddress,, +      @Nullable Proxy proxy, @Nullable Protocol protocol, @Nullable IOException ioe) {, +    logEvent(new ConnectFailed(call, inetSocketAddress, proxy, protocol, ioe));, +  @Override public void requestHeadersEnd(Call call, long headerLength) {]
[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +            return new HttpURLConnectionImpl(url, 80, proxy);, +            return new HttpsURLConnectionImpl(url, 443, proxy);, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +            return new HttpURLConnectionImpl(url, 80, proxy);, +            return new HttpsURLConnectionImpl(url, 443, proxy);, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +            return new HttpURLConnectionImpl(url, 80, proxy);, +            return new HttpsURLConnectionImpl(url, 443, proxy);, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +import com.squareup.okhttp.internal.util.ExtendedResponseCache;, +import com.squareup.okhttp.internal.util.ResponseSource;, +import java.net.ProxySelector;, +import java.net.ResponseCache;, +    private final ResponseCache responseCache = ResponseCache.getDefault();, +        if (responseCache instanceof ExtendedResponseCache) {, +            ((ExtendedResponseCache) responseCache).trackResponse(responseSource);, +        if (!policy.getUseCaches() || responseCache == null) {, +        CacheResponse candidate = responseCache.get(uri, method,, +            routeSelector = new RouteSelector(address, uri, ProxySelector.getDefault(), Dns.DEFAULT);, +        if (!policy.getUseCaches() || responseCache == null) {, +        cacheRequest = responseCache.put(uri, getHttpConnectionToCache());, +        CookieHandler cookieHandler = CookieHandler.getDefault();, +                if (responseCache instanceof ExtendedResponseCache) {, +                    ExtendedResponseCache httpResponseCache = (ExtendedResponseCache) responseCache;, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +            return new HttpURLConnectionImpl(url, 80, proxy);, +            return new HttpsURLConnectionImpl(url, 443, proxy);, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +import com.squareup.okhttp.internal.util.ExtendedResponseCache;, +import com.squareup.okhttp.internal.util.ResponseSource;, +import java.net.ProxySelector;, +import java.net.ResponseCache;, +    private final ResponseCache responseCache = ResponseCache.getDefault();, +        if (responseCache instanceof ExtendedResponseCache) {, +            ((ExtendedResponseCache) responseCache).trackResponse(responseSource);, +        if (!policy.getUseCaches() || responseCache == null) {, +        CacheResponse candidate = responseCache.get(uri, method,, +            routeSelector = new RouteSelector(address, uri, ProxySelector.getDefault(), Dns.DEFAULT);, +        if (!policy.getUseCaches() || responseCache == null) {, +        cacheRequest = responseCache.put(uri, getHttpConnectionToCache());, +        CookieHandler cookieHandler = CookieHandler.getDefault();, +                if (responseCache instanceof ExtendedResponseCache) {, +                    ExtendedResponseCache httpResponseCache = (ExtendedResponseCache) responseCache;, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpResponseCache.java, +import com.squareup.okhttp.internal.util.ExtendedResponseCache;, +import com.squareup.okhttp.internal.util.ResponseSource;, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +            return new HttpURLConnectionImpl(url, 80, proxy);, +            return new HttpsURLConnectionImpl(url, 443, proxy);, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +import com.squareup.okhttp.internal.util.ExtendedResponseCache;, +import com.squareup.okhttp.internal.util.ResponseSource;, +import java.net.ProxySelector;, +import java.net.ResponseCache;, +    private final ResponseCache responseCache = ResponseCache.getDefault();, +        if (responseCache instanceof ExtendedResponseCache) {, +            ((ExtendedResponseCache) responseCache).trackResponse(responseSource);, +        if (!policy.getUseCaches() || responseCache == null) {, +        CacheResponse candidate = responseCache.get(uri, method,, +            routeSelector = new RouteSelector(address, uri, ProxySelector.getDefault(), Dns.DEFAULT);, +        if (!policy.getUseCaches() || responseCache == null) {, +        cacheRequest = responseCache.put(uri, getHttpConnectionToCache());, +        CookieHandler cookieHandler = CookieHandler.getDefault();, +                if (responseCache instanceof ExtendedResponseCache) {, +                    ExtendedResponseCache httpResponseCache = (ExtendedResponseCache) responseCache;, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpResponseCache.java, +import com.squareup.okhttp.internal.util.ExtendedResponseCache;, +import com.squareup.okhttp.internal.util.ResponseSource;, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpTransport.java, +        CookieHandler cookieHandler = CookieHandler.getDefault();, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +            return new HttpURLConnectionImpl(url, 80, proxy);, +            return new HttpsURLConnectionImpl(url, 443, proxy);, +++ /dev/null, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +import com.squareup.okhttp.internal.util.ExtendedResponseCache;, +import com.squareup.okhttp.internal.util.ResponseSource;, +import java.net.ProxySelector;, +import java.net.ResponseCache;, +    private final ResponseCache responseCache = ResponseCache.getDefault();, +        if (responseCache instanceof ExtendedResponseCache) {, +            ((ExtendedResponseCache) responseCache).trackResponse(responseSource);, +        if (!policy.getUseCaches() || responseCache == null) {, +        CacheResponse candidate = responseCache.get(uri, method,, +            routeSelector = new RouteSelector(address, uri, ProxySelector.getDefault(), Dns.DEFAULT);, +        if (!policy.getUseCaches() || responseCache == null) {, +        cacheRequest = responseCache.put(uri, getHttpConnectionToCache());, +        CookieHandler cookieHandler = CookieHandler.getDefault();]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void failedAuthenticatorReleasesConnection() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(401));, +, +    client.connectionPool().evictAll();, +    client = client.newBuilder(), +        .authenticator(new Authenticator() {, +          @Override public Request authenticate(Route route, Response response) throws IOException {, +            throw new IOException("IOException!");, +          }, +        }), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertFailure(IOException.class);, +, +    assertEquals(1, client.connectionPool().idleConnectionCount());, +  }, +, +  @Test public void failedProxyAuthenticatorReleasesConnection() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(407));, +, +    client.connectionPool().evictAll();, +    client = client.newBuilder(), +        .proxyAuthenticator(new Authenticator() {, +          @Override public Request authenticate(Route route, Response response) throws IOException {, +            throw new IOException("IOException!");, +          }, +        }), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertFailure(IOException.class);, +, +    assertEquals(1, client.connectionPool().idleConnectionCount());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void failedAuthenticatorReleasesConnection() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(401));, +, +    client.connectionPool().evictAll();, +    client = client.newBuilder(), +        .authenticator(new Authenticator() {, +          @Override public Request authenticate(Route route, Response response) throws IOException {, +            throw new IOException("IOException!");, +          }, +        }), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertFailure(IOException.class);, +, +    assertEquals(1, client.connectionPool().idleConnectionCount());, +  }, +, +  @Test public void failedProxyAuthenticatorReleasesConnection() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(407));, +, +    client.connectionPool().evictAll();, +    client = client.newBuilder(), +        .proxyAuthenticator(new Authenticator() {, +          @Override public Request authenticate(Route route, Response response) throws IOException {, +            throw new IOException("IOException!");, +          }, +        }), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertFailure(IOException.class);, +, +    assertEquals(1, client.connectionPool().idleConnectionCount());, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +      Request followUp;, +      try {, +        followUp = followUpRequest(response, streamAllocation.route());, +      } catch (IOException e) {, +        streamAllocation.release();]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  private NullServer nullServer = new NullServer();, +    nullServer.shutdown();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, TestUtil.UNREACHABLE_ADDRESS));, +    nullServer.start();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, nullServer.address()));, +    nullServer.start();, +    Call call = client.newCall(new Request.Builder(), +        .url(nullServer.url(scheme)), +        .build());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  private NullServer nullServer = new NullServer();, +    nullServer.shutdown();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, TestUtil.UNREACHABLE_ADDRESS));, +    nullServer.start();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, nullServer.address()));, +    nullServer.start();, +    Call call = client.newCall(new Request.Builder(), +        .url(nullServer.url(scheme)), +        .build());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +  @Test public void connectTimeout() throws Exception {, +    Interceptor interceptor1 = new Interceptor() {, +      @Override public Response intercept(Chain chainA) throws IOException {, +        assertEquals(5000, chainA.connectTimeoutMillis());, +, +        Chain chainB = chainA.withConnectTimeout(100, TimeUnit.MILLISECONDS);, +        assertEquals(100, chainB.connectTimeoutMillis());, +, +        return chainB.proceed(chainA.request());, +      }, +    };, +, +    Interceptor interceptor2 = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        assertEquals(100, chain.connectTimeoutMillis());, +        return chain.proceed(chain.request());, +      }, +    };, +, +    client = client.newBuilder(), +        .connectTimeout(5, TimeUnit.SECONDS), +        .addInterceptor(interceptor1), +        .addInterceptor(interceptor2), +        .build();, +, +    Request request1 = new Request.Builder(), +        .url("http://" + TestUtil.UNREACHABLE_ADDRESS), +        .build();, +    Call call = client.newCall(request1);, +, +    try {, +      call.execute();, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  private NullServer nullServer = new NullServer();, +    nullServer.shutdown();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, TestUtil.UNREACHABLE_ADDRESS));, +    nullServer.start();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, nullServer.address()));, +    nullServer.start();, +    Call call = client.newCall(new Request.Builder(), +        .url(nullServer.url(scheme)), +        .build());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +  @Test public void connectTimeout() throws Exception {, +    Interceptor interceptor1 = new Interceptor() {, +      @Override public Response intercept(Chain chainA) throws IOException {, +        assertEquals(5000, chainA.connectTimeoutMillis());, +, +        Chain chainB = chainA.withConnectTimeout(100, TimeUnit.MILLISECONDS);, +        assertEquals(100, chainB.connectTimeoutMillis());, +, +        return chainB.proceed(chainA.request());, +      }, +    };, +, +    Interceptor interceptor2 = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        assertEquals(100, chain.connectTimeoutMillis());, +        return chain.proceed(chain.request());, +      }, +    };, +, +    client = client.newBuilder(), +        .connectTimeout(5, TimeUnit.SECONDS), +        .addInterceptor(interceptor1), +        .addInterceptor(interceptor2), +        .build();, +, +    Request request1 = new Request.Builder(), +        .url("http://" + TestUtil.UNREACHABLE_ADDRESS), +        .build();, +    Call call = client.newCall(request1);, +, +    try {]
[+++ b/benchmarks/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.3.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/benchmarks/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.3.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/crawler/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.3.0-SNAPSHOT</version>]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/CHANGELOG.md, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.concurrent.TimeUnit;, +   * use this to verify the request was sent as intended. This method will block until the, +   * request is available, possibly forever., +   *, +   * @return the head of the request queue, +   * Awaits the next HTTP request (waiting up to the, +   * specified wait time if necessary), removes it, and returns it. Callers should, +   * use this to verify the request was sent as intended within the given time., +   *, +   * @param timeout how long to wait before giving up, in units of, +  *        {@code unit}, +   * @param unit a {@code TimeUnit} determining how to interpret the, +   *        {@code timeout} parameter, +   * @return the head of the request queue, +   */, +  public RecordedRequest takeRequest(int timeout, TimeUnit unit) throws InterruptedException {, +    return requestQueue.poll(timeout, unit);, +  }, +, +  /**, +++ b/CHANGELOG.md, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.concurrent.TimeUnit;, +   * use this to verify the request was sent as intended. This method will block until the, +   * request is available, possibly forever., +   *, +   * @return the head of the request queue, +   * Awaits the next HTTP request (waiting up to the, +   * specified wait time if necessary), removes it, and returns it. Callers should, +   * use this to verify the request was sent as intended within the given time., +   *, +   * @param timeout how long to wait before giving up, in units of, +  *        {@code unit}, +   * @param unit a {@code TimeUnit} determining how to interpret the, +   *        {@code timeout} parameter, +   * @return the head of the request queue, +   */, +  public RecordedRequest takeRequest(int timeout, TimeUnit unit) throws InterruptedException {, +    return requestQueue.poll(timeout, unit);, +  }, +, +  /**, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +      @Override public void onFailure(Request request, Throwable throwable) {, +      @Override public void onFailure(Request request, Throwable throwable) {, +++ b/CHANGELOG.md, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.concurrent.TimeUnit;, +   * use this to verify the request was sent as intended. This method will block until the, +   * request is available, possibly forever., +   *, +   * @return the head of the request queue, +   * Awaits the next HTTP request (waiting up to the, +   * specified wait time if necessary), removes it, and returns it. Callers should, +   * use this to verify the request was sent as intended within the given time., +   *, +   * @param timeout how long to wait before giving up, in units of, +  *        {@code unit}, +   * @param unit a {@code TimeUnit} determining how to interpret the, +   *        {@code timeout} parameter, +   * @return the head of the request queue, +   */, +  public RecordedRequest takeRequest(int timeout, TimeUnit unit) throws InterruptedException {, +    return requestQueue.poll(timeout, unit);, +  }, +, +  /**, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +      @Override public void onFailure(Request request, Throwable throwable) {, +      @Override public void onFailure(Request request, Throwable throwable) {, +++ /dev/null, +++ b/CHANGELOG.md, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.concurrent.TimeUnit;, +   * use this to verify the request was sent as intended. This method will block until the, +   * request is available, possibly forever., +   *, +   * @return the head of the request queue, +   * Awaits the next HTTP request (waiting up to the]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/samples/guide/pom.xml, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>okhttp-tls</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/CHANGELOG.md, +++ b/samples/guide/pom.xml, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>okhttp-tls</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.recipes;, +, +import java.net.InetAddress;, +import okhttp3.Call;, +import okhttp3.OkHttpClient;, +import okhttp3.Request;, +import okhttp3.Response;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.tls.HandshakeCertificates;, +import okhttp3.tls.HeldCertificate;, +, +/**, + * Create an HTTPS server with a self-signed certificate that OkHttp trusts., + */, +public class HttpsServer {, +  public void run() throws Exception {, +    String localhost = InetAddress.getByName("localhost").getCanonicalHostName();, +    HeldCertificate localhostCertificate = new HeldCertificate.Builder(), +        .addSubjectAlternativeName(localhost), +        .build();, +, +    HandshakeCertificates serverCertificates = new HandshakeCertificates.Builder(), +        .heldCertificate(localhostCertificate), +        .build();, +    MockWebServer server = new MockWebServer();, +    server.useHttps(serverCertificates.sslSocketFactory(), false);, +    server.enqueue(new MockResponse());, +, +    HandshakeCertificates clientCertificates = new HandshakeCertificates.Builder(), +        .addTrustedCertificate(localhostCertificate.certificate()), +        .build();, +    OkHttpClient client = new OkHttpClient.Builder(), +        .sslSocketFactory(clientCertificates.sslSocketFactory(), clientCertificates.trustManager()), +        .build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    System.out.println(response.handshake().tlsVersion());, +  }, +, +  public static void main(String... args) throws Exception {, +    new HttpsServer().run();, +  }, +}]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  @Test public void peerHttp2ServerZerosCompressionTable() throws Exception {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  @Test public void peerHttp2ServerZerosCompressionTable() throws Exception {, +++ b/okhttp-urlconnection/pom.xml, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <version>${animal.sniffer.version}</version>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  @Test public void peerHttp2ServerZerosCompressionTable() throws Exception {, +++ b/okhttp-urlconnection/pom.xml, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <version>${animal.sniffer.version}</version>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;, +  @IgnoreJRERequirement // Should only be invoked on Java 7+., +  @Override public long getContentLengthLong() {, +    return delegate.getContentLengthLong();, +  }, +, +  @IgnoreJRERequirement // Should only be invoked on Java 7+., +  @Override public long getHeaderFieldLong(String field, long defaultValue) {, +    return delegate.getHeaderFieldLong(field, defaultValue);, +  }, +, +  @IgnoreJRERequirement // Should only be invoked on Java 7+., +  @Override public void setFixedLengthStreamingMode(long contentLength) {, +    delegate.setFixedLengthStreamingMode(contentLength);, +  }, +, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  @Test public void peerHttp2ServerZerosCompressionTable() throws Exception {, +++ b/okhttp-urlconnection/pom.xml, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <version>${animal.sniffer.version}</version>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;, +  @IgnoreJRERequirement // Should only be invoked on Java 7+., +  @Override public long getContentLengthLong() {, +    return delegate.getContentLengthLong();, +  }, +, +  @IgnoreJRERequirement // Should only be invoked on Java 7+., +  @Override public long getHeaderFieldLong(String field, long defaultValue) {, +    return delegate.getHeaderFieldLong(field, defaultValue);, +  }, +, +  @IgnoreJRERequirement // Should only be invoked on Java 7+., +  @Override public void setFixedLengthStreamingMode(long contentLength) {, +    delegate.setFixedLengthStreamingMode(contentLength);, +  }, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  @Test public void peerHttp2ServerZerosCompressionTable() throws Exception {, +++ b/okhttp-urlconnection/pom.xml, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <version>${animal.sniffer.version}</version>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;, +  @IgnoreJRERequirement // Should only be invoked on Java 7+., +  @Override public long getContentLengthLong() {, +    return delegate.getContentLengthLong();, +  }, +, +  @IgnoreJRERequirement // Should only be invoked on Java 7+., +  @Override public long getHeaderFieldLong(String field, long defaultValue) {, +    return delegate.getHeaderFieldLong(field, defaultValue);, +  }, +, +  @IgnoreJRERequirement // Should only be invoked on Java 7+., +  @Override public void setFixedLengthStreamingMode(long contentLength) {, +    delegate.setFixedLengthStreamingMode(contentLength);, +  }, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java, +++ b/okhttp/src/main/java/okhttp3/internal/framed/Http2.java, +      if (settings.getHeaderTableSize() >= 0) {, +        hpackReader.headerTableSizeSetting(settings.getHeaderTableSize());]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.spdy;, +, +import com.squareup.okhttp.internal.spdy.hpackjson.Story;, +import java.util.Collection;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +, +import static com.squareup.okhttp.internal.spdy.hpackjson.HpackJsonUtil.storiesForCurrentDraft;, +, +@RunWith(Parameterized.class), +public class HpackDecodeInteropTest extends HpackDecodeTestBase {, +, +  public HpackDecodeInteropTest(Story story) {, +    super(story);, +  }, +, +  @Parameterized.Parameters(name="{0}"), +  public static Collection<Story[]> createStories() throws Exception {, +    return createStories(storiesForCurrentDraft());, +  }, +, +  @Test, +  public void testGoodDecoderInterop() throws Exception {, +    testDecoder();, +  }, +}, +++ /dev/null, +++ /dev/null, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.spdy;, +, +import com.squareup.okhttp.internal.spdy.hpackjson.Story;, +import java.util.Collection;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +, +import static com.squareup.okhttp.internal.spdy.hpackjson.HpackJsonUtil.storiesForCurrentDraft;, +, +@RunWith(Parameterized.class), +public class HpackDecodeInteropTest extends HpackDecodeTestBase {, +, +  public HpackDecodeInteropTest(Story story) {, +    super(story);, +  }, +, +  @Parameterized.Parameters(name="{0}"), +  public static Collection<Story[]> createStories() throws Exception {, +    return createStories(storiesForCurrentDraft());, +  }, +, +  @Test, +  public void testGoodDecoderInterop() throws Exception {, +    testDecoder();, +  }, +}, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java, +import java.io.File;, +import java.io.FileInputStream;, +import java.io.IOException;, +import java.net.URISyntaxException;, +import java.util.Arrays;, +  private static final int CURRENT_DRAFT = 9;]
[+++ b/okhttp-logging-interceptor/README.md, +Logging Interceptor, +===================, +, +An [OkHttp interceptor][1] which logs HTTP request and response data., +, +```java, +OkHttpClient client = new OkHttpClient();, +HttpLoggingInterceptor logging = new HttpLoggingInterceptor();, +logging.setLevel(Level.BASIC);, +client.interceptors().add(logging);, +```, +, +You can change the log level at any time by calling `setLevel`., +, +To log to a custom location, pass a `Logger` instance to the constructor., +```java, +HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new Logger() {, +  @Override public void log(String message) {, +    Timber.tag("OkHttp").d(message);, +  }, +});, +```, +, +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels has, +the potential to leak sensitive information such as "Authorization" or "Cookie" headers and the, +contents of request and response bodies. This data should only be logged in a controlled way or in, +a non-production environment., +, +, +Download, +--------, +, +Get via Maven:, +```xml, +<dependency>, +  <groupId>com.squareup.okhttp</groupId>, +  <artifactId>logging-interceptor</artifactId>, +  <version>(insert latest version)</version>, +</dependency>, +```, +, +or via Gradle , +```groovy, +compile 'com.squareup.okhttp:logging-interceptor:(insert latest version)', +```, +, +, +, + [1]: https://github.com/square/okhttp/wiki/Interceptors, +++ b/okhttp-logging-interceptor/README.md, +Logging Interceptor, +===================, +, +An [OkHttp interceptor][1] which logs HTTP request and response data., +, +```java, +OkHttpClient client = new OkHttpClient();, +HttpLoggingInterceptor logging = new HttpLoggingInterceptor();, +logging.setLevel(Level.BASIC);, +client.interceptors().add(logging);, +```, +, +You can change the log level at any time by calling `setLevel`., +, +To log to a custom location, pass a `Logger` instance to the constructor., +```java, +HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new Logger() {, +  @Override public void log(String message) {, +    Timber.tag("OkHttp").d(message);, +  }, +});, +```, +, +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels has, +the potential to leak sensitive information such as "Authorization" or "Cookie" headers and the, +contents of request and response bodies. This data should only be logged in a controlled way or in, +a non-production environment., +, +, +Download, +--------, +, +Get via Maven:, +```xml, +<dependency>, +  <groupId>com.squareup.okhttp</groupId>, +  <artifactId>logging-interceptor</artifactId>, +  <version>(insert latest version)</version>, +</dependency>, +```, +, +or via Gradle , +```groovy, +compile 'com.squareup.okhttp:logging-interceptor:(insert latest version)', +```, +, +, +, + [1]: https://github.com/square/okhttp/wiki/Interceptors]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) throws EOFException {, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) throws EOFException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) throws EOFException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +import java.net.UnknownHostException;, +, +  @Override, +  public Socket createSocket() throws IOException {, +  @Override, +  public Socket createSocket(String host, int port) throws IOException, UnknownHostException {, +  @Override, +  public Socket createSocket(String host, int port, InetAddress localAddress, int localPort), +      throws IOException, UnknownHostException {, +  @Override, +  public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override, +  public Socket createSocket(InetAddress host, int port, InetAddress localAddress, int localPort), +      throws IOException {, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) throws EOFException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +import java.net.UnknownHostException;, +, +  @Override, +  public Socket createSocket() throws IOException {, +  @Override, +  public Socket createSocket(String host, int port) throws IOException, UnknownHostException {, +  @Override, +  public Socket createSocket(String host, int port, InetAddress localAddress, int localPort), +      throws IOException, UnknownHostException {, +  @Override, +  public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override, +  public Socket createSocket(InetAddress host, int port, InetAddress localAddress, int localPort), +      throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/FallbackTestClientSocketFactory.java, +      List<String> enabledCipherSuites = new ArrayList<String>(suites.length);, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) throws EOFException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +import java.net.UnknownHostException;, +, +  @Override, +  public Socket createSocket() throws IOException {, +  @Override, +  public Socket createSocket(String host, int port) throws IOException, UnknownHostException {, +  @Override, +  public Socket createSocket(String host, int port, InetAddress localAddress, int localPort), +      throws IOException, UnknownHostException {, +  @Override, +  public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override, +  public Socket createSocket(InetAddress host, int port, InetAddress localAddress, int localPort), +      throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/FallbackTestClientSocketFactory.java]
[+++ b/pom.xml, +    <apache.http.version>4.2.6</apache.http.version>, +          <version>3.7.0</version>, +              <version>2.8.4</version>, +              <version>2.3.1</version>, +          <version>2.21.0</version>, +              <version>2.21.0</version>]
[+++ b/.circleci/config.yml, +            GRADLE_OPTS: -Dorg.gradle.daemon=false -Dokhttp.platform=jdk9 -Dorg.gradle.workers.max=3 -Xmx1G, +            mkdir -p ~/test-results/junit/, +            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;, +          path: ~/test-results, +            mkdir -p ~/reports/, +            tar cf - */build/reports | (cd ~/reports/; tar xf -), +          path: ~/reports, +, +  testconscrypt:, +    docker:, +      - image: circleci/openjdk:11.0.2-jdk, +, +    environment:, +      JVM_OPTS: -Xmx1g, +      TERM: dumb, +, +    steps:, +      - checkout, +, +      - restore_cache:, +          keys:, +            - v3-{{ checksum "build.gradle" }}-{{ .Branch }}-testconscrypt, +            - v3-{{ checksum "build.gradle" }}-{{ .Branch }}, +            - v3-{{ checksum "build.gradle" }}-master, +            - v3-{{ checksum "build.gradle" }}, +, +      - run:, +          name: Run tests, +          command: ./gradlew --build-cache --parallel test, +          environment:, +            GRADLE_OPTS: -Dorg.gradle.daemon=false -Dokhttp.platform=conscrypt -Dorg.gradle.workers.max=3 -Xmx1G, +, +      - save_cache:, +          paths:, +            - ~/.gradle/caches, +            - ~/.gradle/wrapper, +          key: v3-{{ checksum "build.gradle" }}-{{ .Branch }}-testconscrypt, +, +      - run:, +          name: Save test results, +          command: |, +            mkdir -p ~/test-results/junit/, +            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;, +          when: always, +, +      - store_test_results:, +          name: Store test results, +          path: ~/test-results, +, +      - run:, +          name: Save gradle reports, +          command: |, +            mkdir -p ~/reports/, +            tar cf - */build/reports | (cd ~/reports/; tar xf -), +          when: always, +, +      - store_artifacts:, +          name: Store gradle reports, +          path: ~/reports, +      - testconscrypt:, +          requires:, +            - compile, +          filters:, +            branches:, +              only: master, +      - testconscrypt:, +          requires:, +            - compile, +++ b/.circleci/config.yml, +            GRADLE_OPTS: -Dorg.gradle.daemon=false -Dokhttp.platform=jdk9 -Dorg.gradle.workers.max=3 -Xmx1G, +            mkdir -p ~/test-results/junit/, +            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;, +          path: ~/test-results, +            mkdir -p ~/reports/, +            tar cf - */build/reports | (cd ~/reports/; tar xf -), +          path: ~/reports, +, +  testconscrypt:, +    docker:, +      - image: circleci/openjdk:11.0.2-jdk, +, +    environment:, +      JVM_OPTS: -Xmx1g, +      TERM: dumb, +, +    steps:, +      - checkout, +, +      - restore_cache:, +          keys:, +            - v3-{{ checksum "build.gradle" }}-{{ .Branch }}-testconscrypt, +            - v3-{{ checksum "build.gradle" }}-{{ .Branch }}, +            - v3-{{ checksum "build.gradle" }}-master, +            - v3-{{ checksum "build.gradle" }}, +, +      - run:, +          name: Run tests, +          command: ./gradlew --build-cache --parallel test, +          environment:]
[+++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2.0 so that code can be shared., +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2.0 so that code can be shared., +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2.0 so that code can be shared., +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2.0 so that code can be shared., +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2.0 so that code can be shared., +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/okcurl/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2.0 so that code can be shared., +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/okcurl/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/okhttp-android-support/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/README.md, +An HTTP & HTTP/2 client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +      call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +      call.execute();, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +import okhttp3.internal.http.RealResponseBody;, +import okio.ForwardingSource;, +import okio.Okio;, +import okio.Source;, +    String contentType = response.header("Content-Type");, +    HttpCodec codec = streamAllocation.codec();, +    long contentLength = codec.reportedContentLength(response);, +    Source rawSource = codec.openResponseBodySource(response);, +    ResponseBodySource source = new ResponseBodySource(rawSource, contentLength);, +    return new RealResponseBody(contentType, contentLength, Okio.buffer(source));, +    private long contentLength;, +    private long bytesReceived;, +    private boolean closed;, +    RequestBodySink(Sink delegate, long contentLength) {, +      this.contentLength = contentLength;, +      if (contentLength != -1L && bytesReceived + byteCount > contentLength) {, +        throw new ProtocolException("expected " + contentLength, +      if (contentLength != -1L && bytesReceived != contentLength) {, +  /** A response body that fires events when it completes. */, +  final class ResponseBodySource extends ForwardingSource {, +    private long contentLength;, +    private long bytesReceived;, +    private boolean completed;, +    private boolean closed;, +, +    ResponseBodySource(Source delegate, long contentLength) {, +      super(delegate);, +      this.contentLength = contentLength;, +, +      if (contentLength == 0L) {, +        complete(null);, +      }, +    }, +, +    @Override public long read(Buffer sink, long byteCount) throws IOException {, +      if (closed) throw new IllegalStateException("closed");, +      try {, +        long read = delegate().read(sink, byteCount);, +        if (read == -1L) {, +          complete(null);, +          return -1L;, +        }, +, +        long newBytesReceived = bytesReceived + read;, +        if (contentLength != -1L && newBytesReceived > contentLength) {, +          throw new ProtocolException("expected " + contentLength, +              + " bytes but received " + newBytesReceived);, +        }, +, +        bytesReceived = newBytesReceived;, +        if (newBytesReceived == contentLength) {, +          complete(null);, +        }, +, +        return read;, +      } catch (IOException e) {, +        complete(e);, +        throw e;, +      }, +    }, +, +    @Override public void close() throws IOException {, +      if (closed) return;, +      closed = true;, +      super.close();, +      complete(null);, +    }, +, +    void complete(IOException e) {, +      if (completed) return;, +      completed = true;, +      responseBodyComplete(bytesReceived, e);, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +      call.execute();, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +import okhttp3.internal.http.RealResponseBody;, +import okio.ForwardingSource;, +import okio.Okio;, +import okio.Source;, +    String contentType = response.header("Content-Type");, +    HttpCodec codec = streamAllocation.codec();, +    long contentLength = codec.reportedContentLength(response);, +    Source rawSource = codec.openResponseBodySource(response);, +    ResponseBodySource source = new ResponseBodySource(rawSource, contentLength);, +    return new RealResponseBody(contentType, contentLength, Okio.buffer(source));, +    private long contentLength;, +    private long bytesReceived;, +    private boolean closed;, +    RequestBodySink(Sink delegate, long contentLength) {, +      this.contentLength = contentLength;, +      if (contentLength != -1L && bytesReceived + byteCount > contentLength) {, +        throw new ProtocolException("expected " + contentLength]
[+++ b/okhttp-apache/pom.xml, +    <version>1.1.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.0</version>, +++ b/okhttp/pom.xml, +    <version>1.1.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.0</version>, +++ b/okhttp/pom.xml, +    <version>1.1.0</version>, +++ b/pom.xml, +  <version>1.1.0</version>, +    <tag>parent-1.1.0</tag>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.0</version>, +++ b/okhttp/pom.xml, +    <version>1.1.0</version>, +++ b/pom.xml, +  <version>1.1.0</version>, +    <tag>parent-1.1.0</tag>, +++ b/samples/guide/pom.xml, +    <version>1.1.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.0</version>, +++ b/okhttp/pom.xml, +    <version>1.1.0</version>, +++ b/pom.xml, +  <version>1.1.0</version>, +    <tag>parent-1.1.0</tag>, +++ b/samples/guide/pom.xml, +    <version>1.1.0</version>, +++ b/samples/pom.xml, +    <version>1.1.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.0</version>, +++ b/okhttp/pom.xml, +    <version>1.1.0</version>, +++ b/pom.xml, +  <version>1.1.0</version>, +    <tag>parent-1.1.0</tag>, +++ b/samples/guide/pom.xml, +    <version>1.1.0</version>, +++ b/samples/pom.xml, +    <version>1.1.0</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.1.0</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +  private final TlsVersion tlsVersion;, +    this.tlsVersion = socket instanceof SSLSocket, +        ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), +        : null;, +    return tlsVersion;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +  private final TlsVersion tlsVersion;, +    this.tlsVersion = socket instanceof SSLSocket, +        ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), +        : null;, +    return tlsVersion;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/tls/SslClient.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +  private final TlsVersion tlsVersion;, +    this.tlsVersion = socket instanceof SSLSocket, +        ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), +        : null;, +    return tlsVersion;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/tls/SslClient.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +  private final TlsVersion tlsVersion;, +    this.tlsVersion = socket instanceof SSLSocket, +        ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), +        : null;, +    return tlsVersion;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/tls/SslClient.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/BootstrapDns.java, + * Copyright (C) 2014 Square, Inc., +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +  private final TlsVersion tlsVersion;, +    this.tlsVersion = socket instanceof SSLSocket, +        ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), +        : null;, +    return tlsVersion;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/tls/SslClient.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/BootstrapDns.java, + * Copyright (C) 2014 Square, Inc., +, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + * Copyright (C) 2014 Square, Inc., +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +  private final TlsVersion tlsVersion;, +    this.tlsVersion = socket instanceof SSLSocket, +        ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), +        : null;, +    return tlsVersion;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/tls/SslClient.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/BootstrapDns.java, + * Copyright (C) 2014 Square, Inc., +, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + * Copyright (C) 2014 Square, Inc., +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, + * Copyright (C) 2014 Square, Inc., +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +  private final TlsVersion tlsVersion;, +    this.tlsVersion = socket instanceof SSLSocket, +        ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), +        : null;, +    return tlsVersion;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/tls/SslClient.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/BootstrapDns.java, + * Copyright (C) 2014 Square, Inc., +, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + * Copyright (C) 2014 Square, Inc., +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, + * Copyright (C) 2014 Square, Inc., +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsRecordCodecTest.java, + * Copyright (C) 2014 Square, Inc., +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +  private final TlsVersion tlsVersion;, +    this.tlsVersion = socket instanceof SSLSocket, +        ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), +        : null;, +    return tlsVersion;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/tls/SslClient.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/BootstrapDns.java, + * Copyright (C) 2014 Square, Inc., +, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + * Copyright (C) 2014 Square, Inc.]
[+++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +    client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +    client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +    client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +    this(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +    client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +    this(new OkHttpClient());, +++ b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java, +  private OkUrlFactory urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +    client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +    this(new OkHttpClient());, +++ b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java, +  private OkUrlFactory urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-ws-tests/src/main/java/okhttp3/ws/AutobahnTester.java, +  final OkHttpClient client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +    client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +    this(new OkHttpClient());, +++ b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java, +  private OkUrlFactory urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-ws-tests/src/main/java/okhttp3/ws/AutobahnTester.java, +  final OkHttpClient client = new OkHttpClient();, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +  private OkHttpClient client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +    client = new OkHttpClient();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +    this(new OkHttpClient());, +++ b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java, +  private OkUrlFactory urlFactory = new OkUrlFactory(new OkHttpClient());, +++ b/okhttp-ws-tests/src/main/java/okhttp3/ws/AutobahnTester.java, +  final OkHttpClient client = new OkHttpClient();, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +  private OkHttpClient client = new OkHttpClient();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  final Dispatcher dispatcher;, +  final Proxy proxy;, +  final List<Protocol> protocols;, +  final List<ConnectionSpec> connectionSpecs;, +  final List<Interceptor> interceptors;, +  final List<Interceptor> networkInterceptors;, +  final ProxySelector proxySelector;, +  final CookieJar cookieJar;, +  final Cache cache;, +  final InternalCache internalCache;, +  final SocketFactory socketFactory;, +  final SSLSocketFactory sslSocketFactory;, +  final HostnameVerifier hostnameVerifier;, +  final CertificatePinner certificatePinner;, +  final Authenticator proxyAuthenticator;, +  final Authenticator authenticator;, +  final ConnectionPool connectionPool;, +  final Dns dns;, +  final boolean followSslRedirects;, +  final boolean followRedirects;, +  final boolean retryOnConnectionFailure;, +  final int connectTimeout;, +  final int readTimeout;, +  final int writeTimeout;, +, +  public OkHttpClient() {, +    this(new Builder());, +  }, +    Dispatcher dispatcher;]
[+++ b/mockwebserver/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      // TODO: support HTTP/2.0., +      // 17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '4', '/', '2', '.', '0',, +  private static final byte[] HTTP_20_DRAFT_04 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '4', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_04)) {, +              transport = Transport.HTTP_20_DRAFT_04;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_04) {, +          SpdyConnection.Builder builder = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler);, +          if (transport == Transport.SPDY_3) {, +            builder.spdy3();, +          } else {, +            builder.http20Draft04();, +          }, +          SpdyConnection spdyConnection = builder.build();, +          spdyConnection.sendConnectionHeader();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_04, +++ b/mockwebserver/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      // TODO: support HTTP/2.0., +      // 17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '4', '/', '2', '.', '0',, +  private static final byte[] HTTP_20_DRAFT_04 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '4', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_04)) {, +              transport = Transport.HTTP_20_DRAFT_04;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_04) {, +          SpdyConnection.Builder builder = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler);, +          if (transport == Transport.SPDY_3) {, +            builder.spdy3();, +          } else {, +            builder.http20Draft04();, +          }, +          SpdyConnection spdyConnection = builder.build();, +          spdyConnection.sendConnectionHeader();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_04, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      // TODO: support HTTP/2.0., +      // 17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '4', '/', '2', '.', '0',, +  private static final byte[] HTTP_20_DRAFT_04 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '4', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_04)) {, +              transport = Transport.HTTP_20_DRAFT_04;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_04) {, +          SpdyConnection.Builder builder = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler);, +          if (transport == Transport.SPDY_3) {, +            builder.spdy3();, +          } else {, +            builder.http20Draft04();, +          }, +          SpdyConnection spdyConnection = builder.build();, +          spdyConnection.sendConnectionHeader();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_04, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      // TODO: support HTTP/2.0., +      // 17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '4', '/', '2', '.', '0',, +  private static final byte[] HTTP_20_DRAFT_04 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '4', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_04)) {, +              transport = Transport.HTTP_20_DRAFT_04;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_04) {, +          SpdyConnection.Builder builder = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler);, +          if (transport == Transport.SPDY_3) {, +            builder.spdy3();, +          } else {, +            builder.http20Draft04();, +          }, +          SpdyConnection spdyConnection = builder.build();, +          spdyConnection.sendConnectionHeader();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_04, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, +/*, + * Copyright (C) 2013 Square, Inc., + *]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, +  public MockDuplexResponseBody requestIOException() {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        requestBody.exhausted();, +        fail();, +      } catch (IOException expected) {, +      }, +    });, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, +  public MockDuplexResponseBody requestIOException() {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        requestBody.exhausted();, +        fail();, +      } catch (IOException expected) {, +      }, +    });, +    return this;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import java.util.ArrayList;, +import java.util.List;, +import okhttp3.internal.Util;, +    List<Response> responsesNotClosed = new ArrayList<>();, +, +          responsesNotClosed.add(response);, +    try (Response response = call.execute()) {, +      assertEquals("unrelated response body!", response.body().string());, +    }, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(0, server.takeRequest().getSequenceNumber()); // No connection reuse., +, +    for (Response response : responsesNotClosed) {, +      Util.closeQuietly(response);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, +  public MockDuplexResponseBody requestIOException() {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        requestBody.exhausted();, +        fail();, +      } catch (IOException expected) {, +      }, +    });, +    return this;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import java.util.ArrayList;, +import java.util.List;, +import okhttp3.internal.Util;, +    List<Response> responsesNotClosed = new ArrayList<>();, +, +          responsesNotClosed.add(response);, +    try (Response response = call.execute()) {, +      assertEquals("unrelated response body!", response.body().string());, +    }, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(0, server.takeRequest().getSequenceNumber()); // No connection reuse., +, +    for (Response response : responsesNotClosed) {, +      Util.closeQuietly(response);, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import java.net.HttpURLConnection;, +import okhttp3.internal.RecordingOkAuthenticator;, +  /**, +   * Duplex calls that have follow-ups are weird. By the time we know there's a follow-up we've, +   * already split off another thread to stream the request body. Because we permit at most one, +   * exchange at a time we break the request stream out from under that writer., +   */, +  @Test public void duplexWithRedirect() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +, +    MockDuplexResponseBody mockDuplexResponseBody = enqueueResponseWithBody(, +        new MockResponse(), +            .clearHeaders(), +            .setResponseCode(HttpURLConnection.HTTP_MOVED_PERM), +            .addHeader("Location: /b"),, +        new MockDuplexResponseBody(), +            .sendResponse("/a has moved!\n"), +            .requestIOException(), +            .exhaustResponse());, +    server.enqueue(new MockResponse(), +        .setBody("this is /b"));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .post(new AsyncRequestBody()), +        .build());, +, +    try (Response response = call.execute()) {]
[+++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9001";, +        webSocket.close(code, null);, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9001";, +        webSocket.close(code, null);, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, source.readByte() & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes[2] & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes.read());, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9001";, +        webSocket.close(code, null);, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, source.readByte() & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes[2] & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes.read());, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +  private static final ByteString UTF_8_BOM = ByteString.decodeHex("efbbbf");, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9001";, +        webSocket.close(code, null);, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, source.readByte() & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes[2] & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes.read());, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +  private static final ByteString UTF_8_BOM = ByteString.decodeHex("efbbbf");, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +  private static final long MAX_QUEUE_SIZE = 1024 * 1024; // 1 MiB., +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9001";, +        webSocket.close(code, null);, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, source.readByte() & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes[2] & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes.read());, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +  private static final ByteString UTF_8_BOM = ByteString.decodeHex("efbbbf");, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +  private static final long MAX_QUEUE_SIZE = 1024 * 1024; // 1 MiB., +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1].]
[+++ b/bom/pom.xml, +  <version>3.13.0-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java, +    if (peerSettings.getHeaderTableSize() != -1) {]
[+++ b/benchmarks/pom.xml, +    <version>3.9.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.1</version>, +++ b/okcurl/pom.xml, +    <version>3.9.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.1</version>, +++ b/okcurl/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.1</version>, +++ b/okcurl/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.1</version>, +++ b/okcurl/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.9.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.1</version>, +++ b/okcurl/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.9.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.1</version>, +++ b/okcurl/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.9.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.1</version>, +++ b/okcurl/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.9.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.1</version>, +++ b/okcurl/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.1</version>]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Internal;, +import com.squareup.okhttp.internal.SingleInetAddressNetwork;, +import java.net.SocketException;, +import javax.net.ssl.SSLProtocolException;, +    Internal.instance.setNetwork(client, new SingleInetAddressNetwork());, +  @Test public void noRecoveryFromTlsHandshakeFailureWhenTlsFallbackIsDisabled() throws Exception {, +    client.setConnectionConfigurations(Arrays.asList(, +        ConnectionConfiguration.MODERN_TLS, ConnectionConfiguration.CLEARTEXT));, +, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));, +    server.play();, +, +    client.setSslSocketFactory(sslContext.getSocketFactory());, +    client.setHostnameVerifier(new RecordingHostnameVerifier());, +    Internal.instance.setNetwork(client, new SingleInetAddressNetwork());, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (SSLProtocolException expected) {, +    }, +  }, +, +  @Test public void cleartextCallsFailWhenCleartextIsDisabled() throws Exception {, +    // Configure the client with only TLS configurations. No cleartext!, +    client.setConnectionConfigurations(Arrays.asList(, +        ConnectionConfiguration.MODERN_TLS, ConnectionConfiguration.COMPATIBLE_TLS));, +, +    server.enqueue(new MockResponse());, +    server.play();, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (SocketException expected) {, +      assertTrue(expected.getMessage().contains("exhausted connection configurations"));, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Internal;, +import com.squareup.okhttp.internal.SingleInetAddressNetwork;, +import java.net.SocketException;, +import javax.net.ssl.SSLProtocolException;, +    Internal.instance.setNetwork(client, new SingleInetAddressNetwork());, +  @Test public void noRecoveryFromTlsHandshakeFailureWhenTlsFallbackIsDisabled() throws Exception {, +    client.setConnectionConfigurations(Arrays.asList(, +        ConnectionConfiguration.MODERN_TLS, ConnectionConfiguration.CLEARTEXT));, +, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));, +    server.play();, +, +    client.setSslSocketFactory(sslContext.getSocketFactory());, +    client.setHostnameVerifier(new RecordingHostnameVerifier());, +    Internal.instance.setNetwork(client, new SingleInetAddressNetwork());, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (SSLProtocolException expected) {, +    }, +  }, +, +  @Test public void cleartextCallsFailWhenCleartextIsDisabled() throws Exception {, +    // Configure the client with only TLS configurations. No cleartext!, +    client.setConnectionConfigurations(Arrays.asList(, +        ConnectionConfiguration.MODERN_TLS, ConnectionConfiguration.COMPATIBLE_TLS));, +, +    server.enqueue(new MockResponse());, +    server.play();, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (SocketException expected) {, +      assertTrue(expected.getMessage().contains("exhausted connection configurations"));, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import java.util.List;, +    List<ConnectionConfiguration> connectionConfigurations = Util.immutableList(, +        ConnectionConfiguration.MODERN_TLS, ConnectionConfiguration.CLEARTEXT);, +, +        Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), connectionConfigurations);, +        Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), connectionConfigurations);, +        ConnectionConfiguration.CLEARTEXT);, +        ConnectionConfiguration.MODERN_TLS);, +        ConnectionConfiguration.CLEARTEXT));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Internal;, +import com.squareup.okhttp.internal.SingleInetAddressNetwork;, +import java.net.SocketException;]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final HpackDraft10.Reader hpackReader = new HpackDraft10.Reader(4096, bytesIn);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final HpackDraft10.Reader hpackReader = new HpackDraft10.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private HpackDraft10.Writer hpackWriter = new HpackDraft10.Writer(bytesOut);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final HpackDraft10.Reader hpackReader = new HpackDraft10.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private HpackDraft10.Writer hpackWriter = new HpackDraft10.Writer(bytesOut);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java, +import static org.junit.Assert.assertEquals;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/README.md, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final HpackDraft10.Reader hpackReader = new HpackDraft10.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private HpackDraft10.Writer hpackWriter = new HpackDraft10.Writer(bytesOut);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java, +import static org.junit.Assert.assertEquals;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/DisconnectTest.java, +import com.squareup.okhttp.DelegatingServerSocketFactory;, +import com.squareup.okhttp.DelegatingSocketFactory;, +import java.net.ServerSocket;, +import java.net.Socket;, +, +import org.junit.Before;, +import javax.net.ServerSocketFactory;, +import javax.net.SocketFactory;, +, +]
[+++ b/pom.xml, +    <!-- ALPN Versions targeted for each Java 8 minor release -->, +    <!-- Check versions with this page: -->, +    <!-- http://www.eclipse.org/jetty/documentation/current/alpn-chapter.html#alpn-chapterchapterversions -->, +        <profile>, +      <id>alpn-when-jdk8_05</id>, +      <activation>, +        <jdk>1.8.0_05</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.0.v20141016</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_11</id>, +      <activation>, +        <jdk>1.8.0_11</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.0.v20141016</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_20</id>, +      <activation>, +        <jdk>1.8.0_20</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.0.v20141016</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_25</id>, +      <activation>, +        <jdk>1.8.0_25</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.2.v20141202</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_31</id>, +      <activation>, +        <jdk>1.8.0_31</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.3.v20150130</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_40</id>, +      <activation>, +        <jdk>1.8.0_40</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.3.v20150130</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_45</id>, +      <activation>, +        <jdk>1.8.0_45</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.3.v20150130</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_51</id>, +      <activation>, +        <jdk>1.8.0_51</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.4.v20150727</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_60</id>, +      <activation>, +        <jdk>1.8.0_60</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.5.v20150921</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_65</id>, +      <activation>, +        <jdk>1.8.0_65</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.6.v20151105</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_66</id>, +      <activation>, +        <jdk>1.8.0_66</jdk>, +      </activation>, +      <properties>]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.ByteString;, +import okio.OkBuffers;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.ByteString;, +import okio.OkBuffers;, +++ b/okhttp-protocols/pom.xml, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.ByteString;, +import okio.OkBuffers;, +++ b/okhttp-protocols/pom.xml, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import okio.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.ByteString;, +import okio.OkBuffers;, +++ b/okhttp-protocols/pom.xml, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import okio.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import okio.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.ByteString;, +import okio.OkBuffers;, +++ b/okhttp-protocols/pom.xml, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import okio.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import okio.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.OkBuffer;, +import okio.Sink;, +import okio.Source;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.ByteString;, +import okio.OkBuffers;, +++ b/okhttp-protocols/pom.xml, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import okio.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import okio.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.OkBuffer;, +import okio.Sink;, +import okio.Source;, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.ByteString;, +import okio.OkBuffers;, +++ b/okhttp-protocols/pom.xml, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import okio.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import okio.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.OkBuffer;, +import okio.Sink;, +import okio.Source;, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.ByteString;, +import okio.OkBuffers;, +++ b/okhttp-protocols/pom.xml, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java]
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(c1, true);, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(c1, true);, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +  @Test public void applicationInterceptorProceedsMultipleTimes() throws Exception {, +    server.enqueue(new MockResponse().setBody("a"));, +    server.enqueue(new MockResponse().setBody("b"));, +, +    client = client.newBuilder(), +        .addInterceptor(chain -> {, +          try (Response a = chain.proceed(chain.request())) {, +            assertEquals("a", a.body().string());, +          }, +          return chain.proceed(chain.request());, +        }), +        .build();, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +    Response response = call.execute();, +    assertEquals("b", response.body().string());, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased",, +        "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(1, server.takeRequest().getSequenceNumber());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(c1, true);, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +  @Test public void applicationInterceptorProceedsMultipleTimes() throws Exception {, +    server.enqueue(new MockResponse().setBody("a"));, +    server.enqueue(new MockResponse().setBody("b"));, +, +    client = client.newBuilder(), +        .addInterceptor(chain -> {, +          try (Response a = chain.proceed(chain.request())) {, +            assertEquals("a", a.body().string());, +          }, +          return chain.proceed(chain.request());, +        }), +        .build();, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +    Response response = call.execute();, +    assertEquals("b", response.body().string());, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased",, +        "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(1, server.takeRequest().getSequenceNumber());, +  }, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +   * Attempts to acquire a recycled connection to {@code address} for {@code transmitter}. If, +   * non-null {@code route} is the resolved route for a connection. Returns true if a connection was, +   * acquired., +  boolean transmitterAcquirePooledConnection(, +      Address address, Transmitter transmitter, @Nullable Route route) {, +        transmitter.acquireConnection(connection, true);, +        return true;, +    return false;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(c1, true);, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +  @Test public void applicationInterceptorProceedsMultipleTimes() throws Exception {, +    server.enqueue(new MockResponse().setBody("a"));, +    server.enqueue(new MockResponse().setBody("b"));, +, +    client = client.newBuilder(), +        .addInterceptor(chain -> {, +          try (Response a = chain.proceed(chain.request())) {, +            assertEquals("a", a.body().string());, +          }]
[+++ b/pom.xml, +    <okio.version>1.4.0</okio.version>]
[+++ b/okhttp/build.gradle, +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +, +/**, + * <a href="https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml">TLS cipher, + * suites</a>., + *, + * <p><strong>Not all cipher suites are supported on all platforms.</strong> As newer cipher suites, + * are created (for stronger privacy, better performance, etc.) they will be adopted by the platform, + * and then exposed here. Cipher suites that are not available on either Android (through API level, + * 24) or Java (through JDK 9) are omitted for brevity., + *, + * <p>See <a href="https://developer.android.com/reference/javax/net/ssl/SSLEngine.html">Android SSLEngine</a>, + * which lists the cipher suites supported by Android., + *, + * <p>See <a href="https://docs.oracle.com/javase/10/security/oracle-providers.htm">JDK 10 Providers</a>, + * which lists the cipher suites supported by Oracle., + *, + * <p>See <a href="https://github.com/google/conscrypt/blob/master/common/src/main/java/org/conscrypt/NativeCrypto.java">NativeCrypto.java</a>, + * from conscrypt, which lists the cipher suites supported by Conscrypt., + */, +public final class CipherSuite {, +  /**, +   * Compares cipher suites names like "TLS_RSA_WITH_NULL_MD5" and "SSL_RSA_WITH_NULL_MD5", ignoring, +   * the "TLS_" or "SSL_" prefix which is not consistent across platforms. In particular some IBM, +   * JVMs use the "SSL_" prefix everywhere whereas Oracle JVMs mix "TLS_" and "SSL_"., +   */, +  static final Comparator<String> ORDER_BY_NAME = (a, b) -> {, +    for (int i = 4, limit = Math.min(a.length(), b.length()); i < limit; i++) {, +      char charA = a.charAt(i);, +      char charB = b.charAt(i);, +      if (charA != charB) return charA < charB ? -1 : 1;, +    }, +    int lengthA = a.length();, +    int lengthB = b.length();, +    if (lengthA != lengthB) return lengthA < lengthB ? -1 : 1;, +    return 0;, +  };, +, +  /**, +   * Holds interned instances. This needs to be above the init() calls below so that it's, +   * initialized by the time those parts of {@code <clinit>()} run. Guarded by CipherSuite.class., +   */, +  private static final Map<String, CipherSuite> INSTANCES = new LinkedHashMap<>();, +, +  // Last updated 2016-07-03 using cipher suites from Android 24 and Java 9., +, +  // public static final CipherSuite TLS_NULL_WITH_NULL_NULL = init("TLS_NULL_WITH_NULL_NULL", 0x0000);, +  public static final CipherSuite TLS_RSA_WITH_NULL_MD5 = init("SSL_RSA_WITH_NULL_MD5", 0x0001);, +  public static final CipherSuite TLS_RSA_WITH_NULL_SHA = init("SSL_RSA_WITH_NULL_SHA", 0x0002);, +  public static final CipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5 = init("SSL_RSA_EXPORT_WITH_RC4_40_MD5", 0x0003);, +  public static final CipherSuite TLS_RSA_WITH_RC4_128_MD5 = init("SSL_RSA_WITH_RC4_128_MD5", 0x0004);, +  public static final CipherSuite TLS_RSA_WITH_RC4_128_SHA = init("SSL_RSA_WITH_RC4_128_SHA", 0x0005);, +  // public static final CipherSuite TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = init("SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5", 0x0006);, +  // public static final CipherSuite TLS_RSA_WITH_IDEA_CBC_SHA = init("TLS_RSA_WITH_IDEA_CBC_SHA", 0x0007);, +  public static final CipherSuite TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = init("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x0008);, +  public static final CipherSuite TLS_RSA_WITH_DES_CBC_SHA = init("SSL_RSA_WITH_DES_CBC_SHA", 0x0009);, +  public static final CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA = init("SSL_RSA_WITH_3DES_EDE_CBC_SHA", 0x000a);, +  // public static final CipherSuite TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = init("SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA", 0x000b);, +  // public static final CipherSuite TLS_DH_DSS_WITH_DES_CBC_SHA = init("TLS_DH_DSS_WITH_DES_CBC_SHA", 0x000c);, +  // public static final CipherSuite TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = init("TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA", 0x000d);, +  // public static final CipherSuite TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = init("SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x000e);, +  // public static final CipherSuite TLS_DH_RSA_WITH_DES_CBC_SHA = init("TLS_DH_RSA_WITH_DES_CBC_SHA", 0x000f);, +  // public static final CipherSuite TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = init("TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA", 0x0010);, +  public static final CipherSuite TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = init("SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 0x0011);, +  public static final CipherSuite TLS_DHE_DSS_WITH_DES_CBC_SHA = init("SSL_DHE_DSS_WITH_DES_CBC_SHA", 0x0012);, +  public static final CipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = init("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 0x0013);, +  public static final CipherSuite TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = init("SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x0014);, +  public static final CipherSuite TLS_DHE_RSA_WITH_DES_CBC_SHA = init("SSL_DHE_RSA_WITH_DES_CBC_SHA", 0x0015);, +  public static final CipherSuite TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = init("SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 0x0016);, +  public static final CipherSuite TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 = init("SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", 0x0017);, +  public static final CipherSuite TLS_DH_anon_WITH_RC4_128_MD5 = init("SSL_DH_anon_WITH_RC4_128_MD5", 0x0018);, +  public static final CipherSuite TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA = init("SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 0x0019);, +  public static final CipherSuite TLS_DH_anon_WITH_DES_CBC_SHA = init("SSL_DH_anon_WITH_DES_CBC_SHA", 0x001a);, +  public static final CipherSuite TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = init("SSL_DH_anon_WITH_3DES_EDE_CBC_SHA", 0x001b);, +  public static final CipherSuite TLS_KRB5_WITH_DES_CBC_SHA = init("TLS_KRB5_WITH_DES_CBC_SHA", 0x001e);]
[+++ b/benchmarks/pom.xml, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/benchmarks/pom.xml, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttp.java, +import com.squareup.okhttp.OkUrlFactory;, +        HttpURLConnection urlConnection = new OkUrlFactory(client).open(url);, +++ b/benchmarks/pom.xml, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttp.java, +import com.squareup.okhttp.OkUrlFactory;, +        HttpURLConnection urlConnection = new OkUrlFactory(client).open(url);, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/benchmarks/pom.xml, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttp.java, +import com.squareup.okhttp.OkUrlFactory;, +        HttpURLConnection urlConnection = new OkUrlFactory(client).open(url);, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +  private final OkUrlFactory client = new OkUrlFactory(new OkHttpClient());, +    client.client().setCache(cache);, +    assertSame(cache, client.client().getCache());, +    assertNull(client.client().getResponseCache());, +    client.client().setResponseCache(new AbstractResponseCache() {, +    client.client().setResponseCache(new AbstractResponseCache() {, +    client.client().setSslSocketFactory(sslContext.getSocketFactory());, +    client.client().setHostnameVerifier(NULL_HOSTNAME_VERIFIER);, +    client.client().setSslSocketFactory(sslContext.getSocketFactory());, +    client.client().setHostnameVerifier(NULL_HOSTNAME_VERIFIER);, +    client.client().setResponseCache(new AbstractResponseCache() {, +    client.client().setConnectionPool(pool);, +    assertEquals(1, client.client().getConnectionPool().getConnectionCount());, +    client.client().setCache(cache);, +++ b/benchmarks/pom.xml, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttp.java, +import com.squareup.okhttp.OkUrlFactory;, +        HttpURLConnection urlConnection = new OkUrlFactory(client).open(url);, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +  private final OkUrlFactory client = new OkUrlFactory(new OkHttpClient());, +    client.client().setCache(cache);, +    assertSame(cache, client.client().getCache());, +    assertNull(client.client().getResponseCache());, +    client.client().setResponseCache(new AbstractResponseCache() {, +    client.client().setResponseCache(new AbstractResponseCache() {, +    client.client().setSslSocketFactory(sslContext.getSocketFactory());, +    client.client().setHostnameVerifier(NULL_HOSTNAME_VERIFIER);, +    client.client().setSslSocketFactory(sslContext.getSocketFactory());, +    client.client().setHostnameVerifier(NULL_HOSTNAME_VERIFIER);, +    client.client().setResponseCache(new AbstractResponseCache() {, +    client.client().setConnectionPool(pool);, +    assertEquals(1, client.client().getConnectionPool().getConnectionCount());, +    client.client().setCache(cache);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    MockWebServer redirectTarget = new MockWebServer();, +    redirectTarget.enqueue(new MockResponse().setBody("Page 2"));, +    redirectTarget.play();, +        .addHeader("Location: " + redirectTarget.getUrl("/")));, +    RecordedRequest request2 = redirectTarget.takeRequest();, +++ b/benchmarks/pom.xml, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.CipherSuite.TLS_DH_anon_WITH_AES_128_GCM_SHA256;, +  /**, +   * When the server doesn't present any certificates we fail the TLS handshake. This test requires, +   * that the client and server are each configured with a cipher suite that permits the server to, +   * be unauthenticated., +   */, +  @Test public void tlsSuccessWithNoPeerCertificates() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +, +    // The _anon_ cipher suites don't require server certificates., +    CipherSuite cipherSuite = TLS_DH_anon_WITH_AES_128_GCM_SHA256;, +, +    HandshakeCertificates clientCertificates = new HandshakeCertificates.Builder(), +        .build();, +    client = client.newBuilder(), +        .sslSocketFactory(, +            socketFactoryWithCipherSuite(clientCertificates.sslSocketFactory(), cipherSuite),, +            clientCertificates.trustManager()), +        .connectionSpecs(Arrays.asList(new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +            .cipherSuites(cipherSuite), +            .build())), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .build();, +, +    HandshakeCertificates serverCertificates = new HandshakeCertificates.Builder(), +        .build();, +    server.useHttps(socketFactoryWithCipherSuite(, +        serverCertificates.sslSocketFactory(), cipherSuite), false);, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals("abc", response.body().string());, +    assertNull(response.handshake().peerPrincipal());, +    assertEquals(Collections.emptyList(), response.handshake().peerCertificates());, +    assertEquals(cipherSuite, response.handshake().cipherSuite());, +  }, +, +  @Test public void tlsHostnameVerificationFailure() throws Exception {, +    server.enqueue(new MockResponse());, +, +    HeldCertificate serverCertificate = new HeldCertificate.Builder(), +        .commonName("localhost") // Unusued for hostname verification., +        .addSubjectAlternativeName("wronghostname"), +        .build();, +, +    HandshakeCertificates serverCertificates = new HandshakeCertificates.Builder(), +        .heldCertificate(serverCertificate), +        .build();, +, +    HandshakeCertificates clientCertificates = new HandshakeCertificates.Builder(), +        .addTrustedCertificate(serverCertificate.certificate()), +        .build();, +, +    client = client.newBuilder(), +        .sslSocketFactory(clientCertificates.sslSocketFactory(), clientCertificates.trustManager()), +        .build();, +    server.useHttps(serverCertificates.sslSocketFactory(), false);, +, +    executeSynchronously("/"), +        .assertFailureMatches("(?s)Hostname localhost not verified.*");, +  }, +, +  @Test public void tlsHostnameVerificationFailureNoPeerCertificates() throws Exception {, +    server.enqueue(new MockResponse());, +, +    // The _anon_ cipher suites don't require server certificates., +    CipherSuite cipherSuite = TLS_DH_anon_WITH_AES_128_GCM_SHA256;, +, +    HandshakeCertificates clientCertificates = new HandshakeCertificates.Builder(), +        .build();, +    client = client.newBuilder(), +        .sslSocketFactory(, +            socketFactoryWithCipherSuite(clientCertificates.sslSocketFactory(), cipherSuite),, +            clientCertificates.trustManager()), +        .connectionSpecs(Arrays.asList(new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +            .cipherSuites(cipherSuite), +            .build())), +        .build();, +, +    HandshakeCertificates serverCertificates = new HandshakeCertificates.Builder(), +        .build();, +    server.useHttps(socketFactoryWithCipherSuite(, +        serverCertificates.sslSocketFactory(), cipherSuite), false);, +, +    executeSynchronously("/"), +        .assertFailure("Hostname localhost not verified (no certificates)");, +  }, +, +  private SSLSocketFactory socketFactoryWithCipherSuite(, +      final SSLSocketFactory sslSocketFactory, final CipherSuite cipherSuite) {, +    return new DelegatingSSLSocketFactory(sslSocketFactory) {, +      @Override protected SSLSocket configureSocket(SSLSocket sslSocket) throws IOException {, +        sslSocket.setEnabledCipherSuites(new String[] { cipherSuite.javaName() });, +        return super.configureSocket(sslSocket);, +      }, +    };]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +  /**, +   * Enqueued on shutdown to release threads waiting on {@link #dispatch}. Note that this response, +   * isn't transmitted because the connection is closed before this response is returned., +   */, +  private static final MockResponse DEAD_LETTER = new MockResponse(), +      .setStatus("HTTP/1.1 " + 503 + " shutting down");, +, +    MockResponse result = responseQueue.take();, +, +    // If take() returned because we're shutting down, then enqueue another dead letter so that any, +    // other threads waiting on take() will also return., +    if (result == DEAD_LETTER) responseQueue.add(DEAD_LETTER);, +, +    return result;, +  @Override public void shutdown() {, +    responseQueue.add(DEAD_LETTER);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +  /**, +   * Enqueued on shutdown to release threads waiting on {@link #dispatch}. Note that this response, +   * isn't transmitted because the connection is closed before this response is returned., +   */, +  private static final MockResponse DEAD_LETTER = new MockResponse(), +      .setStatus("HTTP/1.1 " + 503 + " shutting down");, +, +    MockResponse result = responseQueue.take();, +, +    // If take() returned because we're shutting down, then enqueue another dead letter so that any, +    // other threads waiting on take() will also return., +    if (result == DEAD_LETTER) responseQueue.add(DEAD_LETTER);, +, +    return result;, +  @Override public void shutdown() {, +    responseQueue.add(DEAD_LETTER);, +  }, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import java.net.Proxy;, +, +  @Test public void addressToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, null, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxySelector=RecordingProxySelector}",, +        address.toString());, +  }, +, +  @Test public void addressWithProxyToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, Proxy.NO_PROXY, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxy=" + Proxy.NO_PROXY + "}", address.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import java.net.Proxy;, +, +  @Test public void addressToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, null, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxySelector=RecordingProxySelector}",, +        address.toString());, +  }, +, +  @Test public void addressWithProxyToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, Proxy.NO_PROXY, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxy=" + Proxy.NO_PROXY + "}", address.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import java.net.Proxy;, +, +  @Test public void addressToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, null, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxySelector=RecordingProxySelector}",, +        address.toString());, +  }, +, +  @Test public void addressWithProxyToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, Proxy.NO_PROXY, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxy=" + Proxy.NO_PROXY + "}", address.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    executeSynchronously("/"), +        .assertFailure(IOException.class), +        .assertFailureMatches("unexpected end of stream on Connection.*", +            + server.getHostName() + ":" + server.getPort() + ".*");, +  @Test public void rangeHeaderPreventsAutomaticGzip() throws Exception {, +    Buffer gzippedBody = gzip("abcabcabc");, +, +    // Enqueue a gzipped response. Our request isn't expecting it, but that's okay., +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_PARTIAL), +        .setBody(gzippedBody), +        .addHeader("Content-Encoding: gzip"), +        .addHeader("Content-Range: bytes 0-" + (gzippedBody.size() - 1)));, +, +    // Make a range request., +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .header("Range", "bytes=0-"), +        .build();, +    Call call = client.newCall(request);, +, +    // The response is not decompressed., +    Response response = call.execute();, +    assertEquals("gzip", response.header("Content-Encoding"));, +    assertEquals(gzippedBody.snapshot(), response.body().source().readByteString());, +, +    // The request did not offer gzip support., +    RecordedRequest recordedRequest = server.takeRequest();, +    assertNull(recordedRequest.getHeader("Accept-Encoding"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import java.net.Proxy;, +, +  @Test public void addressToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, null, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxySelector=RecordingProxySelector}",, +        address.toString());, +  }, +, +  @Test public void addressWithProxyToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, Proxy.NO_PROXY, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxy=" + Proxy.NO_PROXY + "}", address.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    executeSynchronously("/"), +        .assertFailure(IOException.class), +        .assertFailureMatches("unexpected end of stream on Connection.*", +            + server.getHostName() + ":" + server.getPort() + ".*");]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.HttpsURLConnection;, +      if (isHttps()) {, +        HttpsURLConnection httpsConnection = (HttpsURLConnection) httpConnection;, +        cipherSuite = httpsConnection.getCipherSuite();, +          peerCertificatesNonFinal = httpsConnection.getServerCertificates();, +        localCertificates = httpsConnection.getLocalCertificates();, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.HttpsURLConnection;, +      if (isHttps()) {, +        HttpsURLConnection httpsConnection = (HttpsURLConnection) httpConnection;, +        cipherSuite = httpsConnection.getCipherSuite();, +          peerCertificatesNonFinal = httpsConnection.getServerCertificates();, +        localCertificates = httpsConnection.getLocalCertificates();, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, +  /** Prefix used on custom headers. */, +  public String getPrefix() {, +    return "OkHttp";, +  }, +, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.HttpsURLConnection;, +      if (isHttps()) {, +        HttpsURLConnection httpsConnection = (HttpsURLConnection) httpConnection;, +        cipherSuite = httpsConnection.getCipherSuite();, +          peerCertificatesNonFinal = httpsConnection.getServerCertificates();, +        localCertificates = httpsConnection.getLocalCertificates();, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, +  /** Prefix used on custom headers. */, +  public String getPrefix() {, +    return "OkHttp";, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.HttpsURLConnection;, +      if (isHttps()) {, +        HttpsURLConnection httpsConnection = (HttpsURLConnection) httpConnection;, +        cipherSuite = httpsConnection.getCipherSuite();, +          peerCertificatesNonFinal = httpsConnection.getServerCertificates();, +        localCertificates = httpsConnection.getLocalCertificates();, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, +  /** Prefix used on custom headers. */, +  public String getPrefix() {, +    return "OkHttp";, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/ResponseHeaders.java, +import com.squareup.okhttp.internal.Platform;, +  private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +  private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +  static final String RESPONSE_SOURCE = Platform.get().getPrefix() + "-Response-Source";, +  static final String SELECTED_TRANSPORT = Platform.get().getPrefix() + "-Selected-Transport";, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.HttpsURLConnection;, +      if (isHttps()) {, +        HttpsURLConnection httpsConnection = (HttpsURLConnection) httpConnection;, +        cipherSuite = httpsConnection.getCipherSuite();, +          peerCertificatesNonFinal = httpsConnection.getServerCertificates();, +        localCertificates = httpsConnection.getLocalCertificates();, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, +  /** Prefix used on custom headers. */, +  public String getPrefix() {, +    return "OkHttp";, +  }]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +  @Test public void pingsTransmitted() throws Exception {, +    // Ping every 500 ms, starting at 500 ms., +    client = client.newBuilder(), +        .pingInterval(500, TimeUnit.MILLISECONDS), +        .build();, +, +    // Delay the response to give 1 ping enough time to be sent and replied to., +    server.enqueue(new MockResponse(), +        .setBodyDelay(750, TimeUnit.MILLISECONDS), +        .setBody("ABC"));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals("ABC", response.body().string());, +, +    assertEquals(Protocol.HTTP_2, response.protocol());, +, +    // Confirm a single ping was sent and received, and its reply was sent and received., +    List<String> logs = http2Handler.takeAll();, +    assertEquals(1, countFrames(logs, "FINE: >> 0x00000000     8 PING          "));, +    assertEquals(1, countFrames(logs, "FINE: << 0x00000000     8 PING          "));, +    assertEquals(1, countFrames(logs, "FINE: >> 0x00000000     8 PING          ACK"));, +    assertEquals(1, countFrames(logs, "FINE: << 0x00000000     8 PING          ACK"));, +  }, +, +    for (String log: logs) {, +      if (log.contains(type)) {, +        return log;, +  private int countFrames(List<String> logs, String message) {, +    int result = 0;, +    for (String log: logs) {, +      if (log.equals(message)) {, +        result++;, +      }, +    }, +    return result;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +  @Test public void pingsTransmitted() throws Exception {, +    // Ping every 500 ms, starting at 500 ms., +    client = client.newBuilder(), +        .pingInterval(500, TimeUnit.MILLISECONDS), +        .build();, +, +    // Delay the response to give 1 ping enough time to be sent and replied to., +    server.enqueue(new MockResponse(), +        .setBodyDelay(750, TimeUnit.MILLISECONDS), +        .setBody("ABC"));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals("ABC", response.body().string());, +, +    assertEquals(Protocol.HTTP_2, response.protocol());, +, +    // Confirm a single ping was sent and received, and its reply was sent and received., +    List<String> logs = http2Handler.takeAll();, +    assertEquals(1, countFrames(logs, "FINE: >> 0x00000000     8 PING          "));, +    assertEquals(1, countFrames(logs, "FINE: << 0x00000000     8 PING          "));, +    assertEquals(1, countFrames(logs, "FINE: >> 0x00000000     8 PING          ACK"));, +    assertEquals(1, countFrames(logs, "FINE: << 0x00000000     8 PING          ACK"));, +  }, +, +    for (String log: logs) {, +      if (log.contains(type)) {, +        return log;, +  private int countFrames(List<String> logs, String message) {, +    int result = 0;, +    for (String log: logs) {, +      if (log.equals(message)) {, +        result++;, +      }, +    }, +    return result;, +  }, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java, +      throw new IllegalArgumentException("sslSocketFactory == null");, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +  @Test public void pingsTransmitted() throws Exception {, +    // Ping every 500 ms, starting at 500 ms., +    client = client.newBuilder(), +        .pingInterval(500, TimeUnit.MILLISECONDS), +        .build();, +, +    // Delay the response to give 1 ping enough time to be sent and replied to., +    server.enqueue(new MockResponse(), +        .setBodyDelay(750, TimeUnit.MILLISECONDS)]
[+++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/okhttp-tests/pom.xml, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CertificatePinnerTest.java, +import java.util.Set;, +import okio.ByteString;, +import static com.squareup.okhttp.TestUtil.setOf;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +  static ByteString keypairACertificate1PinBase64;, +  static ByteString keypairBCertificate1PinBase64;, +, +  static KeyPair keyPairC;, +  static X509Certificate keypairCCertificate1;, +  static String keypairCCertificate1Pin;, +      keypairACertificate1PinBase64 = pinToBase64(keypairACertificate1Pin);, +      keypairBCertificate1PinBase64 = pinToBase64(keypairBCertificate1Pin);, +, +      keyPairC = sslContextBuilder.generateKeyPair();, +      keypairCCertificate1 = sslContextBuilder.selfSignedCertificate(keyPairC, "1");, +      keypairCCertificate1Pin = CertificatePinner.pin(keypairCCertificate1);, +  static ByteString pinToBase64(String pin) {, +    return ByteString.decodeBase64(pin.substring("sha1/".length()));, +  }, +, +, +  @Test public void successfulCheckForWildcardHostname() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", keypairACertificate1Pin), +        .build();, +, +    certificatePinner.check("a.example.com", keypairACertificate1);, +  }, +, +  @Test public void successfulMatchAcceptsAnyMatchingCertificateForWildcardHostname() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", keypairBCertificate1Pin), +        .build();, +, +    certificatePinner.check("a.example.com", keypairACertificate1, keypairBCertificate1);, +  }, +, +  @Test public void unsuccessfulCheckForWildcardHostname() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", keypairACertificate1Pin), +        .build();, +, +    try {, +      certificatePinner.check("a.example.com", keypairBCertificate1);, +      fail();, +    } catch (SSLPeerUnverifiedException expected) {, +    }, +  }, +, +  @Test public void multipleCertificatesForOneWildcardHostname() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", keypairACertificate1Pin, keypairBCertificate1Pin), +        .build();, +, +    certificatePinner.check("a.example.com", keypairACertificate1);, +    certificatePinner.check("a.example.com", keypairBCertificate1);, +  }, +, +  @Test public void successfulCheckForOneHostnameWithWildcardAndDirectCertificate() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", keypairACertificate1Pin), +        .add("a.example.com", keypairBCertificate1Pin), +        .build();, +, +    certificatePinner.check("a.example.com", keypairACertificate1);, +    certificatePinner.check("a.example.com", keypairBCertificate1);, +  }, +, +  @Test public void unsuccessfulCheckForOneHostnameWithWildcardAndDirectCertificate() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", keypairACertificate1Pin), +        .add("a.example.com", keypairBCertificate1Pin), +        .build();, +, +    try {, +      certificatePinner.check("a.example.com", keypairCCertificate1);, +      fail();, +    } catch (SSLPeerUnverifiedException expected) {, +    }, +  }, +, +  @Test public void successfulFindMatchingPins() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("first.com", keypairACertificate1Pin, keypairBCertificate1Pin), +        .add("second.com", keypairCCertificate1Pin), +        .build();, +, +    Set<ByteString> expectedPins = setOf(keypairACertificate1PinBase64, keypairBCertificate1PinBase64);, +    Set<ByteString> matchedPins  = certificatePinner.findMatchingPins("first.com");, +]
[+++ b/pom.xml, +    <groupId>com.squareup</groupId>]
[+++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.Set;, +  private final Set<Socket> openClientSockets =, +      Collections.newSetFromMap(new ConcurrentHashMap<Socket, Boolean>());, +  private final Set<SpdyConnection> openSpdyConnections =, +      Collections.newSetFromMap(new ConcurrentHashMap<SpdyConnection, Boolean>());, +        for (Iterator<Socket> s = openClientSockets.iterator(); s.hasNext(); ) {, +        for (Iterator<SpdyConnection> s = openSpdyConnections.iterator(); s.hasNext(); ) {, +            openClientSockets.add(socket);, +          openClientSockets.add(socket);, +          openSpdyConnections.add(spdyConnection);, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.Set;, +  private final Set<Socket> openClientSockets =, +      Collections.newSetFromMap(new ConcurrentHashMap<Socket, Boolean>());, +  private final Set<SpdyConnection> openSpdyConnections =, +      Collections.newSetFromMap(new ConcurrentHashMap<SpdyConnection, Boolean>());, +        for (Iterator<Socket> s = openClientSockets.iterator(); s.hasNext(); ) {, +        for (Iterator<SpdyConnection> s = openSpdyConnections.iterator(); s.hasNext(); ) {, +            openClientSockets.add(socket);, +          openClientSockets.add(socket);, +          openSpdyConnections.add(spdyConnection);, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.Set;, +  private final Set<Socket> openClientSockets =, +      Collections.newSetFromMap(new ConcurrentHashMap<Socket, Boolean>());, +  private final Set<SpdyConnection> openSpdyConnections =, +      Collections.newSetFromMap(new ConcurrentHashMap<SpdyConnection, Boolean>());, +        for (Iterator<Socket> s = openClientSockets.iterator(); s.hasNext(); ) {, +        for (Iterator<SpdyConnection> s = openSpdyConnections.iterator(); s.hasNext(); ) {, +            openClientSockets.add(socket);, +          openClientSockets.add(socket);, +          openSpdyConnections.add(spdyConnection);, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.Set;, +  private final Set<Socket> openClientSockets =, +      Collections.newSetFromMap(new ConcurrentHashMap<Socket, Boolean>());, +  private final Set<SpdyConnection> openSpdyConnections =, +      Collections.newSetFromMap(new ConcurrentHashMap<SpdyConnection, Boolean>());, +        for (Iterator<Socket> s = openClientSockets.iterator(); s.hasNext(); ) {, +        for (Iterator<SpdyConnection> s = openSpdyConnections.iterator(); s.hasNext(); ) {, +            openClientSockets.add(socket);, +          openClientSockets.add(socket);, +          openSpdyConnections.add(spdyConnection);, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.Set;, +  private final Set<Socket> openClientSockets =, +      Collections.newSetFromMap(new ConcurrentHashMap<Socket, Boolean>());, +  private final Set<SpdyConnection> openSpdyConnections =, +      Collections.newSetFromMap(new ConcurrentHashMap<SpdyConnection, Boolean>());, +        for (Iterator<Socket> s = openClientSockets.iterator(); s.hasNext(); ) {, +        for (Iterator<SpdyConnection> s = openSpdyConnections.iterator(); s.hasNext(); ) {, +            openClientSockets.add(socket);, +          openClientSockets.add(socket);, +          openSpdyConnections.add(spdyConnection);, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        ConnectionAcquired.class);, +        ConnectionAcquired.class);, +    ConnectionAcquired connectionAcquired = listener.removeUpToEvent(ConnectionAcquired.class);, +    assertSame(call, connectionAcquired.call);, +    assertNotNull(connectionAcquired.connection);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +    assertFalse(remainingEvents.contains(ConnectionAcquired.class));, +    ConnectionAcquired connectionAcquired1 = listener.removeUpToEvent(ConnectionAcquired.class);, +    ConnectionAcquired connectionAcquired2 = listener.removeUpToEvent(ConnectionAcquired.class);, +    assertSame(connectionAcquired1.connection, connectionAcquired2.connection);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +  static final class ConnectionAcquired {, +    ConnectionAcquired(Call call, Connection connection) {, +      this.call = call;, +      this.connection = connection;, +    }, +  }, +, +  static final class ConnectionReleased {, +    final Call call;, +    final Connection connection;, +, +    ConnectionReleased(Call call, Connection connection) {, +        Proxy proxy, Protocol protocol, Throwable throwable) {, +    @Override public void connectionAcquired(Call call, Connection connection) {, +      eventSequence.offer(new ConnectionAcquired(call, connection));, +    }, +, +    @Override public void connectionReleased(Call call, Connection connection) {, +      eventSequence.offer(new ConnectionReleased(call, connection));, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        ConnectionAcquired.class);, +        ConnectionAcquired.class);, +    ConnectionAcquired connectionAcquired = listener.removeUpToEvent(ConnectionAcquired.class);, +    assertSame(call, connectionAcquired.call);, +    assertNotNull(connectionAcquired.connection);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +    assertFalse(remainingEvents.contains(ConnectionAcquired.class));, +    ConnectionAcquired connectionAcquired1 = listener.removeUpToEvent(ConnectionAcquired.class);, +    ConnectionAcquired connectionAcquired2 = listener.removeUpToEvent(ConnectionAcquired.class);, +    assertSame(connectionAcquired1.connection, connectionAcquired2.connection);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +  static final class ConnectionAcquired {, +    ConnectionAcquired(Call call, Connection connection) {, +      this.call = call;, +      this.connection = connection;, +    }, +  }, +, +  static final class ConnectionReleased {, +    final Call call;, +    final Connection connection;, +, +    ConnectionReleased(Call call, Connection connection) {, +        Proxy proxy, Protocol protocol, Throwable throwable) {, +    @Override public void connectionAcquired(Call call, Connection connection) {, +      eventSequence.offer(new ConnectionAcquired(call, connection));, +    }, +, +    @Override public void connectionReleased(Call call, Connection connection) {, +      eventSequence.offer(new ConnectionReleased(call, connection));, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +  /**, +   * Invoked as soon as a call is enqueued or executed by a client. In case of thread or stream, +   * limits, this call may be executed well before processing the request is able to begin., +   *, +   * <p>This will be invoked only once for a single {@link Call}. Retries of different routes, +   * or redirects will be handled within the boundaries of a single fetchStart and, +   * {@link #fetchEnd(Call, Throwable)} pair., +   */, +   * <p>{@code protocol} and {@code proxy} will be non-null and {@code throwable} will be null when, +   * the connection is successfully established., +   * <p>{@code protocol} and {@code proxy} will be null and {@code throwable} will be non-null in, +   * the case of a failed connection attempt., +      Proxy proxy, @Nullable Protocol protocol, @Nullable Throwable throwable) {, +  public void connectionAcquired(Call call, Connection connection) {, +  /**, +   * Invoked after a connection has been released for the {@code call}., +   *, +   * <p>This method is always invoked after {@link #connectionAcquired(Call, Connection)}., +   *, +   * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response, +   * to the {@link Call#request()} is a redirect to a different address., +   */, +  public void connectionReleased(Call call, Connection connection) {, +  }, +, +  /**, +   * Invoked just prior to sending request headers., +   *, +   * <p>The connection is implicit, and will generally relate to the last, +   * {@link #connectionAcquired(Call, Connection)} event., +   *, +   * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response, +   * to the {@link Call#request()} is a redirect to a different address., +   */, +  /**]
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java, +  /** Earliest draft that is code-compatible with latest. */, +  private static final int BASE_DRAFT = 9;, +          if (firstStory.getDraft() >= BASE_DRAFT) {, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java, +  /** Earliest draft that is code-compatible with latest. */, +  private static final int BASE_DRAFT = 9;, +          if (firstStory.getDraft() >= BASE_DRAFT) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import com.squareup.okhttp.internal.ws.WebSocket;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml]
[+++ b/benchmarks/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.6.0-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +    return new Builder(this);, +    private String method;, +    private final Headers.Builder headers;, +    public Builder() {, +      this.method = "GET";, +      this.headers = new Headers.Builder();, +    private Builder(Request request) {, +      this.url = request.url;, +      this.method = request.method;, +      this.body = request.body;, +      this.tag = request.tag;, +      this.headers = request.headers.newBuilder();, +        return url(new URL(url));, +      if (url == null) throw new IllegalStateException("url == null");, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +    return new Builder(this);, +    private String method;, +    private final Headers.Builder headers;, +    public Builder() {, +      this.method = "GET";, +      this.headers = new Headers.Builder();, +    private Builder(Request request) {, +      this.url = request.url;, +      this.method = request.method;, +      this.body = request.body;, +      this.tag = request.tag;, +      this.headers = request.headers.newBuilder();, +        return url(new URL(url));, +      if (url == null) throw new IllegalStateException("url == null");, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +import com.squareup.okhttp.internal.http.SyntheticHeaders;, +        } else if (SyntheticHeaders.SENT_MILLIS.equalsIgnoreCase(fieldName)) {, +        } else if (SyntheticHeaders.RECEIVED_MILLIS.equalsIgnoreCase(fieldName)) {, +      headers.set(SyntheticHeaders.SENT_MILLIS, Long.toString(sentRequestMillis));, +      headers.set(SyntheticHeaders.RECEIVED_MILLIS, Long.toString(receivedResponseMillis));, +      headers.set(SyntheticHeaders.RESPONSE_SOURCE, responseSource + " " + statusLine.code());, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +    return new Builder(this);, +    private String method;, +    private final Headers.Builder headers;, +    public Builder() {, +      this.method = "GET";, +      this.headers = new Headers.Builder();, +    private Builder(Request request) {, +      this.url = request.url;, +      this.method = request.method;, +      this.body = request.body;, +      this.tag = request.tag;, +      this.headers = request.headers.newBuilder();, +        return url(new URL(url));, +      if (url == null) throw new IllegalStateException("url == null");, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +import com.squareup.okhttp.internal.http.SyntheticHeaders;, +        } else if (SyntheticHeaders.SENT_MILLIS.equalsIgnoreCase(fieldName)) {, +        } else if (SyntheticHeaders.RECEIVED_MILLIS.equalsIgnoreCase(fieldName)) {, +      headers.set(SyntheticHeaders.SENT_MILLIS, Long.toString(sentRequestMillis));, +      headers.set(SyntheticHeaders.RECEIVED_MILLIS, Long.toString(receivedResponseMillis));, +      headers.set(SyntheticHeaders.RESPONSE_SOURCE, responseSource + " " + statusLine.code());, +++ b/okhttp/src/main/java/com/squareup/okhttp/ResponseSource.java, +  NETWORK,, +, +  /**, +   * The request demanded a cached response that the cache couldn't satisfy., +   * This yields a 504 (Gateway Timeout) response as specified by, +   * http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.4., +   */, +  NONE;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +    return new Builder(this);, +    private String method;, +    private final Headers.Builder headers;, +    public Builder() {, +      this.method = "GET";, +      this.headers = new Headers.Builder();, +    private Builder(Request request) {, +      this.url = request.url;, +      this.method = request.method;, +      this.body = request.body;, +      this.tag = request.tag;, +      this.headers = request.headers.newBuilder();, +        return url(new URL(url));, +      if (url == null) throw new IllegalStateException("url == null");, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +import com.squareup.okhttp.internal.http.SyntheticHeaders;, +        } else if (SyntheticHeaders.SENT_MILLIS.equalsIgnoreCase(fieldName)) {, +        } else if (SyntheticHeaders.RECEIVED_MILLIS.equalsIgnoreCase(fieldName)) {, +      headers.set(SyntheticHeaders.SENT_MILLIS, Long.toString(sentRequestMillis));, +      headers.set(SyntheticHeaders.RECEIVED_MILLIS, Long.toString(receivedResponseMillis));, +      headers.set(SyntheticHeaders.RESPONSE_SOURCE, responseSource + " " + statusLine.code());, +++ b/okhttp/src/main/java/com/squareup/okhttp/ResponseSource.java, +  NETWORK,, +, +  /**, +   * The request demanded a cached response that the cache couldn't satisfy., +   * This yields a 504 (Gateway Timeout) response as specified by, +   * http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.4., +   */, +  NONE;, +++ b/okhttp/src/main/java/com/squareup/okhttp/TunnelRequest.java]
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  // https://github.com/square/okhttp/issues/442, +      assertTrue(expected.getMessage().contains("CLEARTEXT communication not supported"));, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  // https://github.com/square/okhttp/issues/442, +      assertTrue(expected.getMessage().contains("CLEARTEXT communication not supported"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +  private static final List<ConnectionSpec> CONNECTION_SPECS = Util.immutableList(, +      ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT);, +, +        Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), CONNECTION_SPECS, proxySelector);, +        CONNECTION_SPECS, proxySelector);, +    Route httpRoute = new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress);, +    Route spdyRoute = new Route(spdyAddress, Proxy.NO_PROXY, spdySocketAddress);, +    httpA.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    httpB.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    httpC.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    httpD.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    httpE.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    spdyA.connect(20000, 20000, 2000, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    connection = new Connection(pool, new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress));, +    connection.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  // https://github.com/square/okhttp/issues/442, +      assertTrue(expected.getMessage().contains("CLEARTEXT communication not supported"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.Internal;, +  static {]
[+++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/mockwebserver/gradle.properties, +POM_ARTIFACT_ID=mockwebserver, +POM_NAME=mockwebserver, +POM_PACKAGING=jar, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/mockwebserver/gradle.properties, +POM_ARTIFACT_ID=mockwebserver, +POM_NAME=mockwebserver, +POM_PACKAGING=jar, +++ b/okcurl/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/mockwebserver/gradle.properties, +POM_ARTIFACT_ID=mockwebserver, +POM_NAME=mockwebserver, +POM_PACKAGING=jar, +++ b/okcurl/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/okcurl/gradle.properties, +POM_ARTIFACT_ID=okcurl, +POM_NAME=okcurl, +POM_PACKAGING=jar, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/mockwebserver/gradle.properties, +POM_ARTIFACT_ID=mockwebserver, +POM_NAME=mockwebserver, +POM_PACKAGING=jar]
[+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ /dev/null, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ /dev/null, +++ /dev/null, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-testing-support/src/main/java/okhttp3/testing/RecordingHostnameVerifier.java, +/*, + * Copyright (C) 2013 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.testing;, +, +import java.util.ArrayList;, +import java.util.List;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSession;, +, +public final class RecordingHostnameVerifier implements HostnameVerifier {, +  public final List<String> calls = new ArrayList<>();, +, +  public boolean verify(String hostname, SSLSession session) {, +    calls.add("verify " + hostname);, +    return true;, +  }, +}, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.testing.RecordingHostnameVerifier;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-testing-support/src/main/java/okhttp3/testing/RecordingHostnameVerifier.java, +/*, + * Copyright (C) 2013 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.testing;, +, +import java.util.ArrayList;, +import java.util.List;, +import javax.net.ssl.HostnameVerifier;]
[+++ b/okhttp-apache/pom.xml, +  <packaging>bundle</packaging>, +      <plugin>, +        <groupId>org.apache.felix</groupId>, +        <artifactId>maven-bundle-plugin</artifactId>, +        <extensions>true</extensions>, +        <configuration>, +          <instructions>, +            <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, +            <Bundle-Version>${project.version}</Bundle-Version>, +            <Export-Package>, +              okhttp3.apache.*, +            </Export-Package>, +          </instructions>, +        </configuration>, +      </plugin>, +++ b/okhttp-apache/pom.xml, +  <packaging>bundle</packaging>, +      <plugin>, +        <groupId>org.apache.felix</groupId>, +        <artifactId>maven-bundle-plugin</artifactId>, +        <extensions>true</extensions>, +        <configuration>, +          <instructions>, +            <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, +            <Bundle-Version>${project.version}</Bundle-Version>, +            <Export-Package>, +              okhttp3.apache.*, +            </Export-Package>, +          </instructions>, +        </configuration>, +      </plugin>, +++ b/okhttp-logging-interceptor/pom.xml, +  <packaging>bundle</packaging>, +, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.felix</groupId>, +        <artifactId>maven-bundle-plugin</artifactId>, +        <extensions>true</extensions>, +        <configuration>, +          <instructions>, +            <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, +            <Bundle-Version>${project.version}</Bundle-Version>, +            <Export-Package>, +              okhttp3.logging.*, +            </Export-Package>, +          </instructions>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/okhttp-apache/pom.xml, +  <packaging>bundle</packaging>, +      <plugin>, +        <groupId>org.apache.felix</groupId>, +        <artifactId>maven-bundle-plugin</artifactId>, +        <extensions>true</extensions>, +        <configuration>, +          <instructions>, +            <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, +            <Bundle-Version>${project.version}</Bundle-Version>, +            <Export-Package>, +              okhttp3.apache.*, +            </Export-Package>, +          </instructions>, +        </configuration>, +      </plugin>, +++ b/okhttp-logging-interceptor/pom.xml, +  <packaging>bundle</packaging>, +, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.felix</groupId>, +        <artifactId>maven-bundle-plugin</artifactId>, +        <extensions>true</extensions>, +        <configuration>, +          <instructions>, +            <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, +            <Bundle-Version>${project.version}</Bundle-Version>, +            <Export-Package>, +              okhttp3.logging.*, +            </Export-Package>, +          </instructions>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        + responseBody.contentLength() + "-byte body" : "") + ')');, +        if (responseBody.contentLength() != 0) {, +++ b/okhttp-apache/pom.xml, +  <packaging>bundle</packaging>, +      <plugin>, +        <groupId>org.apache.felix</groupId>, +        <artifactId>maven-bundle-plugin</artifactId>]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    LogRecorder assertLogMatch(String pattern) {, +++ b/build.gradle, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    LogRecorder assertLogMatch(String pattern) {, +++ b/okhttp/src/main/java/okhttp3/Route.kt, +class Route(, +  fun requiresTunnel(): Boolean {, +    return address.sslSocketFactory() != null && proxy.type() == Proxy.Type.HTTP, +  }, +, +  override fun equals(other: Any?): Boolean {, +    return other is Route, +        && other.address == address, +        && other.proxy == proxy, +        && other.inetSocketAddress == inetSocketAddress, +  }, +, +  override fun hashCode(): Int {, +    var result = 17, +    result = 31 * result + address.hashCode(), +    result = 31 * result + proxy.hashCode(), +    result = 31 * result + inetSocketAddress.hashCode(), +    return result, +  }, +++ b/build.gradle, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    LogRecorder assertLogMatch(String pattern) {, +++ b/okhttp/src/main/java/okhttp3/Route.kt, +class Route(, +  fun requiresTunnel(): Boolean {, +    return address.sslSocketFactory() != null && proxy.type() == Proxy.Type.HTTP, +  }, +, +  override fun equals(other: Any?): Boolean {, +    return other is Route, +        && other.address == address, +        && other.proxy == proxy, +        && other.inetSocketAddress == inetSocketAddress, +  }, +, +  override fun hashCode(): Int {, +    var result = 17, +    result = 31 * result + address.hashCode(), +    result = 31 * result + proxy.hashCode(), +    result = 31 * result + inetSocketAddress.hashCode(), +    return result, +  }, +++ b/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.http;, +, +import java.io.IOException;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +import javax.annotation.Nullable;, +import okhttp3.Call;, +import okhttp3.Connection;, +import okhttp3.Interceptor;, +import okhttp3.Request;, +import okhttp3.Response;, +import okhttp3.internal.connection.Exchange;, +import okhttp3.internal.connection.Transmitter;, +, +import static okhttp3.internal.Util.checkDuration;, +, +/**, + * A concrete interceptor chain that carries the entire interceptor chain: all application, + * interceptors, the OkHttp core, all network interceptors, and finally the network caller., + *, + * <p>If the chain is for an application interceptor then {@link #connection} must be null., + * Otherwise it is for a network interceptor and {@link #connection} must be non-null., + */, +public final class RealInterceptorChain implements Interceptor.Chain {, +  private final List<Interceptor> interceptors;, +  private final Transmitter transmitter;, +  private final @Nullable Exchange exchange;, +  private final int index;, +  private final Request request;, +  private final Call call;, +  private final int connectTimeout;, +  private final int readTimeout;, +  private final int writeTimeout;, +  private int calls;]
[+++ b/bom/pom.xml, +  <distributionManagement>, +    <repository>, +      <id>sonatype-nexus-staging</id>, +      <name>Nexus Release Repository</name>, +      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>, +    </repository>, +  </distributionManagement>, +++ b/bom/pom.xml, +  <distributionManagement>, +    <repository>, +      <id>sonatype-nexus-staging</id>, +      <name>Nexus Release Repository</name>, +      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>, +    </repository>, +  </distributionManagement>, +++ b/pom.xml]
[+++ /dev/null, +++ /dev/null, +++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the, +      Work or Derivative Works thereof in any medium, with or without, +      modifications, and in Source or Object form, provided that You, +      meet the following conditions:, +, +      (a) You must give any other recipients of the Work or, +          Derivative Works a copy of this License; and, +]
[+++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0-SNAPSHOT</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels has, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels has, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +          logger.log(name + ": " + headers.value(i));, +        logger.log(headers.name(i) + ": " + headers.value(i));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels has, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +          logger.log(name + ": " + headers.value(i));, +        logger.log(headers.name(i) + ": " + headers.value(i));, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels has, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +          logger.log(name + ": " + headers.value(i));, +        logger.log(headers.name(i) + ": " + headers.value(i));, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();]
[+++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static String getDefaultUserAgent() {, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int position) {, +        return delegate.getHeaderFieldKey(position);, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int position) {, +        return delegate.getHeaderFieldKey(position);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RequestHeaders.java, +final class RequestHeaders {, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int position) {, +        return delegate.getHeaderFieldKey(position);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RequestHeaders.java, +final class RequestHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/ResponseHeaders.java, +final class ResponseHeaders {, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int position) {, +        return delegate.getHeaderFieldKey(position);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RequestHeaders.java, +final class RequestHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/ResponseHeaders.java, +final class ResponseHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RouteSelector.java, +final class RouteSelector {, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int position) {, +        return delegate.getHeaderFieldKey(position);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RequestHeaders.java, +final class RequestHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/ResponseHeaders.java, +final class ResponseHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RouteSelector.java]
[+++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ /dev/null, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.SingleInetAddressDns;, +        .dns(new SingleInetAddressDns()), +        .dns(new SingleInetAddressDns()), +        .dns(new SingleInetAddressDns()), +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.SingleInetAddressDns;, +        .dns(new SingleInetAddressDns()), +        .dns(new SingleInetAddressDns()), +        .dns(new SingleInetAddressDns()), +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.internal.SingleInetAddressDns;, +  private final SingleInetAddressDns singleDns = new SingleInetAddressDns();, +        .dns(singleDns), +    dns.set("fakeurl", singleDns.lookup(server.getHostName()));, +    dns.set("www.fakeurl", singleDns.lookup(server.getHostName()));, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.SingleInetAddressDns;, +        .dns(new SingleInetAddressDns()), +        .dns(new SingleInetAddressDns()), +        .dns(new SingleInetAddressDns()), +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.internal.SingleInetAddressDns;, +  private final SingleInetAddressDns singleDns = new SingleInetAddressDns();, +        .dns(singleDns), +    dns.set("fakeurl", singleDns.lookup(server.getHostName()));, +    dns.set("www.fakeurl", singleDns.lookup(server.getHostName()));, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +package okhttp3;, +, +import java.net.InetSocketAddress;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import okhttp3.internal.SingleInetAddressDns;, +import okhttp3.internal.http2.Header;, +, +public final class TestUtil {, +  public static final InetSocketAddress UNREACHABLE_ADDRESS, +      = new InetSocketAddress("198.51.100.1", 8080);, +, +  private TestUtil() {, +  }, +, +  private static final ConnectionPool connectionPool = new ConnectionPool();, +  private static final Dispatcher dispatcher = new Dispatcher();, +, +  /**, +   * Returns an OkHttpClient for all tests to use as a starting point., +   *, +   * <p>The shared instance allows all tests to share a single connection pool, which prevents idle, +   * connections from consuming unnecessary resources while connections wait to be evicted., +   *, +   * <p>This client is also configured to be slightly more deterministic, returning a single IP, +   * address for all hosts, regardless of the actual number of IP addresses reported by DNS., +   */, +  public static OkHttpClient defaultClient() {, +    return new OkHttpClient.Builder(), +        .connectionPool(connectionPool), +        .dispatcher(dispatcher), +        .dns(new SingleInetAddressDns()) // Prevent unexpected fallback addresses., +        .build();, +  }, +, +  public static List<Header> headerEntries(String... elements) {, +    List<Header> result = new ArrayList<>(elements.length / 2);, +    for (int i = 0; i < elements.length; i += 2) {]
[+++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/crawler/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketRecorder.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.TimeUnit;, +import okhttp3.MediaType;, +import okhttp3.Response;, +import okhttp3.ResponseBody;, +import okhttp3.WebSocket;, +import okhttp3.WebSocketListener;, +import okhttp3.internal.ws.WebSocketReader;, +import okio.Buffer;, +, +import static okhttp3.WebSocket.BINARY;, +import static okhttp3.WebSocket.TEXT;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +, +public final class WebSocketRecorder implements WebSocketReader.FrameCallback, WebSocketListener {, +  public interface MessageDelegate {, +    void onMessage(ResponseBody message) throws IOException;, +  }, +, +  private final BlockingQueue<Object> events = new LinkedBlockingQueue<>();, +  private MessageDelegate delegate;, +  private Response response;, +, +  /** Sets a delegate for the next call to {@link #onMessage}. Cleared after invoked. */, +  public void setNextMessageDelegate(MessageDelegate delegate) {, +    this.delegate = delegate;, +  }, +, +  @Override public void onOpen(WebSocket webSocket, Response response) {, +  }, +, +  @Override public void onMessage(ResponseBody message) throws IOException {, +    if (delegate != null) {, +      delegate.onMessage(message);, +      delegate = null;, +    } else {, +      Message event = new Message(message.contentType());, +      message.source().readAll(event.buffer);, +      message.close();, +      events.add(event);, +    }, +  }, +, +  @Override public void onPing(Buffer buffer) {, +    events.add(new Ping(buffer));, +  }, +, +  @Override public void onPong(Buffer buffer) {, +    events.add(new Pong(buffer));, +  }, +, +  @Override public void onClose(int code, String reason) {, +    events.add(new Close(code, reason));, +  }, +, +  @Override public void onFailure(IOException e, Response response) {, +    events.add(e);, +    this.response = response;, +  }, +, +  private Object nextEvent() {, +    try {, +      Object event = events.poll(10, TimeUnit.SECONDS);, +      if (event == null) {, +        throw new AssertionError("Timed out.");, +      }, +      return event;, +    } catch (InterruptedException e) {, +      throw new AssertionError(e);, +    }, +  }, +, +  public void assertTextMessage(String payload) throws IOException {, +    Message message = new Message(TEXT);, +    message.buffer.writeUtf8(payload);, +    Object actual = nextEvent();]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, +            .listener(this), +  @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, +            .listener(this), +  @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  private class FramedSocketHandler extends FramedConnection.Listener {, +    @Override public void onStream(FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, +            .listener(this), +  @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  private class FramedSocketHandler extends FramedConnection.Listener {, +    @Override public void onStream(FramedStream stream) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      if (!logBody || !hasRequestBody) {, +        logger.log("--> END " + request.method());, +      } else if (bodyEncoded(request.headers())) {, +        logger.log("--> END " + request.method() + " (encoded body omitted)");, +      } else {, +        logger.log("--> END " + request.method(), +            + " (" + requestBody.contentLength() + "-byte body)");, +      if (!logBody || !HttpEngine.hasBody(response)) {, +        logger.log("<-- END HTTP");, +      } else if (bodyEncoded(response.headers())) {, +        logger.log("<-- END HTTP (encoded body omitted)");, +      } else {, +        logger.log("<-- END HTTP (" + buffer.size() + "-byte body)");, +  private boolean bodyEncoded(Headers headers) {, +    String contentEncoding = headers.get("Content-Encoding");, +    return contentEncoding != null && !contentEncoding.equalsIgnoreCase("identity");, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, +            .listener(this), +  @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  private class FramedSocketHandler extends FramedConnection.Listener {, +    @Override public void onStream(FramedStream stream) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      if (!logBody || !hasRequestBody) {, +        logger.log("--> END " + request.method());, +      } else if (bodyEncoded(request.headers())) {, +        logger.log("--> END " + request.method() + " (encoded body omitted)");, +      } else {, +        logger.log("--> END " + request.method(), +            + " (" + requestBody.contentLength() + "-byte body)");, +      if (!logBody || !HttpEngine.hasBody(response)) {, +        logger.log("<-- END HTTP");, +      } else if (bodyEncoded(response.headers())) {, +        logger.log("<-- END HTTP (encoded body omitted)");, +      } else {, +        logger.log("<-- END HTTP (" + buffer.size() + "-byte body)");, +  private boolean bodyEncoded(Headers headers) {, +    String contentEncoding = headers.get("Content-Encoding");, +    return contentEncoding != null && !contentEncoding.equalsIgnoreCase("identity");, +  }, +, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +import com.squareup.okhttp.Response;, +import okio.Buffer;, +import okio.ByteString;, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +    Request request = request().post(RequestBody.create(PLAIN, "Hi?")).build();, +    Response response = client.newCall(request).execute();, +    response.body().close();, +    Request request = request().post(RequestBody.create(null, "Hi?")).build();, +    Response response = client.newCall(request).execute();, +    response.body().close();, +    Response response = client.newCall(request().post(body).build()).execute();, +    response.body().close();, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +    Request request = request().post(RequestBody.create(PLAIN, "Hi?")).build();, +    Response response = client.newCall(request).execute();, +    response.body().close();, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +  @Test public void bodyResponseNotIdentityEncoded() throws IOException {, +    setLevel(Level.BODY);]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void hostnameImplicitlyStarts() throws IOException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void hostnameImplicitlyStarts() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +    String hostname = url.getHost();, +      hostname = proxyAddress.getHostName();, +    return new SocketPermission(hostname + ":" + hostPort, "connect, resolve");, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void hostnameImplicitlyStarts() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +    String hostname = url.getHost();, +      hostname = proxyAddress.getHostName();, +    return new SocketPermission(hostname + ":" + hostPort, "connect, resolve");, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void hostnameImplicitlyStarts() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +    String hostname = url.getHost();, +      hostname = proxyAddress.getHostName();, +    return new SocketPermission(hostname + ":" + hostPort, "connect, resolve");, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +++ b/okhttp/src/main/java/okhttp3/Handshake.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void hostnameImplicitlyStarts() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +    String hostname = url.getHost();, +      hostname = proxyAddress.getHostName();, +    return new SocketPermission(hostname + ":" + hostPort, "connect, resolve");, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +++ b/okhttp/src/main/java/okhttp3/Handshake.java, +++ b/okhttp/src/main/java/okhttp3/internal/ConnectionSpecSelector.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void hostnameImplicitlyStarts() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +    String hostname = url.getHost();, +      hostname = proxyAddress.getHostName();, +    return new SocketPermission(hostname + ":" + hostPort, "connect, resolve");, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +++ b/okhttp/src/main/java/okhttp3/Handshake.java, +++ b/okhttp/src/main/java/okhttp3/internal/ConnectionSpecSelector.java, +++ b/okhttp/src/main/java/okhttp3/internal/DiskLruCache.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void hostnameImplicitlyStarts() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +    String hostname = url.getHost();, +      hostname = proxyAddress.getHostName();, +    return new SocketPermission(hostname + ":" + hostPort, "connect, resolve");, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +++ b/okhttp/src/main/java/okhttp3/Handshake.java, +++ b/okhttp/src/main/java/okhttp3/internal/ConnectionSpecSelector.java, +++ b/okhttp/src/main/java/okhttp3/internal/DiskLruCache.java, +++ b/okhttp/src/main/java/okhttp3/internal/FaultHidingSink.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void hostnameImplicitlyStarts() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +    String hostname = url.getHost();, +      hostname = proxyAddress.getHostName();, +    return new SocketPermission(hostname + ":" + hostPort, "connect, resolve");, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +++ b/okhttp/src/main/java/okhttp3/Handshake.java, +++ b/okhttp/src/main/java/okhttp3/internal/ConnectionSpecSelector.java, +++ b/okhttp/src/main/java/okhttp3/internal/DiskLruCache.java, +++ b/okhttp/src/main/java/okhttp3/internal/FaultHidingSink.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/okhttp/src/main/java/okhttp3/internal/NamedRunnable.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void hostnameImplicitlyStarts() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +    String hostname = url.getHost();, +      hostname = proxyAddress.getHostName();]
[+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okio.Buffer;, +    return agent != null ? toHumanReadableAscii(agent) : Version.userAgent();, +  }, +, +  /** Returns {@code s} with control characters and non-ASCII characters replaced with '?'. */, +  private static String toHumanReadableAscii(String s) {, +    for (int i = 0, length = s.length(), c; i < length; i += Character.charCount(c)) {, +      c = s.codePointAt(i);, +      if (c > '\u001f' && c < '\u007f') continue;, +, +      Buffer buffer = new Buffer();, +      buffer.writeUtf8(s, 0, i);, +      buffer.writeUtf8CodePoint('?');, +      for (int j = i + Character.charCount(c); j < length; j += Character.charCount(c)) {, +        c = s.codePointAt(j);, +        buffer.writeUtf8CodePoint(c > '\u001f' && c < '\u007f' ? c : '?');, +      }, +      return buffer.readUtf8();, +    }, +    return s;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okio.Buffer;, +    return agent != null ? toHumanReadableAscii(agent) : Version.userAgent();, +  }, +, +  /** Returns {@code s} with control characters and non-ASCII characters replaced with '?'. */, +  private static String toHumanReadableAscii(String s) {, +    for (int i = 0, length = s.length(), c; i < length; i += Character.charCount(c)) {, +      c = s.codePointAt(i);, +      if (c > '\u001f' && c < '\u007f') continue;, +, +      Buffer buffer = new Buffer();, +      buffer.writeUtf8(s, 0, i);, +      buffer.writeUtf8CodePoint('?');, +      for (int j = i + Character.charCount(c); j < length; j += Character.charCount(c)) {, +        c = s.codePointAt(j);, +        buffer.writeUtf8CodePoint(c > '\u001f' && c < '\u007f' ? c : '?');, +      }, +      return buffer.readUtf8();, +    }, +    return s;, +++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java, +import java.io.InputStream;, +import okhttp3.mockwebserver.RecordedRequest;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +  @Test public void usesValidHeaderValueForDefaultUserAgent() throws Exception {, +    String userAgent =  "🍩 " + "\u001F" + ('\u001f' + 1) + ('\u007f' - 1)+ '\u007f' + " 🍩";, +    String expected = "? ?" + ('\u001f' + 1) + ('\u007f' - 1) + "? ?";, +, +    System.setProperty("http.agent", userAgent);, +    server.enqueue(new MockResponse().setResponseCode(200));, +    InputStream inputStream = factory.open(server.url("/").url()).getInputStream();, +    long skipped;, +    do {, +      skipped = inputStream.skip(Long.MAX_VALUE);, +    } while (skipped != 0);, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals(expected, recordedRequest.getHeader("User-Agent"));, +  }, +, +  @Test public void usesSimpleDefaultUserAgentWithoutModification() throws Exception {, +    String userAgent = "OkHttp";, +    String expected = "OkHttp";, +, +    System.setProperty("http.agent", userAgent);, +    server.enqueue(new MockResponse().setResponseCode(200));, +    InputStream inputStream = factory.open(server.url("/").url()).getInputStream();, +    long skipped;, +    do {, +      skipped = inputStream.skip(Long.MAX_VALUE);, +    } while (skipped != 0);, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals(expected, recordedRequest.getHeader("User-Agent"));, +  }, +, +  @Test public void handlesBadUnicodeStringsInDefaultUserAgent() throws Exception {, +    String userAgent =  "🔊".substring(0, 1);, +    String expected = "?";, +, +    System.setProperty("http.agent", userAgent);, +    server.enqueue(new MockResponse().setResponseCode(200));, +    InputStream inputStream = factory.open(server.url("/").url()).getInputStream();, +    long skipped;, +    do {, +      skipped = inputStream.skip(Long.MAX_VALUE);, +    } while (skipped != 0);, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals(expected, recordedRequest.getHeader("User-Agent"));, +  }, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okio.Buffer;, +    return agent != null ? toHumanReadableAscii(agent) : Version.userAgent();, +  }, +, +  /** Returns {@code s} with control characters and non-ASCII characters replaced with '?'. */, +  private static String toHumanReadableAscii(String s) {, +    for (int i = 0, length = s.length(), c; i < length; i += Character.charCount(c)) {, +      c = s.codePointAt(i);]
[+++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0-SNAPSHOT</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void rangeHeaderPreventsAutomaticGzip() throws Exception {, +    Buffer gzippedBody = gzip("abcabcabc");, +, +    // Enqueue a gzipped response. Our request isn't expecting it, but that's okay., +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_PARTIAL), +        .setBody(gzippedBody), +        .addHeader("Content-Encoding: gzip"), +        .addHeader("Content-Range: bytes 0-" + (gzippedBody.size() - 1)));, +, +    // Make a range request., +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .header("Range", "bytes=0-"), +        .build();, +    Call call = client.newCall(request);, +, +    // The response is not decompressed., +    Response response = call.execute();, +    assertEquals("gzip", response.header("Content-Encoding"));, +    assertEquals(gzippedBody.snapshot(), response.body().source().readByteString());, +, +    // The request did not offer gzip support., +    RecordedRequest recordedRequest = server.takeRequest();, +    assertNull(recordedRequest.getHeader("Accept-Encoding"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void rangeHeaderPreventsAutomaticGzip() throws Exception {, +    Buffer gzippedBody = gzip("abcabcabc");, +, +    // Enqueue a gzipped response. Our request isn't expecting it, but that's okay., +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_PARTIAL), +        .setBody(gzippedBody), +        .addHeader("Content-Encoding: gzip"), +        .addHeader("Content-Range: bytes 0-" + (gzippedBody.size() - 1)));, +, +    // Make a range request., +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .header("Range", "bytes=0-"), +        .build();, +    Call call = client.newCall(request);, +, +    // The response is not decompressed., +    Response response = call.execute();, +    assertEquals("gzip", response.header("Content-Encoding"));, +    assertEquals(gzippedBody.snapshot(), response.body().source().readByteString());, +, +    // The request did not offer gzip support., +    RecordedRequest recordedRequest = server.takeRequest();, +    assertNull(recordedRequest.getHeader("Accept-Encoding"));, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java, +    if (userRequest.header("Accept-Encoding") == null && userRequest.header("Range") == null) {]
[+++ b/build.gradle, +      check("MissingFail", CheckSeverity.ERROR), +++ b/build.gradle, +      check("MissingFail", CheckSeverity.ERROR), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.Ignore;, +  @Ignore("Not actually failing where expected"), +      fail();, +++ b/build.gradle, +      check("MissingFail", CheckSeverity.ERROR), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.Ignore;, +  @Ignore("Not actually failing where expected"), +      fail();, +++ b/okhttp/src/test/java/okhttp3/URLConnectionTest.java, +      fail();, +      fail();, +      fail();, +      fail();]
[+++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +import okio.Buffer;, +  static void toggleMask(Buffer.UnsafeCursor cursor, byte[] key) {, +    int keyIndex = 0;, +    do {, +      byte[] buffer = cursor.data;, +      for (int i = cursor.start, end = cursor.end; i < end; i++, keyIndex++) {, +        keyIndex %= keyLength; // Reassign to prevent overflow breaking counter., +    } while (cursor.next() != -1);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +import okio.Buffer;, +  static void toggleMask(Buffer.UnsafeCursor cursor, byte[] key) {, +    int keyIndex = 0;, +    do {, +      byte[] buffer = cursor.data;, +      for (int i = cursor.start, end = cursor.end; i < end; i++, keyIndex++) {, +        keyIndex %= keyLength; // Reassign to prevent overflow breaking counter., +    } while (cursor.next() != -1);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java, +  private final Buffer.UnsafeCursor maskCursor;, +    maskCursor = isClient ? null : new Buffer.UnsafeCursor();, +    if (frameLength > 0) {, +, +      if (!isClient) {, +        controlFrameBuffer.readAndWriteUnsafe(maskCursor);, +        maskCursor.seek(0);, +        toggleMask(maskCursor, maskKey);, +        maskCursor.close();, +      if (frameLength > 0) {, +        source.readFully(messageFrameBuffer, frameLength);, +, +        if (!isClient) {, +          messageFrameBuffer.readAndWriteUnsafe(maskCursor);, +          maskCursor.seek(messageFrameBuffer.size() - frameLength);, +          toggleMask(maskCursor, maskKey);, +          maskCursor.close();, +        }, +      }, +, +      if (isFinalFrame) break; // We are exhausted and have no continuations., +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +import okio.Buffer;, +  static void toggleMask(Buffer.UnsafeCursor cursor, byte[] key) {, +    int keyIndex = 0;, +    do {, +      byte[] buffer = cursor.data;, +      for (int i = cursor.start, end = cursor.end; i < end; i++, keyIndex++) {, +        keyIndex %= keyLength; // Reassign to prevent overflow breaking counter., +    } while (cursor.next() != -1);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java, +  private final Buffer.UnsafeCursor maskCursor;, +    maskCursor = isClient ? null : new Buffer.UnsafeCursor();, +    if (frameLength > 0) {, +, +      if (!isClient) {, +        controlFrameBuffer.readAndWriteUnsafe(maskCursor);, +        maskCursor.seek(0);, +        toggleMask(maskCursor, maskKey);, +        maskCursor.close();, +      if (frameLength > 0) {, +        source.readFully(messageFrameBuffer, frameLength);, +, +        if (!isClient) {, +          messageFrameBuffer.readAndWriteUnsafe(maskCursor);, +          maskCursor.seek(messageFrameBuffer.size() - frameLength);, +          toggleMask(maskCursor, maskKey);, +          maskCursor.close();, +        }, +      }, +, +      if (isFinalFrame) break; // We are exhausted and have no continuations., +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketWriter.java, +  private final byte[] maskKey;, +  private final Buffer.UnsafeCursor maskCursor;, +    maskCursor = isClient ? new Buffer.UnsafeCursor() : null;, +      if (length > 0) {, +        long payloadStart = sinkBuffer.size();, +        sinkBuffer.write(payload);, +, +        sinkBuffer.readAndWriteUnsafe(maskCursor);, +        maskCursor.seek(payloadStart);, +        toggleMask(maskCursor, maskKey);, +        maskCursor.close();, +      }, +      if (byteCount > 0) {, +        long bufferStart = sinkBuffer.size();, +        sinkBuffer.write(buffer, byteCount);, +, +        sinkBuffer.readAndWriteUnsafe(maskCursor);, +        maskCursor.seek(bufferStart);, +        toggleMask(maskCursor, maskKey);, +        maskCursor.close();, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +import okio.Buffer;, +  static void toggleMask(Buffer.UnsafeCursor cursor, byte[] key) {, +    int keyIndex = 0;, +    do {, +      byte[] buffer = cursor.data;, +      for (int i = cursor.start, end = cursor.end; i < end; i++, keyIndex++) {, +        keyIndex %= keyLength; // Reassign to prevent overflow breaking counter.]
[+++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import junit.framework.TestCase;, +public class CustomDispatcherTest extends TestCase {, +    @Override, +    public void tearDown() throws Exception {, +    public void testSimpleDispatch() throws Exception {, +    public void testOutOfOrderResponses() throws Exception {, +, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import junit.framework.TestCase;, +public class CustomDispatcherTest extends TestCase {, +    @Override, +    public void tearDown() throws Exception {, +    public void testSimpleDispatch() throws Exception {, +    public void testOutOfOrderResponses() throws Exception {, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/HttpUrlConnectionImplTest.java, +package com.squareup.okhttp.internal.huc;, +, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.OkUrlFactory;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import java.io.IOException;, +import java.net.HttpURLConnection;, +import java.net.URL;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static org.junit.Assert.fail;, +, +public class HttpUrlConnectionImplTest {, +  @Rule public MockWebServerRule serverRule = new MockWebServerRule();, +, +  private OkHttpClient client = new OkHttpClient();, +  private MockWebServer server;, +, +  @Before public void setUp() {, +    server = serverRule.get();, +  }, +, +  /**, +   * Response code 407 should only come from proxy servers. Android's client, +   * throws if it is sent by an origin server., +   */, +  @Test public void originServerSends407() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(407));, +, +    URL url = server.getUrl("/");, +    HttpURLConnection conn = new OkUrlFactory(client).open(url);, +    try {, +      conn.getResponseCode();, +      fail();, +    } catch (IOException ignored) {, +    }, +  }, +}, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import junit.framework.TestCase;, +public class CustomDispatcherTest extends TestCase {, +    @Override, +    public void tearDown() throws Exception {, +    public void testSimpleDispatch() throws Exception {, +    public void testOutOfOrderResponses() throws Exception {, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/HttpUrlConnectionImplTest.java, +package com.squareup.okhttp.internal.huc;, +, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.OkUrlFactory;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import java.io.IOException;, +import java.net.HttpURLConnection;, +import java.net.URL;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static org.junit.Assert.fail;, +, +public class HttpUrlConnectionImplTest {, +  @Rule public MockWebServerRule serverRule = new MockWebServerRule();, +, +  private OkHttpClient client = new OkHttpClient();, +  private MockWebServer server;, +, +  @Before public void setUp() {, +    server = serverRule.get();, +  }, +, +  /**, +   * Response code 407 should only come from proxy servers. Android's client, +   * throws if it is sent by an origin server., +   */, +  @Test public void originServerSends407() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(407));]
[+++ b/okhttp-tests/src/test/java/okhttp3/RequestTest.java, +import java.util.UUID;, +import static org.junit.Assert.assertSame;, +  @Test public void newBuilderUrlResetsUrl() {, +  @Test public void cacheControl() {, +  @Test public void emptyCacheControlClearsAllCacheControlHeaders() {, +  @Test public void headerAcceptsPermittedCharacters() {, +  @Test public void emptyNameForbidden() {, +  @Test public void headerForbidsNullArguments() {, +  @Test public void headerAllowsTabOnlyInValues() {, +  @Test public void headerForbidsControlCharacters() {, +  @Test public void noTag() {, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .build();, +    assertNull(request.tag());, +    assertNull(request.tag(Object.class));, +    assertNull(request.tag(UUID.class));, +    assertNull(request.tag(String.class));, +  }, +, +  @Test public void defaultTag() {, +    UUID tag = UUID.randomUUID();, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag(tag), +        .build();, +    assertSame(tag, request.tag());, +    assertSame(tag, request.tag(Object.class));, +    assertNull(request.tag(UUID.class));, +    assertNull(request.tag(String.class));, +  }, +, +  @Test public void nullRemovesTag() {, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag("a"), +        .tag(null), +        .build();, +    assertNull(request.tag());, +  }, +, +  @Test public void removeAbsentTag() {, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag(null), +        .build();, +    assertNull(request.tag());, +  }, +, +  @Test public void objectTag() {, +    UUID tag = UUID.randomUUID();, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag(Object.class, tag), +        .build();, +    assertSame(tag, request.tag());, +    assertSame(tag, request.tag(Object.class));, +    assertNull(request.tag(UUID.class));, +    assertNull(request.tag(String.class));, +  }, +, +  @Test public void typedTag() {, +    UUID uuidTag = UUID.randomUUID();, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag(UUID.class, uuidTag), +        .build();, +    assertNull(request.tag());, +    assertNull(request.tag(Object.class));, +    assertSame(uuidTag, request.tag(UUID.class));, +    assertNull(request.tag(String.class));, +  }, +, +  @Test public void replaceOnlyTag() {, +    UUID uuidTag1 = UUID.randomUUID();, +    UUID uuidTag2 = UUID.randomUUID();, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag(UUID.class, uuidTag1), +        .tag(UUID.class, uuidTag2), +        .build();, +    assertSame(uuidTag2, request.tag(UUID.class));, +  }, +, +  @Test public void multipleTags() {, +    UUID uuidTag = UUID.randomUUID();, +    String stringTag = "dilophosaurus";, +    Long longTag = 20170815L;, +    Object objectTag = new Object();, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag(Object.class, objectTag), +        .tag(UUID.class, uuidTag), +        .tag(String.class, stringTag), +        .tag(Long.class, longTag), +        .build();, +    assertSame(objectTag, request.tag());, +    assertSame(objectTag, request.tag(Object.class));, +    assertSame(uuidTag, request.tag(UUID.class));]
[+++ b/.travis.yml]
[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp.internal.spdy;, +, +import java.io.Closeable;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.List;, +, +/** Reads transport frames for SPDY/3 or HTTP/2.0. */, +public interface FrameReader extends Closeable {, +  boolean nextFrame(Handler handler) throws IOException;, +, +  public interface Handler {, +    void data(boolean inFinished, int streamId, InputStream in, int length) throws IOException;, +    void synStream(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId,, +        int priority, int slot, List<String> nameValueBlock);, +    void synReply(boolean inFinished, int streamId, List<String> nameValueBlock) throws IOException;, +    void headers(int streamId, List<String> nameValueBlock) throws IOException;, +    void rstStream(int streamId, int statusCode);, +    void settings(boolean clearPrevious, Settings settings);, +    void noop();, +    void ping(int streamId);, +    void goAway(int lastGoodStreamId, int statusCode);, +    void windowUpdate(int streamId, int deltaWindowSize);, +  }, +}, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp.internal.spdy;, +, +import java.io.Closeable;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.List;, +, +/** Reads transport frames for SPDY/3 or HTTP/2.0. */, +public interface FrameReader extends Closeable {, +  boolean nextFrame(Handler handler) throws IOException;, +, +  public interface Handler {, +    void data(boolean inFinished, int streamId, InputStream in, int length) throws IOException;, +    void synStream(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId,, +        int priority, int slot, List<String> nameValueBlock);, +    void synReply(boolean inFinished, int streamId, List<String> nameValueBlock) throws IOException;, +    void headers(int streamId, List<String> nameValueBlock) throws IOException;, +    void rstStream(int streamId, int statusCode);, +    void settings(boolean clearPrevious, Settings settings);, +    void noop();, +    void ping(int streamId);, +    void goAway(int lastGoodStreamId, int statusCode);, +    void windowUpdate(int streamId, int deltaWindowSize);, +  }, +}, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]
[+++ b/okhttp-android-support/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.3.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-android-support</artifactId>, +  <name>OkHttp Android Platform Support</name>, +  <description>Classes to support the Android platform's use of OkHttp (not required for most developers).</description>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, + , +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <excludePackageNames>com.squareup.okhttp.internal.*</excludePackageNames>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +          </links>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/okhttp-android-support/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.3.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-android-support</artifactId>, +  <name>OkHttp Android Platform Support</name>, +  <description>Classes to support the Android platform's use of OkHttp (not required for most developers).</description>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, + , +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <excludePackageNames>com.squareup.okhttp.internal.*</excludePackageNames>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +          </links>, +        </configuration>, +      </plugin>, +    </plugins>]
[+++ b/pom.xml, +++ b/pom.xml, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +        /*, +         * Buffer the input to mask SSL InputStream's degenerate available(), +         * implementation. That way we can read the end of a chunked response, +         * without blocking and will recycle the connection more reliably., +         * http://code.google.com/p/android/issues/detail?id=38817, +         */, +        sslInputStream = new BufferedInputStream(sslSocket.getInputStream(), 128);, +++ b/pom.xml, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +        /*, +         * Buffer the input to mask SSL InputStream's degenerate available(), +         * implementation. That way we can read the end of a chunked response, +         * without blocking and will recycle the connection more reliably., +         * http://code.google.com/p/android/issues/detail?id=38817, +         */, +        sslInputStream = new BufferedInputStream(sslSocket.getInputStream(), 128);, +++ b/src/main/java/libcore/net/http/HttpEngine.java, +    private InputStream responseTransferIn;, +            if (!reusable || !transport.makeReusable(requestBodyOut, responseTransferIn)) {, +        responseTransferIn = transferStream;, +++ b/pom.xml, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +        /*, +         * Buffer the input to mask SSL InputStream's degenerate available(), +         * implementation. That way we can read the end of a chunked response, +         * without blocking and will recycle the connection more reliably., +         * http://code.google.com/p/android/issues/detail?id=38817, +         */, +        sslInputStream = new BufferedInputStream(sslSocket.getInputStream(), 128);, +++ b/src/main/java/libcore/net/http/HttpEngine.java, +    private InputStream responseTransferIn;, +            if (!reusable || !transport.makeReusable(requestBodyOut, responseTransferIn)) {, +        responseTransferIn = transferStream;, +++ b/src/main/java/libcore/net/http/HttpTransport.java, +++ b/pom.xml, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +        /*, +         * Buffer the input to mask SSL InputStream's degenerate available(), +         * implementation. That way we can read the end of a chunked response, +         * without blocking and will recycle the connection more reliably., +         * http://code.google.com/p/android/issues/detail?id=38817, +         */, +        sslInputStream = new BufferedInputStream(sslSocket.getInputStream(), 128);, +++ b/src/main/java/libcore/net/http/HttpEngine.java, +    private InputStream responseTransferIn;, +            if (!reusable || !transport.makeReusable(requestBodyOut, responseTransferIn)) {, +        responseTransferIn = transferStream;, +++ b/src/main/java/libcore/net/http/HttpTransport.java, +++ b/src/main/java/libcore/net/http/HttpsURLConnectionImpl.java, +            // make an SSL Tunnel on the first message pair of each SSL + proxy connection, +                if (connection.getAddress().requiresTunnel()) {, +                    makeTunnel(policy, connection, getRequestHeaders());, +            }, +, +            // if super.makeConnection returned a connection from the, +            // pool, sslSocket needs to be initialized here. If it is, +            // a new connection, it will be initialized by, +            // getSecureSocket below., +            // we already have an SSL connection,, +++ b/pom.xml, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +        /*, +         * Buffer the input to mask SSL InputStream's degenerate available(), +         * implementation. That way we can read the end of a chunked response, +         * without blocking and will recycle the connection more reliably., +         * http://code.google.com/p/android/issues/detail?id=38817, +         */, +        sslInputStream = new BufferedInputStream(sslSocket.getInputStream(), 128);, +++ b/src/main/java/libcore/net/http/HttpEngine.java, +    private InputStream responseTransferIn;, +            if (!reusable || !transport.makeReusable(requestBodyOut, responseTransferIn)) {, +        responseTransferIn = transferStream;, +++ b/src/main/java/libcore/net/http/HttpTransport.java, +++ b/src/main/java/libcore/net/http/HttpsURLConnectionImpl.java, +            // make an SSL Tunnel on the first message pair of each SSL + proxy connection, +                if (connection.getAddress().requiresTunnel()) {, +                    makeTunnel(policy, connection, getRequestHeaders());, +            }, +, +            // if super.makeConnection returned a connection from the, +            // pool, sslSocket needs to be initialized here. If it is, +            // a new connection, it will be initialized by, +            // getSecureSocket below., +            // we already have an SSL connection,, +++ b/src/test/java/libcore/net/http/URLConnectionTest.java, +        testClientConfiguredGzipContentEncodingAndConnectionReuse(TransferKind.FIXED_LENGTH, false);, +        testClientConfiguredGzipContentEncodingAndConnectionReuse(TransferKind.CHUNKED, false);, +    }, +, +    public void testGzipAndConnectionReuseWithFixedLengthAndTls() throws Exception {, +        testClientConfiguredGzipContentEncodingAndConnectionReuse(TransferKind.FIXED_LENGTH, true);, +    }, +, +    public void testGzipAndConnectionReuseWithChunkedEncodingAndTls() throws Exception {, +        testClientConfiguredGzipContentEncodingAndConnectionReuse(TransferKind.CHUNKED, true);, +     * which corrupted the request that followed or prevented connection reuse., +     * http://code.google.com/p/android/issues/detail?id=38817]
[+++ b/.travis.yml, +before_cache:, +  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock, +  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, +    - $HOME/.gradle/caches/, +    - $HOME/.gradle/wrapper/]
[+++ b/benchmarks/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.0-SNAPSHOT</version>]
[+++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.logging.HttpLoggingInterceptor;, +  @Test public void successfulCallEventSequenceWithListener() throws IOException {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    client = client.newBuilder().addNetworkInterceptor(new HttpLoggingInterceptor().setLevel(, +        HttpLoggingInterceptor.Level.BODY)).build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    assertEquals("abc", response.body().string());, +    response.body().close();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.logging.HttpLoggingInterceptor;, +  @Test public void successfulCallEventSequenceWithListener() throws IOException {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    client = client.newBuilder().addNetworkInterceptor(new HttpLoggingInterceptor().setLevel(, +        HttpLoggingInterceptor.Level.BODY)).build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    assertEquals("abc", response.body().string());, +    response.body().close();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +      eventListener.callEnd(call);]
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, +      TlsNode tlsNode = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, +      TlsNode tlsNode = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, +      TlsNode tlsNode = localhost();, +      server.useHttps(tlsNode.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, +      TlsNode tlsNode = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, +      TlsNode tlsNode = localhost();, +      server.useHttps(tlsNode.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.TlsNode;, +, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +          TlsNode tlsNode = localhost();, +          SSLEngine engine = tlsNode.sslContext().createSSLEngine();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, +      TlsNode tlsNode = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, +      TlsNode tlsNode = localhost();, +      server.useHttps(tlsNode.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.TlsNode;, +, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +          TlsNode tlsNode = localhost();, +          SSLEngine engine = tlsNode.sslContext().createSSLEngine();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.mockwebserver.TlsNode;, +, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +      TlsNode tlsNode = localhost();, +      SSLSocketFactory socketFactory = tlsNode.sslSocketFactory();, +          .sslSocketFactory(socketFactory, tlsNode.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, +      TlsNode tlsNode = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, +      TlsNode tlsNode = localhost();, +      server.useHttps(tlsNode.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.TlsNode;, +, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +          TlsNode tlsNode = localhost();, +          SSLEngine engine = tlsNode.sslContext().createSSLEngine();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.mockwebserver.TlsNode;, +, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +      TlsNode tlsNode = localhost();, +      SSLSocketFactory socketFactory = tlsNode.sslSocketFactory();, +          .sslSocketFactory(socketFactory, tlsNode.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.mockwebserver.TlsNode;, +, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +      TlsNode tlsNode = localhost();, +      SSLSocketFactory socketFactory = tlsNode.sslSocketFactory();, +          .sslSocketFactory(socketFactory, tlsNode.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.TlsNode;, +import static okhttp3.mockwebserver.internal.tls.TlsUtil.localhost;, +, +      TlsNode tlsNode = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSource;, +      BufferedSource bodyIn = Okio.buffer(stream.getSource());, +      byte[] bodyOut = bodyIn.readByteArray();, +, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.length,, +          bodyOut, sequenceNumber.getAndIncrement(), socket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSource;, +      BufferedSource bodyIn = Okio.buffer(stream.getSource());, +      byte[] bodyOut = bodyIn.readByteArray();, +, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.length,, +          bodyOut, sequenceNumber.getAndIncrement(), socket);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSource;, +      BufferedSource bodyIn = Okio.buffer(stream.getSource());, +      byte[] bodyOut = bodyIn.readByteArray();, +, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.length,, +          bodyOut, sequenceNumber.getAndIncrement(), socket);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSource;, +      BufferedSource bodyIn = Okio.buffer(stream.getSource());, +      byte[] bodyOut = bodyIn.readByteArray();, +, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.length,, +          bodyOut, sequenceNumber.getAndIncrement(), socket);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/HttpUrlConnectionImplTest.java, +package com.squareup.okhttp.internal.huc;, +, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.OkUrlFactory;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import java.io.IOException;, +import java.net.HttpURLConnection;, +import java.net.URL;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static org.junit.Assert.fail;, +, +public class HttpUrlConnectionImplTest {, +  @Rule public MockWebServerRule serverRule = new MockWebServerRule();, +, +  private OkHttpClient client = new OkHttpClient();, +  private MockWebServer server;, +, +  @Before public void setUp() {, +    server = serverRule.get();, +  }, +, +  /**, +   * Response code 407 should only come from proxy servers. Android's client, +   * throws if it is sent by an origin server., +   */, +  @Test public void originServerSends407() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(407));, +, +    URL url = server.getUrl("/");, +    HttpURLConnection conn = new OkUrlFactory(client).open(url);, +    try {, +      conn.getResponseCode();, +      fail();, +    } catch (IOException ignored) {, +    }, +  }, +}, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSource;, +      BufferedSource bodyIn = Okio.buffer(stream.getSource());, +      byte[] bodyOut = bodyIn.readByteArray();, +, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.length,, +          bodyOut, sequenceNumber.getAndIncrement(), socket);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/HttpUrlConnectionImplTest.java, +package com.squareup.okhttp.internal.huc;, +, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.OkUrlFactory;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import java.io.IOException;, +import java.net.HttpURLConnection;, +import java.net.URL;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +]
[+++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.0.2</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.0.2</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml]
[+++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    assertEquals(512f, i, 20f); // Halfway +/- 2%, +++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    assertEquals(512f, i, 20f); // Halfway +/- 2%, +++ b/okhttp-sse/README.md, +OkHttp Server-Sent Events, +=========================, +, +Experimental support for server-sent events., +API is not considered stable and may change at any time., +++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    assertEquals(512f, i, 20f); // Halfway +/- 2%, +++ b/okhttp-sse/README.md, +OkHttp Server-Sent Events, +=========================, +, +Experimental support for server-sent events., +API is not considered stable and may change at any time., +++ b/okhttp-sse/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3</groupId>, +    <artifactId>parent</artifactId>, +    <version>3.11.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-sse</artifactId>, +  <name>OkHttp Server-Sent Events</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <version>2.10.4</version>, +        <configuration>, +          <links>]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.internal.SslContextBuilder;, +import com.squareup.okhttp.internal.Util;, +import com.squareup.okhttp.internal.http.OkHeaders;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import java.io.BufferedReader;, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +import java.io.OutputStream;, +import java.net.CacheRequest;, +import java.net.CacheResponse;, +import java.net.CookieHandler;, +import java.net.CookieManager;, +import java.net.HttpCookie;, +import java.net.HttpURLConnection;, +import java.net.ResponseCache;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.net.URL;, +import java.net.URLConnection;, +import java.security.Principal;, +import java.security.cert.Certificate;, +import java.text.DateFormat;, +import java.text.SimpleDateFormat;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Date;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.TimeZone;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReference;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSession;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.GzipSink;, +import okio.Okio;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AT_END;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +/**, + * Android's HttpResponseCacheTest. This tests both {@link Cache} and handling, + * of {@link ResponseCache}., + */, +public final class CacheTest {, +  private static final HostnameVerifier NULL_HOSTNAME_VERIFIER = new HostnameVerifier() {, +    @Override public boolean verify(String s, SSLSession sslSession) {, +      return true;, +    }, +  };, +, +  private static final SSLContext sslContext = SslContextBuilder.localhost();, +, +  @Rule public TemporaryFolder cacheRule = new TemporaryFolder();, +  @Rule public MockWebServerRule serverRule = new MockWebServerRule();, +  @Rule public MockWebServerRule server2Rule = new MockWebServerRule();, +]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, + * <p/>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, + * <p/>, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, + * <p/>, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import com.squareup.okhttp.internal.bytes.ByteString;, + * or HTTP/2.0., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, + * <p/>, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import com.squareup.okhttp.internal.bytes.ByteString;, + * or HTTP/2.0., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/ByteString.java, +/*, + * Copyright 2014 Square Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.bytes;, +, +import com.squareup.okhttp.internal.Util;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.util.Arrays;, +, +import static com.squareup.okhttp.internal.Util.asciiLowerCase;, +, +/**, + * An immutable sequence of bytes., + *, + * <p><strong>Full disclosure:</strong> this class provides untrusted input and, + * output streams with raw access to the underlying byte array. A hostile, + * stream implementation could keep a reference to the mutable byte string,, + * violating the immutable guarantee of this class. For this reason a byte, + * string's immutability guarantee cannot be relied upon for security in applets, + * and other environments that run both trusted and untrusted code in the same, + * process., + */, +public final class ByteString {, +  final byte[] data;, +  private transient int hashCode; // Lazily computed; 0 if unknown., +  private transient String utf8; // Lazily computed., +, +  /** A singleton empty {@code ByteString}. */, +  public static final ByteString EMPTY = new ByteString(Util.EMPTY_BYTE_ARRAY);, +, +  /**, +   * Returns a new byte string containing a clone of the bytes of {@code data}., +   */, +  public static ByteString of(byte... data) {, +    return new ByteString(data.clone());, +  }, +, +  /** Returns a new byte string containing the {@code UTF-8} bytes of {@code s}. */, +  public static ByteString encodeUtf8(String s) {, +    ByteString byteString = new ByteString(s.getBytes(Util.UTF_8));, +    byteString.utf8 = s;, +    return byteString;, +  }, +, +  /** Constructs a new {@code String} by decoding the bytes as {@code UTF-8}. */, +  public String utf8() {, +    String result = utf8;, +    // We don't care if we double-allocate in racy code., +    return result != null ? result : (utf8 = new String(data, Util.UTF_8));, +  }, +, +  /**, +   * Returns true when {@code ascii} is not null and equals the bytes wrapped, +   * by this byte string.]
[+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.Util;, +    String agent = Util.getSystemProperty("http.agent", null);, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.Util;, +    String agent = Util.getSystemProperty("http.agent", null);, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import java.security.AccessControlException;, +, +  /**, +   * Returns the system property, or defaultValue if the system property is null or, +   * cannot be read (e.g. because of security policy restrictions)., +   */, +  public static String getSystemProperty(String key, @Nullable String defaultValue) {, +    final String value;, +    try {, +      value = System.getProperty(key);, +    } catch (AccessControlException ex) {, +      return defaultValue;, +    }, +    return value != null ? value : defaultValue;, +  }, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.Util;, +    String agent = Util.getSystemProperty("http.agent", null);, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import java.security.AccessControlException;, +, +  /**, +   * Returns the system property, or defaultValue if the system property is null or, +   * cannot be read (e.g. because of security policy restrictions)., +   */, +  public static String getSystemProperty(String key, @Nullable String defaultValue) {, +    final String value;, +    try {, +      value = System.getProperty(key);, +    } catch (AccessControlException ex) {, +      return defaultValue;, +    }, +    return value != null ? value : defaultValue;, +  }, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.java, +import okhttp3.internal.Util;, +    if ("conscrypt".equals(Util.getSystemProperty("okhttp.platform", null))) {, +    String jvmVersion = Util.getSystemProperty("java.specification.version", null);]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingCookieJar.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.util.ArrayDeque;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Deque;, +import java.util.List;, +, +import static org.junit.Assert.assertEquals;, +, +public final class RecordingCookieJar implements CookieJar {, +  private final Deque<List<Cookie>> requestCookies = new ArrayDeque<>();, +  private final Deque<List<Cookie>> responseCookies = new ArrayDeque<>();, +, +  public void enqueueRequestCookies(Cookie... cookies) {, +    requestCookies.add(Arrays.asList(cookies));, +  }, +, +  public List<Cookie> takeResponseCookies() {, +    return responseCookies.removeFirst();, +  }, +, +  public void assertResponseCookies(String... cookies) {, +    List<Cookie> actualCookies = takeResponseCookies();, +    List<String> actualCookieStrings = new ArrayList<>();, +    for (Cookie cookie : actualCookies) {, +      actualCookieStrings.add(cookie.toString());, +    }, +    assertEquals(Arrays.asList(cookies), actualCookieStrings);, +  }, +, +  @Override public void saveFromResponse(HttpUrl url, List<Cookie> cookies) {, +    responseCookies.add(cookies);, +  }, +, +  @Override public List<Cookie> loadForRequest(HttpUrl url) {, +    if (requestCookies.isEmpty()) return Collections.emptyList();, +    return requestCookies.removeFirst();, +  }, +}, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingCookieJar.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.util.ArrayDeque;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Deque;, +import java.util.List;, +, +import static org.junit.Assert.assertEquals;, +, +public final class RecordingCookieJar implements CookieJar {, +  private final Deque<List<Cookie>> requestCookies = new ArrayDeque<>();, +  private final Deque<List<Cookie>> responseCookies = new ArrayDeque<>();, +, +  public void enqueueRequestCookies(Cookie... cookies) {, +    requestCookies.add(Arrays.asList(cookies));, +  }, +, +  public List<Cookie> takeResponseCookies() {]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import okhttp3.internal.tls.SslClient;, +import okhttp3.mockwebserver.SocketPolicy;, +import static org.junit.Assert.assertNotNull;, +  private final SslClient sslClient = SslClient.localhost();, +  @Test public void successfulCallEventSequence() throws IOException {, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    List<Class<?>> expectedEvents = Arrays.asList(DnsStart.class, DnsEnd.class);, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +  @Test public void successfulHttpsCallEventSequence() throws IOException {, +    enableTls(false);, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    List<Class<?>> expectedEvents = Arrays.asList(, +        DnsStart.class, DnsEnd.class,, +        SecureConnectStart.class, SecureConnectEnd.class);, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +    DnsStart dnsStart = listener.findNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.findNextEvent(DnsEnd.class);, +    listener.findNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.findNextEvent(DnsEnd.class);, +    listener.findNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.findNextEvent(DnsEnd.class);, +  @Test public void successfulSecureConnect() throws IOException {, +    enableTls(false);, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    SecureConnectStart secureStart = listener.findNextEvent(SecureConnectStart.class);, +    assertSame(call, secureStart.call);, +, +    SecureConnectEnd secureEnd = listener.findNextEvent(SecureConnectEnd.class);, +    assertSame(call, secureEnd.call);, +    assertNotNull(secureEnd.handshake);, +    assertNull(secureEnd.throwable);, +  }, +, +  @Test public void failedSecureConnect() {, +    enableTls(false);, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +, +    SecureConnectStart secureStart = listener.findNextEvent(SecureConnectStart.class);, +    assertSame(call, secureStart.call);, +, +    SecureConnectEnd secureEnd = listener.findNextEvent(SecureConnectEnd.class);, +    assertSame(call, secureEnd.call);, +    assertNull(secureEnd.handshake);, +    assertTrue(secureEnd.throwable instanceof IOException);, +  }, +, +  @Test public void secureConnectWithTunnel() throws IOException {, +    enableTls(true);, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END));, +    server.enqueue(new MockResponse());, +, +    client = client.newBuilder(), +        .proxy(server.toProxyAddress()), +        .build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/AbstractOutputStream.java, +/*, + * Copyright (C) 2010 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp.internal;, +, +import java.io.IOException;, +import java.io.OutputStream;, +, +/**, + * An output stream for an HTTP request body., + *, + * <p>Since a single socket's output stream may be used to write multiple HTTP, + * requests to the same server, subclasses should not close the socket stream., + */, +public abstract class AbstractOutputStream extends OutputStream {, +  protected boolean closed;, +, +  @Override public final void write(int data) throws IOException {, +    write(new byte[] { (byte) data });, +  }, +, +  protected final void checkNotClosed() throws IOException {, +    if (closed) {, +      throw new IOException("stream closed");, +    }, +  }, +, +  /** Returns true if this stream was closed locally. */, +  public boolean isClosed() {, +    return closed;, +  }, +}, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/AbstractOutputStream.java, +/*, + * Copyright (C) 2010 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp.internal;, +, +import java.io.IOException;, +import java.io.OutputStream;, +, +/**, + * An output stream for an HTTP request body., + *, + * <p>Since a single socket's output stream may be used to write multiple HTTP, + * requests to the same server, subclasses should not close the socket stream., + */, +public abstract class AbstractOutputStream extends OutputStream {, +  protected boolean closed;, +, +  @Override public final void write(int data) throws IOException {, +    write(new byte[] { (byte) data });, +  }, +, +  protected final void checkNotClosed() throws IOException {, +    if (closed) {, +      throw new IOException("stream closed");, +    }, +  }, +, +  /** Returns true if this stream was closed locally. */, +  public boolean isClosed() {, +    return closed;, +  }, +}, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/FaultRecoveringOutputStream.java, +public abstract class FaultRecoveringOutputStream extends AbstractOutputStream {, +      OutputStream replacementStream = null;, +      try {, +        replacementStream = replacementStream(e);, +        replaceStream(replacementStream);, +   * Returns true if errors in the underlying stream can currently be recovered., +   */]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void legalToExecuteTwiceCloning() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    Response response1 = call.execute();, +, +    Call cloned = call.clone();, +    Response response2 = cloned.execute();, +, +    assertEquals(response1.body().string(), "abc");, +    assertEquals(response2.body().string(), "def");, +  }, +, +  @Test public void legalToExecuteTwiceCloning_Async() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    call.enqueue(callback);, +, +    Call cloned = call.clone();, +    cloned.enqueue(callback);, +, +    callback.await(request.url()).assertBody("abc");, +    callback.await(request.url()).assertBody("def");, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void legalToExecuteTwiceCloning() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    Response response1 = call.execute();, +, +    Call cloned = call.clone();, +    Response response2 = cloned.execute();, +, +    assertEquals(response1.body().string(), "abc");, +    assertEquals(response2.body().string(), "def");, +  }, +, +  @Test public void legalToExecuteTwiceCloning_Async() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    call.enqueue(callback);, +, +    Call cloned = call.clone();, +    cloned.enqueue(callback);, +, +    callback.await(request.url()).assertBody("abc");, +    callback.await(request.url()).assertBody("def");, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Call.java, +public interface Call extends Cloneable {, +  /**, +   * Create a new, identical call to this one which can be enqueued or executed even if this call, +   * has already been., +   */, +  Call clone();, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void legalToExecuteTwiceCloning() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    Response response1 = call.execute();, +, +    Call cloned = call.clone();, +    Response response2 = cloned.execute();, +, +    assertEquals(response1.body().string(), "abc");, +    assertEquals(response2.body().string(), "def");, +  }]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.ConnectionPool;, +    // If we don't set this reference, there's no way to clean shutdown persistent connections., +    client.setConnectionPool(ConnectionPool.getDefault());, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.ConnectionPool;, +    // If we don't set this reference, there's no way to clean shutdown persistent connections., +    client.setConnectionPool(ConnectionPool.getDefault());, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +    client.setConnectionPool(null);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.ConnectionPool;, +    // If we don't set this reference, there's no way to clean shutdown persistent connections., +    client.setConnectionPool(ConnectionPool.getDefault());, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +    client.setConnectionPool(null);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    ConnectionPool pool = ConnectionPool.getDefault();, +    pool.evictAll();, +    client.setConnectionPool(pool);, +, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.ConnectionPool;, +    // If we don't set this reference, there's no way to clean shutdown persistent connections., +    client.setConnectionPool(ConnectionPool.getDefault());, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +    client.setConnectionPool(null);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    ConnectionPool pool = ConnectionPool.getDefault();, +    pool.evictAll();, +    client.setConnectionPool(pool);, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +  private final Runnable emptyRunnable = new Runnable() {, +    @Override public void run() {, +    }, +  };, +, +    pool.setCleanupRunnableForTest(emptyRunnable);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.ConnectionPool;, +    // If we don't set this reference, there's no way to clean shutdown persistent connections., +    client.setConnectionPool(ConnectionPool.getDefault());, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +    client.setConnectionPool(null);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    ConnectionPool pool = ConnectionPool.getDefault();, +    pool.evictAll();, +    client.setConnectionPool(pool);, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +  private final Runnable emptyRunnable = new Runnable() {, +    @Override public void run() {, +    }, +  };, +, +    pool.setCleanupRunnableForTest(emptyRunnable);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5000));, +    client.setConnectionPool(new ConnectionPool(0, 5000));, +    client.setConnectionPool(new ConnectionPool(0, 5000));, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.ConnectionPool;, +    // If we don't set this reference, there's no way to clean shutdown persistent connections., +    client.setConnectionPool(ConnectionPool.getDefault());, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +    client.setConnectionPool(null);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    ConnectionPool pool = ConnectionPool.getDefault();, +    pool.evictAll();, +    client.setConnectionPool(pool);, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +  private final Runnable emptyRunnable = new Runnable() {, +    @Override public void run() {, +    }, +  };, +, +    pool.setCleanupRunnableForTest(emptyRunnable);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5000));, +    client.setConnectionPool(new ConnectionPool(0, 5000));, +    client.setConnectionPool(new ConnectionPool(0, 5000));, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import java.util.List;, +import okhttp3.internal.http.HttpDate;, +import static org.junit.Assert.fail;, +  @Test public void simpleCookie() throws Exception {]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/LICENSE.txt, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, +    Response response = client.newCall(headRequest).execute();, +    assertEquals(200, response.code());, +    assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, +    Response response = client.newCall(headRequest).execute();, +    assertEquals(200, response.code());, +    assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +    String contentType = response.header("Content-Type");, +    long contentLength = response.body().contentLength();, +        .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource))), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, +    Response response = client.newCall(headRequest).execute();, +    assertEquals(200, response.code());, +    assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +    String contentType = response.header("Content-Type");, +    long contentLength = response.body().contentLength();, +        .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource))), +++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java, +      String contentType = networkResponse.header("Content-Type");, +      responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, +    Response response = client.newCall(headRequest).execute();, +    assertEquals(200, response.code());, +    assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +    String contentType = response.header("Content-Type");, +    long contentLength = response.body().contentLength();, +        .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource))), +++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java, +      String contentType = networkResponse.header("Content-Type");, +      responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));, +++ b/okhttp/src/main/java/okhttp3/internal/http/RealResponseBody.java, +import javax.annotation.Nullable;, +  /**, +   * Use a string to avoid parsing the content type until needed. This also defers problems caused, +   * by malformed content types., +   */, +  private final @Nullable String contentTypeString;, +  private final long contentLength;, +  public RealResponseBody(, +      @Nullable String contentTypeString, long contentLength, BufferedSource source) {, +    this.contentTypeString = contentTypeString;, +    this.contentLength = contentLength;, +    return contentTypeString != null ? MediaType.parse(contentTypeString) : null;, +    return contentLength;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, +    Response response = client.newCall(headRequest).execute();, +    assertEquals(200, response.code());, +    assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +    String contentType = response.header("Content-Type");, +    long contentLength = response.body().contentLength();, +        .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource))), +++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java, +      String contentType = networkResponse.header("Content-Type");, +      responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));, +++ b/okhttp/src/main/java/okhttp3/internal/http/RealResponseBody.java, +import javax.annotation.Nullable;, +  /**, +   * Use a string to avoid parsing the content type until needed. This also defers problems caused, +   * by malformed content types., +   */, +  private final @Nullable String contentTypeString;, +  private final long contentLength;, +  public RealResponseBody(, +      @Nullable String contentTypeString, long contentLength, BufferedSource source) {, +    this.contentTypeString = contentTypeString;, +    this.contentLength = contentLength;, +    return contentTypeString != null ? MediaType.parse(contentTypeString) : null;, +    return contentLength;, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java, +    String contentType = response.header("Content-Type");, +      Source source = newFixedLengthSource(0);, +      return new RealResponseBody(contentType, 0, Okio.buffer(source));, +      Source source = newChunkedSource(response.request().url());, +      return new RealResponseBody(contentType, -1L, Okio.buffer(source));, +      Source source = newFixedLengthSource(contentLength);, +      return new RealResponseBody(contentType, contentLength, Okio.buffer(source));, +    return new RealResponseBody(contentType, -1L, Okio.buffer(newUnknownLengthSource()));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, +    Response response = client.newCall(headRequest).execute();, +    assertEquals(200, response.code());, +    assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +    String contentType = response.header("Content-Type");, +    long contentLength = response.body().contentLength();, +        .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource))), +++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java, +      String contentType = networkResponse.header("Content-Type");, +      responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));, +++ b/okhttp/src/main/java/okhttp3/internal/http/RealResponseBody.java]
[+++ b/okhttp-apache/pom.xml, +    <version>1.0.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.2</version>, +++ b/okhttp/pom.xml, +    <version>1.0.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.2</version>, +++ b/okhttp/pom.xml, +    <version>1.0.2</version>, +++ b/pom.xml, +  <version>1.0.2</version>, +    <tag>parent-1.0.2</tag>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.2</version>, +++ b/okhttp/pom.xml, +    <version>1.0.2</version>, +++ b/pom.xml, +  <version>1.0.2</version>, +    <tag>parent-1.0.2</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.2</version>, +++ b/okhttp/pom.xml, +    <version>1.0.2</version>, +++ b/pom.xml, +  <version>1.0.2</version>, +    <tag>parent-1.0.2</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.2</version>, +++ b/samples/pom.xml, +    <version>1.0.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.2</version>, +++ b/okhttp/pom.xml, +    <version>1.0.2</version>, +++ b/pom.xml, +  <version>1.0.2</version>, +    <tag>parent-1.0.2</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.2</version>, +++ b/samples/pom.xml, +    <version>1.0.2</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.0.2</version>]
[+++ b/okhttp-sse/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, +  oldClasspath = files(baselineJar(project, baselineVersion)), +  newClasspath = files(jar.archivePath), +  onlyBinaryIncompatibleModified = true, +  failOnModification = true, +  txtOutputFile = file("$buildDir/reports/japi.txt"), +  ignoreMissingClasses = true, +  includeSynthetic = true, +  packageExcludes = [, +      'okhttp3.internal.sse',, +  ], +}, +check.dependsOn(japicmp), +++ b/okhttp-sse/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, +  oldClasspath = files(baselineJar(project, baselineVersion)), +  newClasspath = files(jar.archivePath), +  onlyBinaryIncompatibleModified = true, +  failOnModification = true, +  txtOutputFile = file("$buildDir/reports/japi.txt"), +  ignoreMissingClasses = true, +  includeSynthetic = true, +  packageExcludes = [, +      'okhttp3.internal.sse',, +  ], +}, +check.dependsOn(japicmp), +++ /dev/null, +++ b/okhttp-sse/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, +  oldClasspath = files(baselineJar(project, baselineVersion)), +  newClasspath = files(jar.archivePath), +  onlyBinaryIncompatibleModified = true, +  failOnModification = true, +  txtOutputFile = file("$buildDir/reports/japi.txt"), +  ignoreMissingClasses = true, +  includeSynthetic = true, +  packageExcludes = [, +      'okhttp3.internal.sse',, +  ], +}, +check.dependsOn(japicmp), +++ /dev/null, +++ b/okhttp-sse/src/main/java/okhttp3/sse/EventSource.kt, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.sse, +, +import okhttp3.Request, +, +interface EventSource {, +  /** Returns the original request that initiated this event source.  */, +  fun request(): Request, +, +  /**, +   * Immediately and violently release resources held by this event source. This does nothing if, +   * the event source has already been closed or canceled., +   */, +  fun cancel(), +, +  interface Factory {, +    /**, +     * Creates a new event source and immediately returns it. Creating an event source initiates an, +     * asynchronous process to connect the socket. Once that succeeds or fails, `listener` will be, +     * notified. The caller must cancel the returned event source when it is no longer in use., +     */, +    fun newEventSource(request: Request, listener: EventSourceListener): EventSource, +  }, +}, +++ b/okhttp-sse/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, +  oldClasspath = files(baselineJar(project, baselineVersion)), +  newClasspath = files(jar.archivePath), +  onlyBinaryIncompatibleModified = true, +  failOnModification = true, +  txtOutputFile = file("$buildDir/reports/japi.txt"), +  ignoreMissingClasses = true, +  includeSynthetic = true]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        List<Header> continueHeaders = Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue")));, +        stream.writeHeaders(continueHeaders, false, true);, +      boolean outFinished = body == null, +          && response.getPushPromises().isEmpty(), +          && !response.isDuplex();, +      boolean flushHeaders = body == null;, +      if (outFinished && trailers.size() > 0) {, +      stream.writeHeaders(http2Headers, outFinished, flushHeaders);, +        BufferedSink sink = Okio.buffer(stream.getSink());, +        BufferedSource source = Okio.buffer(stream.getSource());, +        DuplexResponseBody duplexResponseBody = response.getDuplexResponseBody();, +      } else if (!outFinished) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        List<Header> continueHeaders = Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue")));, +        stream.writeHeaders(continueHeaders, false, true);, +      boolean outFinished = body == null, +          && response.getPushPromises().isEmpty(), +          && !response.isDuplex();, +      boolean flushHeaders = body == null;, +      if (outFinished && trailers.size() > 0) {, +      stream.writeHeaders(http2Headers, outFinished, flushHeaders);, +        BufferedSink sink = Okio.buffer(stream.getSink());, +        BufferedSource source = Okio.buffer(stream.getSource());, +        DuplexResponseBody duplexResponseBody = response.getDuplexResponseBody();, +      } else if (!outFinished) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/DuplexResponseBody.java, +  void onRequest(RecordedRequest request, BufferedSource requestBody, BufferedSink responseBody), +      throws IOException;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        List<Header> continueHeaders = Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue")));, +        stream.writeHeaders(continueHeaders, false, true);, +      boolean outFinished = body == null, +          && response.getPushPromises().isEmpty(), +          && !response.isDuplex();, +      boolean flushHeaders = body == null;, +      if (outFinished && trailers.size() > 0) {, +      stream.writeHeaders(http2Headers, outFinished, flushHeaders);, +        BufferedSink sink = Okio.buffer(stream.getSink());, +        BufferedSource source = Okio.buffer(stream.getSource());, +        DuplexResponseBody duplexResponseBody = response.getDuplexResponseBody();, +      } else if (!outFinished) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/DuplexResponseBody.java, +  void onRequest(RecordedRequest request, BufferedSource requestBody, BufferedSink responseBody), +      throws IOException;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    stream.writeHeaders(responseHeaders, false, false);, +    stream.writeHeaders(responseHeaders, false, false);, +    stream.writeHeaders(responseHeaders, false, false);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        List<Header> continueHeaders = Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue")));, +        stream.writeHeaders(continueHeaders, false, true);, +      boolean outFinished = body == null, +          && response.getPushPromises().isEmpty(), +          && !response.isDuplex();, +      boolean flushHeaders = body == null;, +      if (outFinished && trailers.size() > 0) {, +      stream.writeHeaders(http2Headers, outFinished, flushHeaders);, +        BufferedSink sink = Okio.buffer(stream.getSink());, +        BufferedSource source = Okio.buffer(stream.getSource());, +        DuplexResponseBody duplexResponseBody = response.getDuplexResponseBody();, +      } else if (!outFinished) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/DuplexResponseBody.java, +  void onRequest(RecordedRequest request, BufferedSource requestBody, BufferedSink responseBody), +      throws IOException;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    stream.writeHeaders(responseHeaders, false, false);, +    stream.writeHeaders(responseHeaders, false, false);, +    stream.writeHeaders(responseHeaders, false, false);, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import static org.junit.Assert.assertNull;, +  @Test public void trueDuplexClientWritesFirst() throws IOException {, +    MockResponse mockResponse = new MockResponse();, +    mockResponse.clearHeaders();, +    MwsDuplexAccess.instance.setBody(mockResponse, new DuplexResponseBody() {, +      @Override public void onRequest(RecordedRequest request,, +          BufferedSource requestBody, BufferedSink responseBody) throws IOException {, +, +        assertEquals("request A", requestBody.readUtf8Line());, +        responseBody.writeUtf8("response B\n");, +        responseBody.flush();, +, +        assertEquals("request C", requestBody.readUtf8Line());, +        responseBody.writeUtf8("response D\n");, +        responseBody.flush();, +, +        assertEquals("request E", requestBody.readUtf8Line());, +        responseBody.writeUtf8("response F\n");, +        responseBody.flush();, +, +        assertNull(requestBody.readUtf8Line());, +        requestBody.close();, +        responseBody.close();, +      }, +    });, +    server.enqueue(mockResponse);]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java, +        .url(HttpUrl.get("https://dns.google.com/experimental?ct=" + UDPWIREFORMAT)), +        .url(HttpUrl.get("https://dns.google.com/experimental")), +        .url(HttpUrl.get("https://1.1.1.1/dns-query")), +        .url(HttpUrl.get("https://cloudflare-dns.com/dns-query")), +        .url(HttpUrl.get("https://cloudflare-dns.com/dns-query?ct=application/dns-udpwireformat")), +        .url(HttpUrl.get("https://doh.cleanbrowsing.org/doh/family-filter")), +        .url(HttpUrl.get("https://dns.dnsoverhttps.net/dns-query")), +        .url(HttpUrl.get("https://doh.crypto.sx/dns-query")), +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java, +        .url(HttpUrl.get("https://dns.google.com/experimental?ct=" + UDPWIREFORMAT)), +        .url(HttpUrl.get("https://dns.google.com/experimental")), +        .url(HttpUrl.get("https://1.1.1.1/dns-query")), +        .url(HttpUrl.get("https://cloudflare-dns.com/dns-query")), +        .url(HttpUrl.get("https://cloudflare-dns.com/dns-query?ct=application/dns-udpwireformat")), +        .url(HttpUrl.get("https://doh.cleanbrowsing.org/doh/family-filter")), +        .url(HttpUrl.get("https://dns.dnsoverhttps.net/dns-query")), +        .url(HttpUrl.get("https://doh.crypto.sx/dns-query")), +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +      HttpUrl url = HttpUrl.get("https://dns.cloudflare.com/.not-so-well-known/run-dmc-query");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java, +        .url(HttpUrl.get("https://dns.google.com/experimental?ct=" + UDPWIREFORMAT)), +        .url(HttpUrl.get("https://dns.google.com/experimental")), +        .url(HttpUrl.get("https://1.1.1.1/dns-query")), +        .url(HttpUrl.get("https://cloudflare-dns.com/dns-query")), +        .url(HttpUrl.get("https://cloudflare-dns.com/dns-query?ct=application/dns-udpwireformat")), +        .url(HttpUrl.get("https://doh.cleanbrowsing.org/doh/family-filter")), +        .url(HttpUrl.get("https://dns.dnsoverhttps.net/dns-query")), +        .url(HttpUrl.get("https://doh.crypto.sx/dns-query")), +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +      HttpUrl url = HttpUrl.get("https://dns.cloudflare.com/.not-so-well-known/run-dmc-query");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("Expected URL scheme 'http' or 'https' but was 'ftp'", expected.getMessage());, +      assertEquals("Invalid URL port: \"65536\"", expected.getMessage());, +        .url(HttpUrl.get("http://1234.1.1.1/")), +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java, +        .url(HttpUrl.get("https://dns.google.com/experimental?ct=" + UDPWIREFORMAT)), +        .url(HttpUrl.get("https://dns.google.com/experimental")), +        .url(HttpUrl.get("https://1.1.1.1/dns-query")), +        .url(HttpUrl.get("https://cloudflare-dns.com/dns-query")), +        .url(HttpUrl.get("https://cloudflare-dns.com/dns-query?ct=application/dns-udpwireformat")), +        .url(HttpUrl.get("https://doh.cleanbrowsing.org/doh/family-filter")), +        .url(HttpUrl.get("https://dns.dnsoverhttps.net/dns-query"))]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +/*, + * Copyright 2014 Square Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.util.Arrays;, +, +import static com.squareup.okhttp.internal.Util.asciiLowerCase;, +, +/**, + * An immutable sequence of bytes., + *, + * <p><strong>Full disclosure:</strong> this class provides untrusted input and, + * output streams with raw access to the underlying byte array. A hostile, + * stream implementation could keep a reference to the mutable byte string,, + * violating the immutable guarantee of this class. For this reason a byte, + * string's immutability guarantee cannot be relied upon for security in applets, + * and other environments that run both trusted and untrusted code in the same, + * process., + */, +public final class ByteString {, +  private final byte[] data;, +  private transient int hashCode; // Lazily computed; 0 if unknown., +  private transient String utf8; // Lazily computed., +, +  /** A singleton empty {@code ByteString}. */, +  public static final ByteString EMPTY = new ByteString(Util.EMPTY_BYTE_ARRAY);, +, +  /**, +   * Returns a new byte string containing a clone of the bytes of {@code data}., +   */, +  public static ByteString of(byte... data) {, +    return new ByteString(data.clone());, +  }, +, +  /** Returns a new byte string containing the {@code UTF-8} bytes of {@code s}. */, +  public static ByteString encodeUtf8(String s) {, +    ByteString byteString = new ByteString(s.getBytes(Util.UTF_8));, +    byteString.utf8 = s;, +    return byteString;, +  }, +, +  /** Constructs a new {@code String} by decoding the bytes as {@code UTF-8}. */, +  public String utf8() {, +    String result = utf8;, +    // We don't care if we double-allocate in racy code., +    return result != null ? result : (utf8 = new String(data, Util.UTF_8));, +  }, +, +  /**, +   * Returns true when {@code ascii} is not null and equals the bytes wrapped, +   * by this byte string., +   */, +  public boolean equalsAscii(String ascii) {, +    if (ascii == null || data.length != ascii.length()) {, +      return false;, +    }, +    if (ascii == this.utf8) {, +      return true;, +    }, +    for (int i = 0; i < data.length; i++) {, +      if (data[i] != ascii.charAt(i)) return false;, +    }, +    return true;, +  }, +, +  /**, +   * Reads {@code count} bytes from {@code in} and returns the result., +   *, +   * @throws java.io.EOFException if {@code in} has fewer than {@code count}, +   * bytes to read., +   */, +  public static ByteString read(InputStream in, int count) throws IOException {, +    byte[] result = new byte[count];]
[+++ b/benchmarks/pom.xml, +    <version>3.3.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.1</version>, +++ b/okcurl/pom.xml, +    <version>3.3.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.1</version>, +++ b/okcurl/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.1</version>, +++ b/okcurl/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.1</version>, +++ b/okcurl/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.3.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.1</version>, +++ b/okcurl/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.3.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.1</version>, +++ b/okcurl/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-tests/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.3.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.1</version>, +++ b/okcurl/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-tests/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.3.1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.3.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.1</version>, +++ b/okcurl/pom.xml, +    <version>3.3.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.1</version>]
[+++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_201</id>, +      <activation>, +        <jdk>1.8.0_201</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.13.v20181017</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_202</id>, +      <activation>, +        <jdk>1.8.0_202</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.13.v20181017</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ /dev/null, +++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/ByteString.java, +/*, + * Copyright 2014 Square Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.bytes;, +, +import com.squareup.okhttp.internal.Util;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.util.Arrays;, +, +import static com.squareup.okhttp.internal.Util.asciiLowerCase;, +, +/**, + * An immutable sequence of bytes., + *, + * <p><strong>Full disclosure:</strong> this class provides untrusted input and, + * output streams with raw access to the underlying byte array. A hostile, + * stream implementation could keep a reference to the mutable byte string,, + * violating the immutable guarantee of this class. For this reason a byte, + * string's immutability guarantee cannot be relied upon for security in applets, + * and other environments that run both trusted and untrusted code in the same, + * process., + */, +public final class ByteString {, +  final byte[] data;, +  private transient int hashCode; // Lazily computed; 0 if unknown., +  private transient String utf8; // Lazily computed., +, +  /** A singleton empty {@code ByteString}. */, +  public static final ByteString EMPTY = new ByteString(Util.EMPTY_BYTE_ARRAY);, +, +  /**, +   * Returns a new byte string containing a clone of the bytes of {@code data}., +   */, +  public static ByteString of(byte... data) {, +    return new ByteString(data.clone());, +  }, +, +  /** Returns a new byte string containing the {@code UTF-8} bytes of {@code s}. */, +  public static ByteString encodeUtf8(String s) {, +    ByteString byteString = new ByteString(s.getBytes(Util.UTF_8));, +    byteString.utf8 = s;, +    return byteString;, +  }, +, +  /** Constructs a new {@code String} by decoding the bytes as {@code UTF-8}. */, +  public String utf8() {, +    String result = utf8;, +    // We don't care if we double-allocate in racy code.]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +    assertTrue(request.getHeaders().contains("If-Modified-Since: " + formatDate(since)));, +    return formatDate(new Date(System.currentTimeMillis() + timeUnit.toMillis(delta)));, +  }, +, +  private String formatDate(Date date) {, +    DateFormat rfc1123 = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);, +    rfc1123.setTimeZone(TimeZone.getTimeZone("GMT"));, +    return rfc1123.format(date);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +    assertTrue(request.getHeaders().contains("If-Modified-Since: " + formatDate(since)));, +    return formatDate(new Date(System.currentTimeMillis() + timeUnit.toMillis(delta)));, +  }, +, +  private String formatDate(Date date) {, +    DateFormat rfc1123 = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);, +    rfc1123.setTimeZone(TimeZone.getTimeZone("GMT"));, +    return rfc1123.format(date);, +++ b/pom.xml, +    <okio.version>1.0.1</okio.version>]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    Headers okHeaders = extractOkResponseHeaders(httpUrlConnection);, +    Headers okHeaders = extractOkHeaders(javaResponse);, +      Headers headers = extractOkHeaders(requestHeaders);, +    final Headers headers = response.headers();, +  private static Headers extractOkHeaders(CacheResponse javaResponse) throws IOException {, +    return extractOkHeaders(javaResponseHeaders);, +  private static Headers extractOkResponseHeaders(HttpURLConnection httpUrlConnection) {, +    return extractOkHeaders(javaResponseHeaders);, +   * entry (one with a {@code null} key) is discarded., +  static Headers extractOkHeaders(Map<String, List<String>> javaHeaders) {, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    Headers okHeaders = extractOkResponseHeaders(httpUrlConnection);, +    Headers okHeaders = extractOkHeaders(javaResponse);, +      Headers headers = extractOkHeaders(requestHeaders);, +    final Headers headers = response.headers();, +  private static Headers extractOkHeaders(CacheResponse javaResponse) throws IOException {, +    return extractOkHeaders(javaResponseHeaders);, +  private static Headers extractOkResponseHeaders(HttpURLConnection httpUrlConnection) {, +    return extractOkHeaders(javaResponseHeaders);, +   * entry (one with a {@code null} key) is discarded., +  static Headers extractOkHeaders(Map<String, List<String>> javaHeaders) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Headers okHeaders = JavaApiConverter.extractOkHeaders(javaResponseHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    Headers okHeaders = extractOkResponseHeaders(httpUrlConnection);, +    Headers okHeaders = extractOkHeaders(javaResponse);, +      Headers headers = extractOkHeaders(requestHeaders);, +    final Headers headers = response.headers();, +  private static Headers extractOkHeaders(CacheResponse javaResponse) throws IOException {, +    return extractOkHeaders(javaResponseHeaders);, +  private static Headers extractOkResponseHeaders(HttpURLConnection httpUrlConnection) {, +    return extractOkHeaders(javaResponseHeaders);, +   * entry (one with a {@code null} key) is discarded., +  static Headers extractOkHeaders(Map<String, List<String>> javaHeaders) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Headers okHeaders = JavaApiConverter.extractOkHeaders(javaResponseHeaders);, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Platform.get().log(message);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    Headers okHeaders = extractOkResponseHeaders(httpUrlConnection);, +    Headers okHeaders = extractOkHeaders(javaResponse);, +      Headers headers = extractOkHeaders(requestHeaders);, +    final Headers headers = response.headers();, +  private static Headers extractOkHeaders(CacheResponse javaResponse) throws IOException {, +    return extractOkHeaders(javaResponseHeaders);, +  private static Headers extractOkResponseHeaders(HttpURLConnection httpUrlConnection) {, +    return extractOkHeaders(javaResponseHeaders);, +   * entry (one with a {@code null} key) is discarded., +  static Headers extractOkHeaders(Map<String, List<String>> javaHeaders) {]
[+++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    sleepIfDelayed(response);, +  private void sleepIfDelayed(MockResponse response) {, +    if (response.getBodyDelayTimeMs() != 0) {, +      try {, +        Thread.sleep(response.getBodyDelayTimeMs());, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    }, +  }, +, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    sleepIfDelayed(response);, +  private void sleepIfDelayed(MockResponse response) {, +    if (response.getBodyDelayTimeMs() != 0) {, +      try {, +        Thread.sleep(response.getBodyDelayTimeMs());]
[+++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.3-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.3-SNAPSHOT</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        equalTo(19L));, +        equalTo(19L));, +        equalTo(19L));, +    requestBodySuccess(requestBody, equalTo(8192L), equalTo(19L));, +        equalTo(19L));, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        equalTo(19L));, +        equalTo(19L));, +        equalTo(19L));, +    requestBodySuccess(requestBody, equalTo(8192L), equalTo(19L));, +        equalTo(19L));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, +  @Test public void byteCount() {, +    assertEquals(0L, new Headers.Builder().build().byteCount());, +    assertEquals(10L, new Headers.Builder(), +        .add("abc", "def"), +        .build(), +        .byteCount());, +    assertEquals(20L, new Headers.Builder(), +        .add("abc", "def"), +        .add("ghi", "jkl"), +        .build(), +        .byteCount());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        equalTo(19L));, +        equalTo(19L));, +        equalTo(19L));, +    requestBodySuccess(requestBody, equalTo(8192L), equalTo(19L));, +        equalTo(19L));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, +  @Test public void byteCount() {, +    assertEquals(0L, new Headers.Builder().build().byteCount());, +    assertEquals(10L, new Headers.Builder(), +        .add("abc", "def"), +        .build(), +        .byteCount());, +    assertEquals(20L, new Headers.Builder(), +        .add("abc", "def"), +        .add("ghi", "jkl"), +        .build(), +        .byteCount());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +  @Override public void requestHeadersEnd(Call call, Request request) {, +    logEvent(new RequestHeadersEnd(call, request.headers.byteCount()));, +  @Override public void requestBodyEnd(Call call, long byteCount) {, +    logEvent(new RequestBodyEnd(call, byteCount));, +  @Override public void responseHeadersEnd(Call call, Response response) {, +    logEvent(new ResponseHeadersEnd(call, response.headers.byteCount()));, +  @Override public void responseBodyEnd(Call call, long byteCount) {, +    logEvent(new ResponseBodyEnd(call, byteCount));, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        equalTo(19L));, +        equalTo(19L));, +        equalTo(19L));, +    requestBodySuccess(requestBody, equalTo(8192L), equalTo(19L));, +        equalTo(19L));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, +  @Test public void byteCount() {, +    assertEquals(0L, new Headers.Builder().build().byteCount());, +    assertEquals(10L, new Headers.Builder(), +        .add("abc", "def"), +        .build(), +        .byteCount());, +    assertEquals(20L, new Headers.Builder(), +        .add("abc", "def"), +        .add("ghi", "jkl"), +        .build(), +        .byteCount());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +  @Override public void requestHeadersEnd(Call call, Request request) {, +    logEvent(new RequestHeadersEnd(call, request.headers.byteCount()));, +  @Override public void requestBodyEnd(Call call, long byteCount) {, +    logEvent(new RequestBodyEnd(call, byteCount));, +  @Override public void responseHeadersEnd(Call call, Response response) {, +    logEvent(new ResponseHeadersEnd(call, response.headers.byteCount()));, +  @Override public void responseBodyEnd(Call call, long byteCount) {, +    logEvent(new ResponseBodyEnd(call, byteCount));, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +   * @param request the request sent over the network. It is an error to access the body of this, +   *     request., +  public void requestHeadersEnd(Call call, Request request) {, +  public void requestBodyEnd(Call call, long byteCount) {, +   * <p>This method is always invoked after {@link #responseHeadersStart}., +   * @param response the response received over the network. It is an error to access the body of, +   *     this response., +  public void responseHeadersEnd(Call call, Response response) {, +  public void responseBodyEnd(Call call, long byteCount) {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        equalTo(19L));, +        equalTo(19L));, +        equalTo(19L));, +    requestBodySuccess(requestBody, equalTo(8192L), equalTo(19L));, +        equalTo(19L));]
[+++ b/benchmarks/pom.xml, +    <version>3.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.5.0</version>]
[+++ b/samples/crawler/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp.sample</groupId>, +    <artifactId>sample-parent</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>crawler</artifactId>, +  <name>Sample: Crawler</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>org.jsoup</groupId>, +      <artifactId>jsoup</artifactId>, +      <version>1.7.3</version>, +    </dependency>, +  </dependencies>, +</project>, +++ b/samples/crawler/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp.sample</groupId>, +    <artifactId>sample-parent</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>crawler</artifactId>, +  <name>Sample: Crawler</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>org.jsoup</groupId>, +      <artifactId>jsoup</artifactId>, +      <version>1.7.3</version>, +    </dependency>, +  </dependencies>, +</project>, +++ b/samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.sample;, +, +import com.squareup.okhttp.HttpResponseCache;, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.internal.http.OkHeaders;, +import java.io.File;, +import java.io.IOException;, +import java.io.InputStream;, +import java.net.HttpURLConnection;, +import java.net.MalformedURLException;, +import java.net.URL;, +import java.nio.charset.Charset;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.LinkedBlockingQueue;, +import org.jsoup.Jsoup;, +import org.jsoup.nodes.Document;, +import org.jsoup.nodes.Element;, +, +/**, + * Fetches HTML from a requested URL, follows the links, and repeats., + */, +public final class Crawler {, +  public static final Charset UTF_8 = Charset.forName("UTF-8");]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +  /**, +   * Enqueued on shutdown to release threads waiting on {@link #dispatch}. Note that this response, +   * isn't transmitted because the connection is closed before this response is returned., +   */, +  private static final MockResponse DEAD_LETTER = new MockResponse(), +      .setStatus("HTTP/1.1 " + 503 + " shutting down");, +, +    MockResponse result = responseQueue.take();, +, +    // If take() returned because we're shutting down, then enqueue another dead letter so that any, +    // other threads waiting on take() will also return., +    if (result == DEAD_LETTER) responseQueue.add(DEAD_LETTER);, +, +    return result;, +  @Override public void shutdown() {, +    responseQueue.add(DEAD_LETTER);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +  /**, +   * Enqueued on shutdown to release threads waiting on {@link #dispatch}. Note that this response, +   * isn't transmitted because the connection is closed before this response is returned., +   */, +  private static final MockResponse DEAD_LETTER = new MockResponse(), +      .setStatus("HTTP/1.1 " + 503 + " shutting down");, +, +    MockResponse result = responseQueue.take();, +, +    // If take() returned because we're shutting down, then enqueue another dead letter so that any, +    // other threads waiting on take() will also return., +    if (result == DEAD_LETTER) responseQueue.add(DEAD_LETTER);, +, +    return result;, +  @Override public void shutdown() {, +    responseQueue.add(DEAD_LETTER);, +  }, +]
[+++ b/CHANGELOG.md, +## Version 3.7.0, +, +_2017-04-15_, +, + *  **OkHttp no longer recovers from TLS handshake failures by attempting a TLSv1 connection.**, +    The fallback was necessary for servers that implemented version negotiation incorrectly. Now, +    that 99.99% of servers do it right this fallback is obsolete., + *  Fix: Do not honor cookies set on a public domain. Previously a malicious site could inject, +    cookies on top-level domains like `co.uk` because our cookie parser didn't honor the [public, +    suffix][public_suffix] list. Alongside this fix is a new API, `HttpUrl.topPrivateDomain()`,, +    which returns the privately domain name if the URL has one., + *  Fix: Change `MediaType.charset()` to return null for unexpected charsets., + *  Fix: Don't skip cache invalidation if the invalidating response has no body., + *  Fix: Don't use a cryptographic random number generator for web sockets. Some Android devices, +    implement `SecureRandom` incorrectly!, + *  Fix: Correctly canonicalize IPv6 addresses in `HttpUrl`. This prevented OkHttp from trusting, +    HTTPS certificates issued to certain IPv6 addresses., + *  Fix: Don't reuse connections after an unsuccessful `Expect: 100-continue`., + *  Fix: Handle either `TLS_` or `SSL_` prefixes for cipher suite names. This is necessary for, +    IBM JVMs that use the `SSL_` prefix exclusively., + *  Fix: Reject HTTP/2 data frames if the stream ID is 0., + *  New: Upgrade to Okio 1.12.0., +, +     ```xml, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.12.0</version>, +     </dependency>, +, +     com.squareup.okio:okio:1.12.0, +     ```, +, + *  New: Connection coalescing. OkHttp may reuse HTTP/2 connections across calls that share an IP, +    address and HTTPS certificate, even if their domain names are different., + *  New: MockWebServer's `RecordedRequest` exposes the requested `HttpUrl` with `getRequestUrl()`., +, +, +    charset for the remaining bytes. Most applications should not need a byte order mark., + *  New: Update HTTP/2 support to `h2-16` and `hpack-10`., + [public_suffix]: https://publicsuffix.org/, +++ b/CHANGELOG.md, +## Version 3.7.0, +, +_2017-04-15_, +, + *  **OkHttp no longer recovers from TLS handshake failures by attempting a TLSv1 connection.**, +    The fallback was necessary for servers that implemented version negotiation incorrectly. Now, +    that 99.99% of servers do it right this fallback is obsolete., + *  Fix: Do not honor cookies set on a public domain. Previously a malicious site could inject, +    cookies on top-level domains like `co.uk` because our cookie parser didn't honor the [public, +    suffix][public_suffix] list. Alongside this fix is a new API, `HttpUrl.topPrivateDomain()`,, +    which returns the privately domain name if the URL has one., + *  Fix: Change `MediaType.charset()` to return null for unexpected charsets., + *  Fix: Don't skip cache invalidation if the invalidating response has no body., + *  Fix: Don't use a cryptographic random number generator for web sockets. Some Android devices, +    implement `SecureRandom` incorrectly!, + *  Fix: Correctly canonicalize IPv6 addresses in `HttpUrl`. This prevented OkHttp from trusting, +    HTTPS certificates issued to certain IPv6 addresses., + *  Fix: Don't reuse connections after an unsuccessful `Expect: 100-continue`., + *  Fix: Handle either `TLS_` or `SSL_` prefixes for cipher suite names. This is necessary for, +    IBM JVMs that use the `SSL_` prefix exclusively., + *  Fix: Reject HTTP/2 data frames if the stream ID is 0., + *  New: Upgrade to Okio 1.12.0., +, +     ```xml, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.12.0</version>, +     </dependency>, +, +     com.squareup.okio:okio:1.12.0, +     ```, +, + *  New: Connection coalescing. OkHttp may reuse HTTP/2 connections across calls that share an IP, +    address and HTTPS certificate, even if their domain names are different., + *  New: MockWebServer's `RecordedRequest` exposes the requested `HttpUrl` with `getRequestUrl()`., +, +, +    charset for the remaining bytes. Most applications should not need a byte order mark., + *  New: Update HTTP/2 support to `h2-16` and `hpack-10`., + [public_suffix]: https://publicsuffix.org/, +++ b/README.md, +  <version>3.7.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.7.0', +  <version>3.7.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.7.0', +-dontwarn okio.**, +++ b/CHANGELOG.md, +## Version 3.7.0, +, +_2017-04-15_, +, + *  **OkHttp no longer recovers from TLS handshake failures by attempting a TLSv1 connection.**, +    The fallback was necessary for servers that implemented version negotiation incorrectly. Now, +    that 99.99% of servers do it right this fallback is obsolete., + *  Fix: Do not honor cookies set on a public domain. Previously a malicious site could inject, +    cookies on top-level domains like `co.uk` because our cookie parser didn't honor the [public]
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import okhttp3.internal.Util;, +      Util.addSuppressedIfPossible(unknownHostException, failures.get(i));, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import okhttp3.internal.Util;, +      Util.addSuppressedIfPossible(unknownHostException, failures.get(i));, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +  private static final Method addSuppressedExceptionMethod;, +, +  static {, +    Method m;, +    try {, +      m = Throwable.class.getDeclaredMethod("addSuppressed", Throwable.class);, +    } catch (Exception e) {, +      m = null;, +    }, +    addSuppressedExceptionMethod = m;, +  }, +, +  public static void addSuppressedIfPossible(Throwable e, Throwable suppressed) {, +    if (addSuppressedExceptionMethod != null) {, +      try {, +        addSuppressedExceptionMethod.invoke(e, suppressed);, +      } catch (InvocationTargetException | IllegalAccessException ignored) {, +      }, +    }, +  }, +, +    String[] result = Arrays.copyOf(array, array.length + 1);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import okhttp3.internal.Util;, +      Util.addSuppressedIfPossible(unknownHostException, failures.get(i));, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +  private static final Method addSuppressedExceptionMethod;, +, +  static {, +    Method m;, +    try {, +      m = Throwable.class.getDeclaredMethod("addSuppressed", Throwable.class);, +    } catch (Exception e) {, +      m = null;, +    }, +    addSuppressedExceptionMethod = m;, +  }, +, +  public static void addSuppressedIfPossible(Throwable e, Throwable suppressed) {, +    if (addSuppressedExceptionMethod != null) {, +      try {, +        addSuppressedExceptionMethod.invoke(e, suppressed);, +      } catch (InvocationTargetException | IllegalAccessException ignored) {, +      }, +    }, +  }, +, +    String[] result = Arrays.copyOf(array, array.length + 1);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.java, +import static okhttp3.internal.Util.addSuppressedIfPossible;, +, +    addSuppressedIfPossible(firstException, e);]
[+++ b/pom.xml]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, +      @Override public void initExchange(, +          Response.Builder responseBuilder, Exchange exchange) {, +        responseBuilder.initExchange(exchange);, +      }, +, +      @Override public @Nullable Exchange exchange(Response response) {, +        return response.exchange;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, +      @Override public void initExchange(, +          Response.Builder responseBuilder, Exchange exchange) {, +        responseBuilder.initExchange(exchange);, +      }, +, +      @Override public @Nullable Exchange exchange(Response response) {, +        return response.exchange;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +      return getResponseWithInterceptorChain();, +        transmitter.noMoreExchanges(ioException);, +        if (transmitter.isCanceled()) throw new IOException("Canceled");, +    IOException ioException = null;, +    } catch (IOException e) {, +      ioException = e;, +      throw e;, +      transmitter.noMoreExchanges(ioException);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, +      @Override public void initExchange(, +          Response.Builder responseBuilder, Exchange exchange) {, +        responseBuilder.initExchange(exchange);, +      }, +, +      @Override public @Nullable Exchange exchange(Response response) {, +        return response.exchange;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +      return getResponseWithInterceptorChain();, +        transmitter.noMoreExchanges(ioException);, +        if (transmitter.isCanceled()) throw new IOException("Canceled");, +    IOException ioException = null;, +    } catch (IOException e) {, +      ioException = e;, +      throw e;, +      transmitter.noMoreExchanges(ioException);, +++ b/okhttp/src/main/java/okhttp3/Response.java, +import okhttp3.internal.connection.Exchange;, +  final @Nullable Exchange exchange;, +    this.exchange = builder.exchange;, +    if (exchange == null) throw new IllegalStateException("trailers not available");, +    return exchange.trailers();, +    @Nullable Exchange exchange;, +      this.exchange = response.exchange;, +    void initExchange(Exchange deferredTrailers) {, +      this.exchange = deferredTrailers;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, +      @Override public void initExchange(, +          Response.Builder responseBuilder, Exchange exchange) {, +        responseBuilder.initExchange(exchange);, +      }, +, +      @Override public @Nullable Exchange exchange(Response response) {, +        return response.exchange;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +      return getResponseWithInterceptorChain();, +        transmitter.noMoreExchanges(ioException);, +        if (transmitter.isCanceled()) throw new IOException("Canceled");, +    IOException ioException = null;, +    } catch (IOException e) {, +      ioException = e;, +      throw e;, +      transmitter.noMoreExchanges(ioException);, +++ b/okhttp/src/main/java/okhttp3/Response.java, +import okhttp3.internal.connection.Exchange;, +  final @Nullable Exchange exchange;, +    this.exchange = builder.exchange;, +    if (exchange == null) throw new IllegalStateException("trailers not available");, +    return exchange.trailers();, +    @Nullable Exchange exchange;]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.get("text/plain"), bodyText);, +        return MediaType.get("text/plain; charset=utf-8");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.get("text/plain"), bodyText);, +        return MediaType.get("text/plain; charset=utf-8");, +++ b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.get("application/octet-stream");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.get("text/plain"), bodyText);, +        return MediaType.get("text/plain; charset=utf-8");, +++ b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.get("application/octet-stream");, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +  public static final MediaType DNS_MESSAGE = MediaType.get("application/dns-message");, +  public static final MediaType UDPWIREFORMAT = MediaType.get("application/dns-udpwireformat");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.get("text/plain"), bodyText);, +        return MediaType.get("text/plain; charset=utf-8");, +++ b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.get("application/octet-stream");, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +  public static final MediaType DNS_MESSAGE = MediaType.get("application/dns-message");, +  public static final MediaType UDPWIREFORMAT = MediaType.get("application/dns-udpwireformat");, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  private static final MediaType PLAIN = MediaType.get("text/plain; charset=utf-8");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.get("text/plain"), bodyText);, +        return MediaType.get("text/plain; charset=utf-8");, +++ b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.get("application/octet-stream");, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +  public static final MediaType DNS_MESSAGE = MediaType.get("application/dns-message");, +  public static final MediaType UDPWIREFORMAT = MediaType.get("application/dns-udpwireformat");]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +      Headers streamHeaders = stream.takeHeaders();, +        String name = streamHeaders.name(i);, +        String value = streamHeaders.value(i);, +        if (name.equals(Header.TARGET_METHOD_UTF8)) {, +        } else if (name.equals(Header.TARGET_PATH_UTF8)) {, +          httpHeaders.add(name, value);, +        if (name.equals("expect") && value.equalsIgnoreCase("100-continue")) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +      Headers streamHeaders = stream.takeHeaders();, +        String name = streamHeaders.name(i);, +        String value = streamHeaders.value(i);, +        if (name.equals(Header.TARGET_METHOD_UTF8)) {, +        } else if (name.equals(Header.TARGET_PATH_UTF8)) {, +          httpHeaders.add(name, value);, +        if (name.equals("expect") && value.equalsIgnoreCase("100-continue")) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import okhttp3.Headers;, +      Headers requestHeaders = stream.takeHeaders();, +        if (requestHeaders.name(i).equals(Header.TARGET_PATH_UTF8)) {, +          path = requestHeaders.value(i);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +      Headers streamHeaders = stream.takeHeaders();, +        String name = streamHeaders.name(i);, +        String value = streamHeaders.value(i);, +        if (name.equals(Header.TARGET_METHOD_UTF8)) {, +        } else if (name.equals(Header.TARGET_PATH_UTF8)) {, +          httpHeaders.add(name, value);, +        if (name.equals("expect") && value.equalsIgnoreCase("100-continue")) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import okhttp3.Headers;, +      Headers requestHeaders = stream.takeHeaders();, +        if (requestHeaders.name(i).equals(Header.TARGET_PATH_UTF8)) {, +          path = requestHeaders.value(i);, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    Headers headerBlock = Headers.of(, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +      Headers streamHeaders = stream.takeHeaders();, +        String name = streamHeaders.name(i);, +        String value = streamHeaders.value(i);, +        if (name.equals(Header.TARGET_METHOD_UTF8)) {, +        } else if (name.equals(Header.TARGET_PATH_UTF8)) {, +          httpHeaders.add(name, value);, +        if (name.equals("expect") && value.equalsIgnoreCase("100-continue")) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import okhttp3.Headers;, +      Headers requestHeaders = stream.takeHeaders();, +        if (requestHeaders.name(i).equals(Header.TARGET_PATH_UTF8)) {, +          path = requestHeaders.value(i);, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    Headers headerBlock = Headers.of(, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import okhttp3.Headers;, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    final ArrayDeque<Headers> receivedHeaders = new ArrayDeque<>();, +    @Override public void onHeaders(Headers headers) {, +      receivedHeaders.add(headers);, +    public List<Headers> takeAll() {, +      List<Headers> result = new ArrayList<>();, +      for (Headers headers; (headers = receivedHeaders.poll()) != null; ) {, +        result.add(headers);, +    assertEquals(Arrays.asList(Headers.of("a", "android"), Headers.of("b", "banana")),, +        headersListener.takeAll());, +    assertEquals(Arrays.asList(Headers.of("a", "android")), headersListener.takeAll());, +    assertEquals(Arrays.asList(Headers.of("b", "banana")), headersListener.takeAll());, +    assertEquals(Arrays.asList(Headers.of("a", "android")), headersListener.takeAll());, +    assertEquals(Arrays.asList(Headers.of("b", "banana")), headersListener.takeAll());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    assertEquals(Headers.of("b", "banana"), stream.takeHeaders());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    assertEquals(Headers.of("c", "c3po"), stream.takeHeaders());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    assertEquals(Headers.of("c", "cola"), stream.takeHeaders());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +      Headers streamHeaders = stream.takeHeaders();, +        String name = streamHeaders.name(i);, +        String value = streamHeaders.value(i);, +        if (name.equals(Header.TARGET_METHOD_UTF8)) {, +        } else if (name.equals(Header.TARGET_PATH_UTF8)) {, +          httpHeaders.add(name, value);, +        if (name.equals("expect") && value.equalsIgnoreCase("100-continue")) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import okhttp3.Headers;, +      Headers requestHeaders = stream.takeHeaders();, +        if (requestHeaders.name(i).equals(Header.TARGET_PATH_UTF8)) {, +          path = requestHeaders.value(i);, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    Headers headerBlock = Headers.of(, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import okhttp3.Headers;, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());]
[+++ b/okhttp-apache/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  /** https://github.com/square/okhttp/issues/2198 */, +  @Test public void cachedRedirect() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(301), +        .addHeader("Cache-Control: max-age=60"), +        .addHeader("Location: /bar"));, +    server.enqueue(new MockResponse(), +        .setBody("ABC"));, +    server.enqueue(new MockResponse(), +        .setBody("ABC"));, +, +    Request request1 = new Request.Builder().url(server.url("/")).build();, +    Response response1 = client.newCall(request1).execute();, +    assertEquals("ABC", response1.body().string());, +, +    Request request2 = new Request.Builder().url(server.url("/")).build();, +    Response response2 = client.newCall(request2).execute();, +    assertEquals("ABC", response2.body().string());, +  }, +, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  /** https://github.com/square/okhttp/issues/2198 */, +  @Test public void cachedRedirect() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(301), +        .addHeader("Cache-Control: max-age=60"), +        .addHeader("Location: /bar"));, +    server.enqueue(new MockResponse(), +        .setBody("ABC"));, +    server.enqueue(new MockResponse(), +        .setBody("ABC"));, +, +    Request request1 = new Request.Builder().url(server.url("/")).build();, +    Response response1 = client.newCall(request1).execute();, +    assertEquals("ABC", response1.body().string());, +, +    Request request2 = new Request.Builder().url(server.url("/")).build();, +    Response response2 = client.newCall(request2).execute();, +    assertEquals("ABC", response2.body().string());, +  }, +, +++ b/okhttp-urlconnection/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  /** https://github.com/square/okhttp/issues/2198 */, +  @Test public void cachedRedirect() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(301), +        .addHeader("Cache-Control: max-age=60"), +        .addHeader("Location: /bar"));, +    server.enqueue(new MockResponse(), +        .setBody("ABC"));, +    server.enqueue(new MockResponse(), +        .setBody("ABC"));, +, +    Request request1 = new Request.Builder().url(server.url("/")).build();, +    Response response1 = client.newCall(request1).execute();, +    assertEquals("ABC", response1.body().string());, +, +    Request request2 = new Request.Builder().url(server.url("/")).build();, +    Response response2 = client.newCall(request2).execute();, +    assertEquals("ABC", response2.body().string());, +  }, +, +++ b/okhttp-urlconnection/pom.xml, +++ b/okhttp-ws/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  /** https://github.com/square/okhttp/issues/2198 */, +  @Test public void cachedRedirect() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(301), +        .addHeader("Cache-Control: max-age=60"), +        .addHeader("Location: /bar"));, +    server.enqueue(new MockResponse(), +        .setBody("ABC"));, +    server.enqueue(new MockResponse(), +        .setBody("ABC"));, +, +    Request request1 = new Request.Builder().url(server.url("/")).build();, +    Response response1 = client.newCall(request1).execute();, +    assertEquals("ABC", response1.body().string());, +, +    Request request2 = new Request.Builder().url(server.url("/")).build();, +    Response response2 = client.newCall(request2).execute();, +    assertEquals("ABC", response2.body().string());, +  }, +, +++ b/okhttp-urlconnection/pom.xml, +++ b/okhttp-ws/pom.xml]
[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  @Test public void basicChunkedResponseBody() throws IOException {, +    setLevel(Level.BASIC);, +, +    server.enqueue(new MockResponse(), +        .setChunkedBody("Hello!", 2), +        .setHeader("Content-Type", PLAIN));, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +, +    applicationLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +, +    networkLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +  }, +, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  @Test public void basicChunkedResponseBody() throws IOException {, +    setLevel(Level.BASIC);, +, +    server.enqueue(new MockResponse(), +        .setChunkedBody("Hello!", 2), +        .setHeader("Content-Type", PLAIN));, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +, +    applicationLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +, +    networkLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  @Test public void basicChunkedResponseBody() throws IOException {, +    setLevel(Level.BASIC);, +, +    server.enqueue(new MockResponse(), +        .setChunkedBody("Hello!", 2), +        .setHeader("Content-Type", PLAIN));, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +, +    applicationLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +, +    networkLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  @Test public void basicChunkedResponseBody() throws IOException {, +    setLevel(Level.BASIC);, +, +    server.enqueue(new MockResponse(), +        .setChunkedBody("Hello!", 2), +        .setHeader("Content-Type", PLAIN));, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();]
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      @Override public void initChannel(SocketChannel channel) {, +          HandshakeCertificates handshakeCertificates = localhost();, +          SSLEngine engine = handshakeCertificates.sslContext().createSSLEngine();, +        ChannelHandlerContext context, HttpObject message) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      @Override public void initChannel(SocketChannel channel) {, +          HandshakeCertificates handshakeCertificates = localhost();, +          SSLEngine engine = handshakeCertificates.sslContext().createSSLEngine();, +        ChannelHandlerContext context, HttpObject message) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      SSLSocketFactory socketFactory = handshakeCertificates.sslSocketFactory();, +          .sslSocketFactory(socketFactory, handshakeCertificates.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      @Override public void initChannel(SocketChannel channel) {, +          HandshakeCertificates handshakeCertificates = localhost();, +          SSLEngine engine = handshakeCertificates.sslContext().createSSLEngine();, +        ChannelHandlerContext context, HttpObject message) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      SSLSocketFactory socketFactory = handshakeCertificates.sslSocketFactory();, +          .sslSocketFactory(socketFactory, handshakeCertificates.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      SSLSocketFactory socketFactory = handshakeCertificates.sslSocketFactory();, +          .sslSocketFactory(socketFactory, handshakeCertificates.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      @Override public void initChannel(SocketChannel channel) {, +          HandshakeCertificates handshakeCertificates = localhost();, +          SSLEngine engine = handshakeCertificates.sslContext().createSSLEngine();, +        ChannelHandlerContext context, HttpObject message) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      SSLSocketFactory socketFactory = handshakeCertificates.sslSocketFactory();, +          .sslSocketFactory(socketFactory, handshakeCertificates.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      SSLSocketFactory socketFactory = handshakeCertificates.sslSocketFactory();, +          .sslSocketFactory(socketFactory, handshakeCertificates.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      SSLSocketFactory socketFactory = handshakeCertificates.sslSocketFactory();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, +      Buffer buffer = new Buffer();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, +      Buffer buffer = new Buffer();, +++ b/okhttp-tests/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, +      Buffer buffer = new Buffer();, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +import okio.Buffer;, +    Buffer buffer = new Buffer();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, +      Buffer buffer = new Buffer();, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +import okio.Buffer;, +    Buffer buffer = new Buffer();, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, +      Buffer buffer = new Buffer();, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +import okio.Buffer;, +    Buffer buffer = new Buffer();, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft10Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.http;, +, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.PushPromise;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import java.util.Arrays;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class HttpOverHttp20Draft10Test extends HttpOverSpdyTest {, +, +  public HttpOverHttp20Draft10Test() {, +    super(Protocol.HTTP_2);, +    this.hostHeader = ":authority";, +  }, +, +  @Test public void serverSendsPushPromise_GET() throws Exception {, +    MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet"), +        .withPush(new PushPromise("GET", "/foo/bar", Arrays.asList("foo: bar"),, +            new MockResponse().setBody("bar").setStatus("HTTP/1.1 200 Sweet")));, +    server.enqueue(response);, +    server.play();, +, +    connection = client.open(server.getUrl("/foo"));, +    assertContent("ABCDE", connection, Integer.MAX_VALUE);, +    assertEquals(200, connection.getResponseCode());, +    assertEquals("Sweet", connection.getResponseMessage());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /foo HTTP/1.1", request.getRequestLine());, +    assertContains(request.getHeaders(), ":scheme: https");, +    assertContains(request.getHeaders(), hostHeader + ": " + hostName + ":" + server.getPort());, +, +    RecordedRequest pushedRequest = server.takeRequest();]
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. Seed the cache (potentially)., +    // 2. Expect a cache hit or miss., +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    // 1. Seed the cache., +    // 2. Invalidate it with an uncacheable response., +    // 3. Expect a cache miss., +  @Test public void putInvalidatesWithNoContentResponse() throws Exception {, +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    server.enqueue(new MockResponse(), +        .setBody("A"), +        .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)));, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .setResponseCode(HttpURLConnection.HTTP_NO_CONTENT));, +    server.enqueue(new MockResponse(), +        .setBody("C"));, +, +    HttpUrl url = server.url("/");, +, +    assertEquals("A", get(url).body().string());, +, +    Request request = new Request.Builder(), +        .url(url), +        .put(RequestBody.create(MediaType.parse("text/plain"), "foo")), +        .build();, +    Response invalidate = client.newCall(request).execute();, +    assertEquals("", invalidate.body().string());, +, +    assertEquals("C", get(url).body().string());, +  }, +, +    // 1. Request a range., +    // 2. Request a full document, expecting a cache miss., +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. Seed the cache (potentially)., +    // 2. Expect a cache hit or miss., +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    // 1. Seed the cache., +    // 2. Invalidate it with an uncacheable response., +    // 3. Expect a cache miss., +  @Test public void putInvalidatesWithNoContentResponse() throws Exception {, +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    server.enqueue(new MockResponse(), +        .setBody("A"), +        .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)));, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .setResponseCode(HttpURLConnection.HTTP_NO_CONTENT));, +    server.enqueue(new MockResponse(), +        .setBody("C"));, +, +    HttpUrl url = server.url("/");, +, +    assertEquals("A", get(url).body().string());, +, +    Request request = new Request.Builder(), +        .url(url), +        .put(RequestBody.create(MediaType.parse("text/plain"), "foo")), +        .build();, +    Response invalidate = client.newCall(request).execute();, +    assertEquals("", invalidate.body().string());, +, +    assertEquals("C", get(url).body().string());, +  }, +, +    // 1. Request a range., +    // 2. Request a full document, expecting a cache miss., +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +, +  @Test public void topPrivateDomain() {, +    assertEquals("google.com", HttpUrl.parse("https://google.com").topPrivateDomain());, +    assertEquals("google.co.uk", HttpUrl.parse("https://adwords.google.co.uk").topPrivateDomain());, +    assertEquals("xn--ewv.xn--4pvxs.jp", HttpUrl.parse("https://栃.栃木.jp").topPrivateDomain());, +    assertEquals("xn--ewv.xn--4pvxs.jp",, +        HttpUrl.parse("https://xn--ewv.xn--4pvxs.jp").topPrivateDomain());, +, +    assertNull(HttpUrl.parse("https://co.uk").topPrivateDomain());, +    assertNull(HttpUrl.parse("https://square").topPrivateDomain());, +    assertNull(HttpUrl.parse("https://栃木.jp").topPrivateDomain());, +    assertNull(HttpUrl.parse("https://xn--4pvxs.jp").topPrivateDomain());, +    assertNull(HttpUrl.parse("https://localhost").topPrivateDomain());, +    assertNull(HttpUrl.parse("https://127.0.0.1").topPrivateDomain());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. Seed the cache (potentially)., +    // 2. Expect a cache hit or miss., +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    // 1. Seed the cache., +    // 2. Invalidate it with an uncacheable response.]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml]
[+++ b/.circleci/config.yml, +# Check https://circleci.com/docs/2.0/language-java/ for more details, +version: 2, +jobs:, +  build:, +    docker:, +      - image: circleci/openjdk:8-jdk, +, +    working_directory: ~/repo, +, +    environment:, +      JVM_OPTS: -Xmx3200m, +      TERM: dumb, +, +    steps:, +      - checkout, +, +      - restore_cache:, +          keys:, +            - v1-dependencies-{{ checksum "build.gradle" }}, +            - v1-dependencies-, +, +      - run: ./gradlew downloadDependencies, +, +      - save_cache:, +          paths:, +            - ~/.gradle/caches, +          key: v1-dependencies-{{ checksum "build.gradle" }}, +, +      - run: ./gradlew check, +      , +      - run:, +          name: Save test results, +          command: |, +            mkdir -p ~/test-results/junit/, +            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;, +          when: always, +      - store_test_results:, +          path: ~/test-results, +      - store_artifacts:, +          path: ~/test-results/junit , +++ b/.circleci/config.yml, +# Check https://circleci.com/docs/2.0/language-java/ for more details, +version: 2, +jobs:, +  build:, +    docker:, +      - image: circleci/openjdk:8-jdk, +, +    working_directory: ~/repo, +, +    environment:, +      JVM_OPTS: -Xmx3200m, +      TERM: dumb, +, +    steps:, +      - checkout, +, +      - restore_cache:, +          keys:, +            - v1-dependencies-{{ checksum "build.gradle" }}, +            - v1-dependencies-, +, +      - run: ./gradlew downloadDependencies, +, +      - save_cache:, +          paths:, +            - ~/.gradle/caches, +          key: v1-dependencies-{{ checksum "build.gradle" }}, +, +      - run: ./gradlew check, +      , +      - run:, +          name: Save test results, +          command: |, +            mkdir -p ~/test-results/junit/, +            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;, +          when: always, +      - store_test_results:, +          path: ~/test-results, +      - store_artifacts:, +          path: ~/test-results/junit , +++ b/build.gradle, +, +  task downloadDependencies() {, +    description 'Download all dependencies to the Gradle cache', +    doLast {, +      configurations.findAll { it.canBeResolved }.files, +    }, +  }, +++ b/.circleci/config.yml, +# Check https://circleci.com/docs/2.0/language-java/ for more details, +version: 2, +jobs:, +  build:, +    docker:, +      - image: circleci/openjdk:8-jdk, +, +    working_directory: ~/repo, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +  @Test public void readSettingsFrameExperimentalId() throws IOException {, +    writeMedium(frame, 6); // 2 for the code and 4 for the value, +    frame.writeByte(Http2.TYPE_SETTINGS);, +    frame.writeByte(Http2.FLAG_NONE);, +    frame.writeInt(0); // Settings are always on the connection stream 0., +    frame.write(ByteString.decodeHex("f000")); // Id reserved for experimental use., +    frame.writeInt(1);, +, +    reader.nextFrame(false, new BaseTestHandler() {, +      @Override public void settings(boolean clearPrevious, Settings settings) {, +        // no-op, +      }, +    });, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +  @Test public void readSettingsFrameExperimentalId() throws IOException {, +    writeMedium(frame, 6); // 2 for the code and 4 for the value, +    frame.writeByte(Http2.TYPE_SETTINGS);, +    frame.writeByte(Http2.FLAG_NONE);, +    frame.writeInt(0); // Settings are always on the connection stream 0., +    frame.write(ByteString.decodeHex("f000")); // Id reserved for experimental use., +    frame.writeInt(1);, +, +    reader.nextFrame(false, new BaseTestHandler() {, +      @Override public void settings(boolean clearPrevious, Settings settings) {, +        // no-op, +      }, +    });, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +      if (connection != null) return connection;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +  @Test public void readSettingsFrameExperimentalId() throws IOException {, +    writeMedium(frame, 6); // 2 for the code and 4 for the value, +    frame.writeByte(Http2.TYPE_SETTINGS);, +    frame.writeByte(Http2.FLAG_NONE);, +    frame.writeInt(0); // Settings are always on the connection stream 0., +    frame.write(ByteString.decodeHex("f000")); // Id reserved for experimental use., +    frame.writeInt(1);, +, +    reader.nextFrame(false, new BaseTestHandler() {, +      @Override public void settings(boolean clearPrevious, Settings settings) {, +        // no-op, +      }, +    });, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +      if (connection != null) return connection;, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Settings.java, +    if (id < 0 || id >= values.length) {]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AddressTest.java, +  private Dns dns = Dns.SYSTEM;, +    Address a = new Address("square.com", 80, dns, socketFactory, null, null, null,, +    Address b = new Address("square.com", 80, dns, socketFactory, null, null, null,, +    Address a = new Address("square.com", 80, dns, socketFactory, null, null, null,, +    Address b = new Address("square.com", 80, dns, socketFactory, null, null, null,, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AddressTest.java, +  private Dns dns = Dns.SYSTEM;, +    Address a = new Address("square.com", 80, dns, socketFactory, null, null, null,, +    Address b = new Address("square.com", 80, dns, socketFactory, null, null, null,, +    Address a = new Address("square.com", 80, dns, socketFactory, null, null, null,, +    Address b = new Address("square.com", 80, dns, socketFactory, null, null, null,, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.DoubleInetAddressDns;, +import com.squareup.okhttp.internal.SingleInetAddressDns;, +import com.squareup.okhttp.internal.http.FakeDns;, +    client.setDns(new DoubleInetAddressDns());, +    client.setDns(new DoubleInetAddressDns());, +    client.setDns(new DoubleInetAddressDns());, +    client.setDns(new SingleInetAddressDns());, +    client.setDns(new SingleInetAddressDns());, +    client.setDns(new SingleInetAddressDns());, +  @Test public void customDns() throws Exception {, +    // Configure a DNS that returns our MockWebServer for every hostname., +    FakeDns dns = new FakeDns();, +    dns.addresses(Dns.SYSTEM.lookup(server.url("/").host()));, +    client.setDns(dns);, +, +    server.enqueue(new MockResponse());, +    Request request = new Request.Builder(), +        .url(server.url("/").newBuilder().host("android.com").build()), +        .build();, +    executeSynchronously(request).assertCode(200);, +, +    dns.assertRequests("android.com");, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AddressTest.java, +  private Dns dns = Dns.SYSTEM;, +    Address a = new Address("square.com", 80, dns, socketFactory, null, null, null,, +    Address b = new Address("square.com", 80, dns, socketFactory, null, null, null,, +    Address a = new Address("square.com", 80, dns, socketFactory, null, null, null,, +    Address b = new Address("square.com", 80, dns, socketFactory, null, null, null,, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.DoubleInetAddressDns;, +import com.squareup.okhttp.internal.SingleInetAddressDns;, +import com.squareup.okhttp.internal.http.FakeDns;, +    client.setDns(new DoubleInetAddressDns());, +    client.setDns(new DoubleInetAddressDns());, +    client.setDns(new DoubleInetAddressDns());, +    client.setDns(new SingleInetAddressDns());, +    client.setDns(new SingleInetAddressDns());, +    client.setDns(new SingleInetAddressDns());, +  @Test public void customDns() throws Exception {, +    // Configure a DNS that returns our MockWebServer for every hostname., +    FakeDns dns = new FakeDns();, +    dns.addresses(Dns.SYSTEM.lookup(server.url("/").host()));, +    client.setDns(dns);, +, +    server.enqueue(new MockResponse());, +    Request request = new Request.Builder(), +        .url(server.url("/").newBuilder().host("android.com").build()), +        .build();, +    executeSynchronously(request).assertCode(200);, +, +    dns.assertRequests("android.com");, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    Dns dns = Dns.SYSTEM;, +    httpAddress = new Address(httpServer.getHostName(), httpServer.getPort(), dns, socketFactory,, +        null, null, null, AuthenticatorAdapter.INSTANCE, null,, +    spdyAddress = new Address(spdyServer.getHostName(), spdyServer.getPort(), dns, socketFactory,, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AddressTest.java, +  private Dns dns = Dns.SYSTEM;, +    Address a = new Address("square.com", 80, dns, socketFactory, null, null, null,, +    Address b = new Address("square.com", 80, dns, socketFactory, null, null, null,, +    Address a = new Address("square.com", 80, dns, socketFactory, null, null, null,, +    Address b = new Address("square.com", 80, dns, socketFactory, null, null, null,, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.DoubleInetAddressDns;, +import com.squareup.okhttp.internal.SingleInetAddressDns;, +import com.squareup.okhttp.internal.http.FakeDns;, +    client.setDns(new DoubleInetAddressDns());, +    client.setDns(new DoubleInetAddressDns());, +    client.setDns(new DoubleInetAddressDns());, +    client.setDns(new SingleInetAddressDns());, +    client.setDns(new SingleInetAddressDns());, +    client.setDns(new SingleInetAddressDns());, +  @Test public void customDns() throws Exception {, +    // Configure a DNS that returns our MockWebServer for every hostname., +    FakeDns dns = new FakeDns();, +    dns.addresses(Dns.SYSTEM.lookup(server.url("/").host()));, +    client.setDns(dns);, +, +    server.enqueue(new MockResponse());, +    Request request = new Request.Builder(), +        .url(server.url("/").newBuilder().host("android.com").build()), +        .build();, +    executeSynchronously(request).assertCode(200);]
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +        .protocols(benchmark.protocols), +          .sslSocketFactory(socketFactory), +          .hostnameVerifier(hostnameVerifier), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +        .protocols(benchmark.protocols), +          .sslSocketFactory(socketFactory), +          .hostnameVerifier(hostnameVerifier), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +        .protocols(benchmark.protocols), +        .dispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,, +          .sslSocketFactory(socketFactory), +          .hostnameVerifier(hostnameVerifier), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +        .protocols(benchmark.protocols), +          .sslSocketFactory(socketFactory), +          .hostnameVerifier(hostnameVerifier), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +        .protocols(benchmark.protocols), +        .dispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,, +          .sslSocketFactory(socketFactory), +          .hostnameVerifier(hostnameVerifier), +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +    builder.followSslRedirects(followRedirects);, +      builder.connectTimeout(connectTimeout, SECONDS);, +      builder.readTimeout(readTimeout, SECONDS);, +      builder.sslSocketFactory(createInsecureSslSocketFactory());, +      builder.hostnameVerifier(createInsecureHostnameVerifier());, +    client.connectionPool().evictAll(); // Close any persistent connections., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +        .protocols(benchmark.protocols), +          .sslSocketFactory(socketFactory), +          .hostnameVerifier(hostnameVerifier), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +        .protocols(benchmark.protocols), +        .dispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,, +          .sslSocketFactory(socketFactory), +          .hostnameVerifier(hostnameVerifier), +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +    builder.followSslRedirects(followRedirects);, +      builder.connectTimeout(connectTimeout, SECONDS);, +      builder.readTimeout(readTimeout, SECONDS);, +      builder.sslSocketFactory(createInsecureSslSocketFactory());, +      builder.hostnameVerifier(createInsecureHostnameVerifier());, +    client.connectionPool().evictAll(); // Close any persistent connections., +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java, +      builder.cache(okCacheContainer.getCache());, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +        .protocols(benchmark.protocols), +          .sslSocketFactory(socketFactory), +          .hostnameVerifier(hostnameVerifier), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +        .protocols(benchmark.protocols), +        .dispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,, +          .sslSocketFactory(socketFactory), +          .hostnameVerifier(hostnameVerifier), +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +    builder.followSslRedirects(followRedirects);, +      builder.connectTimeout(connectTimeout, SECONDS);, +      builder.readTimeout(readTimeout, SECONDS);, +      builder.sslSocketFactory(createInsecureSslSocketFactory());, +      builder.hostnameVerifier(createInsecureHostnameVerifier());, +    client.connectionPool().evictAll(); // Close any persistent connections., +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java, +      builder.cache(okCacheContainer.getCache());, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, +  private OkUrlFactory urlFactory;, +    urlFactory = new OkUrlFactory(new OkHttpClient.Builder().build());, +    AndroidInternal.setResponseCache(urlFactory, responseCache);, +    return urlFactory.open(url.url());, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +        .protocols(benchmark.protocols), +          .sslSocketFactory(socketFactory), +          .hostnameVerifier(hostnameVerifier), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +        .protocols(benchmark.protocols), +        .dispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,, +          .sslSocketFactory(socketFactory), +          .hostnameVerifier(hostnameVerifier), +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +    builder.followSslRedirects(followRedirects);, +      builder.connectTimeout(connectTimeout, SECONDS);, +      builder.readTimeout(readTimeout, SECONDS);, +      builder.sslSocketFactory(createInsecureSslSocketFactory());, +      builder.hostnameVerifier(createInsecureHostnameVerifier());, +    client.connectionPool().evictAll(); // Close any persistent connections., +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java, +      builder.cache(okCacheContainer.getCache());, +++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java, +  private OkUrlFactory urlFactory;, +    urlFactory = new OkUrlFactory(new OkHttpClient.Builder().build());, +    AndroidInternal.setResponseCache(urlFactory, responseCache);, +    return urlFactory.open(url.url());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +        .sslSocketFactory(sslContext.getSocketFactory()), +        .hostnameVerifier(hostnameVerifier), +        .sslSocketFactory(sslContext.getSocketFactory()), +        .hostnameVerifier(hostnameVerifier), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +        .protocols(benchmark.protocols)]
[+++ b/CHANGELOG.md, +_2018-02-04_, +++ b/CHANGELOG.md, +_2018-02-04_, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        try (BufferedSink sink = Okio.buffer(stream.getSink())) {, +        }, +        try (BufferedSink sink = Okio.buffer(stream.getSink());, +             BufferedSource source = Okio.buffer(stream.getSource())) {, +        }, +++ b/CHANGELOG.md, +_2018-02-04_, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        try (BufferedSink sink = Okio.buffer(stream.getSink())) {, +        }, +        try (BufferedSink sink = Okio.buffer(stream.getSink());, +             BufferedSource source = Okio.buffer(stream.getSource())) {, +        }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.mockwebserver.internal.duplex;, +, +import java.io.IOException;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.FutureTask;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.RecordedRequest;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.Utf8;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +, +/**, + * A scriptable request/response conversation. Create the script by calling methods like {@link, + * #receiveRequest} in the sequence they are run., + */, +public final class MockDuplexResponseBody implements DuplexResponseBody {, +  private final BlockingQueue<Action> actions = new LinkedBlockingQueue<>();, +  private final BlockingQueue<FutureTask<Void>> results = new LinkedBlockingQueue<>();, +, +  public MockDuplexResponseBody receiveRequest(String expected) {, +    actions.add((request, requestBody, responseBody) -> {, +      assertEquals(expected, requestBody.readUtf8(Utf8.size(expected)));, +    });, +    return this;, +  }, +, +  public MockDuplexResponseBody exhaustRequest() {, +    actions.add((request, requestBody, responseBody) -> {, +      assertTrue(requestBody.exhausted());, +    });, +    return this;, +  }, +, +  public MockDuplexResponseBody sendResponse(String s) {, +    actions.add((request, requestBody, responseBody) -> {, +      responseBody.writeUtf8(s);, +      responseBody.flush();, +    });, +    return this;, +  }, +, +  public MockDuplexResponseBody exhaustResponse() {, +    actions.add((request, requestBody, responseBody) -> {, +      responseBody.close();, +    });, +    return this;, +  }, +, +  @Override public void onRequest(RecordedRequest request, BufferedSource requestBody,, +      BufferedSink responseBody) {, +    FutureTask<Void> futureTask = new FutureTask<>(() -> {, +      for (Action action; (action = actions.poll()) != null; ) {, +        action.execute(request, requestBody, responseBody);, +      }, +      return null; // Success!, +    });, +    results.add(futureTask);, +    futureTask.run();, +  }, +, +  /** Returns once the duplex conversation completes successfully. */, +  public void awaitSuccess() throws Exception {]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          Http2SocketHandler http2SocketHandler = new Http2SocketHandler(socket, protocol);, +              .listener(http2SocketHandler), +  /** Processes HTTP requests layered over HTTP/2. */, +  private class Http2SocketHandler extends Http2Connection.Listener {, +    private Http2SocketHandler(Socket socket, Protocol protocol) {, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          Http2SocketHandler http2SocketHandler = new Http2SocketHandler(socket, protocol);, +              .listener(http2SocketHandler), +  /** Processes HTTP requests layered over HTTP/2. */, +  private class Http2SocketHandler extends Http2Connection.Listener {, +    private Http2SocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void interceptorGetsHttp2() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          Http2SocketHandler http2SocketHandler = new Http2SocketHandler(socket, protocol);, +              .listener(http2SocketHandler), +  /** Processes HTTP requests layered over HTTP/2. */, +  private class Http2SocketHandler extends Http2Connection.Listener {, +    private Http2SocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void interceptorGetsHttp2() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +            sink.flush(); // Http2Connection.writeData subject to write window, +            sink.close(); // Http2Connection.writeData empty frame, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          Http2SocketHandler http2SocketHandler = new Http2SocketHandler(socket, protocol);, +              .listener(http2SocketHandler), +  /** Processes HTTP requests layered over HTTP/2. */, +  private class Http2SocketHandler extends Http2Connection.Listener {, +    private Http2SocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void interceptorGetsHttp2() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +            sink.flush(); // Http2Connection.writeData subject to write window, +            sink.close(); // Http2Connection.writeData empty frame, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +      socket.setSoTimeout(0); // HTTP/2 connection timeouts are set per-stream., +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          Http2SocketHandler http2SocketHandler = new Http2SocketHandler(socket, protocol);, +              .listener(http2SocketHandler), +  /** Processes HTTP requests layered over HTTP/2. */, +  private class Http2SocketHandler extends Http2Connection.Listener {, +    private Http2SocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void interceptorGetsHttp2() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +            sink.flush(); // Http2Connection.writeData subject to write window, +            sink.close(); // Http2Connection.writeData empty frame, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +      socket.setSoTimeout(0); // HTTP/2 connection timeouts are set per-stream., +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +      Util.threadFactory("OkHttp Http2Connection", true));, +                Platform.get().log(INFO, "Http2Connection.Listener failure for " + hostname, e);, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          Http2SocketHandler http2SocketHandler = new Http2SocketHandler(socket, protocol);, +              .listener(http2SocketHandler), +  /** Processes HTTP requests layered over HTTP/2. */]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void getWithRequestBody() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    try {, +      new Request.Builder().method("GET", RequestBody.create(MediaType.parse("text/plain"), "abc"));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void getWithRequestBody() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    try {, +      new Request.Builder().method("GET", RequestBody.create(MediaType.parse("text/plain"), "abc"));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void getWithRequestBody() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    try {, +      new Request.Builder().method("GET", RequestBody.create(MediaType.parse("text/plain"), "abc"));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void getWithRequestBody() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    try {, +      new Request.Builder().method("GET", RequestBody.create(MediaType.parse("text/plain"), "abc"));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.spdy;, +, +import com.squareup.okhttp.internal.Util;, +import java.io.IOException;, +import java.io.InterruptedIOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.ByteString;, +import okio.Okio;, +import okio.Sink;, +import okio.Source;, +import org.junit.After;, +import org.junit.Test;, +, +import static com.squareup.okhttp.internal.Util.headerEntries;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.CANCEL;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.INTERNAL_ERROR;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.INVALID_STREAM;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.PROTOCOL_ERROR;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.REFUSED_STREAM;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.STREAM_IN_USE;, +import static com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE;, +import static com.squareup.okhttp.internal.spdy.Settings.PERSIST_VALUE;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_DATA;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_GOAWAY;]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +      @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +      @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java, +  @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +      @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java, +  @Override, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +    @Override]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.http.Dispatcher;, +  private final RouteDatabase routeDatabase;, +  private final Dispatcher dispatcher;, +    routeDatabase = new RouteDatabase();, +    dispatcher = new Dispatcher();, +    routeDatabase = copyFrom.routeDatabase;, +    dispatcher = copyFrom.dispatcher;, +    readTimeout = (int) millis;, +  public OkResponseCache getOkResponseCache() {, +  public RouteDatabase getRoutesDatabase() {, +    return routeDatabase;, +  }, +, +    if (transports.contains("")) {, +      throw new IllegalArgumentException("transports contains an empty string");, +    }, +    return open(url, proxy);, +    if (protocol.equals("http")) return new HttpURLConnectionImpl(url, copy);, +    if (protocol.equals("https")) return new HttpsURLConnectionImpl(url, copy);, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.http.Dispatcher;, +  private final RouteDatabase routeDatabase;, +  private final Dispatcher dispatcher;, +    routeDatabase = new RouteDatabase();, +    dispatcher = new Dispatcher();, +    routeDatabase = copyFrom.routeDatabase;, +    dispatcher = copyFrom.dispatcher;, +    readTimeout = (int) millis;, +  public OkResponseCache getOkResponseCache() {, +  public RouteDatabase getRoutesDatabase() {, +    return routeDatabase;, +  }, +, +    if (transports.contains("")) {, +      throw new IllegalArgumentException("transports contains an empty string");, +    }, +    return open(url, proxy);, +    if (protocol.equals("http")) return new HttpURLConnectionImpl(url, copy);, +    if (protocol.equals("https")) return new HttpsURLConnectionImpl(url, copy);, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkResponseCache.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import java.io.IOException;, +import java.net.CacheRequest;, +import java.net.CacheResponse;, +import java.net.HttpURLConnection;, +import java.net.URI;, +import java.net.URLConnection;, +import java.util.List;, +import java.util.Map;, +, +/**, + * An extended response cache API. Unlike {@link java.net.ResponseCache}, this, + * interface supports conditional caching and statistics., + *, + * <h3>Warning: Experimental OkHttp 2.0 API</h3>, + * This class is in beta. APIs are subject to change!, + */, +public interface OkResponseCache {, +  CacheResponse get(URI uri, String requestMethod, Map<String, List<String>> requestHeaders), +      throws IOException;, +, +  CacheRequest put(URI uri, URLConnection urlConnection) throws IOException;, +, +  /** Remove any cache entries for the supplied {@code uri} if the request method invalidates. */, +  void maybeRemove(String requestMethod, URI uri) throws IOException;, +, +  /**, +   * Handles a conditional request hit by updating the stored cache response, +   * with the headers from {@code httpConnection}. The cached response body is, +   * not updated. If the stored response has changed since {@code, +   * conditionalCacheHit} was returned, this does nothing., +   */, +  void update(CacheResponse conditionalCacheHit, HttpURLConnection connection) throws IOException;, +, +  /** Track an conditional GET that was satisfied by this cache. */, +  void trackConditionalCacheHit();]
[+++ b/checkstyle.xml, +++ b/checkstyle.xml, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, +      int w1;, +      try {, +        w1 = in.readInt();, +      } catch (IOException e) {, +        return false; // This might be a normal socket close., +      }, +      int w2 = in.readInt();, +, +      int length = w1 & 0xffff;, +      int type = (w1 & 0xff0000) >> 16;, +      int flags = (w1 & 0xff000000) >> 24;, +      boolean r = (w2 & 0x80000000) != 0;, +      int streamId = (w2 & 0x7fffffff);, +, +      throw new UnsupportedOperationException("TODO");, +    @Override public synchronized void synStream(boolean outFinished, boolean inFinished,, +        int streamId, int associatedStreamId, int priority, int slot, List<String> nameValueBlock), +        throws IOException {, +    @Override public synchronized void synReply(boolean outFinished, int streamId,, +    @Override public synchronized void data(boolean outFinished, int streamId, byte[] data), +      data(outFinished, streamId, data, 0, data.length);, +    }, +, +    @Override public void data(boolean outFinished, int streamId, byte[] data, int offset,, +        int byteCount) throws IOException {, +++ b/checkstyle.xml, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, +      int w1;, +      try {, +        w1 = in.readInt();, +      } catch (IOException e) {, +        return false; // This might be a normal socket close., +      }, +      int w2 = in.readInt();, +, +      int length = w1 & 0xffff;, +      int type = (w1 & 0xff0000) >> 16;, +      int flags = (w1 & 0xff000000) >> 24;, +      boolean r = (w2 & 0x80000000) != 0;, +      int streamId = (w2 & 0x7fffffff);, +, +      throw new UnsupportedOperationException("TODO");, +    @Override public synchronized void synStream(boolean outFinished, boolean inFinished,, +        int streamId, int associatedStreamId, int priority, int slot, List<String> nameValueBlock), +        throws IOException {, +    @Override public synchronized void synReply(boolean outFinished, int streamId,, +    @Override public synchronized void data(boolean outFinished, int streamId, byte[] data), +      data(outFinished, streamId, data, 0, data.length);, +    }, +, +    @Override public void data(boolean outFinished, int streamId, byte[] data, int offset,, +        int byteCount) throws IOException {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +  static final int TYPE_DATA = 0x0;, +  static final int TYPE_SYN_STREAM = 0x1;, +  static final int TYPE_SYN_REPLY = 0x2;, +  static final int TYPE_RST_STREAM = 0x3;, +  static final int TYPE_SETTINGS = 0x4;, +  static final int TYPE_NOOP = 0x5;, +  static final int TYPE_PING = 0x6;, +  static final int TYPE_GOAWAY = 0x7;, +  static final int TYPE_HEADERS = 0x8;, +  static final int TYPE_WINDOW_UPDATE = 0x9;, +  static final int TYPE_CREDENTIAL = 0x10;, +, +  static final int FLAG_FIN = 0x1;, +  static final int FLAG_UNIDIRECTIONAL = 0x2;, +, +  static final int VERSION = 3;, +, +          case TYPE_SYN_STREAM:, +          case TYPE_SYN_REPLY:, +          case TYPE_RST_STREAM:, +          case TYPE_SETTINGS:, +          case TYPE_NOOP:, +          case TYPE_PING:, +          case TYPE_GOAWAY:, +          case TYPE_HEADERS:, +          case TYPE_WINDOW_UPDATE:, +          case TYPE_CREDENTIAL:, +        boolean inFinished = (flags & FLAG_FIN) != 0;, +        handler.data(inFinished, streamId, in, length);, +, +      boolean inFinished = (flags & FLAG_FIN) != 0;, +      boolean outFinished = (flags & FLAG_UNIDIRECTIONAL) != 0;, +      handler.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,, +          nameValueBlock);, +      boolean inFinished = (flags & FLAG_FIN) != 0;, +      handler.synReply(inFinished, streamId, nameValueBlock);, +          if (values.length() == 0) throw ioException("values.length == 0");, +    @Override public synchronized void synStream(boolean outFinished, boolean inFinished,, +        int streamId, int associatedStreamId, int priority, int slot, List<String> nameValueBlock), +        throws IOException {, +      int type = TYPE_SYN_STREAM;, +      int flags = (outFinished ? FLAG_FIN : 0) | (inFinished ? FLAG_UNIDIRECTIONAL : 0);, +      out.writeInt(0x80000000 | (VERSION & 0x7fff) << 16 | type & 0xffff);, +        boolean outFinished, int streamId, List<String> nameValueBlock) throws IOException {]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1].]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void getClientRequestTimeoutWithBackPressure() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(408), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "1"), +        .setBody("You took too long!"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +, +    assertEquals("You took too long!", response.body().string());, +  }, +, +  @Test public void maxUnavailableTimeoutRetries() throws IOException {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(503), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "0"), +        .setBody("You took too long!"));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(503), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "0"), +        .setBody("You took too long!"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +, +    assertEquals(503, response.code());, +    assertEquals("You took too long!", response.body().string());, +, +    assertEquals(2, server.getRequestCount());, +  }, +, +  @Test public void retryOnUnavailableWith0RetryAfter() throws IOException {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(503), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "0"), +        .setBody("You took too long!"));, +    server.enqueue(new MockResponse().setBody("Body"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +, +    assertEquals("Body", response.body().string());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void getClientRequestTimeoutWithBackPressure() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(408), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "1"), +        .setBody("You took too long!"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +, +    assertEquals("You took too long!", response.body().string());, +  }, +, +  @Test public void maxUnavailableTimeoutRetries() throws IOException {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(503), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "0"), +        .setBody("You took too long!"));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(503), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "0"), +        .setBody("You took too long!"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +, +    assertEquals(503, response.code());, +    assertEquals("You took too long!", response.body().string());, +, +    assertEquals(2, server.getRequestCount());, +  }]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +          return new X509Certificate[0];]
[+++ b/CHANGELOG.md, +## Version 3.3.1, +, +_2016-05-28_, +, + *  Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified, +    newline characters as control characters. This is fixed., + *  Fix: Don't crash reading non-ASCII characters in HTTP/2 headers or in cached, +    HTTP headers., + *  Fix: Retain the response body when an attempt to open a web socket returns a, +    non-101 response code., +, +, +    replace the `OkHttp-Sent-Millis` and `OkHttp-Received-Millis` headers that were, +++ b/CHANGELOG.md, +## Version 3.3.1, +, +_2016-05-28_, +, + *  Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified, +    newline characters as control characters. This is fixed., + *  Fix: Don't crash reading non-ASCII characters in HTTP/2 headers or in cached, +    HTTP headers., + *  Fix: Retain the response body when an attempt to open a web socket returns a, +    non-101 response code., +, +, +    replace the `OkHttp-Sent-Millis` and `OkHttp-Received-Millis` headers that were, +++ b/README.md, +  <version>3.3.1</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.1', +  <version>3.3.1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.3.1', +++ b/CHANGELOG.md, +## Version 3.3.1, +, +_2016-05-28_, +, + *  Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified, +    newline characters as control characters. This is fixed., + *  Fix: Don't crash reading non-ASCII characters in HTTP/2 headers or in cached, +    HTTP headers., + *  Fix: Retain the response body when an attempt to open a web socket returns a, +    non-101 response code., +, +, +    replace the `OkHttp-Sent-Millis` and `OkHttp-Received-Millis` headers that were, +++ b/README.md, +  <version>3.3.1</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.1', +  <version>3.3.1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.3.1', +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/CHANGELOG.md, +## Version 3.3.1, +, +_2016-05-28_, +, + *  Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified, +    newline characters as control characters. This is fixed., + *  Fix: Don't crash reading non-ASCII characters in HTTP/2 headers or in cached, +    HTTP headers., + *  Fix: Retain the response body when an attempt to open a web socket returns a, +    non-101 response code., +, +, +    replace the `OkHttp-Sent-Millis` and `OkHttp-Received-Millis` headers that were, +++ b/README.md, +  <version>3.3.1</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.1', +  <version>3.3.1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.3.1', +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      server.useHttps(sslClient.socketFactory, false);, +++ b/CHANGELOG.md, +## Version 3.3.1, +, +_2016-05-28_, +, + *  Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified, +    newline characters as control characters. This is fixed., + *  Fix: Don't crash reading non-ASCII characters in HTTP/2 headers or in cached, +    HTTP headers., + *  Fix: Retain the response body when an attempt to open a web socket returns a, +    non-101 response code., +, +, +    replace the `OkHttp-Sent-Millis` and `OkHttp-Received-Millis` headers that were, +++ b/README.md, +  <version>3.3.1</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.1']
[+++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp.internal.spdy;, +, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.internal.Platform;, +import com.squareup.okhttp.internal.SslContextBuilder;, +import com.squareup.okhttp.internal.Util;, +import java.io.File;, +import java.io.IOException;, +import java.net.ProtocolException;, +import java.net.ServerSocket;, +import java.net.Socket;, +import java.util.Arrays;, +import java.util.List;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import okio.BufferedSink;, +import okio.Okio;, +import okio.Source;, +, +/** A basic SPDY/HTTP_2 server that serves the contents of a local directory. */, +public final class SpdyServer implements IncomingStreamHandler {, +  static final Logger logger = Logger.getLogger(SpdyServer.class.getName());, +, +  private final List<Protocol> spdyProtocols = Util.immutableList(Protocol.HTTP_2, Protocol.SPDY_3);, +, +  private final File baseDirectory;, +  private final SSLSocketFactory sslSocketFactory;, +, +  public SpdyServer(File baseDirectory, SSLSocketFactory sslSocketFactory) {, +    this.baseDirectory = baseDirectory;, +    this.sslSocketFactory = sslSocketFactory;, +  }, +, +  private void run() throws Exception {, +    ServerSocket serverSocket = new ServerSocket(8888);, +    serverSocket.setReuseAddress(true);, +, +    while (true) {, +      Socket socket = null;, +      try {, +        socket = serverSocket.accept();, +, +        SSLSocket sslSocket = doSsl(socket);, +        String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +        Protocol protocol = protocolString != null ? Protocol.get(protocolString) : null;, +        if (protocol == null || !spdyProtocols.contains(protocol)) {, +          throw new ProtocolException("Protocol " + protocol + " unsupported");, +        }, +        SpdyConnection spdyConnection = new SpdyConnection.Builder(false, sslSocket), +            .protocol(protocol), +            .handler(this), +            .build();, +        spdyConnection.sendConnectionPreface();, +      } catch (IOException e) {, +        logger.log(Level.INFO, "SpdyServer connection failure: " + e);, +        Util.closeQuietly(socket);, +      } catch (Exception e) {, +        logger.log(Level.WARNING, "SpdyServer unexpected failure", e);, +        Util.closeQuietly(socket);, +      }, +    }, +  }, +, +  private SSLSocket doSsl(Socket socket) throws IOException {, +    SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(, +        socket, socket.getInetAddress().getHostAddress(), socket.getPort(), true);, +    sslSocket.setUseClientMode(false);, +    Platform.get().configureTlsExtensions(sslSocket, null, spdyProtocols);, +    sslSocket.startHandshake();, +    return sslSocket;, +  }, +, +  @Override public void receive(final SpdyStream stream) throws IOException {, +    try {, +      List<Header> requestHeaders = stream.getRequestHeaders();, +      String path = null;, +      for (int i = 0, size = requestHeaders.size(); i < size; i++) {, +        if (requestHeaders.get(i).name.equals(Header.TARGET_PATH)) {, +          path = requestHeaders.get(i).value.utf8();]
[+++ b/mockwebserver/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.1.2-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>mockwebserver</artifactId>, +  <name>MockWebServer</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-protocols</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>org.bouncycastle</groupId>, +      <artifactId>bcprov-jdk15on</artifactId>, +    </dependency>, +    <dependency>, +      <groupId>org.mortbay.jetty.npn</groupId>, +      <artifactId>npn-boot</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.mockwebserver</groupId>, +      <artifactId>mockwebserver</artifactId>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <!-- Don't restrict test code to Java 1.5 APIs. -->, +    <plugins>, +      <plugin>, +        <groupId>org.codehaus.mojo</groupId>, +        <artifactId>animal-sniffer-maven-plugin</artifactId>, +        <configuration>, +          <signature>, +            <groupId>org.codehaus.mojo.signature</groupId>, +            <artifactId>java16</artifactId>, +            <version>1.0</version>, +          </signature>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/mockwebserver/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.1.2-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>mockwebserver</artifactId>, +  <name>MockWebServer</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-protocols</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>org.bouncycastle</groupId>, +      <artifactId>bcprov-jdk15on</artifactId>, +    </dependency>, +    <dependency>, +      <groupId>org.mortbay.jetty.npn</groupId>, +      <artifactId>npn-boot</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.mockwebserver</groupId>, +      <artifactId>mockwebserver</artifactId>, +    </dependency>, +  </dependencies>, +, +  <build>]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/Jdk9PlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal;, +, +import org.junit.Test;, +, +import static okhttp3.internal.PlatformTest.getPlatform;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assume.assumeTrue;, +, +public class Jdk9PlatformTest {, +  @Test, +  public void buildsWhenJdk9() {, +    assumeTrue(getPlatform().equals("jdk9"));, +, +    assertNotNull(Jdk9Platform.buildIfSupported());, +  }, +, +  @Test, +  public void findsAlpnMethods() {, +    assumeTrue(getPlatform().equals("jdk9"));, +, +    Jdk9Platform platform = Jdk9Platform.buildIfSupported();, +, +    assertEquals("getApplicationProtocol", platform.getProtocolMethod.getName());, +    assertEquals("setApplicationProtocols", platform.setProtocolMethod.getName());, +  }, +}, +++ b/okhttp-tests/src/test/java/okhttp3/internal/Jdk9PlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal;, +, +import org.junit.Test;, +, +import static okhttp3.internal.PlatformTest.getPlatform;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assume.assumeTrue;, +, +public class Jdk9PlatformTest {, +  @Test, +  public void buildsWhenJdk9() {, +    assumeTrue(getPlatform().equals("jdk9"));, +, +    assertNotNull(Jdk9Platform.buildIfSupported());, +  }, +, +  @Test, +  public void findsAlpnMethods() {, +    assumeTrue(getPlatform().equals("jdk9"));, +, +    Jdk9Platform platform = Jdk9Platform.buildIfSupported();, +, +    assertEquals("getApplicationProtocol", platform.getProtocolMethod.getName());, +    assertEquals("setApplicationProtocols", platform.setProtocolMethod.getName());, +  }, +}, +++ b/okhttp-tests/src/test/java/okhttp3/internal/JdkWithJettyBootPlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]
[+++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package okhttp3.internal.http2;, +, +import java.io.File;, +import java.io.IOException;, +import java.net.ProtocolException;, +import java.net.ServerSocket;, +import java.net.Socket;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import okhttp3.Protocol;, +import okhttp3.internal.Util;, +import okhttp3.internal.platform.Platform;, +import okhttp3.internal.tls.SslClient;, +import okio.BufferedSink;, +import okio.Okio;, +import okio.Source;, +, +import static okhttp3.internal.platform.Platform.INFO;, +, +/** A basic HTTP/2 server that serves the contents of a local directory. */, +public final class Http2Server extends Http2Connection.Listener {, +  static final Logger logger = Logger.getLogger(Http2Server.class.getName());, +, +  private final File baseDirectory;, +  private final SSLSocketFactory sslSocketFactory;, +, +  public Http2Server(File baseDirectory, SSLSocketFactory sslSocketFactory) {, +    this.baseDirectory = baseDirectory;, +    this.sslSocketFactory = sslSocketFactory;, +  }, +, +  private void run() throws Exception {, +    ServerSocket serverSocket = new ServerSocket(8888);, +    serverSocket.setReuseAddress(true);, +, +    while (true) {, +      Socket socket = null;, +      try {, +        socket = serverSocket.accept();, +, +        SSLSocket sslSocket = doSsl(socket);, +        String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +        Protocol protocol = protocolString != null ? Protocol.get(protocolString) : null;, +        if (protocol != Protocol.HTTP_2) {, +          throw new ProtocolException("Protocol " + protocol + " unsupported");, +        }, +        Http2Connection connection = new Http2Connection.Builder(false), +            .socket(sslSocket), +            .listener(this), +            .build();, +        connection.start();, +      } catch (IOException e) {, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        Util.closeQuietly(socket);, +      } catch (Exception e) {, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +        Util.closeQuietly(socket);, +      }, +    }, +  }, +, +  private SSLSocket doSsl(Socket socket) throws IOException {, +    SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(, +        socket, socket.getInetAddress().getHostAddress(), socket.getPort(), true);, +    sslSocket.setUseClientMode(false);, +    Platform.get().configureTlsExtensions(sslSocket, null,, +        Collections.singletonList(Protocol.HTTP_2));, +    sslSocket.startHandshake();, +    return sslSocket;, +  }, +, +  @Override public void onStream(final Http2Stream stream) throws IOException {, +    try {, +      List<Header> requestHeaders = stream.getRequestHeaders();, +      String path = null;, +      for (int i = 0, size = requestHeaders.size(); i < size; i++) {]
[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +        Address address = chain.connection().route().address();, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +        Address address = chain.connection().route().address();, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +        route = connection.route();, +        handshake = connection.handshake();, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +        Address address = chain.connection().route().address();, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +        route = connection.route();, +        handshake = connection.handshake();, +++ b/okhttp/src/main/java/okhttp3/Connection.java, +  Route route();, +   * Returns the socket that this connection is using. Returns an {@linkplain, +   * javax.net.ssl.SSLSocket SSL socket} if this connection is HTTPS. If this is an HTTP/2 or SPDY, +   * connection the socket may be shared by multiple concurrent calls., +  Socket socket();, +  /**, +   * Returns the TLS handshake used to establish this connection, or null if the connection is not, +   * HTTPS., +   */, +  Handshake handshake();, +  Protocol protocol();, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +        Address address = chain.connection().route().address();, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +        route = connection.route();, +        handshake = connection.handshake();, +++ b/okhttp/src/main/java/okhttp3/Connection.java, +  Route route();, +   * Returns the socket that this connection is using. Returns an {@linkplain, +   * javax.net.ssl.SSLSocket SSL socket} if this connection is HTTPS. If this is an HTTP/2 or SPDY, +   * connection the socket may be shared by multiple concurrent calls., +  Socket socket();, +  /**, +   * Returns the TLS handshake used to establish this connection, or null if the connection is not, +   * HTTPS., +   */, +  Handshake handshake();, +  Protocol protocol();, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import static okhttp3.internal.Util.closeQuietly;, +, +          && address.equals(connection.route().address), +      closeQuietly(connection.socket());, +    closeQuietly(longestIdleConnection.socket());, +      Internal.logger.warning("A connection to " + connection.route().address().url(), +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.route().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +        Address address = chain.connection().route().address();, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +        route = connection.route();, +        handshake = connection.handshake();, +++ b/okhttp/src/main/java/okhttp3/Connection.java, +  Route route();, +   * Returns the socket that this connection is using. Returns an {@linkplain, +   * javax.net.ssl.SSLSocket SSL socket} if this connection is HTTPS. If this is an HTTP/2 or SPDY, +   * connection the socket may be shared by multiple concurrent calls., +  Socket socket();, +  /**, +   * Returns the TLS handshake used to establish this connection, or null if the connection is not, +   * HTTPS., +   */, +  Handshake handshake();, +  Protocol protocol();, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import static okhttp3.internal.Util.closeQuietly;, +, +          && address.equals(connection.route().address), +      closeQuietly(connection.socket());, +    closeQuietly(longestIdleConnection.socket());, +      Internal.logger.warning("A connection to " + connection.route().address().url(), +++ b/okhttp/src/main/java/okhttp3/internal/http/Http1xStream.java, +        request, httpEngine.getConnection().route().proxy().type());]
[+++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.get().cancel();, +      call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.get().cancel();, +      call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +        return ((RealCall) call).streamAllocation();, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.get().cancel();, +      call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +        return ((RealCall) call).streamAllocation();, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.CallServerInterceptor;, +import okhttp3.internal.http.RetryAndFollowUpInterceptor;, +  private final RetryAndFollowUpInterceptor retryAndFollowUpInterceptor;, +    this.retryAndFollowUpInterceptor = new RetryAndFollowUpInterceptor(client);, +    this.retryAndFollowUpInterceptor.setForWebSocket(true);, +    retryAndFollowUpInterceptor.cancel();, +    return retryAndFollowUpInterceptor.isCanceled();, +  }, +, +  StreamAllocation streamAllocation() {, +    return retryAndFollowUpInterceptor.streamAllocation();, +        if (retryAndFollowUpInterceptor.isCanceled()) {, +    String string = retryAndFollowUpInterceptor.isCanceled() ? "canceled call" : "call";, +    interceptors.add(retryAndFollowUpInterceptor);, +    if (!retryAndFollowUpInterceptor.isForWebSocket()) {, +    interceptors.add(new CallServerInterceptor(, +        retryAndFollowUpInterceptor.isForWebSocket()));, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.get().cancel();, +      call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +        return ((RealCall) call).streamAllocation();, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.CallServerInterceptor;, +import okhttp3.internal.http.RetryAndFollowUpInterceptor;, +  private final RetryAndFollowUpInterceptor retryAndFollowUpInterceptor;, +    this.retryAndFollowUpInterceptor = new RetryAndFollowUpInterceptor(client);, +    this.retryAndFollowUpInterceptor.setForWebSocket(true);, +    retryAndFollowUpInterceptor.cancel();, +    return retryAndFollowUpInterceptor.isCanceled();, +  }, +, +  StreamAllocation streamAllocation() {, +    return retryAndFollowUpInterceptor.streamAllocation();, +        if (retryAndFollowUpInterceptor.isCanceled()) {, +    String string = retryAndFollowUpInterceptor.isCanceled() ? "canceled call" : "call";, +    interceptors.add(retryAndFollowUpInterceptor);, +    if (!retryAndFollowUpInterceptor.isForWebSocket()) {, +    interceptors.add(new CallServerInterceptor(, +        retryAndFollowUpInterceptor.isForWebSocket()));, +++ b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.http;, +, +import java.io.IOException;, +import java.net.ProtocolException;, +import okhttp3.Interceptor;, +import okhttp3.Request;, +import okhttp3.Response;, +import okio.BufferedSink;, +import okio.Okio;, +import okio.Sink;, +, +/** This is the last interceptor in the chain. It makes a network call to the server. */, +public final class CallServerInterceptor implements Interceptor {, +  private final boolean forWebSocket;, +, +  public CallServerInterceptor(boolean forWebSocket) {, +    this.forWebSocket = forWebSocket;, +  }, +, +  @Override public Response intercept(Chain chain) throws IOException {, +    HttpStream httpStream = ((RealInterceptorChain) chain).httpStream();, +    StreamAllocation streamAllocation = ((RealInterceptorChain) chain).streamAllocation();, +    Request request = chain.request();, +, +    long sentRequestMillis = System.currentTimeMillis();, +    httpStream.writeRequestHeaders(request);, +, +    if (HttpMethod.permitsRequestBody(request.method()) && request.body() != null) {, +      Sink requestBodyOut = httpStream.createRequestBody(request, request.body().contentLength());, +      BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);]
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +import okhttp3.WebSocketListener;, +public final class MockWebServer implements TestRule, Closeable {, +  @Override public void close() throws IOException {, +    shutdown();, +  }, +, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +import okhttp3.WebSocketListener;, +public final class MockWebServer implements TestRule, Closeable {, +  @Override public void close() throws IOException {, +    shutdown();, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.io.Closeable;, +  @Test public void closeViaClosable() throws IOException {, +    Closeable server = new MockWebServer();, +    server.close();, +  }, +, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +import okhttp3.WebSocketListener;, +public final class MockWebServer implements TestRule, Closeable {, +  @Override public void close() throws IOException {, +    shutdown();, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.io.Closeable;, +  @Test public void closeViaClosable() throws IOException {, +    Closeable server = new MockWebServer();, +    server.close();, +  }, +, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +        ? Util.EMPTY_REQUEST, +        ? Util.EMPTY_REQUEST, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +import okhttp3.WebSocketListener;, +public final class MockWebServer implements TestRule, Closeable {, +  @Override public void close() throws IOException {, +    shutdown();, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.io.Closeable;, +  @Test public void closeViaClosable() throws IOException {, +    Closeable server = new MockWebServer();, +    server.close();, +  }, +, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +        ? Util.EMPTY_REQUEST, +        ? Util.EMPTY_REQUEST, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +import okhttp3.internal.Util;, +        body = Util.EMPTY_REQUEST;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +import okhttp3.WebSocketListener;, +public final class MockWebServer implements TestRule, Closeable {, +  @Override public void close() throws IOException {, +    shutdown();, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.io.Closeable;, +  @Test public void closeViaClosable() throws IOException {, +    Closeable server = new MockWebServer();, +    server.close();, +  }, +, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +        ? Util.EMPTY_REQUEST, +        ? Util.EMPTY_REQUEST, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java]
[+++ /dev/null, +++ /dev/null, +++ b/pom.xml]
[+++ b/pom.xml, +        <mockwebserver.version>20120731</mockwebserver.version>, +++ b/pom.xml, +        <mockwebserver.version>20120731</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpConnection.java, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443);, +        } else {, +            throw new IllegalArgumentException();, +        }, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url} that, +     * connects via {@code proxy}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80, proxy);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443, proxy);, +        } else {, +            throw new IllegalArgumentException();, +        }, +++ b/pom.xml, +        <mockwebserver.version>20120731</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpConnection.java, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443);, +        } else {, +            throw new IllegalArgumentException();, +        }, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url} that, +     * connects via {@code proxy}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80, proxy);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443, proxy);, +        } else {, +            throw new IllegalArgumentException();, +        }, +++ b/src/main/java/com/squareup/okhttp/OkHttpsConnection.java, +++ b/pom.xml, +        <mockwebserver.version>20120731</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpConnection.java, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443);, +        } else {, +            throw new IllegalArgumentException();, +        }, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url} that, +     * connects via {@code proxy}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80, proxy);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443, proxy);, +        } else {, +            throw new IllegalArgumentException();, +        }, +++ b/src/main/java/com/squareup/okhttp/OkHttpsConnection.java, +++ b/src/test/java/libcore/net/http/ExternalSpdyExample.java, +import com.squareup.okhttp.OkHttpConnection;, +        OkHttpsConnection connection = (OkHttpsConnection) OkHttpConnection.open(url);, +++ b/pom.xml, +        <mockwebserver.version>20120731</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpConnection.java, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443);, +        } else {, +            throw new IllegalArgumentException();, +        }, +    /**]
[+++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +import okhttp3.ws.WebSocketListener;, +public final class MockWebServer implements TestRule, Closeable {, +  @Override public void close() throws IOException {, +    shutdown();, +  }, +, +++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +import okhttp3.ws.WebSocketListener;, +public final class MockWebServer implements TestRule, Closeable {, +  @Override public void close() throws IOException {, +    shutdown();, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.io.Closeable;, +  @Test public void closeViaClosable() throws IOException {, +    Closeable server = new MockWebServer();, +    server.close();, +  }, +, +++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +import okhttp3.ws.WebSocketListener;, +public final class MockWebServer implements TestRule, Closeable {, +  @Override public void close() throws IOException {, +    shutdown();, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.io.Closeable;, +  @Test public void closeViaClosable() throws IOException {, +    Closeable server = new MockWebServer();, +    server.close();, +  }, +, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +import okhttp3.ws.WebSocketListener;, +public final class MockWebServer implements TestRule, Closeable {, +  @Override public void close() throws IOException {, +    shutdown();, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.io.Closeable;, +  @Test public void closeViaClosable() throws IOException {, +    Closeable server = new MockWebServer();, +    server.close();, +  }, +]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/ForwardingRequestBody.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import javax.annotation.Nullable;, +import okio.BufferedSink;, +, +public class ForwardingRequestBody extends RequestBody {, +  private final RequestBody delegate;, +, +  public ForwardingRequestBody(RequestBody delegate) {, +    if (delegate == null) throw new IllegalArgumentException("delegate == null");, +    this.delegate = delegate;, +  }, +, +  public final RequestBody delegate() {, +    return delegate;, +  }, +, +  @Override public @Nullable MediaType contentType() {, +    return delegate.contentType();, +  }, +, +  @Override public long contentLength() throws IOException {, +    return delegate.contentLength();, +  }, +, +  @Override public void writeTo(BufferedSink sink) throws IOException {, +    delegate.writeTo(sink);, +  }, +, +  @Override public boolean isDuplex() {, +    return delegate.isDuplex();, +  }, +, +  @Override public String toString() {, +    return getClass().getSimpleName() + "(" + delegate.toString() + ")";, +  }, +}, +++ b/okhttp-testing-support/src/main/java/okhttp3/ForwardingRequestBody.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import javax.annotation.Nullable;, +import okio.BufferedSink;, +, +public class ForwardingRequestBody extends RequestBody {, +  private final RequestBody delegate;, +, +  public ForwardingRequestBody(RequestBody delegate) {, +    if (delegate == null) throw new IllegalArgumentException("delegate == null");, +    this.delegate = delegate;, +  }, +, +  public final RequestBody delegate() {, +    return delegate;, +  }, +, +  @Override public @Nullable MediaType contentType() {, +    return delegate.contentType();, +  }, +, +  @Override public long contentLength() throws IOException {, +    return delegate.contentLength();, +  }, +, +  @Override public void writeTo(BufferedSink sink) throws IOException {, +    delegate.writeTo(sink);, +  }, +]
[+++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_161</id>, +      <activation>, +        <jdk>1.8.0_161</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.12.v20180117</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_162</id>, +      <activation>, +        <jdk>1.8.0_162</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.12.v20180117</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ b/okhttp/src/main/java/okhttp3/Response.java, +    BufferedSource peeked = body.source().peek();, +    Buffer buffer = new Buffer();, +    peeked.request(byteCount);, +    buffer.write(peeked, Math.min(byteCount, peeked.getBuffer().size()));, +    return ResponseBody.create(body.contentType(), buffer.size(), buffer);, +++ b/okhttp/src/main/java/okhttp3/Response.java, +    BufferedSource peeked = body.source().peek();, +    Buffer buffer = new Buffer();, +    peeked.request(byteCount);, +    buffer.write(peeked, Math.min(byteCount, peeked.getBuffer().size()));, +    return ResponseBody.create(body.contentType(), buffer.size(), buffer);, +++ b/pom.xml, +    <okio.version>1.16.0</okio.version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +      @Override public void close() {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +        response.getWebSocketListener(), new SecureRandom());, +    response.getWebSocketListener().onOpen(webSocket, fancyResponse);, +    webSocket.initReaderAndWriter(streams);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +      @Override public void close() {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +        response.getWebSocketListener(), new SecureRandom());, +    response.getWebSocketListener().onOpen(webSocket, fancyResponse);, +    webSocket.initReaderAndWriter(streams);, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private NewWebSocket newWebSocket(String path, NewWebSocket.Listener listener) {, +    return client.newWebSocket(request, listener);, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new NewWebSocket.Listener() {, +      @Override public void onOpen(NewWebSocket webSocket, Response response) {, +      @Override public void onMessage(final NewWebSocket webSocket, final ByteString bytes) {, +        webSocket.send(bytes);, +      @Override public void onMessage(final NewWebSocket webSocket, final String text) {, +        webSocket.send(text);, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +        webSocket.close(1000, null);, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new NewWebSocket.Listener() {, +      @Override public void onMessage(NewWebSocket webSocket, String text) {, +        countRef.set(Long.parseLong(text));, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +        webSocket.close(1000, null);, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new NewWebSocket.Listener() {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +        webSocket.close(code, null);, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +      @Override public void close() {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +        response.getWebSocketListener(), new SecureRandom());, +    response.getWebSocketListener().onOpen(webSocket, fancyResponse);, +    webSocket.initReaderAndWriter(streams);, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private NewWebSocket newWebSocket(String path, NewWebSocket.Listener listener) {, +    return client.newWebSocket(request, listener);, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new NewWebSocket.Listener() {, +      @Override public void onOpen(NewWebSocket webSocket, Response response) {, +      @Override public void onMessage(final NewWebSocket webSocket, final ByteString bytes) {, +        webSocket.send(bytes);, +      @Override public void onMessage(final NewWebSocket webSocket, final String text) {, +        webSocket.send(text);, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +        webSocket.close(1000, null);, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new NewWebSocket.Listener() {, +      @Override public void onMessage(NewWebSocket webSocket, String text) {, +        countRef.set(Long.parseLong(text));, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +        webSocket.close(1000, null);, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new NewWebSocket.Listener() {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +        webSocket.close(code, null);, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +      @Override public void close() {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +        response.getWebSocketListener(), new SecureRandom());]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpA.connect(200, 200, 200, null);, +    httpB.connect(200, 200, 200, null);, +    httpC.connect(200, 200, 200, null);, +    httpD.connect(200, 200, 200, null);, +    httpE.connect(200, 200, 200, null);, +    spdyA.connect(20000, 20000, 2000, null);, +    connection.connect(200, 200, 200, null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpA.connect(200, 200, 200, null);, +    httpB.connect(200, 200, 200, null);, +    httpC.connect(200, 200, 200, null);, +    httpD.connect(200, 200, 200, null);, +    httpE.connect(200, 200, 200, null);, +    spdyA.connect(20000, 20000, 2000, null);, +    connection.connect(200, 200, 200, null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  /** Confirm that an unacknowledged write times out. */, +  @Test public void writeTimeouts() throws IOException {, +    server.enqueue(new MockResponse(), +        .throttleBody(1, 3600, TimeUnit.SECONDS)); // Prevent the server from reading!, +    server.play();, +, +    client.setWriteTimeout(500, TimeUnit.MILLISECONDS);, +    connection = client.open(server.getUrl("/"));, +    connection.setDoOutput(true);, +    connection.setChunkedStreamingMode(0);, +    OutputStream out = connection.getOutputStream();, +    try {, +      byte[] data = new byte[1024 * 1024]; // 1 MiB., +      out.write(data);, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpA.connect(200, 200, 200, null);, +    httpB.connect(200, 200, 200, null);, +    httpC.connect(200, 200, 200, null);, +    httpD.connect(200, 200, 200, null);, +    httpE.connect(200, 200, 200, null);, +    spdyA.connect(20000, 20000, 2000, null);, +    connection.connect(200, 200, 200, null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  /** Confirm that an unacknowledged write times out. */, +  @Test public void writeTimeouts() throws IOException {, +    server.enqueue(new MockResponse(), +        .throttleBody(1, 3600, TimeUnit.SECONDS)); // Prevent the server from reading!, +    server.play();, +, +    client.setWriteTimeout(500, TimeUnit.MILLISECONDS);, +    connection = client.open(server.getUrl("/"));, +    connection.setDoOutput(true);, +    connection.setChunkedStreamingMode(0);, +    OutputStream out = connection.getOutputStream();, +    try {, +      byte[] data = new byte[1024 * 1024]; // 1 MiB., +      out.write(data);, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout,, +      TunnelRequest tunnelRequest) throws IOException {, +      upgradeToTls(tunnelRequest, readTimeout, writeTimeout);, +      httpConnection = new HttpConnection(pool, this, socket, readTimeout, writeTimeout);, +  private void upgradeToTls(TunnelRequest tunnelRequest, int readTimeout, int writeTimeout), +      throws IOException {, +      makeTunnel(tunnelRequest, readTimeout, writeTimeout);, +      httpConnection = new HttpConnection(pool, this, socket, readTimeout, writeTimeout);, +  private void makeTunnel(TunnelRequest tunnelRequest, int readTimeout, int writeTimeout), +      throws IOException {, +    HttpConnection tunnelConnection = new HttpConnection(, +        pool, this, socket, readTimeout, writeTimeout);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpA.connect(200, 200, 200, null);, +    httpB.connect(200, 200, 200, null);, +    httpC.connect(200, 200, 200, null);, +    httpD.connect(200, 200, 200, null);, +    httpE.connect(200, 200, 200, null);, +    spdyA.connect(20000, 20000, 2000, null);, +    connection.connect(200, 200, 200, null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  /** Confirm that an unacknowledged write times out. */, +  @Test public void writeTimeouts() throws IOException {, +    server.enqueue(new MockResponse(), +        .throttleBody(1, 3600, TimeUnit.SECONDS)); // Prevent the server from reading!, +    server.play();, +, +    client.setWriteTimeout(500, TimeUnit.MILLISECONDS);, +    connection = client.open(server.getUrl("/"));, +    connection.setDoOutput(true);, +    connection.setChunkedStreamingMode(0);, +    OutputStream out = connection.getOutputStream();, +    try {, +      byte[] data = new byte[1024 * 1024]; // 1 MiB., +      out.write(data);]
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +      return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +      return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, +      'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, +      'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, +      'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, +      'okhttp3.CertificatePinner$Builder#build()',, +      'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, +      'okhttp3.CipherSuite#javaName()',, +      'okhttp3.ConnectionSpec#cipherSuites()',, +      'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, +      'okhttp3.ConnectionSpec#isTls()',, +      'okhttp3.ConnectionSpec#supportsTlsExtensions()',, +      'okhttp3.ConnectionSpec#tlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#build()',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +      return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, +      'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, +      'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, +      'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, +      'okhttp3.CertificatePinner$Builder#build()',, +      'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, +      'okhttp3.CipherSuite#javaName()',, +      'okhttp3.ConnectionSpec#cipherSuites()',, +      'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, +      'okhttp3.ConnectionSpec#isTls()',, +      'okhttp3.ConnectionSpec#supportsTlsExtensions()',, +      'okhttp3.ConnectionSpec#tlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#build()',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ /dev/null, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +      return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, +      'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, +      'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, +      'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, +      'okhttp3.CertificatePinner$Builder#build()',, +      'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, +      'okhttp3.CipherSuite#javaName()',, +      'okhttp3.ConnectionSpec#cipherSuites()',, +      'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, +      'okhttp3.ConnectionSpec#isTls()',, +      'okhttp3.ConnectionSpec#supportsTlsExtensions()',, +      'okhttp3.ConnectionSpec#tlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#build()',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import okhttp3.internal.tls.CertificateChainCleaner, +import okio.ByteString, +import java.security.cert.Certificate, +import java.security.cert.X509Certificate, +import java.util.Objects, +import javax.net.ssl.SSLPeerUnverifiedException, +, +/**, + * Constrains which certificates are trusted. Pinning certificates defends against attacks on, + * certificate authorities. It also prevents connections through man-in-the-middle certificate, + * authorities either known or unknown to the application's user., + *]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    callback.await(requestA.url()).assertFailure(, +        "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    callback.await(requestA.url()).assertFailure(, +        "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +  public void assertFailure(String... messages) {, +    assertTrue(failure.getMessage(), Arrays.asList(messages).contains(failure.getMessage()));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    callback.await(requestA.url()).assertFailure(, +        "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +  public void assertFailure(String... messages) {, +    assertTrue(failure.getMessage(), Arrays.asList(messages).contains(failure.getMessage()));, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    callback.await(requestA.url()).assertFailure(, +        "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +  public void assertFailure(String... messages) {, +    assertTrue(failure.getMessage(), Arrays.asList(messages).contains(failure.getMessage()));, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +  private static final String TLS_1_2 = "TLSv1.2"; // 2008., +  private static final String TLS_1_1 = "TLSv1.1"; // 2006., +  private static final String TLS_1_0 = "TLSv1";   // 1999., +  private static final String SSL_3_0 = "SSLv3";   // 1996., +          "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", // 0xC0,0x2B  Android L, +          "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",   // 0xC0,0x2F  Android L, +          "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",     // 0x00,0x9E  Android L, +          "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",    // 0xC0,0x0A  Android 4.0, +          "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",    // 0xC0,0x09  Android 4.0, +          "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",      // 0xC0,0x13  Android 4.0, +          "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",      // 0xC0,0x14  Android 4.0, +          "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA",        // 0xC0,0x07  Android 4.0, +          "TLS_ECDHE_RSA_WITH_RC4_128_SHA",          // 0xC0,0x11  Android 4.0, +          "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",        // 0x00,0x33  Android 2.3, +          "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",        // 0x00,0x32  Android 2.3, +          "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",        // 0x00,0x39  Android 2.3, +          "TLS_RSA_WITH_AES_128_GCM_SHA256",         // 0x00,0x9C  Android L, +          "TLS_RSA_WITH_AES_128_CBC_SHA",            // 0x00,0x2F  Android 2.3, +          "TLS_RSA_WITH_AES_256_CBC_SHA",            // 0x00,0x35  Android 2.3, +          "SSL_RSA_WITH_3DES_EDE_CBC_SHA",           // 0x00,0x0A  Android 2.3  (Deprecated in L), +          "SSL_RSA_WITH_RC4_128_SHA",                // 0x00,0x05  Android 2.3, +          "SSL_RSA_WITH_RC4_128_MD5"                 // 0x00,0x04  Android 2.3  (Deprecated in L), +      .tlsVersions(TLS_1_2, TLS_1_1, TLS_1_0, SSL_3_0), +      .tlsVersions(SSL_3_0), +  public List<String> cipherSuites() {, +    return Util.immutableList(cipherSuites);, +  public List<String> tlsVersions() {, +    return Util.immutableList(tlsVersions);, +      return "ConnectionSpec(cipherSuites=" + Arrays.toString(cipherSuites), +          + ", tlsVersions=" + Arrays.toString(tlsVersions), +    public Builder cipherSuites(String... cipherSuites) {, +      this.cipherSuites = cipherSuites.clone(); // Defensive copy., +    public Builder tlsVersions(String... tlsVersions) {, +      this.tlsVersions = tlsVersions.clone(); // Defensive copy., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    callback.await(requestA.url()).assertFailure(, +        "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +  public void assertFailure(String... messages) {, +    assertTrue(failure.getMessage(), Arrays.asList(messages).contains(failure.getMessage()));, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +  private static final String TLS_1_2 = "TLSv1.2"; // 2008., +  private static final String TLS_1_1 = "TLSv1.1"; // 2006., +  private static final String TLS_1_0 = "TLSv1";   // 1999., +  private static final String SSL_3_0 = "SSLv3";   // 1996., +          "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", // 0xC0,0x2B  Android L, +          "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",   // 0xC0,0x2F  Android L, +          "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",     // 0x00,0x9E  Android L, +          "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",    // 0xC0,0x0A  Android 4.0, +          "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",    // 0xC0,0x09  Android 4.0, +          "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",      // 0xC0,0x13  Android 4.0, +          "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",      // 0xC0,0x14  Android 4.0, +          "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA",        // 0xC0,0x07  Android 4.0, +          "TLS_ECDHE_RSA_WITH_RC4_128_SHA",          // 0xC0,0x11  Android 4.0, +          "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",        // 0x00,0x33  Android 2.3, +          "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",        // 0x00,0x32  Android 2.3, +          "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",        // 0x00,0x39  Android 2.3, +          "TLS_RSA_WITH_AES_128_GCM_SHA256",         // 0x00,0x9C  Android L, +          "TLS_RSA_WITH_AES_128_CBC_SHA",            // 0x00,0x2F  Android 2.3, +          "TLS_RSA_WITH_AES_256_CBC_SHA",            // 0x00,0x35  Android 2.3, +          "SSL_RSA_WITH_3DES_EDE_CBC_SHA",           // 0x00,0x0A  Android 2.3  (Deprecated in L), +          "SSL_RSA_WITH_RC4_128_SHA",                // 0x00,0x05  Android 2.3, +          "SSL_RSA_WITH_RC4_128_MD5"                 // 0x00,0x04  Android 2.3  (Deprecated in L), +      .tlsVersions(TLS_1_2, TLS_1_1, TLS_1_0, SSL_3_0), +      .tlsVersions(SSL_3_0), +  public List<String> cipherSuites() {, +    return Util.immutableList(cipherSuites);, +  public List<String> tlsVersions() {, +    return Util.immutableList(tlsVersions);, +      return "ConnectionSpec(cipherSuites=" + Arrays.toString(cipherSuites), +          + ", tlsVersions=" + Arrays.toString(tlsVersions), +    public Builder cipherSuites(String... cipherSuites) {, +      this.cipherSuites = cipherSuites.clone(); // Defensive copy., +    public Builder tlsVersions(String... tlsVersions) {, +      this.tlsVersions = tlsVersions.clone(); // Defensive copy.]
[+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +  private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +  private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +  private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    client.client().setProxyAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +  private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    client.client().setProxyAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java, +import okhttp3.JavaNetAuthenticator;, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +  private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    client.client().setProxyAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java, +import okhttp3.JavaNetAuthenticator;, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/RouteSelectorTest.java, +  private final Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +  private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    client.client().setProxyAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java, +import okhttp3.JavaNetAuthenticator;, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/RouteSelectorTest.java, +  private final Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.net.Authenticator.RequestorType;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.PasswordAuthentication;, +import java.net.Proxy;, +import java.util.List;, +, +/**, + * Adapts {@link java.net.Authenticator} to {@link Authenticator}. Configure OkHttp to use, + * {@link java.net.Authenticator} with {@link OkHttpClient#setAuthenticator} or {@link, + * OkHttpClient#setProxyAuthenticator(Authenticator)}., + */, +public final class JavaNetAuthenticator implements Authenticator {, +  @Override public Request authenticate(Route route, Response response) throws IOException {, +    List<Challenge> challenges = response.challenges();, +    Request request = response.request();, +    HttpUrl url = request.url();, +    boolean proxyAuthorization = response.code() == 407;, +    Proxy proxy = route.proxy();]
[+++ b/.travis.yml, + - ./gradlew check, +++ b/.travis.yml, + - ./gradlew check, +++ b/build.gradle, +++ b/.travis.yml, + - ./gradlew check, +++ b/build.gradle, +++ b/okhttp/src/test/java/okhttp3/EventListenerTest.java]
[+++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +import java.io.Reader;, +import java.util.concurrent.atomic.AtomicBoolean;, +import okio.Buffer;, +import okio.BufferedSource;, +import okio.ByteString;, +import okio.ForwardingSource;, +import okio.Okio;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class ResponseBodyTest {, +  @Test public void stringEmpty() throws IOException {, +    ResponseBody body = body("");, +    assertEquals("", body.string());, +  }, +, +  @Test public void stringLooksLikeBomButTooShort() throws IOException {, +    ResponseBody body = body("000048");, +    assertEquals("\0\0H", body.string());, +  }, +, +  @Test public void stringDefaultsToUtf8() throws IOException {, +    ResponseBody body = body("68656c6c6f");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringExplicitCharset() throws IOException {, +    ResponseBody body = body("00000068000000650000006c0000006c0000006f", "utf-32be");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringBomOverridesExplicitCharset() throws IOException {, +    ResponseBody body = body("0000ffff00000068000000650000006c0000006c0000006f", "utf-8");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringBomUtf8() throws IOException {, +    ResponseBody body = body("efbbff68656c6c6f");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringBomUtf16Be() throws IOException {, +    ResponseBody body = body("feff00680065006c006c006f");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringBomUtf16Le() throws IOException {, +    ResponseBody body = body("fffe680065006c006c006f00");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringBomUtf32Be() throws IOException {, +    ResponseBody body = body("0000ffff00000068000000650000006c0000006c0000006f");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringBomUtf32Le() throws IOException {, +    ResponseBody body = body("ffff000068000000650000006c0000006c0000006f000000");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringClosesUnderlyingSource() throws IOException {, +    final AtomicBoolean closed = new AtomicBoolean();, +    ResponseBody body = new ResponseBody() {, +      @Override public MediaType contentType() {, +        return null;, +      }, +, +      @Override public long contentLength() {, +        return 5;, +      }, +, +      @Override public BufferedSource source() {, +        Buffer source = new Buffer().writeUtf8("hello");, +        return Okio.buffer(new ForwardingSource(source) {, +          @Override public void close() throws IOException {]
[+++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +import okhttp3.internal.Internal;, +import okhttp3.internal.connection.Exchange;, +      // This is a long-lived response. Cancel full-call timeouts., +      Exchange exchange = Internal.instance.exchange(response);, +      if (exchange != null) exchange.timeoutEarlyExit();, +, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +import okhttp3.internal.Internal;, +import okhttp3.internal.connection.Exchange;, +      // This is a long-lived response. Cancel full-call timeouts., +      Exchange exchange = Internal.instance.exchange(response);, +      if (exchange != null) exchange.timeoutEarlyExit();, +, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  @Test public void fullCallTimeoutDoesNotApplyOnceConnected() throws Exception {, +        .callTimeout(250, TimeUnit.MILLISECONDS), +  @Test public void fullCallTimeoutAppliesToSetup() throws Exception {, +    client = client.newBuilder(), +        .callTimeout(250, TimeUnit.MILLISECONDS), +        .build();, +, +    server.enqueue(new MockResponse(), +        .setHeadersDelay(500, TimeUnit.MILLISECONDS), +        .setHeader("content-type", "text/event-stream"), +        .setBody("data: hey\n\n"));, +, +    newEventSource();, +    listener.assertFailure("timeout");, +  }, +, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +import okhttp3.internal.Internal;, +import okhttp3.internal.connection.Exchange;, +      // This is a long-lived response. Cancel full-call timeouts., +      Exchange exchange = Internal.instance.exchange(response);, +      if (exchange != null) exchange.timeoutEarlyExit();, +, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  @Test public void fullCallTimeoutDoesNotApplyOnceConnected() throws Exception {, +        .callTimeout(250, TimeUnit.MILLISECONDS), +  @Test public void fullCallTimeoutAppliesToSetup() throws Exception {, +    client = client.newBuilder(), +        .callTimeout(250, TimeUnit.MILLISECONDS), +        .build();, +, +    server.enqueue(new MockResponse(), +        .setHeadersDelay(500, TimeUnit.MILLISECONDS), +        .setHeader("content-type", "text/event-stream"), +        .setBody("data: hey\n\n"));, +, +    newEventSource();, +    listener.assertFailure("timeout");, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +  public void timeoutEarlyExit() {, +    transmitter.timeoutEarlyExit();, +  }, +]
[+++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestingRule;, +  @Rule public final OkHttpClientTestingRule clientTestingRule = new OkHttpClientTestingRule();, +  private OkHttpClient client = clientTestingRule.client;, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestingRule;, +  @Rule public final OkHttpClientTestingRule clientTestingRule = new OkHttpClientTestingRule();, +  private OkHttpClient client = clientTestingRule.client;, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestingRule.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import org.junit.rules.TestRule;, +import org.junit.runner.Description;, +import org.junit.runners.model.Statement;, +, +import static okhttp3.TestUtil.defaultClient;, +, +public class OkHttpClientTestingRule implements TestRule {, +  public OkHttpClient client = defaultClient();, +, +  @Override, +  public Statement apply(Statement base, Description description) {, +    return statement(base);, +  }, +, +  private Statement statement(final Statement base) {, +    return new Statement() {, +      public void evaluate() throws Throwable {, +        try {, +          base.evaluate();, +        } finally {, +          TestUtil.ensureAllConnectionsReleased(client);, +        }, +      }, +    };, +  }, +}, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestingRule;, +  @Rule public final OkHttpClientTestingRule clientTestingRule = new OkHttpClientTestingRule();, +  private OkHttpClient client = clientTestingRule.client;, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestingRule.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import org.junit.rules.TestRule;, +import org.junit.runner.Description;, +import org.junit.runners.model.Statement;, +, +import static okhttp3.TestUtil.defaultClient;, +, +public class OkHttpClientTestingRule implements TestRule {, +  public OkHttpClient client = defaultClient();, +, +  @Override, +  public Statement apply(Statement base, Description description) {, +    return statement(base);, +  }, +, +  private Statement statement(final Statement base) {, +    return new Statement() {, +      public void evaluate() throws Throwable {, +        try {, +          base.evaluate();, +        } finally {, +          TestUtil.ensureAllConnectionsReleased(client);, +        }, +      }, +    };, +  }, +}]
[+++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +before_cache:, +  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock, +  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, +    - $HOME/.gradle/caches/, +    - $HOME/.gradle/wrapper/, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +before_cache:, +  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock, +  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, +    - $HOME/.gradle/caches/, +    - $HOME/.gradle/wrapper/, +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +before_cache:, +  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock, +  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, +    - $HOME/.gradle/caches/, +    - $HOME/.gradle/wrapper/, +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +before_cache:, +  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock, +  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, +    - $HOME/.gradle/caches/, +    - $HOME/.gradle/wrapper/, +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/mockwebserver/gradle.properties, +POM_ARTIFACT_ID=mockwebserver, +POM_NAME=mockwebserver, +POM_PACKAGING=jar, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +before_cache:, +  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock, +  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, +    - $HOME/.gradle/caches/, +    - $HOME/.gradle/wrapper/, +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/mockwebserver/gradle.properties, +POM_ARTIFACT_ID=mockwebserver, +POM_NAME=mockwebserver, +POM_PACKAGING=jar, +++ b/okcurl/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +before_cache:]
[+++ b/okhttp/src/main/java/okhttp3/RealCall.kt, +    // TODO(egorand): Remove @JvmStatic once OkHttpClient.java is converted to Kotlin, +    @JvmStatic fun newRealCall(, +++ b/okhttp/src/main/java/okhttp3/RealCall.kt, +    // TODO(egorand): Remove @JvmStatic once OkHttpClient.java is converted to Kotlin, +    @JvmStatic fun newRealCall(, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +   * Returns the system property, or {@code defaultValue} if the system property is null or]
[+++ b/src/test/java/libcore/net/http/ExternalSpdyExample.java, +/*, + * Copyright (C) 2009 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package libcore.net.http;, +, +import com.squareup.okhttp.OkHttpsConnection;, +import java.io.BufferedReader;, +import java.io.InputStreamReader;, +import java.net.URL;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSession;, +, +public final class ExternalSpdyExample {, +    public static void main(String[] args) throws Exception {, +        URL url = new URL("https://www.google.ca/");, +        OkHttpsConnection connection = OkHttpsConnection.open(url);, +, +        connection.setHostnameVerifier(new HostnameVerifier() {, +            @Override public boolean verify(String s, SSLSession sslSession) {, +                System.out.println("VERIFYING " + s);, +                return true;, +            }, +        });, +, +        int responseCode = connection.getResponseCode();, +        System.out.println(responseCode);, +, +        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));, +        String line;, +        while ((line = reader.readLine()) != null) {, +            System.out.println(line);, +        }, +    }, +}, +++ b/src/test/java/libcore/net/http/ExternalSpdyExample.java, +/*, + * Copyright (C) 2009 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package libcore.net.http;, +, +import com.squareup.okhttp.OkHttpsConnection;, +import java.io.BufferedReader;, +import java.io.InputStreamReader;, +import java.net.URL;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSession;, +, +public final class ExternalSpdyExample {, +    public static void main(String[] args) throws Exception {, +        URL url = new URL("https://www.google.ca/");, +        OkHttpsConnection connection = OkHttpsConnection.open(url);, +, +        connection.setHostnameVerifier(new HostnameVerifier() {, +            @Override public boolean verify(String s, SSLSession sslSession) {, +                System.out.println("VERIFYING " + s);, +                return true;, +            }, +        });, +, +        int responseCode = connection.getResponseCode();, +        System.out.println(responseCode);, +, +        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));, +        String line;, +        while ((line = reader.readLine()) != null) {, +            System.out.println(line);, +        }, +    }, +}, +++ /dev/null]
[+++ b/.gitignore, +local.properties, +++ b/.gitignore, +local.properties, +++ b/okhttp/build.gradle, +++ b/.gitignore, +local.properties, +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/Address.kt, + * Copyright (C) 2012 The Android Open Source Project, +++ b/.gitignore, +local.properties, +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/Address.kt, + * Copyright (C) 2012 The Android Open Source Project, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +/*, + * Copyright (C) 2010 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.Closeable;, +import java.io.File;, +import java.io.Flushable;, +import java.io.IOException;, +import java.security.cert.Certificate;, +import java.security.cert.CertificateEncodingException;, +import java.security.cert.CertificateException;, +import java.security.cert.CertificateFactory;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.List;, +import java.util.NoSuchElementException;, +import javax.annotation.Nullable;, +import okhttp3.internal.Util;, +import okhttp3.internal.cache.CacheRequest;, +import okhttp3.internal.cache.CacheStrategy;, +import okhttp3.internal.cache.DiskLruCache;, +import okhttp3.internal.cache.InternalCache;, +import okhttp3.internal.http.HttpHeaders;, +import okhttp3.internal.http.HttpMethod;, +import okhttp3.internal.http.StatusLine;, +import okhttp3.internal.io.FileSystem;, +import okhttp3.internal.platform.Platform;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.ByteString;, +import okio.ForwardingSink;, +import okio.ForwardingSource;, +import okio.Okio;, +import okio.Sink;, +import okio.Source;, +, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +, +/**, + * Caches HTTP and HTTPS responses to the filesystem so they may be reused, saving time and, + * bandwidth., + *, + * <h3>Cache Optimization</h3>, + *, + * <p>To measure cache effectiveness, this class tracks three statistics:, + * <ul>, + *     <li><strong>{@linkplain #requestCount() Request Count:}</strong> the number of HTTP, + *         requests issued since this cache was created., + *     <li><strong>{@linkplain #networkCount() Network Count:}</strong> the number of those, + *         requests that required network use., + *     <li><strong>{@linkplain #hitCount() Hit Count:}</strong> the number of those requests, + *         whose responses were served by the cache., + * </ul>, + *, + * Sometimes a request will result in a conditional cache hit. If the cache contains a stale copy of, + * the response, the client will issue a conditional {@code GET}. The server will then send either, + * the updated response if it has changed, or a short 'not modified' response if the client's copy, + * is still valid. Such responses increment both the network count and hit count., + *, + * <p>The best way to improve the cache hit rate is by configuring the web server to return, + * cacheable responses. Although this client honors all <a, + * href="http://tools.ietf.org/html/rfc7234">HTTP/1.1 (RFC 7234)</a> cache headers, it doesn't cache, + * partial responses., + *, + * <h3>Force a Network Response</h3>, + *, + * <p>In some situations, such as after a user clicks a 'refresh' button, it may be necessary to, + * skip the cache, and fetch data directly from the server. To force a full refresh, add the {@code, + * no-cache} directive: <pre>   {@code]
[+++ b/okhttp-tests/src/test/java/okhttp3/CertificateAuthorityCouncilTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.security.cert.Certificate;, +import java.util.ArrayList;, +import java.util.List;, +import javax.net.ssl.SSLPeerUnverifiedException;, +import okhttp3.internal.HeldCertificate;, +import okhttp3.internal.tls.CertificateAuthorityCouncil;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public final class CertificateAuthorityCouncilTest {, +  @Test public void normalizeSingleSelfSignedCertificate() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);, +    assertEquals(list(root), council.normalizeCertificateChain(list(root)));, +  }, +, +  @Test public void normalizeUnknownSelfSignedCertificate() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil();, +, +    try {, +      council.normalizeCertificateChain(list(root));, +      fail();, +    } catch (SSLPeerUnverifiedException expected) {, +    }, +  }, +, +  @Test public void orderedChainOfCertificatesWithRoot() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    HeldCertificate certA = new HeldCertificate.Builder(), +        .serialNumber("2"), +        .issuedBy(root), +        .build();, +    HeldCertificate certB = new HeldCertificate.Builder(), +        .serialNumber("3"), +        .issuedBy(certA), +        .build();, +, +    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);, +    assertEquals(list(certB, certA, root),, +        council.normalizeCertificateChain(list(certB, certA, root)));, +  }, +, +  @Test public void orderedChainOfCertificatesWithoutRoot() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    HeldCertificate certA = new HeldCertificate.Builder(), +        .serialNumber("2"), +        .issuedBy(root), +        .build();, +    HeldCertificate certB = new HeldCertificate.Builder(), +        .serialNumber("3"), +        .issuedBy(certA), +        .build();, +, +    CertificateAuthorityCouncil council = new CertificateAuthorityCouncil(root.certificate);, +    assertEquals(list(certB, certA, root),, +        council.normalizeCertificateChain(list(certB, certA))); // Root is added!, +  }, +, +  @Test public void unorderedChainOfCertificatesWithRoot() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    HeldCertificate certA = new HeldCertificate.Builder(), +        .serialNumber("2"), +        .issuedBy(root), +        .build();, +    HeldCertificate certB = new HeldCertificate.Builder(), +        .serialNumber("3"), +        .issuedBy(certA), +        .build();, +    HeldCertificate certC = new HeldCertificate.Builder()]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +  private static final int CLIENT_AUTH_NONE = 0;, +  private static final int CLIENT_AUTH_REQUESTED = 1;, +  private static final int CLIENT_AUTH_REQUIRED = 2;, +, +  private int clientAuth = CLIENT_AUTH_NONE;, +   * Configure the server to not perform SSL authentication of the client. This leaves, +   * authentication to another layer such as in an HTTP cookie or header. This is the default and, +   * most common configuration., +   */, +  public void noClientAuth() {, +    this.clientAuth = CLIENT_AUTH_NONE;, +  }, +, +  /**, +   * Configure the server to {@linkplain SSLSocket#setWantClientAuth want client auth}. If the, +   * client presents a certificate that is {@linkplain TrustManager trusted} the handshake will, +   * proceed normally. The connection will also proceed normally if the client presents no, +   * certificate at all! But if the client presents an untrusted certificate the handshake will fail, +   * and no connection will be established., +   */, +  public void requestClientAuth() {, +    this.clientAuth = CLIENT_AUTH_REQUESTED;, +  }, +, +  /**, +   * Configure the server to {@linkplain SSLSocket#setNeedClientAuth need client auth}. If the, +   * client presents a certificate that is {@linkplain TrustManager trusted} the handshake will, +   * proceed normally. If the client presents an untrusted certificate or no certificate at all the, +   * handshake will fail and no connection will be established., +   */, +  public void requireClientAuth() {, +    this.clientAuth = CLIENT_AUTH_REQUIRED;, +  }, +, +  /**, +          if (clientAuth == CLIENT_AUTH_REQUIRED) {, +            sslSocket.setNeedClientAuth(true);, +          } else if (clientAuth == CLIENT_AUTH_REQUESTED) {, +            sslSocket.setWantClientAuth(true);, +          }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +  private static final int CLIENT_AUTH_NONE = 0;, +  private static final int CLIENT_AUTH_REQUESTED = 1;, +  private static final int CLIENT_AUTH_REQUIRED = 2;, +, +  private int clientAuth = CLIENT_AUTH_NONE;, +   * Configure the server to not perform SSL authentication of the client. This leaves, +   * authentication to another layer such as in an HTTP cookie or header. This is the default and, +   * most common configuration., +   */, +  public void noClientAuth() {, +    this.clientAuth = CLIENT_AUTH_NONE;, +  }, +, +  /**, +   * Configure the server to {@linkplain SSLSocket#setWantClientAuth want client auth}. If the, +   * client presents a certificate that is {@linkplain TrustManager trusted} the handshake will, +   * proceed normally. The connection will also proceed normally if the client presents no, +   * certificate at all! But if the client presents an untrusted certificate the handshake will fail, +   * and no connection will be established., +   */, +  public void requestClientAuth() {, +    this.clientAuth = CLIENT_AUTH_REQUESTED;, +  }, +, +  /**, +   * Configure the server to {@linkplain SSLSocket#setNeedClientAuth need client auth}. If the, +   * client presents a certificate that is {@linkplain TrustManager trusted} the handshake will, +   * proceed normally. If the client presents an untrusted certificate or no certificate at all the, +   * handshake will fail and no connection will be established., +   */, +  public void requireClientAuth() {, +    this.clientAuth = CLIENT_AUTH_REQUIRED;, +  }, +, +  /**, +          if (clientAuth == CLIENT_AUTH_REQUIRED) {, +            sslSocket.setNeedClientAuth(true);, +          } else if (clientAuth == CLIENT_AUTH_REQUESTED) {, +            sslSocket.setWantClientAuth(true);, +          }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import java.io.IOException;, +import okhttp3.Handshake;, +  private final Handshake handshake;, +    if (socket instanceof SSLSocket) {, +      try {, +        this.handshake = Handshake.get(((SSLSocket) socket).getSession());, +      } catch (IOException e) {, +        throw new IllegalArgumentException(e);, +      }, +    } else {, +      this.handshake = null;, +    }, +    return handshake != null ? handshake.tlsVersion() : null;, +  }, +, +  /**, +   * Returns the TLS handshake of the connection that carried this request, or null if the request]
[+++ b/mockwebserver/pom.xml, +    <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-hpacktests/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-hpacktests/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.14.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-hpacktests/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.14.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-hpacktests/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.14.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-hpacktests/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.14.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-hpacktests/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.14.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.14.0</version>, +++ b/okhttp-tls/pom.xml, +    <version>3.14.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0</version>]
[+++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException {, +    assertEquals(512f, i, 10f); // Halfway +/- 1%, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException {, +    assertEquals(512f, i, 10f); // Halfway +/- 1%, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    dateFormat.setTimeZone(TimeZone.getTimeZone("EDT"));, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException {, +    assertEquals(512f, i, 10f); // Halfway +/- 1%, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    dateFormat.setTimeZone(TimeZone.getTimeZone("EDT"));, +++ /dev/null, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException {, +    assertEquals(512f, i, 10f); // Halfway +/- 1%, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    dateFormat.setTimeZone(TimeZone.getTimeZone("EDT"));, +++ /dev/null, +++ /dev/null, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException {, +    assertEquals(512f, i, 10f); // Halfway +/- 1%, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    dateFormat.setTimeZone(TimeZone.getTimeZone("EDT"));, +++ /dev/null, +++ /dev/null]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the]
[+++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +   * <p>These differences may have a significant consequence when the URI is interpreted by a, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +   * <p>These differences may have a significant consequence when the URI is interpreted by a, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java, +   * and {@code :path}., +   * @param byteCount must be between 0 and the minimum of {@code source.length} and {@link, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +   * <p>These differences may have a significant consequence when the URI is interpreted by a, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java, +   * and {@code :path}., +   * @param byteCount must be between 0 and the minimum of {@code source.length} and {@link, +++ b/okhttp/src/main/java/okhttp3/internal/http2/PushObserver.java, +   * and {@code :path}., +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +   * <p>These differences may have a significant consequence when the URI is interpreted by a, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java, +   * and {@code :path}., +   * @param byteCount must be between 0 and the minimum of {@code source.length} and {@link, +++ b/okhttp/src/main/java/okhttp3/internal/http2/PushObserver.java, +   * and {@code :path}., +++ b/samples/slack/src/main/java/okhttp3/slack/OAuthSessionFactory.java, +  /** When the browser hits the redirect URL, use the provided code to ask Slack for a session. */]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +            "unexpected end of stream on " + server.url("/").redact());, +        .assertFailureMatches(".*unexpected end of stream on " + server.url("/").redact());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +            "unexpected end of stream on " + server.url("/").redact());, +        .assertFailureMatches(".*unexpected end of stream on " + server.url("/").redact());, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Transmitter;, +      OkHttpClient client = new OkHttpClient.Builder(), +          .connectionPool(pool), +          .build();, +      Call call = client.newCall(newRequest(addressA));, +      Transmitter transmitter = new Transmitter(client, call);, +      transmitter.newStreamAllocation(addressA);, +      transmitter.acquire(c1, true);, +    assertEquals(Collections.emptyList(), c1.transmitters);, +      OkHttpClient client = new OkHttpClient.Builder(), +          .connectionPool(pool), +          .build();, +      Call call = client.newCall(newRequest(connection.route().address()));, +      Transmitter transmitter = new Transmitter(client, call);, +      transmitter.newStreamAllocation(call.request());, +      transmitter.acquire(connection, true);, +, +  private Request newRequest(Address address) {, +    return new Request.Builder(), +        .url(address.url), +        .build();, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +            "unexpected end of stream on " + server.url("/").redact());, +        .assertFailureMatches(".*unexpected end of stream on " + server.url("/").redact());, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Transmitter;, +      OkHttpClient client = new OkHttpClient.Builder(), +          .connectionPool(pool), +          .build();, +      Call call = client.newCall(newRequest(addressA));, +      Transmitter transmitter = new Transmitter(client, call);, +      transmitter.newStreamAllocation(addressA);, +      transmitter.acquire(c1, true);, +    assertEquals(Collections.emptyList(), c1.transmitters);, +      OkHttpClient client = new OkHttpClient.Builder(), +          .connectionPool(pool), +          .build();, +      Call call = client.newCall(newRequest(connection.route().address()));, +      Transmitter transmitter = new Transmitter(client, call);, +      transmitter.newStreamAllocation(call.request());, +      transmitter.acquire(connection, true);, +, +  private Request newRequest(Address address) {, +    return new Request.Builder(), +        .url(address.url), +        .build();, +  }, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import okhttp3.internal.Transmitter;, +import okhttp3.internal.Transmitter.TransmitterReference;, +      if (connection.transmitters.isEmpty()) total++;, +  void acquire(Address address, Transmitter transmitter, @Nullable Route route) {, +        transmitter.acquire(connection, true);, +  @Nullable Socket deduplicate(Address address, Transmitter transmitter) {, +          && connection != transmitter.connection()) {, +        return transmitter.releaseAndAcquire(connection);, +        if (connection.transmitters.isEmpty()) {, +   * Prunes any leaked transmitters and then returns the number of remaining live transmitters on, +   * {@code connection}. Transmitters are leaked if the connection is tracking them but the, +    List<Reference<Transmitter>> references = connection.transmitters;, +      Reference<Transmitter> reference = references.get(i);, +      // We've discovered a leaked transmitter. This is an application bug., +      TransmitterReference transmitterRef = (TransmitterReference) reference;, +      Platform.get().logCloseableLeak(message, transmitterRef.callStackTrace);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +            "unexpected end of stream on " + server.url("/").redact());, +        .assertFailureMatches(".*unexpected end of stream on " + server.url("/").redact());, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Transmitter;, +      OkHttpClient client = new OkHttpClient.Builder(), +          .connectionPool(pool), +          .build();, +      Call call = client.newCall(newRequest(addressA));, +      Transmitter transmitter = new Transmitter(client, call);, +      transmitter.newStreamAllocation(addressA);, +      transmitter.acquire(c1, true);, +    assertEquals(Collections.emptyList(), c1.transmitters);, +      OkHttpClient client = new OkHttpClient.Builder(), +          .connectionPool(pool), +          .build();, +      Call call = client.newCall(newRequest(connection.route().address()));, +      Transmitter transmitter = new Transmitter(client, call);, +      transmitter.newStreamAllocation(call.request());, +      transmitter.acquire(connection, true);, +, +  private Request newRequest(Address address) {, +    return new Request.Builder(), +        .url(address.url), +        .build();, +  }, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import okhttp3.internal.Transmitter;]
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import static java.util.Collections.emptyList;, +import static java.util.Collections.emptyMap;, +import static java.util.Collections.singletonList;, +import static java.util.Collections.singletonMap;, +import static org.junit.Assert.assertNull;, +      Headers.of(singletonMap("", "OkHttp"));, +      Headers.of(singletonMap(" ", "OkHttp"));, +    Headers headers = Headers.of(singletonMap("User-Agent", ""));, +    Headers headers = Headers.of(singletonMap(" User-Agent ", "OkHttp"));, +    Headers headers = Headers.of(singletonMap("User-Agent", " OkHttp "));, +      Headers.of(singletonMap("User-\u0000Agent", "OkHttp"));, +      Headers.of(singletonMap("User-Agent", "Square\u0000OkHttp"));, +  @Test public void testDigestChallengeWithStrictRfc2617Header() {, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithDifferentlyOrderedAuthParams() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithDifferentlyOrderedAuthParams2() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithMissingRealm() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertNull(challenges.get(0).realm());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("underrealm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithAdditionalSpaces() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithAdditionalSpacesBeforeFirstAuthParam() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithCamelCasedNames() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithCamelCasedNames2() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());]
[+++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons. It uses a local, + * connection to a MockWebServer to measure how many identical requests per second can be carried, + * over a fixed number of threads., +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons. It uses a local, + * connection to a MockWebServer to measure how many identical requests per second can be carried, + * over a fixed number of threads., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java, +, +, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons. It uses a local, + * connection to a MockWebServer to measure how many identical requests per second can be carried, + * over a fixed number of threads., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java, +, +, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons. It uses a local, + * connection to a MockWebServer to measure how many identical requests per second can be carried, + * over a fixed number of threads., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java, +, +, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.Call;]
[+++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.0.2</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.0.2</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.buffer();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.buffer();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.buffer().getByte(0)) {, +      byte nextByte = source.buffer().getByte(key.size());, +        && source.buffer().getByte(0) == '\n') {, +    if (source.buffer().getByte(0) == ':') {, +      if (source.buffer().getByte(0) == ' ') {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.buffer();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.buffer().getByte(0)) {, +      byte nextByte = source.buffer().getByte(key.size());, +        && source.buffer().getByte(0) == '\n') {, +    if (source.buffer().getByte(0) == ':') {, +      if (source.buffer().getByte(0) == ' ') {, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = (id != null ? id.hashCode() : 0);, +    result = 31 * result + (type != null ? type.hashCode() : 0);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import okhttp3.Protocol.HTTP_1_1, +import okhttp3.Protocol.HTTP_2, +import okhttp3.internal.Internal, +import okhttp3.internal.Util, +import okhttp3.internal.Util.checkDuration, +import okhttp3.internal.cache.InternalCache, +import okhttp3.internal.connection.Exchange, +import okhttp3.internal.platform.Platform, +import okhttp3.internal.proxy.NullProxySelector, +import okhttp3.internal.tls.CertificateChainCleaner, +import okhttp3.internal.tls.OkHostnameVerifier, +import okhttp3.internal.ws.RealWebSocket, +import okio.Sink, +import okio.Source, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, +import java.net.Proxy, +import java.net.ProxySelector, +import java.net.Socket, +import java.security.GeneralSecurityException, +import java.time.Duration, +import java.util.Collections, +import java.util.Random, +import java.util.concurrent.ExecutorService, +import java.util.concurrent.TimeUnit, +import javax.net.SocketFactory, +import javax.net.ssl.HostnameVerifier, +import javax.net.ssl.SSLSocketFactory, +import javax.net.ssl.TrustManager, +import javax.net.ssl.X509TrustManager, +import kotlin.DeprecationLevel.ERROR, +, +/**, + * Factory for [calls][Call], which can be used to send HTTP requests and read their, + * responses., + *, + * ## OkHttpClients should be shared, + *, + * OkHttp performs best when you create a single `OkHttpClient` instance and reuse it for, + * all of your HTTP calls. This is because each client holds its own connection pool and thread, + * pools. Reusing connections and threads reduces latency and saves memory. Conversely, creating a, + * client for each request wastes resources on idle pools., + *, + * Use `new OkHttpClient()` to create a shared instance with the default settings:, + * ```, + * // The singleton HTTP client., + * public final OkHttpClient client = new OkHttpClient();, + * ```, + *, + * Or use `new OkHttpClient.Builder()` to create a shared instance with custom settings:, + * ```, + * // The singleton HTTP client., + * public final OkHttpClient client = new OkHttpClient.Builder(), + *     .addInterceptor(new HttpLoggingInterceptor()), + *     .cache(new Cache(cacheDir, cacheSize)), + *     .build();, + * ```, + *, + * ## Customize your client with newBuilder(), + *, + * You can customize a shared OkHttpClient instance with [newBuilder]. This builds a, + * client that shares the same connection pool, thread pools, and configuration. Use the builder, + * methods to configure the derived client for a specific purpose., + *, + * This example shows a call with a short 500 millisecond timeout:, + * ```, + * OkHttpClient eagerClient = client.newBuilder(), + *     .readTimeout(500, TimeUnit.MILLISECONDS), + *     .build();, + * Response response = eagerClient.newCall(request).execute();, + * ```, + *, + * ## Shutdown isn't necessary, + *, + * The threads and connections that are held will be released automatically if they remain idle., + * But if you are writing a application that needs to aggressively release unused resources you may, + * do so., + *, + * Shutdown the dispatcher's executor service with [shutdown()][ExecutorService.shutdown]., + * This will also cause future calls to the client to be rejected., + * ```]
[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static int getDefaultPort(String protocol) {, +    if ("http".equals(protocol)) return 80;, +    if ("https".equals(protocol)) return 443;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static int getDefaultPort(String protocol) {, +    if ("http".equals(protocol)) return 80;, +    if ("https".equals(protocol)) return 443;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      HttpTransport.writeRequest(out, request.headers(), requestLine);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static int getDefaultPort(String protocol) {, +    if ("http".equals(protocol)) return 80;, +    if ("https".equals(protocol)) return 443;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      HttpTransport.writeRequest(out, request.headers(), requestLine);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.Headers;, +    private final Headers varyHeaders;, +    private final Headers responseHeaders;, +        Headers.Builder varyHeadersBuilder = new Headers.Builder();, +        Headers.Builder responseHeadersBuilder = new Headers.Builder();, +      this.varyHeaders = response.request().headers().getAll(response.getVaryFields());, +      this.responseHeaders = response.headers();, +          .headers(responseHeaders), +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static int getDefaultPort(String protocol) {, +    if ("http".equals(protocol)) return 80;, +    if ("https".equals(protocol)) return 443;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      HttpTransport.writeRequest(out, request.headers(), requestLine);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.Headers;, +    private final Headers varyHeaders;, +    private final Headers responseHeaders;, +        Headers.Builder varyHeadersBuilder = new Headers.Builder();, +        Headers.Builder responseHeadersBuilder = new Headers.Builder();, +      this.varyHeaders = response.request().headers().getAll(response.getVaryFields());, +      this.responseHeaders = response.headers();, +          .headers(responseHeaders), +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +import com.squareup.okhttp.internal.http.Headers;, +  private final Headers headers;, +  Headers headers() {, +        .headers(headers), +  public Headers getHeaders() {, +    public ParsedHeaders(Headers headers) {, +    private Headers.Builder headers = new Headers.Builder();, +    public Builder headers(Headers headers) {, +      this.headers = headers.newBuilder();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static int getDefaultPort(String protocol) {, +    if ("http".equals(protocol)) return 80;, +    if ("https".equals(protocol)) return 443;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      HttpTransport.writeRequest(out, request.headers(), requestLine);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.Headers;, +    private final Headers varyHeaders;, +    private final Headers responseHeaders;, +        Headers.Builder varyHeadersBuilder = new Headers.Builder();, +        Headers.Builder responseHeadersBuilder = new Headers.Builder();, +      this.varyHeaders = response.request().headers().getAll(response.getVaryFields());, +      this.responseHeaders = response.headers();, +          .headers(responseHeaders), +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +import com.squareup.okhttp.internal.http.Headers;, +  private final Headers headers;, +  Headers headers() {, +        .headers(headers), +  public Headers getHeaders() {, +    public ParsedHeaders(Headers headers) {, +    private Headers.Builder headers = new Headers.Builder();, +    public Builder headers(Headers headers) {, +      this.headers = headers.newBuilder();, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +import com.squareup.okhttp.internal.http.Headers;, +  private final Headers headers;, +  public Headers headers() {, +        .headers(headers), +  public boolean varyMatches(Headers varyHeaders, Request newRequest) {, +    Headers.Builder result = new Headers.Builder();, +    return newBuilder().headers(result.build()).build();, +    private ParsedHeaders(Headers headers) {, +    private Headers.Builder headers = new Headers.Builder();, +    public Builder headers(Headers headers) {, +      this.headers = headers.newBuilder();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static int getDefaultPort(String protocol) {, +    if ("http".equals(protocol)) return 80;, +    if ("https".equals(protocol)) return 443;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      HttpTransport.writeRequest(out, request.headers(), requestLine);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.Headers;, +    private final Headers varyHeaders;, +    private final Headers responseHeaders;, +        Headers.Builder varyHeadersBuilder = new Headers.Builder();, +        Headers.Builder responseHeadersBuilder = new Headers.Builder();, +      this.varyHeaders = response.request().headers().getAll(response.getVaryFields());]
[+++ b/pom.xml, +    <okio.version>1.2.0</okio.version>]
[+++ b/checkstyle.xml, +    <module name="IllegalImport"/>, +    <!-- defaults to sun.* packages -->, +++ b/checkstyle.xml, +    <module name="IllegalImport"/>, +    <!-- defaults to sun.* packages -->, +++ b/pom.xml, +        <version>2.10</version>]
[+++ b/.gitignore, +*.ipr, +*.iws, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +          hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.getTransports());, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +          hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.getTransports());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    RawHeaders rawHeaders = RawHeaders.fromBytes(socketIn);, +    httpEngine.connection.setHttpMinorVersion(rawHeaders.getHttpMinorVersion());, +    httpEngine.receiveHeaders(rawHeaders);, +, +    ResponseHeaders headers = new ResponseHeaders(httpEngine.uri, rawHeaders);, +    headers.setTransport("http/1.1");, +    return headers;, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +          hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.getTransports());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    RawHeaders rawHeaders = RawHeaders.fromBytes(socketIn);, +    httpEngine.connection.setHttpMinorVersion(rawHeaders.getHttpMinorVersion());, +    httpEngine.receiveHeaders(rawHeaders);, +, +    ResponseHeaders headers = new ResponseHeaders(httpEngine.uri, rawHeaders);, +    headers.setTransport("http/1.1");, +    return headers;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +import java.util.ArrayList;, +  private List<String> transports;, +  List<String> getTransports() {, +    return transports;, +  }, +, +    if ("X-Android-Transports".equals(field)) {, +      setTransports(newValue, false /* append */);, +    } else {, +  }, +, +    if ("X-Android-Transports".equals(field)) {, +      setTransports(value, true /* append */);, +    } else {, +, +  /*, +   * Splits and validates a comma-separated string of transports., +   * When append == false, we require that the transport list contains "http/1.1"., +   */, +  private void setTransports(String transportsString, boolean append) {, +    if (transportsString == null) {, +      throw new NullPointerException("transportsString == null");, +    }, +, +    String[] transports = transportsString.split(",", -1);, +    ArrayList<String> transportsList = new ArrayList<String>();, +    if (!append) {, +      // If we're not appending to the list, we need to make sure, +      // the list contains "http/1.1". We do this in a separate loop, +      // to avoid modifying any state before we validate the input., +      boolean containsHttp = false;, +      for (int i = 0; i < transports.length; ++i) {, +        if ("http/1.1".equals(transports[i])) {, +          containsHttp = true;, +          break;, +        }, +      }, +, +      if (!containsHttp) {, +        throw new IllegalArgumentException("Transport list doesn't contain http/1.1");, +      }, +    } else {, +      transportsList.addAll(this.transports);, +    }, +, +    for (int i = 0; i < transports.length; ++i) {, +      if (transports[i].length() == 0) {, +        throw new IllegalArgumentException("Transport list contains an empty transport");, +      }, +, +      if (!transportsList.contains(transports[i])) {, +        transportsList.add(transports[i]);, +      }, +    }, +, +    this.transports = Util.immutableList(transportsList);, +  }, +}, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +          hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.getTransports());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    RawHeaders rawHeaders = RawHeaders.fromBytes(socketIn);]
[+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +import java.util.HashMap;, +        Map<String, List<String>> headers = new HashMap<>();, +        Map<String, List<String>> headers = new HashMap<>();, +        Map<String, List<String>> headers = new HashMap<>();, +    Map<String, List<String>> javaRequestHeaders = new HashMap<>();, +    Map<String, List<String>> javaRequestHeaders = new HashMap<>();, +    Map<String, List<String>> javaResponseHeaders = new HashMap<>();, +    Map<String, List<String>> javaResponseHeaders = new HashMap<>();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +import java.util.HashMap;, +        Map<String, List<String>> headers = new HashMap<>();, +        Map<String, List<String>> headers = new HashMap<>();, +        Map<String, List<String>> headers = new HashMap<>();, +    Map<String, List<String>> javaRequestHeaders = new HashMap<>();, +    Map<String, List<String>> javaRequestHeaders = new HashMap<>();, +    Map<String, List<String>> javaResponseHeaders = new HashMap<>();, +    Map<String, List<String>> javaResponseHeaders = new HashMap<>();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import java.util.HashMap;, +            Map<String, List<String>> headers = new HashMap<>();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +import java.util.HashMap;, +        Map<String, List<String>> headers = new HashMap<>();, +        Map<String, List<String>> headers = new HashMap<>();, +        Map<String, List<String>> headers = new HashMap<>();, +    Map<String, List<String>> javaRequestHeaders = new HashMap<>();, +    Map<String, List<String>> javaRequestHeaders = new HashMap<>();, +    Map<String, List<String>> javaResponseHeaders = new HashMap<>();, +    Map<String, List<String>> javaResponseHeaders = new HashMap<>();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import java.util.HashMap;, +            Map<String, List<String>> headers = new HashMap<>();, +++ b/okhttp-tests/src/test/java/okhttp3/CookiesTest.java, +import java.util.HashMap;, +            Map<String, List<String>> result = new HashMap<>();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +import java.util.HashMap;, +        Map<String, List<String>> headers = new HashMap<>();, +        Map<String, List<String>> headers = new HashMap<>();, +        Map<String, List<String>> headers = new HashMap<>();, +    Map<String, List<String>> javaRequestHeaders = new HashMap<>();, +    Map<String, List<String>> javaRequestHeaders = new HashMap<>();, +    Map<String, List<String>> javaResponseHeaders = new HashMap<>();, +    Map<String, List<String>> javaResponseHeaders = new HashMap<>();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import java.util.HashMap;, +            Map<String, List<String>> headers = new HashMap<>();, +++ b/okhttp-tests/src/test/java/okhttp3/CookiesTest.java, +import java.util.HashMap;, +            Map<String, List<String>> result = new HashMap<>();, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import java.util.HashMap;, +    Map<String, String> namesAndValues = new HashMap<>();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +import java.util.HashMap;, +        Map<String, List<String>> headers = new HashMap<>();, +        Map<String, List<String>> headers = new HashMap<>();, +        Map<String, List<String>> headers = new HashMap<>();, +    Map<String, List<String>> javaRequestHeaders = new HashMap<>();, +    Map<String, List<String>> javaRequestHeaders = new HashMap<>();, +    Map<String, List<String>> javaResponseHeaders = new HashMap<>();, +    Map<String, List<String>> javaResponseHeaders = new HashMap<>();, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import java.util.HashMap;, +            Map<String, List<String>> headers = new HashMap<>();, +++ b/okhttp-tests/src/test/java/okhttp3/CookiesTest.java, +import java.util.HashMap;, +            Map<String, List<String>> result = new HashMap<>();, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import java.util.HashMap;, +    Map<String, String> namesAndValues = new HashMap<>();, +++ b/okhttp-tests/src/test/java/okhttp3/NewWebSocketTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.net.ProtocolException;, +import java.util.Random;, +import java.util.logging.Logger;, +import okhttp3.internal.tls.SslClient;, +import okhttp3.internal.ws.NewWebSocketRecorder;, +import okhttp3.internal.ws.RealNewWebSocket;, +import okhttp3.internal.ws.WebSocketRecorder;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +    responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +    responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString().hex();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +    responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString().hex();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft06Test.java, +    bytesIn.writeAll(bytesOut);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(bytesOut);, +    bytesIn.writeAll(bytesOut);, +    bytesIn.writeAll(firstRequestWithoutHuffman());, +    bytesIn.writeAll(secondRequestWithoutHuffman());, +    bytesIn.writeAll(thirdRequestWithoutHuffman());, +    bytesIn.writeAll(firstRequestWithHuffman());, +    bytesIn.writeAll(secondRequestWithHuffman());, +    bytesIn.writeAll(thirdRequestWithHuffman());, +    // TODO change to bytesOut.readByteString() once Okio 0.8.1+ is available., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +    responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString().hex();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft06Test.java, +    bytesIn.writeAll(bytesOut);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(bytesOut);, +    bytesIn.writeAll(bytesOut);, +    bytesIn.writeAll(firstRequestWithoutHuffman());, +    bytesIn.writeAll(secondRequestWithoutHuffman());, +    bytesIn.writeAll(thirdRequestWithoutHuffman());, +    bytesIn.writeAll(firstRequestWithHuffman());, +    bytesIn.writeAll(secondRequestWithHuffman());, +    bytesIn.writeAll(thirdRequestWithHuffman());, +    // TODO change to bytesOut.readByteString() once Okio 0.8.1+ is available., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http20Draft10Test.java, +      frame.writeAll(headerBytes);, +      frame.writeAll(headerBytes);, +      frame.writeAll(headerBlock);, +      frame.writeAll(headerBytes);, +    frame.writeAll(headerBlock);, +    frame.writeAll(headerBlock);, +    frame.writeAll(headerBlock);, +    frame.writeAll(headerBlock);, +    frame.writeAll(headerBlock);, +      frame.writeAll(headerBlock);, +      frame.writeAll(headerBlock);, +      frame.writeAll(headerBlock);, +      frame.writeAll(headerBlock);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +   * Throttles the request reader and response writer to sleep for the given period after each, +   * series of {@code bytesPerPeriod} bytes are transferred. Use this to simulate network behavior., +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +   * Throttles the request reader and response writer to sleep for the given period after each, +   * series of {@code bytesPerPeriod} bytes are transferred. Use this to simulate network behavior., +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/MockSpdyPeer.java, +import java.net.InetSocketAddress;, +import okhttp3.internal.Util;, +    serverSocket = new ServerSocket();, +    serverSocket.setReuseAddress(false);, +    serverSocket.bind(new InetSocketAddress("localhost", 0), 1);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +   * Throttles the request reader and response writer to sleep for the given period after each, +   * series of {@code bytesPerPeriod} bytes are transferred. Use this to simulate network behavior., +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/MockSpdyPeer.java, +import java.net.InetSocketAddress;, +import okhttp3.internal.Util;, +    serverSocket = new ServerSocket();, +    serverSocket.setReuseAddress(false);, +    serverSocket.bind(new InetSocketAddress("localhost", 0), 1);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Spdy3ConnectionTest.java]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.ws;, +, +import java.io.IOException;, +import java.net.ProtocolException;, +import java.net.SocketTimeoutException;, +import java.util.Random;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.logging.Logger;, +import okhttp3.Interceptor;, +import okhttp3.OkHttpClient;, +import okhttp3.RecordingHostnameVerifier;, +import okhttp3.Request;, +import okhttp3.Response;, +import okhttp3.TestLogHandler;, +import okhttp3.WebSocket;, +import okhttp3.WebSocketListener;, +import okhttp3.internal.tls.SslClient;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, +import okhttp3.mockwebserver.SocketPolicy;, +import okio.Buffer;, +import okio.ByteString;, +import org.junit.After;, +import org.junit.Ignore;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static okhttp3.TestUtil.defaultClient;, +import static okhttp3.TestUtil.repeat;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class WebSocketHttpTest {, +  @Rule public final MockWebServer webServer = new MockWebServer();, +, +  private final SslClient sslClient = SslClient.localhost();, +  private final WebSocketRecorder clientListener = new WebSocketRecorder("client");, +  private final WebSocketRecorder serverListener = new WebSocketRecorder("server");, +  private final Random random = new Random(0);, +  private OkHttpClient client = defaultClient().newBuilder(), +      .writeTimeout(500, TimeUnit.MILLISECONDS), +      .readTimeout(500, TimeUnit.MILLISECONDS), +      .addInterceptor(new Interceptor() {, +        @Override public Response intercept(Chain chain) throws IOException {, +          Response response = chain.proceed(chain.request());, +          assertNotNull(response.body()); // Ensure application interceptors never see a null body., +          return response;, +        }, +      }), +      .build();, +, +  @After public void tearDown() {, +    clientListener.assertExhausted();, +  }, +, +  @Test public void textMessage() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    WebSocket webSocket = newWebSocket();, +, +    clientListener.assertOpen();, +    serverListener.assertOpen();, +, +    webSocket.send("Hello, WebSockets!");, +    serverListener.assertTextMessage("Hello, WebSockets!");, +  }, +, +  @Test public void binaryMessage() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    WebSocket webSocket = newWebSocket();, +, +    clientListener.assertOpen();, +    serverListener.assertOpen();, +, +    webSocket.send(ByteString.encodeUtf8("Hello!"));, +    serverListener.assertBinaryMessage(ByteString.of(new byte[] {'H', 'e', 'l', 'l', 'o', '!'}));]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, +    client = defaultClient().newBuilder(), +    TestUtil.ensureAllConnectionsReleased(client);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, +    client = defaultClient().newBuilder(), +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient().newBuilder(), +, +    TestUtil.ensureAllConnectionsReleased(client);, +    OkHttpClient c = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, +    client = defaultClient().newBuilder(), +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient().newBuilder(), +, +    TestUtil.ensureAllConnectionsReleased(client);, +    OkHttpClient c = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +  @After, +  public void tearDown() {, +    TestUtil.ensureAllConnectionsReleased(client);, +  }, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +            .exhaustRequest(), +            .exhaustResponse());, +            .receiveRequest("request F\n"), +            .exhaustResponse(), +            .exhaustRequest());, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, +  1. If you made modifications to `Benchmark` run `mvn compile`., +  2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, +  1. If you made modifications to `Benchmark` run `mvn compile`., +  2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3</groupId>, +    <artifactId>parent</artifactId>, +    <version>3.13.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>benchmarks</artifactId>, +  <name>Benchmarks</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.google.caliper</groupId>, +      <artifactId>caliper</artifactId>, +      <version>1.0-beta-1</version>, +    </dependency>, +    <!-- caliper needs to be updated to be compatible with guava 16 -->, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <version>14.0.1</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-tls</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>org.apache.httpcomponents</groupId>, +      <artifactId>httpclient</artifactId>, +    </dependency>, +    <dependency>, +      <groupId>io.netty</groupId>, +      <artifactId>netty-transport</artifactId>, +      <version>4.0.15.Final</version>, +    </dependency>, +    <dependency>, +      <groupId>io.netty</groupId>, +      <artifactId>netty-handler</artifactId>, +      <version>4.0.15.Final</version>, +    </dependency>, +    <dependency>, +      <groupId>io.netty</groupId>, +      <artifactId>netty-codec-http</artifactId>, +      <version>4.0.15.Final</version>, +    </dependency>, +    <!-- Netty needs this if gzip is enabled. -->, +    <dependency>, +      <groupId>com.jcraft</groupId>, +      <artifactId>jzlib</artifactId>, +      <version>1.1.2</version>, +    </dependency>, +  </dependencies>, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.codehaus.mojo</groupId>, +        <artifactId>exec-maven-plugin</artifactId>, +        <version>1.5.0</version>, +        <executions>, +          <execution>, +            <goals>]
[+++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="square/okhttp", +JDK="oraclejdk8", +BRANCH="master", +, +set -e, +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, +  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, +  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, +  echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, +  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.", +else, +  echo "Deploying snapshot...", +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +  echo "Snapshot deployed!", +fi, +++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="square/okhttp", +JDK="oraclejdk8", +BRANCH="master", +, +set -e, +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, +  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, +  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, +  echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, +  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.", +else, +  echo "Deploying snapshot...", +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +  echo "Snapshot deployed!", +fi, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="square/okhttp", +JDK="oraclejdk8", +BRANCH="master", +, +set -e, +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, +  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, +  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, +  echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, +  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.", +else, +  echo "Deploying snapshot...", +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +  echo "Snapshot deployed!", +fi, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.Util;, +        return Util.format("%s%n", record.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.Util;, +        return Util.format("%s%n", record.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertTrue(Util.format("Timed out: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.Util;, +        return Util.format("%s%n", record.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertTrue(Util.format("Timed out: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    assertTrue(Util.format("Time to close: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.Util;, +        return Util.format("%s%n", record.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertTrue(Util.format("Timed out: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    assertTrue(Util.format("Time to close: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/okhttp-tests/src/test/java/okhttp3/UrlComponentEncodingTester.java, +import okhttp3.internal.Util;, +      fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +      fail(Util.format("Roundtrip %s %#x %s", component, codePoint, url));, +      fail(Util.format("Encoding %s %#02x using %s", component, codePoint, encoding));, +      fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +      fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +        fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +        fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +        fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +        fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +          percentEncoded.writeUtf8(Util.format("%%%02X", utf8.getByte(i) & 0xff));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.Util;, +        return Util.format("%s%n", record.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertTrue(Util.format("Timed out: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    assertTrue(Util.format("Time to close: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/okhttp-tests/src/test/java/okhttp3/UrlComponentEncodingTester.java, +import okhttp3.internal.Util;, +      fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));]
[+++ b/.github/ISSUE_TEMPLATE.md, +What kind of issue is this?, +, + - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do, +       something, or to understand why something isn't working the way you expect it to, use Stack, +       Overflow. https://stackoverflow.com/questions/tagged/okhttp, +, + - [ ] Bug report. If you’ve found a bug, spend the time to write a failing test. Bugs with tests, +       get fixed. Here’s an example: https://gist.github.com/swankjesse/981fcae102f513eb13ed, +, + - [ ] Feature Request. Start by telling us what problem you’re trying to solve. Often a solution, +       already exists! Don’t send pull requests to implement new features without first getting our, +       support. Sometimes we leave features out on purpose to keep the project small., +++ b/.github/ISSUE_TEMPLATE.md, +What kind of issue is this?, +, + - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do, +       something, or to understand why something isn't working the way you expect it to, use Stack, +       Overflow. https://stackoverflow.com/questions/tagged/okhttp, +, + - [ ] Bug report. If you’ve found a bug, spend the time to write a failing test. Bugs with tests, +       get fixed. Here’s an example: https://gist.github.com/swankjesse/981fcae102f513eb13ed, +, + - [ ] Feature Request. Start by telling us what problem you’re trying to solve. Often a solution, +       already exists! Don’t send pull requests to implement new features without first getting our, +       support. Sometimes we leave features out on purpose to keep the project small., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +What kind of issue is this?, +, + - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do, +       something, or to understand why something isn't working the way you expect it to, use Stack, +       Overflow. https://stackoverflow.com/questions/tagged/okhttp, +, + - [ ] Bug report. If you’ve found a bug, spend the time to write a failing test. Bugs with tests, +       get fixed. Here’s an example: https://gist.github.com/swankjesse/981fcae102f513eb13ed, +, + - [ ] Feature Request. Start by telling us what problem you’re trying to solve. Often a solution, +       already exists! Don’t send pull requests to implement new features without first getting our, +       support. Sometimes we leave features out on purpose to keep the project small., +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +What kind of issue is this?, +, + - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do, +       something, or to understand why something isn't working the way you expect it to, use Stack, +       Overflow. https://stackoverflow.com/questions/tagged/okhttp, +, + - [ ] Bug report. If you’ve found a bug, spend the time to write a failing test. Bugs with tests, +       get fixed. Here’s an example: https://gist.github.com/swankjesse/981fcae102f513eb13ed, +, + - [ ] Feature Request. Start by telling us what problem you’re trying to solve. Often a solution, +       already exists! Don’t send pull requests to implement new features without first getting our, +       support. Sometimes we leave features out on purpose to keep the project small., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE.md, +What kind of issue is this?, +, + - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do, +       something, or to understand why something isn't working the way you expect it to, use Stack, +       Overflow. https://stackoverflow.com/questions/tagged/okhttp, +, + - [ ] Bug report. If you’ve found a bug, spend the time to write a failing test. Bugs with tests, +       get fixed. Here’s an example: https://gist.github.com/swankjesse/981fcae102f513eb13ed, +, + - [ ] Feature Request. Start by telling us what problem you’re trying to solve. Often a solution, +       already exists! Don’t send pull requests to implement new features without first getting our, +       support. Sometimes we leave features out on purpose to keep the project small., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/.github/ISSUE_TEMPLATE.md, +What kind of issue is this?, +, + - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do, +       something, or to understand why something isn't working the way you expect it to, use Stack, +       Overflow. https://stackoverflow.com/questions/tagged/okhttp, +, + - [ ] Bug report. If you’ve found a bug, spend the time to write a failing test. Bugs with tests, +       get fixed. Here’s an example: https://gist.github.com/swankjesse/981fcae102f513eb13ed, +, + - [ ] Feature Request. Start by telling us what problem you’re trying to solve. Often a solution, +       already exists! Don’t send pull requests to implement new features without first getting our, +       support. Sometimes we leave features out on purpose to keep the project small., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +  @Ignore("CallEnd not emitted"), +  @Test public void emptyResponseBodyConnectionClose() throws IOException {, +    server.enqueue(new MockResponse(), +        .addHeader("Connection", "close"), +        .setBody(""));, +, +    Call call = client.newCall(new Request.Builder()]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/ForwardingRequestBody.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import javax.annotation.Nullable;, +import okio.BufferedSink;, +, +public class ForwardingRequestBody extends RequestBody {, +  private final RequestBody delegate;, +, +  public ForwardingRequestBody(RequestBody delegate) {, +    if (delegate == null) throw new IllegalArgumentException("delegate == null");, +    this.delegate = delegate;, +  }, +, +  public final RequestBody delegate() {, +    return delegate;, +  }, +, +  @Override public @Nullable MediaType contentType() {, +    return delegate.contentType();, +  }, +, +  @Override public long contentLength() throws IOException {, +    return delegate.contentLength();, +  }, +, +  @Override public void writeTo(BufferedSink sink) throws IOException {, +    delegate.writeTo(sink);, +  }, +, +  @Override public boolean isDuplex() {, +    return delegate.isDuplex();, +  }, +, +  @Override public String toString() {, +    return getClass().getSimpleName() + "(" + delegate.toString() + ")";, +  }, +}, +++ b/okhttp-testing-support/src/main/java/okhttp3/ForwardingRequestBody.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import javax.annotation.Nullable;, +import okio.BufferedSink;, +, +public class ForwardingRequestBody extends RequestBody {, +  private final RequestBody delegate;, +, +  public ForwardingRequestBody(RequestBody delegate) {, +    if (delegate == null) throw new IllegalArgumentException("delegate == null");, +    this.delegate = delegate;, +  }, +, +  public final RequestBody delegate() {, +    return delegate;, +  }, +, +  @Override public @Nullable MediaType contentType() {, +    return delegate.contentType();, +  }, +, +  @Override public long contentLength() throws IOException {, +    return delegate.contentLength();, +  }, +, +  @Override public void writeTo(BufferedSink sink) throws IOException {, +    delegate.writeTo(sink);, +  }, +]
[+++ b/.travis.yml, +#  - openjdk11, +++ b/.travis.yml, +#  - openjdk11, +++ b/CHANGELOG.md, +## Version 3.11.0, +, +_2018-07-12_, +, + *  **OkHttp's new okhttp-tls submodule tames HTTPS and TLS.**, +, +    `HeldCertificate` is a TLS certificate and its private key. Generate a certificate with its, +    builder then use it to sign another certificate or perform a TLS handshake. The, +    `certificatePem()` method encodes the certificate in the familiar PEM format, +    (`--- BEGIN CERTIFICATE ---`); the `privateKeyPkcs8Pem()` does likewise for the private key., +, +    `HandshakeCertificates` holds the TLS certificates required for a TLS handshake. On the server, +    it keeps your `HeldCertificate` and its chain. On the client it keeps the root certificates, +    that are trusted to sign a server's certificate chain. `HandshakeCertificates` also works with, +    mutual TLS where these roles are reversed., +, +    These classes make it possible to enable HTTPS in MockWebServer in [just a few lines of, +    code][https_server_sample]., +, + *  **OkHttp now supports prior knowledge cleartext HTTP/2.** Enable this by setting, +    `Protocol.H2_PRIOR_KNOWLEDGE` as the lone protocol on an `OkHttpClient.Builder`. This mode, +    only supports `http:` URLs and is best suited in closed environments where HTTPS is, +    inappropriate., +, + *  New: `HttpUrl.get(String)` is an alternative to `HttpUrl.parse(String)` that throws an exception, +    when the URL is malformed instead of returning null. Use this to avoid checking for null in, +    situations where the input is known to be well-formed. We've also added `MediaType.get(String)`, +    which is an exception-throwing alternative to `MediaType.parse(String)`., + *  New: The `EventListener` API previewed in OkHttp 3.9 has graduated to a stable API. Use this, +    interface to track metrics and monitor HTTP requests' size and duration., + *  New: `okhttp-dnsoverhttps` is an experimental API for doing DNS queries over HTTPS. Using HTTPS, +    for DNS offers better security and potentially better performance. This feature is a preview:, +    the API is subject to change., + *  New: `okhttp-sse` is an early preview of Server-Sent Events (SSE). This feature is incomplete, +    and is only suitable for experimental use., + *  New: MockWebServer now supports client authentication (mutual TLS). Call `requestClientAuth()`, +    to permit an optional client certificate or `requireClientAuth()` to require one., + *  New: `RecordedRequest.getHandshake()` returns the HTTPS handshake of a request sent to, +    `MockWebServer`., + *  Fix: Honor the `MockResponse` header delay in MockWebServer., + *  Fix: Don't release HTTP/2 connections that have multiple canceled calls. We had a bug where, +    canceling calls would cause the shared HTTP/2 connection to be unnecessarily released. This, +    harmed connection reuse., + *  Fix: Ensure canceled and discarded HTTP/2 data is not permanently counted against the limited, +    flow control window. We had a few bugs where window size accounting was broken when streams, +    were canceled or reset., + *  Fix: Recover gracefully if the TLS session returns an unexpected version (`NONE`) or cipher, +    suite (`SSL_NULL_WITH_NULL_NULL`)., + *  Fix: Don't change Conscrypt configuration globally. We migrated from a process-wide setting to, +    configuring only OkHttp's TLS sockets., + *  Fix: Prefer TLSv1.2 where it is available. On certain older platforms it is necessary to opt-in, +    to TLSv1.2., + *  New: `Request.tag()` permits multiple tags. Use a `Class<?>` as a key to identify tags. Note, +    that `tag()` now returns null if the request has no tag. Previously this would return the, +    request itself., + *  New: `Headers.Builder.addAll(Headers)`., + *  New: `ResponseBody.create(MediaType, ByteString)`., + *  New: Embed R8/ProGuard rules in the jar. These will be applied automatically by R8., + *  Fix: Release the connection if `Authenticator` throws an exception., + *  Fix: Change the declaration of `OkHttpClient.cache()` to return a `@Nullable Cache`. The return, +    value has always been nullable but it wasn't declared properly., + *  Fix: Reverse suppression of connect exceptions. When both a call and its retry fail, we now, +    throw the initial exception which is most likely to be actionable., + *  Fix: Retain interrupted state when throwing `InterruptedIOException`. A single interrupt should, +    now be sufficient to break out an in-flight OkHttp call., + *  Fix: Don't drop a call to `EventListener.callEnd()` when the response body is consumed inside an, +    interceptor., +, +, + [https_server_sample]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java, +++ b/.travis.yml, +#  - openjdk11, +++ b/CHANGELOG.md, +## Version 3.11.0, +, +_2018-07-12_, +, + *  **OkHttp's new okhttp-tls submodule tames HTTPS and TLS.**, +, +    `HeldCertificate` is a TLS certificate and its private key. Generate a certificate with its, +    builder then use it to sign another certificate or perform a TLS handshake. The, +    `certificatePem()` method encodes the certificate in the familiar PEM format, +    (`--- BEGIN CERTIFICATE ---`); the `privateKeyPkcs8Pem()` does likewise for the private key., +, +    `HandshakeCertificates` holds the TLS certificates required for a TLS handshake. On the server, +    it keeps your `HeldCertificate` and its chain. On the client it keeps the root certificates, +    that are trusted to sign a server's certificate chain. `HandshakeCertificates` also works with, +    mutual TLS where these roles are reversed., +, +    These classes make it possible to enable HTTPS in MockWebServer in [just a few lines of, +    code][https_server_sample]., +, + *  **OkHttp now supports prior knowledge cleartext HTTP/2.** Enable this by setting, +    `Protocol.H2_PRIOR_KNOWLEDGE` as the lone protocol on an `OkHttpClient.Builder`. This mode, +    only supports `http:` URLs and is best suited in closed environments where HTTPS is]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelImmediatelyAfterEnqueue() throws Exception {, +    call.cancel();, +  @Test public void cancelAll() throws Exception {, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    call.enqueue(callback);, +    client.dispatcher().cancelAll();, +    callback.await(server.url("/")).assertFailure("Canceled");, +  }, +, +    Request request = new Request.Builder().url(server.url("/a")).build();, +    final Call call = client.newCall(request);, +, +        call.cancel();, +      call.execute();, +, +    Request requestA = new Request.Builder().url(server.url("/a")).build();, +    Request requestB = new Request.Builder().url(server.url("/b")).build();, +    final Call callA = client.newCall(requestA);, +    final Call callB = client.newCall(requestB);, +, +        callB.cancel();, +    callA.enqueue(callback);, +    callB.enqueue(callback);, +    Request requestA = new Request.Builder().url(server.url("/a")).build();, +    Request request = new Request.Builder().url(server.url("/a")).build();, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelImmediatelyAfterEnqueue() throws Exception {, +    call.cancel();, +  @Test public void cancelAll() throws Exception {, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    call.enqueue(callback);, +    client.dispatcher().cancelAll();, +    callback.await(server.url("/")).assertFailure("Canceled");, +  }, +, +    Request request = new Request.Builder().url(server.url("/a")).build();, +    final Call call = client.newCall(request);, +, +        call.cancel();, +      call.execute();, +, +    Request requestA = new Request.Builder().url(server.url("/a")).build();, +    Request requestB = new Request.Builder().url(server.url("/b")).build();, +    final Call callA = client.newCall(requestA);, +    final Call callB = client.newCall(requestB);, +, +        callB.cancel();, +    callA.enqueue(callback);, +    callB.enqueue(callback);, +    Request requestA = new Request.Builder().url(server.url("/a")).build();, +    Request request = new Request.Builder().url(server.url("/a")).build();, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +import java.io.IOException;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import java.util.concurrent.CountDownLatch;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +    Call c1 = client.newCall(newRequest("http://a/1", "tag1"));, +    Call c2 = client.newCall(newRequest("http://a/2"));, +    c1.enqueue(callback);, +    c2.enqueue(callback);, +    c1.cancel();, +  @Test public void asyncCallAccessors() throws Exception {, +    dispatcher.setMaxRequests(3);, +    Call a1 = client.newCall(newRequest("http://a/1"));, +    Call a2 = client.newCall(newRequest("http://a/2"));, +    Call a3 = client.newCall(newRequest("http://a/3"));, +    Call a4 = client.newCall(newRequest("http://a/4"));, +    Call a5 = client.newCall(newRequest("http://a/5"));, +    a1.enqueue(callback);, +    a2.enqueue(callback);, +    a3.enqueue(callback);, +    a4.enqueue(callback);, +    a5.enqueue(callback);, +    assertEquals(3, dispatcher.runningCallsCount());, +    assertEquals(2, dispatcher.queuedCallsCount());, +    assertEquals(set(a1, a2, a3), set(dispatcher.runningCalls()));, +    assertEquals(set(a4, a5), set(dispatcher.queuedCalls()));, +  }, +, +  @Test public void synchronousCallAccessors() throws Exception {, +    final CountDownLatch ready = new CountDownLatch(2);, +    final CountDownLatch waiting = new CountDownLatch(1);, +    client = client.newBuilder(), +        .addInterceptor(, +            new Interceptor() {, +              @Override public Response intercept(Chain chain) throws IOException {, +                try {, +                  ready.countDown();, +                  waiting.await();, +                } catch (InterruptedException e) {, +                  throw new AssertionError();, +                }]
[+++ b/pom.xml, +                    <consoleOutput>true</consoleOutput>]
[+++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +   * Sets whether ALPN is used on incoming HTTPS connections to, +   * Indicates the protocols supported by ALPN on incoming HTTPS, +    inetAddress = InetAddress.getLocalHost();, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +   * Sets whether ALPN is used on incoming HTTPS connections to, +   * Indicates the protocols supported by ALPN on incoming HTTPS, +    inetAddress = InetAddress.getLocalHost();, +++ b/okcurl/pom.xml, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +   * Sets whether ALPN is used on incoming HTTPS connections to, +   * Indicates the protocols supported by ALPN on incoming HTTPS, +    inetAddress = InetAddress.getLocalHost();, +++ b/okcurl/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java, +    // If null, probably you didn't add jetty's alpn jar to your boot classpath!, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +   * Sets whether ALPN is used on incoming HTTPS connections to, +   * Indicates the protocols supported by ALPN on incoming HTTPS, +    inetAddress = InetAddress.getLocalHost();, +++ b/okcurl/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java, +    // If null, probably you didn't add jetty's alpn jar to your boot classpath!, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalSpdyExample.java, +    // If null, probably you didn't add jetty's alpn jar to your boot classpath!, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, +    RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, +    RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, +    RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, +    RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private WebSocket newWebSocket(String path, WebSocketListener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new WebSocketListener() {, +      @Override public void onOpen(WebSocket webSocket, Response response) {, +      @Override public void onMessage(final WebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final WebSocket webSocket, final String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new WebSocketListener() {, +      @Override public void onMessage(WebSocket webSocket, String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new WebSocketListener() {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, +    RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, +    RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private WebSocket newWebSocket(String path, WebSocketListener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new WebSocketListener() {, +      @Override public void onOpen(WebSocket webSocket, Response response) {, +      @Override public void onMessage(final WebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final WebSocket webSocket, final String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new WebSocketListener() {, +      @Override public void onMessage(WebSocket webSocket, String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new WebSocketListener() {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public final WebSocket webSocket;, +  public RecordedResponse(Request request, Response response, WebSocket webSocket, String body,, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, +    RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, +    RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private WebSocket newWebSocket(String path, WebSocketListener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new WebSocketListener() {, +      @Override public void onOpen(WebSocket webSocket, Response response) {, +      @Override public void onMessage(final WebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final WebSocket webSocket, final String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new WebSocketListener() {, +      @Override public void onMessage(WebSocket webSocket, String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new WebSocketListener() {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public final WebSocket webSocket;, +  public RecordedResponse(Request request, Response response, WebSocket webSocket, String body,, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketHttpTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +import okhttp3.internal.ws.RealWebSocket;, +  private final WebSocketRecorder clientListener = new WebSocketRecorder("client");, +  private final WebSocketRecorder serverListener = new WebSocketRecorder("server");, +    WebSocket client = enqueueClientWebSocket();, +    RealWebSocket client = enqueueClientWebSocket();, +    RealWebSocket client = enqueueClientWebSocket();]
[+++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/okhttp-android-support/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/okhttp-android-support/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okhttp-apache/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/okhttp-android-support/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okhttp-apache/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.4.0-SNAPSHOT</version>]
[+++ b/bom/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3</groupId>, +    <artifactId>parent</artifactId>, +    <version>3.12.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +  <packaging>pom</packaging>, +  <name>OkHttp (Bill of Materials)</name>, +, +  <dependencyManagement>, +    <dependencies>, +      <dependency>, +        <groupId>${project.groupId}</groupId>, +        <artifactId>okhttp</artifactId>, +        <version>${project.version}</version>, +      </dependency>, +      <dependency>, +        <groupId>${project.groupId}</groupId>, +        <artifactId>okhttp-tests</artifactId>, +        <version>${project.version}</version>, +      </dependency>, +      <dependency>, +        <groupId>${project.groupId}</groupId>, +        <artifactId>okhttp-android-support</artifactId>, +        <version>${project.version}</version>, +      </dependency>, +      <dependency>, +        <groupId>${project.groupId}</groupId>, +        <artifactId>okhttp-apache</artifactId>, +        <version>${project.version}</version>, +      </dependency>, +      <dependency>, +        <groupId>${project.groupId}</groupId>, +        <artifactId>okhttp-sse</artifactId>, +        <version>${project.version}</version>, +      </dependency>, +      <dependency>, +        <groupId>${project.groupId}</groupId>, +        <artifactId>okhttp-testing-support</artifactId>, +        <version>${project.version}</version>, +      </dependency>, +      <dependency>, +        <groupId>${project.groupId}</groupId>, +        <artifactId>okhttp-tls</artifactId>, +        <version>${project.version}</version>, +      </dependency>, +      <dependency>, +        <groupId>${project.groupId}</groupId>, +        <artifactId>okhttp-urlconnection</artifactId>, +        <version>${project.version}</version>, +      </dependency>, +      <dependency>, +        <groupId>${project.groupId}</groupId>, +        <artifactId>okhttp-logging-interceptor</artifactId>, +        <version>${project.version}</version>, +      </dependency>, +      <dependency>, +        <groupId>${project.groupId}</groupId>, +        <artifactId>okhttp-dnsoverhttps</artifactId>, +        <version>${project.version}</version>, +      </dependency>, +      <dependency>, +        <groupId>${project.groupId}</groupId>, +        <artifactId>okcurl</artifactId>, +        <version>${project.version}</version>, +      </dependency>, +      <dependency>, +        <groupId>${project.groupId}</groupId>, +        <artifactId>mockwebserver</artifactId>, +        <version>${project.version}</version>, +      </dependency>, +    </dependencies>, +  </dependencyManagement>, +, +</project>, +++ b/bom/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3</groupId>, +    <artifactId>parent</artifactId>, +    <version>3.12.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +  <packaging>pom</packaging>, +  <name>OkHttp (Bill of Materials)</name>, +]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1].]
[+++ b/mockwebserver/pom.xml, +    <version>1.2.1</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.1</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp/pom.xml, +    <version>1.2.1</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp/pom.xml, +    <version>1.2.1</version>, +++ b/pom.xml, +  <version>1.2.1</version>, +    <tag>parent-1.2.1</tag>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp/pom.xml, +    <version>1.2.1</version>, +++ b/pom.xml, +  <version>1.2.1</version>, +    <tag>parent-1.2.1</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2.1</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp/pom.xml, +    <version>1.2.1</version>, +++ b/pom.xml, +  <version>1.2.1</version>, +    <tag>parent-1.2.1</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2.1</version>, +++ b/samples/pom.xml, +    <version>1.2.1</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.1</version>, +++ b/okhttp/pom.xml, +    <version>1.2.1</version>, +++ b/pom.xml, +  <version>1.2.1</version>, +    <tag>parent-1.2.1</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2.1</version>, +++ b/samples/pom.xml, +    <version>1.2.1</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.2.1</version>]
[+++ /dev/null, +++ /dev/null, +++ b/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", +         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <modelVersion>4.0.0</modelVersion>, +    <parent>, +        <groupId>org.sonatype.oss</groupId>, +        <artifactId>oss-parent</artifactId>, +        <version>7</version>, +    </parent>, +    <groupId>com.google.mockwebserver</groupId>, +    <artifactId>mockwebserver</artifactId>, +    <version>20120127</version>, +    <name>mockwebserver</name>, +    <url>http://code.google.com/p/mockwebserver</url>, +    <issueManagement>, +        <system>code.google.com</system>, +        <url>http://code.google.com/p/mockwebserver/issues</url>, +    </issueManagement>, +    <inceptionYear>2011</inceptionYear>, +    <licenses>, +        <license>, +            <name>The Apache Software License, Version 2.0</name>, +            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>, +            <distribution>repo</distribution>, +        </license>, +    </licenses>, +    <prerequisites>, +        <maven>3.0.4</maven>, +    </prerequisites>, +    <dependencies>, +        <dependency>, +            <groupId>junit</groupId>, +            <artifactId>junit</artifactId>, +            <version>3.8.1</version>, +            <scope>test</scope>, +        </dependency>, +    </dependencies>, +    <build>, +        <plugins>, +            <plugin>, +                <groupId>org.apache.maven.plugins</groupId>, +                <artifactId>maven-compiler-plugin</artifactId>, +                <configuration>, +                    <source>1.6</source>, +                    <target>1.6</target>, +                </configuration>, +            </plugin>, +            <plugin>, +                <groupId>org.apache.maven.plugins</groupId>, +                <artifactId>maven-source-plugin</artifactId>, +                <executions>, +                    <execution>, +                        <id>attach-sources</id>, +                        <phase>verify</phase>, +                        <goals><goal>jar-no-fork</goal></goals>, +                    </execution>, +                </executions>, +            </plugin>, +        </plugins>, +    </build>, +    <scm>, +        <connection>scm:svn:https://code.google.com/p/mockwebserver/</connection>, +        <developerConnection>scm:svn:https://code.google.com/p/mockwebserver/</developerConnection>, +        <url>http://code.google.com/p/mockwebserver/source/browse</url>, +    </scm>, +</project>]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import static okhttp3.internal.Platform.INFO;, +, +        Platform.get().log(INFO, message, null);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import static okhttp3.internal.Platform.INFO;, +, +        Platform.get().log(INFO, message, null);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.util.logging.Logger;, +  private Logger logger = Logger.getLogger(OkHttpClient.class.getName());, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import static okhttp3.internal.Platform.INFO;, +, +        Platform.get().log(INFO, message, null);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.util.logging.Logger;, +  private Logger logger = Logger.getLogger(OkHttpClient.class.getName());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/Jdk9PlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal;, +, +import org.junit.Test;, +, +import static okhttp3.internal.PlatformTest.getPlatform;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, +    return new Thread(new Runnable() {, +      @Override public void run() {, +        final URL url = mockWebServer.url(path).url();, +        final HttpURLConnection conn;, +        } catch (IOException e) {, +        }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, +    return new Thread(new Runnable() {, +      @Override public void run() {, +        final URL url = mockWebServer.url(path).url();, +        final HttpURLConnection conn;, +        } catch (IOException e) {, +        }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread() {, +      @Override public void run() {, +      }, +    }.start();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, +    return new Thread(new Runnable() {, +      @Override public void run() {, +        final URL url = mockWebServer.url(path).url();, +        final HttpURLConnection conn;, +        } catch (IOException e) {, +        }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread() {, +      @Override public void run() {, +      }, +    }.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import javax.net.ssl.SSLSession;, +      HttpLoggingInterceptor.Logger logger =, +          new HttpLoggingInterceptor.Logger() {, +            @Override, +            public void log(String message) {, +              System.out.println(message);, +            }, +          };, +    return new HostnameVerifier() {, +      @Override public boolean verify(String s, SSLSession sslSession) {, +        return true;, +      }, +    };, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, +    return new Thread(new Runnable() {, +      @Override public void run() {, +        final URL url = mockWebServer.url(path).url();, +        final HttpURLConnection conn;, +        } catch (IOException e) {, +        }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread() {, +      @Override public void run() {, +      }, +    }.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import javax.net.ssl.SSLSession;, +      HttpLoggingInterceptor.Logger logger =, +          new HttpLoggingInterceptor.Logger() {, +            @Override, +            public void log(String message) {, +              System.out.println(message);, +            }, +          };, +    return new HostnameVerifier() {, +      @Override public boolean verify(String s, SSLSession sslSession) {, +        return true;, +      }, +    };, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = new Logger() {, +      @Override public void log(String message) {, +        Platform.get().log(INFO, message, null);, +      }, +    };, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, +    return new Thread(new Runnable() {, +      @Override public void run() {, +        final URL url = mockWebServer.url(path).url();, +        final HttpURLConnection conn;, +        } catch (IOException e) {, +        }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread() {, +      @Override public void run() {, +      }, +    }.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import javax.net.ssl.SSLSession;, +      HttpLoggingInterceptor.Logger logger =, +          new HttpLoggingInterceptor.Logger() {, +            @Override, +            public void log(String message) {]
[+++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    String name = request.getPath();, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket Replier", name), true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +    final CountDownLatch connectionClose = new CountDownLatch(1);, +    RealWebSocket webSocket =, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            response.getWebSocketListener(), fancyResponse, name) {, +          @Override protected void shutdown() {, +            connectionClose.countDown();, +        };, +, +    webSocket.loopReader();, +    } catch (InterruptedException ignored) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    String name = request.getPath();, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket Replier", name), true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +    final CountDownLatch connectionClose = new CountDownLatch(1);, +    RealWebSocket webSocket =, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            response.getWebSocketListener(), fancyResponse, name) {, +          @Override protected void shutdown() {, +            connectionClose.countDown();, +        };, +, +    webSocket.loopReader();, +    } catch (InterruptedException ignored) {, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private void runTest(final long number, final long count) {, +          @Override public void onFailure(Throwable t, Response response) {, +            t.printStackTrace(System.out);, +    final AtomicReference<Throwable> failureRef = new AtomicReference<>();, +      @Override public void onFailure(Throwable t, Response response) {, +        failureRef.set(t);, +    Throwable failure = failureRef.get();, +      throw new RuntimeException(failure);, +      @Override public void onFailure(Throwable t, Response response) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    String name = request.getPath();, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket Replier", name), true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +    final CountDownLatch connectionClose = new CountDownLatch(1);, +    RealWebSocket webSocket =, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            response.getWebSocketListener(), fancyResponse, name) {, +          @Override protected void shutdown() {, +            connectionClose.countDown();, +        };, +, +    webSocket.loopReader();, +    } catch (InterruptedException ignored) {, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private void runTest(final long number, final long count) {, +          @Override public void onFailure(Throwable t, Response response) {, +            t.printStackTrace(System.out);, +    final AtomicReference<Throwable> failureRef = new AtomicReference<>();, +      @Override public void onFailure(Throwable t, Response response) {, +        failureRef.set(t);, +    Throwable failure = failureRef.get();, +      throw new RuntimeException(failure);, +      @Override public void onFailure(Throwable t, Response response) {, +++ b/okhttp-tests/src/test/java/okhttp3/TestLogHandler.java, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.TimeUnit;, +  private final BlockingQueue<String> logs = new LinkedBlockingQueue<>();, +  @Override public void publish(LogRecord logRecord) {, +  @Override public void close() {, +  public String take() throws InterruptedException {, +    String message = logs.poll(10, TimeUnit.SECONDS);, +    if (message == null) {, +      throw new AssertionError("Timed out waiting for log message.");, +    return message;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    String name = request.getPath();, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket Replier", name), true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +    final CountDownLatch connectionClose = new CountDownLatch(1);, +    RealWebSocket webSocket =, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            response.getWebSocketListener(), fancyResponse, name) {, +          @Override protected void shutdown() {, +            connectionClose.countDown();, +        };, +, +    webSocket.loopReader();, +    } catch (InterruptedException ignored) {, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private void runTest(final long number, final long count) {, +          @Override public void onFailure(Throwable t, Response response) {, +            t.printStackTrace(System.out);]
[+++ b/pom.xml, +++ b/pom.xml, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.net.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.net.http.HttpsURLConnectionImpl;, +            return new HttpURLConnectionImpl(url, 80, proxy);, +            return new HttpsURLConnectionImpl(url, 443, proxy);, +++ b/pom.xml, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.net.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.net.http.HttpsURLConnectionImpl;, +            return new HttpURLConnectionImpl(url, 80, proxy);, +            return new HttpsURLConnectionImpl(url, 443, proxy);, +++ b/src/main/java/com/squareup/okhttp/internal/Platform.java, +/*, + * Copyright (C) 2012 Square, Inc., + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal;, +, +import com.squareup.okhttp.OkHttpClient;, +import java.io.OutputStream;, +import java.io.UnsupportedEncodingException;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +import java.util.zip.Deflater;, +import java.util.zip.DeflaterOutputStream;, +import javax.net.ssl.SSLSocket;, +, +/**, + * Access to Platform-specific features necessary for SPDY and advanced TLS., + *, + * <h3>SPDY</h3>, + * SPDY requires a TLS extension called NPN (Next Protocol Negotiation) that's, + * available in Android 4.1+ and OpenJDK 7+ (with the npn-boot extension). It, + * also requires a recent version of {@code DeflaterOutputStream} that is, + * public API in Java 7 and callable via reflection in Android 4.1+., + */, +public class Platform {, +    private static final Platform PLATFORM = findPlatform();, +, +    private Constructor<DeflaterOutputStream> deflaterConstructor;, +, +    public static Platform get() {, +        return PLATFORM;, +    }, +, +    public void makeTlsTolerant(SSLSocket socket, String uriHost, boolean tlsTolerant) {, +        if (!tlsTolerant) {, +            socket.setEnabledProtocols(new String[]{"SSLv3"});, +        }, +    }, +, +    /**, +     * Returns the negotiated protocol, or null if no protocol was negotiated., +     */, +    public byte[] getNpnSelectedProtocol(SSLSocket socket) {, +        return null;, +    }, +, +    /**, +     * Sets client-supported protocols on a socket to send to a server. The, +     * protocols are only sent if the socket implementation supports NPN., +     */, +    public void setNpnProtocols(SSLSocket socket, byte[] npnProtocols) {, +    }, +, +    /**, +     * Returns a deflater output stream that supports SYNC_FLUSH for SPDY name, +     * value blocks. This throws an {@link UnsupportedOperationException} on, +     * Java 6 and earlier where there is no built-in API to do SYNC_FLUSH., +     */, +    public OutputStream newDeflaterOutputStream(, +            OutputStream out, Deflater deflater, boolean syncFlush) {, +        try {, +            Constructor<DeflaterOutputStream> constructor = deflaterConstructor;, +            if (constructor == null) {, +                constructor = deflaterConstructor = DeflaterOutputStream.class.getConstructor(, +                        OutputStream.class, Deflater.class, boolean.class);, +            }, +            return constructor.newInstance(out, deflater, syncFlush);]
[+++ b/.buildscript/deploy_snapshot.sh, +  ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/deploy_snapshot.sh, +  ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.travis.yml, +  - openjdk8, +  - openjdk11, +before_install:, +  - mvn -N io.takari:maven:wrapper -Dmaven=3.6.0, +  - echo "MAVEN_OPTS='-Dmaven.repo.local=$HOME/.m2/repository -Xmx1g -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss:SSS'" > ~/.mavenrc, +install:, +  - ./mvnw dependency:resolve -B, +, +script:, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/.buildscript/deploy_snapshot.sh, +  ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.travis.yml, +  - openjdk8, +  - openjdk11, +before_install:, +  - mvn -N io.takari:maven:wrapper -Dmaven=3.6.0, +  - echo "MAVEN_OPTS='-Dmaven.repo.local=$HOME/.m2/repository -Xmx1g -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss:SSS'" > ~/.mavenrc, +install:, +  - ./mvnw dependency:resolve -B, +, +script:, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +import static java.util.Arrays.asList;, +import static okhttp3.Protocol.HTTP_1_1;, +import static okhttp3.Protocol.HTTP_2;, +            + "tlsVersion=TLS_1_[23] ", +            + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +    server.setProtocols(asList(HTTP_2, HTTP_1_1));, +            "connectFailed: null javax\\.net\\.ssl\\.SSLProtocolException: (?:Unexpected handshake message: client_hello|Handshake message sequence violation, 1)"), +            "callFailed: javax\\.net\\.ssl\\.SSLProtocolException: (?:Unexpected handshake message: client_hello|Handshake message sequence violation, 1)"), +++ b/.buildscript/deploy_snapshot.sh, +  ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.travis.yml, +  - openjdk8, +  - openjdk11, +before_install:, +  - mvn -N io.takari:maven:wrapper -Dmaven=3.6.0, +  - echo "MAVEN_OPTS='-Dmaven.repo.local=$HOME/.m2/repository -Xmx1g -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss:SSS'" > ~/.mavenrc, +install:, +  - ./mvnw dependency:resolve -B, +, +script:, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +import static java.util.Arrays.asList;, +import static okhttp3.Protocol.HTTP_1_1;, +import static okhttp3.Protocol.HTTP_2;, +            + "tlsVersion=TLS_1_[23] ", +            + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +    server.setProtocols(asList(HTTP_2, HTTP_1_1));, +            "connectFailed: null javax\\.net\\.ssl\\.SSLProtocolException: (?:Unexpected handshake message: client_hello|Handshake message sequence violation, 1)"), +            "callFailed: javax\\.net\\.ssl\\.SSLProtocolException: (?:Unexpected handshake message: client_hello|Handshake message sequence violation, 1)"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.internal.platform.PlatformTest.getJvmSpecVersion;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +import static org.junit.Assume.assumeFalse;, +    // TODO https://github.com/square/okhttp/issues/4598, +    // No appropriate protocol (protocol is disabled or cipher suites are inappropriate), +    assumeFalse(getJvmSpecVersion().equals("11"));, +, +    // TODO https://github.com/square/okhttp/issues/4598, +    // No appropriate protocol (protocol is disabled or cipher suites are inappropriate), +    assumeFalse(getJvmSpecVersion().equals("11"));, +, +    // TODO https://github.com/square/okhttp/issues/4598, +//    java.util.NoSuchElementException, +//    at java.base/java.util.ArrayDeque.removeFirst(ArrayDeque.java:363), +//    at okhttp3.internal.tls.BasicCertificateChainCleaner.clean(BasicCertificateChainCleaner.java:58), +//    at okhttp3.CertificatePinner.check(CertificatePinner.java:166), +    assumeFalse(getJvmSpecVersion().equals("11"));, +, +++ b/.buildscript/deploy_snapshot.sh, +  ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.travis.yml, +  - openjdk8, +  - openjdk11, +before_install:, +  - mvn -N io.takari:maven:wrapper -Dmaven=3.6.0, +  - echo "MAVEN_OPTS='-Dmaven.repo.local=$HOME/.m2/repository -Xmx1g -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss:SSS'" > ~/.mavenrc, +install:, +  - ./mvnw dependency:resolve -B, +, +script:, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +import static java.util.Arrays.asList;, +import static okhttp3.Protocol.HTTP_1_1;, +import static okhttp3.Protocol.HTTP_2;, +            + "tlsVersion=TLS_1_[23] "]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import io.airlift.airline.Arguments;, +import io.airlift.airline.Command;, +import io.airlift.airline.HelpOption;, +import io.airlift.airline.Option;, +import io.airlift.airline.SingleCommand;, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import io.airlift.airline.Arguments;, +import io.airlift.airline.Command;, +import io.airlift.airline.HelpOption;, +import io.airlift.airline.Option;, +import io.airlift.airline.SingleCommand;, +++ b/okhttp/src/main/java/okhttp3/Call.java, +   * failure exception. If you {@link #cancel} a request before it completes the callback will not, +   * be invoked., +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import io.airlift.airline.Arguments;, +import io.airlift.airline.Command;, +import io.airlift.airline.HelpOption;, +import io.airlift.airline.Option;, +import io.airlift.airline.SingleCommand;, +++ b/okhttp/src/main/java/okhttp3/Call.java, +   * failure exception. If you {@link #cancel} a request before it completes the callback will not, +   * be invoked., +++ b/pom.xml, +    <airlift.version>0.7</airlift.version>]
[+++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0-SNAPSHOT</version>]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName(null);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.GzipSink;, +import okio.Okio;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSession;, +    assertCached(true,  204);, +    assertCached(false, 206); //Electing to not cache partial responses, +    assertCached(false, 400);, +    assertCached(false, 401);, +    assertCached(false, 402);, +    assertCached(false, 403);, +    assertCached(true,  404);, +    assertCached(true,  405);, +    assertCached(false, 406);, +    assertCached(false, 411);, +    assertCached(false, 412);, +    assertCached(false, 413);, +    assertCached(true,  414);, +    assertCached(false, 415);, +    assertCached(false, 416);, +    assertCached(false, 417);, +    assertCached(false, 418);, +, +    assertCached(false, 500);, +    assertCached(true,  501);, +    assertCached(false, 502);]
[+++ b/benchmarks/pom.xml, +    <version>3.9.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.9.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.9.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.9.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.9.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.9.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.9.0</version>, +++ b/okcurl/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.9.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.9.0</version>]
[+++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.travis.yml, +    - secure: "S0BTJVrF4fUCwhTdmoQY6LYr5r1wgXZ/p8lc5bIgUUsc1Ckalwt7s/GDwPuLJ4702sI5t56Eye2iEIMUjeFJKqebZRsX1C5oYsYFxGi3BGlepstYpmj0gLXuSWqCLniS9zmHXCxLhLkC6KxPVjhDlbq76XQx0o3K1J8oEIj/PCE=", +    - secure: "awV7yLXURjlPbTOladsNDZk74KYCNXoiZpAP0gQFfK4Sc0fc7+kg8z/yhdWXeTxjsIZ6m0dVDHTqnH8ytnydwXpBam8JdQJ+EAWA6R3Svq1BR1bzl/PcZUoz+Xn8lMXdU3yA1p4qtQlUhMxwsE3MOVe24HSDJPAu4XeWFj1j3qo=", +    - $HOME/.m2, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.travis.yml, +    - secure: "S0BTJVrF4fUCwhTdmoQY6LYr5r1wgXZ/p8lc5bIgUUsc1Ckalwt7s/GDwPuLJ4702sI5t56Eye2iEIMUjeFJKqebZRsX1C5oYsYFxGi3BGlepstYpmj0gLXuSWqCLniS9zmHXCxLhLkC6KxPVjhDlbq76XQx0o3K1J8oEIj/PCE=", +    - secure: "awV7yLXURjlPbTOladsNDZk74KYCNXoiZpAP0gQFfK4Sc0fc7+kg8z/yhdWXeTxjsIZ6m0dVDHTqnH8ytnydwXpBam8JdQJ+EAWA6R3Svq1BR1bzl/PcZUoz+Xn8lMXdU3yA1p4qtQlUhMxwsE3MOVe24HSDJPAu4XeWFj1j3qo=", +    - $HOME/.m2, +++ b/gradle.properties, +VERSION_NAME=3.15.0-SNAPSHOT, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.travis.yml, +    - secure: "S0BTJVrF4fUCwhTdmoQY6LYr5r1wgXZ/p8lc5bIgUUsc1Ckalwt7s/GDwPuLJ4702sI5t56Eye2iEIMUjeFJKqebZRsX1C5oYsYFxGi3BGlepstYpmj0gLXuSWqCLniS9zmHXCxLhLkC6KxPVjhDlbq76XQx0o3K1J8oEIj/PCE=", +    - secure: "awV7yLXURjlPbTOladsNDZk74KYCNXoiZpAP0gQFfK4Sc0fc7+kg8z/yhdWXeTxjsIZ6m0dVDHTqnH8ytnydwXpBam8JdQJ+EAWA6R3Svq1BR1bzl/PcZUoz+Xn8lMXdU3yA1p4qtQlUhMxwsE3MOVe24HSDJPAu4XeWFj1j3qo=", +    - $HOME/.m2, +++ b/gradle.properties, +VERSION_NAME=3.15.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.travis.yml, +    - secure: "S0BTJVrF4fUCwhTdmoQY6LYr5r1wgXZ/p8lc5bIgUUsc1Ckalwt7s/GDwPuLJ4702sI5t56Eye2iEIMUjeFJKqebZRsX1C5oYsYFxGi3BGlepstYpmj0gLXuSWqCLniS9zmHXCxLhLkC6KxPVjhDlbq76XQx0o3K1J8oEIj/PCE=", +    - secure: "awV7yLXURjlPbTOladsNDZk74KYCNXoiZpAP0gQFfK4Sc0fc7+kg8z/yhdWXeTxjsIZ6m0dVDHTqnH8ytnydwXpBam8JdQJ+EAWA6R3Svq1BR1bzl/PcZUoz+Xn8lMXdU3yA1p4qtQlUhMxwsE3MOVe24HSDJPAu4XeWFj1j3qo=", +    - $HOME/.m2, +++ b/gradle.properties, +VERSION_NAME=3.15.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +++ /dev/null, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>]
[+++ b/benchmarks/pom.xml, +    <version>3.1.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.1.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.1.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0</version>]
[+++ b/pom.xml, +                    <consoleOutput>true</consoleOutput>]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.RecordingEventListener.CallEvent;, +import okhttp3.RecordingEventListener.ConnectEnd;, +import okhttp3.RecordingEventListener.ConnectStart;, +import okhttp3.RecordingEventListener.ConnectionAcquired;, +import okhttp3.RecordingEventListener.ConnectionReleased;, +import okhttp3.RecordingEventListener.DnsEnd;, +import okhttp3.RecordingEventListener.DnsStart;, +import okhttp3.RecordingEventListener.FetchEnd;, +import okhttp3.RecordingEventListener.FetchStart;, +import okhttp3.RecordingEventListener.RequestHeadersEnd;, +import okhttp3.RecordingEventListener.RequestHeadersStart;, +import okhttp3.RecordingEventListener.ResponseBodyEnd;, +import okhttp3.RecordingEventListener.ResponseBodyStart;, +import okhttp3.RecordingEventListener.ResponseHeadersEnd;, +import okhttp3.RecordingEventListener.ResponseHeadersStart;, +import okhttp3.RecordingEventListener.SecureConnectEnd;, +import okhttp3.RecordingEventListener.SecureConnectStart;, +    // TODO ResponseBodyEnd should not be last event, +    List<String> expectedEvents = Arrays.asList("FetchStart",, +        "DnsStart", "DnsEnd", "ConnectStart", "ConnectEnd",, +        "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ConnectionReleased", "FetchEnd", "ResponseBodyEnd");, +    // TODO ResponseBodyEnd should not be last event, +    List<String> expectedEvents = Arrays.asList("FetchStart",, +        "DnsStart", "DnsEnd", "ConnectStart", "SecureConnectStart",, +        "SecureConnectEnd", "ConnectEnd",, +        "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ConnectionReleased", "FetchEnd", "ResponseBodyEnd");, +    List<String> recordedEvents = listener.recordedEventTypes();, +    assertFalse(recordedEvents.contains("DnsStart"));, +    assertFalse(recordedEvents.contains("DnsEnd"));, +    List<String> recordedEvents = listener.recordedEventTypes();, +    assertFalse(recordedEvents.contains("SecureConnectStart"));, +    assertFalse(recordedEvents.contains("SecureConnectEnd"));, +    List<String> remainingEvents = listener.recordedEventTypes();, +    assertFalse(remainingEvents.contains("ConnectionAcquired"));, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.RecordingEventListener.CallEvent;, +import okhttp3.RecordingEventListener.ConnectEnd;, +import okhttp3.RecordingEventListener.ConnectStart;, +import okhttp3.RecordingEventListener.ConnectionAcquired;, +import okhttp3.RecordingEventListener.ConnectionReleased;, +import okhttp3.RecordingEventListener.DnsEnd;, +import okhttp3.RecordingEventListener.DnsStart;, +import okhttp3.RecordingEventListener.FetchEnd;, +import okhttp3.RecordingEventListener.FetchStart;, +import okhttp3.RecordingEventListener.RequestHeadersEnd;, +import okhttp3.RecordingEventListener.RequestHeadersStart;, +import okhttp3.RecordingEventListener.ResponseBodyEnd;, +import okhttp3.RecordingEventListener.ResponseBodyStart;, +import okhttp3.RecordingEventListener.ResponseHeadersEnd;, +import okhttp3.RecordingEventListener.ResponseHeadersStart;, +import okhttp3.RecordingEventListener.SecureConnectEnd;, +import okhttp3.RecordingEventListener.SecureConnectStart;, +    // TODO ResponseBodyEnd should not be last event, +    List<String> expectedEvents = Arrays.asList("FetchStart",, +        "DnsStart", "DnsEnd", "ConnectStart", "ConnectEnd",, +        "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ConnectionReleased", "FetchEnd", "ResponseBodyEnd");, +    // TODO ResponseBodyEnd should not be last event, +    List<String> expectedEvents = Arrays.asList("FetchStart",, +        "DnsStart", "DnsEnd", "ConnectStart", "SecureConnectStart",, +        "SecureConnectEnd", "ConnectEnd",, +        "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ConnectionReleased", "FetchEnd", "ResponseBodyEnd");, +    List<String> recordedEvents = listener.recordedEventTypes();, +    assertFalse(recordedEvents.contains("DnsStart"));, +    assertFalse(recordedEvents.contains("DnsEnd"));, +    List<String> recordedEvents = listener.recordedEventTypes();, +    assertFalse(recordedEvents.contains("SecureConnectStart"));, +    assertFalse(recordedEvents.contains("SecureConnectEnd"));, +    List<String> remainingEvents = listener.recordedEventTypes();, +    assertFalse(remainingEvents.contains("ConnectionAcquired"));, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.Proxy;, +import java.util.ArrayDeque;]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1].]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.tls.HeldCertificate;, +import static java.nio.charset.StandardCharsets.UTF_8;, +    connection.getOutputStream().write("ABCDEF".getBytes(UTF_8));, +    connection.getOutputStream().write("request".getBytes(UTF_8));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.tls.HeldCertificate;, +import static java.nio.charset.StandardCharsets.UTF_8;, +    connection.getOutputStream().write("ABCDEF".getBytes(UTF_8));, +    connection.getOutputStream().write("request".getBytes(UTF_8));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.tls.HeldCertificate;, +import static java.nio.charset.StandardCharsets.UTF_8;, +    connection.getOutputStream().write("ABCDEF".getBytes(UTF_8));, +    connection.getOutputStream().write("request".getBytes(UTF_8));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    return elements == null ? Collections.emptyList() : Util.immutableList(elements);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.tls.HeldCertificate;, +import static java.nio.charset.StandardCharsets.UTF_8;, +    connection.getOutputStream().write("ABCDEF".getBytes(UTF_8));, +    connection.getOutputStream().write("request".getBytes(UTF_8));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    return elements == null ? Collections.emptyList() : Util.immutableList(elements);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import static java.nio.charset.StandardCharsets.UTF_8;, +    final byte[] response = "ResponseString".getBytes(UTF_8);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.tls.HeldCertificate;, +import static java.nio.charset.StandardCharsets.UTF_8;, +    connection.getOutputStream().write("ABCDEF".getBytes(UTF_8));, +    connection.getOutputStream().write("request".getBytes(UTF_8));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    return elements == null ? Collections.emptyList() : Util.immutableList(elements);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import static java.nio.charset.StandardCharsets.UTF_8;, +    final byte[] response = "ResponseString".getBytes(UTF_8);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +import static java.nio.charset.StandardCharsets.UTF_8;, +        return new ByteArrayInputStream("HelloWorld".getBytes(UTF_8));, +    final List<Certificate> localCertificates = Arrays.asList(LOCAL_CERT);, +    final List<Certificate> serverCertificates = Arrays.asList(SERVER_CERT);, +        return new ByteArrayInputStream("HelloWorld".getBytes(UTF_8));, +        Arrays.asList(SERVER_CERT), Arrays.asList(LOCAL_CERT));, +        Arrays.asList(SERVER_CERT), Arrays.asList(LOCAL_CERT));, +      JavaApiConverter.extractStatusLine(Collections.emptyMap());, +          new ByteArrayInputStream(certificate.getBytes(UTF_8)));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.tls.HeldCertificate;, +import static java.nio.charset.StandardCharsets.UTF_8;, +    connection.getOutputStream().write("ABCDEF".getBytes(UTF_8));, +    connection.getOutputStream().write("request".getBytes(UTF_8));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,, +        Collections.emptyList(), 0, new Buffer(), 0, socket);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    return elements == null ? Collections.emptyList() : Util.immutableList(elements);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import static java.nio.charset.StandardCharsets.UTF_8;, +    final byte[] response = "ResponseString".getBytes(UTF_8);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +import static java.nio.charset.StandardCharsets.UTF_8;, +        return new ByteArrayInputStream("HelloWorld".getBytes(UTF_8));, +    final List<Certificate> localCertificates = Arrays.asList(LOCAL_CERT);, +    final List<Certificate> serverCertificates = Arrays.asList(SERVER_CERT);, +        return new ByteArrayInputStream("HelloWorld".getBytes(UTF_8));, +        Arrays.asList(SERVER_CERT), Arrays.asList(LOCAL_CERT));, +        Arrays.asList(SERVER_CERT), Arrays.asList(LOCAL_CERT));]
[+++ b/README.md, +An HTTP+SPDY client for Android and Java applications., +Download [the latest JAR][1] or grab via Maven:, +Known Issues, +------------, +, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [2]: http://developer.android.com/reference/java/net/ProxySelector.html, +++ b/README.md, +An HTTP+SPDY client for Android and Java applications., +Download [the latest JAR][1] or grab via Maven:, +Known Issues, +------------, +, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [2]: http://developer.android.com/reference/java/net/ProxySelector.html, +++ b/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <version>2.9</version>, +        <configuration>, +          <excludePackageNames>com.squareup.okhttp.internal:com.squareup.okhttp.internal.*</excludePackageNames>, +        </configuration>, +      </plugin>]
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.io.InterruptedIOException;, +import java.net.HttpURLConnection;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReference;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okio.BufferedSink;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static okhttp3.TestUtil.defaultClient;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class WholeOperationTimeoutTest {, +  /** A large response body. Smaller bodies might successfully read after the socket is closed! */, +  private static final String BIG_ENOUGH_BODY = TestUtil.repeat('a', 64 * 1024);, +, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  private OkHttpClient client = defaultClient();, +, +  @Test public void timeoutWritingRequest() throws Exception {, +    server.enqueue(new MockResponse());, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(sleepingRequestBody(500)), +        .build();, +, +    Call call = client.newCall(request);, +    call.timeout().timeout(250, TimeUnit.MILLISECONDS);, +    try {, +      call.execute();, +      fail();, +    } catch (IOException e) {, +      assertTrue(call.isCanceled());, +    }, +  }, +, +  @Test public void timeoutWritingRequestWithEnqueue() throws Exception {, +    server.enqueue(new MockResponse());, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(sleepingRequestBody(500)), +        .build();, +, +    final CountDownLatch latch = new CountDownLatch(1);, +    final AtomicReference<Throwable> exceptionRef = new AtomicReference<>();, +, +    Call call = client.newCall(request);, +    call.timeout().timeout(250, TimeUnit.MILLISECONDS);, +    call.enqueue(new Callback() {, +      @Override public void onFailure(Call call, IOException e) {, +        exceptionRef.set(e);]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, +        try {, +        } catch (InterruptedIOException e) {, +          throw new SocketTimeoutException(e.getMessage());, +        }, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, +        try {, +        } catch (InterruptedIOException e) {, +          throw new SocketTimeoutException(e.getMessage());, +        }, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/StreamedRequestBody.java, +import okio.Pipe;, +    initOutputStream(Okio.buffer(pipe.sink()), expectedContentLength);, +    while (pipe.source().read(buffer, 8192) != -1L) {, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, +        try {, +        } catch (InterruptedIOException e) {, +          throw new SocketTimeoutException(e.getMessage());, +        }, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/StreamedRequestBody.java, +import okio.Pipe;, +    initOutputStream(Okio.buffer(pipe.sink()), expectedContentLength);, +    while (pipe.source().read(buffer, 8192) != -1L) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, +        try {, +        } catch (InterruptedIOException e) {, +          throw new SocketTimeoutException(e.getMessage());, +        }, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/StreamedRequestBody.java, +import okio.Pipe;, +    initOutputStream(Okio.buffer(pipe.sink()), expectedContentLength);, +    while (pipe.source().read(buffer, 8192) != -1L) {, +++ /dev/null, +++ b/pom.xml, +    <okio.version>1.9.0</okio.version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, + /*, +  * Copyright (C) 2012 The Android Open Source Project, +  *, +  * Licensed under the Apache License, Version 2.0 (the "License");, +  * you may not use this file except in compliance with the License., +  * You may obtain a copy of the License at, +  *, +  *      http://www.apache.org/licenses/LICENSE-2.0, +  *, +  * Unless required by applicable law or agreed to in writing, software, +  * distributed under the License is distributed on an "AS IS" BASIS,, +  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +  * See the License for the specific language governing permissions and, +  * limitations under the License., +  */, +package okhttp3.internal;, +, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertSame;, +, +public class UtilTest {, +  @Test, +  public void testAssertionError() {, +    NullPointerException nullPointerException = new NullPointerException();, +    AssertionError ae = Util.assertionError("npe", nullPointerException);, +    assertSame(nullPointerException, ae.getCause());, +    assertEquals("npe", ae.getMessage());, +  }, +}, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, + /*, +  * Copyright (C) 2012 The Android Open Source Project, +  *, +  * Licensed under the Apache License, Version 2.0 (the "License");, +  * you may not use this file except in compliance with the License., +  * You may obtain a copy of the License at, +  *, +  *      http://www.apache.org/licenses/LICENSE-2.0, +  *, +  * Unless required by applicable law or agreed to in writing, software, +  * distributed under the License is distributed on an "AS IS" BASIS,, +  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +  * See the License for the specific language governing permissions and, +  * limitations under the License., +  */, +package okhttp3.internal;, +, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertSame;, +, +public class UtilTest {, +  @Test, +  public void testAssertionError() {, +    NullPointerException nullPointerException = new NullPointerException();, +    AssertionError ae = Util.assertionError("npe", nullPointerException);, +    assertSame(nullPointerException, ae.getCause());, +    assertEquals("npe", ae.getMessage());, +  }, +}, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +    AssertionError assertionError = new AssertionError(message);, +    try {, +      assertionError.initCause(e);, +    } catch (IllegalStateException ise) {, +      // ignored, shouldn't happen, +    }, +    return assertionError;]
[+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  final @Nullable SSLSocketFactory sslSocketFactory;, +  final @Nullable CertificateChainCleaner certificateChainCleaner;, +  public Proxy proxy() {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  final @Nullable SSLSocketFactory sslSocketFactory;, +  final @Nullable CertificateChainCleaner certificateChainCleaner;, +  public Proxy proxy() {, +++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_181</id>, +      <activation>, +        <jdk>1.8.0_181</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.12.v20180117</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import com.google.mockwebserver.RecordedRequest;, +import java.io.ByteArrayInputStream;, +import java.util.Arrays;, +import org.apache.http.entity.ByteArrayEntity;, +import org.apache.http.entity.InputStreamEntity;, +import org.junit.Before;, +import static org.junit.Assert.assertTrue;, +  private MockWebServer server;, +  private OkApacheClient client;, +, +  @Before public void setUp() throws IOException {, +    client = new OkApacheClient();, +    server = new MockWebServer();, +    server.play();, +  }, +, +  @Test public void postByteEntity() throws Exception {, +    server.enqueue(new MockResponse());, +, +    final HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    byte[] body = "Hello, world!".getBytes("UTF-8");, +    post.setEntity(new ByteArrayEntity(body));, +    client.execute(post);, +, +    RecordedRequest request = server.takeRequest();, +    assertTrue(Arrays.equals(body, request.getBody()));, +    assertEquals(request.getHeader("Content-Length"), "13");, +  }, +, +  @Test public void postInputStreamEntity() throws Exception {, +    server.enqueue(new MockResponse());, +, +    final HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    byte[] body = "Hello, world!".getBytes("UTF-8");, +    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(body), body.length));, +    client.execute(post);, +, +    RecordedRequest request = server.takeRequest();, +    assertTrue(Arrays.equals(body, request.getBody()));, +    assertEquals(request.getHeader("Content-Length"), "13");, +  }, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import com.google.mockwebserver.RecordedRequest;, +import java.io.ByteArrayInputStream;, +import java.util.Arrays;, +import org.apache.http.entity.ByteArrayEntity;, +import org.apache.http.entity.InputStreamEntity;, +import org.junit.Before;, +import static org.junit.Assert.assertTrue;, +  private MockWebServer server;, +  private OkApacheClient client;, +, +  @Before public void setUp() throws IOException {, +    client = new OkApacheClient();, +    server = new MockWebServer();, +    server.play();, +  }, +, +  @Test public void postByteEntity() throws Exception {, +    server.enqueue(new MockResponse());, +, +    final HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    byte[] body = "Hello, world!".getBytes("UTF-8");, +    post.setEntity(new ByteArrayEntity(body));, +    client.execute(post);, +, +    RecordedRequest request = server.takeRequest();, +    assertTrue(Arrays.equals(body, request.getBody()));, +    assertEquals(request.getHeader("Content-Length"), "13");, +  }, +, +  @Test public void postInputStreamEntity() throws Exception {, +    server.enqueue(new MockResponse());, +, +    final HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    byte[] body = "Hello, world!".getBytes("UTF-8");, +    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(body), body.length));, +    client.execute(post);, +, +    RecordedRequest request = server.takeRequest();, +    assertTrue(Arrays.equals(body, request.getBody()));, +    assertEquals(request.getHeader("Content-Length"), "13");, +  }, +++ b/okhttp/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java]
[+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +    Request request1 = new Request.Builder(), +        .url("http://" + TestUtil.UNREACHABLE_ADDRESS), +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +    Request request1 = new Request.Builder(), +        .url("http://" + TestUtil.UNREACHABLE_ADDRESS), +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.duplex.HeadersListener;, +      @Override public void duplex(Request.Builder requestBuilder, String method) {, +        requestBuilder.duplex(method);, +      }, +, +, +      @Override public void headersListener(Response response, HeadersListener headersListener) {, +        response.headersListener(headersListener);, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +    Request request1 = new Request.Builder(), +        .url("http://" + TestUtil.UNREACHABLE_ADDRESS), +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.duplex.HeadersListener;, +      @Override public void duplex(Request.Builder requestBuilder, String method) {, +        requestBuilder.duplex(method);, +      }, +, +, +      @Override public void headersListener(Response response, HeadersListener headersListener) {, +        response.headersListener(headersListener);, +      }, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import okhttp3.internal.duplex.HeadersListener;, +  public abstract void duplex(Request.Builder requestBuilder, String method);, +, +, +  public abstract void headersListener(Response response, HeadersListener headersListener);]
[+++ b/pom.xml]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import org.junit.Rule;, +import org.junit.rules.Timeout;, +  @Rule public MockWebServer mockWebServer = new MockWebServer();, +  @Rule public Timeout globalTimeout = Timeout.seconds(30);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import org.junit.Rule;, +import org.junit.rules.Timeout;, +  @Rule public MockWebServer mockWebServer = new MockWebServer();, +  @Rule public Timeout globalTimeout = Timeout.seconds(30);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.rules.Timeout;, +  @Rule public Timeout globalTimeout = Timeout.seconds(30);, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import org.junit.Rule;, +import org.junit.rules.Timeout;, +  @Rule public MockWebServer mockWebServer = new MockWebServer();, +  @Rule public Timeout globalTimeout = Timeout.seconds(30);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.rules.Timeout;, +  @Rule public Timeout globalTimeout = Timeout.seconds(30);, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +import org.junit.Rule;, +import org.junit.rules.Timeout;, +  @Rule public Timeout globalTimeout = Timeout.seconds(30);, +]
[+++ b/CHANGELOG.md, +Version 1.2 *(2013-08-11)*, +--------------------------, +++ b/CHANGELOG.md, +Version 1.2 *(2013-08-11)*, +--------------------------, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.2 *(2013-08-11)*, +--------------------------, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, +          SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler), +              .build();, +    HTTP_11, SPDY_3, +++ b/CHANGELOG.md, +Version 1.2 *(2013-08-11)*, +--------------------------, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, +          SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler), +              .build();, +    HTTP_11, SPDY_3, +++ b/okhttp-apache/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.2 *(2013-08-11)*, +--------------------------, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, +          SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler), +              .build();, +    HTTP_11, SPDY_3, +++ b/okhttp-apache/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.2 *(2013-08-11)*, +--------------------------, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, +          SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler), +              .build();, +    HTTP_11, SPDY_3, +++ b/okhttp-apache/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ /dev/null, +++ b/CHANGELOG.md, +Version 1.2 *(2013-08-11)*, +--------------------------, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, +          SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler), +              .build();, +    HTTP_11, SPDY_3, +++ b/okhttp-apache/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/CHANGELOG.md, +Version 1.2 *(2013-08-11)*, +--------------------------, +++ b/mockwebserver/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, +          SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler), +              .build();, +    HTTP_11, SPDY_3, +++ b/okhttp-apache/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.3-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +    spdyReader = new SpdyReader(builder.in);, +    spdyWriter = new SpdyWriter(builder.out);]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +    listener.forbidLock(client.connectionPool());, +    listener.forbidLock(client.dispatcher());, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +    assertEquals("abc", response.body().string());, +    List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "ConnectEnd", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "FetchEnd", "ResponseBodyEnd", "ConnectionReleased");, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +    assertEquals("abc", response.body().string());, +    List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "SecureConnectStart", "SecureConnectEnd",, +        "ConnectEnd", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "FetchEnd", "ResponseBodyEnd",, +        "ConnectionReleased");, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +    listener.forbidLock(client.connectionPool());, +    listener.forbidLock(client.dispatcher());, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +    assertEquals("abc", response.body().string());, +    List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "ConnectEnd", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "FetchEnd", "ResponseBodyEnd", "ConnectionReleased");, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +    assertEquals("abc", response.body().string());, +    List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "SecureConnectStart", "SecureConnectEnd",, +        "ConnectEnd", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "FetchEnd", "ResponseBodyEnd",, +        "ConnectionReleased");, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +import static org.junit.Assert.assertFalse;, +  final List<Object> forbiddenLocks = new ArrayList<>();, +, +  /** Confirm that the thread does not hold a lock on {@code lock} during the callback. */, +  public void forbidLock(Object lock) {, +    forbiddenLocks.add(lock);, +  }, +, +    for (Object lock : forbiddenLocks) {, +      assertFalse(lock.toString(), Thread.holdsLock(lock));, +    }, +, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +    listener.forbidLock(client.connectionPool());, +    listener.forbidLock(client.dispatcher());, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +    assertEquals("abc", response.body().string());, +    List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "ConnectEnd", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "FetchEnd", "ResponseBodyEnd", "ConnectionReleased");, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +    assertEquals("abc", response.body().string());, +    List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "SecureConnectStart", "SecureConnectEnd",, +        "ConnectEnd", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "FetchEnd", "ResponseBodyEnd",, +        "ConnectionReleased");, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +import static org.junit.Assert.assertFalse;, +  final List<Object> forbiddenLocks = new ArrayList<>();, +, +  /** Confirm that the thread does not hold a lock on {@code lock} during the callback. */, +  public void forbidLock(Object lock) {, +    forbiddenLocks.add(lock);, +  }, +, +    for (Object lock : forbiddenLocks) {, +      assertFalse(lock.toString(), Thread.holdsLock(lock));, +    }, +, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +import okhttp3.Connection;, +    boolean foundPooledConnection = false;, +    RealConnection result = null;, +    Route selectedRoute = null;, +        foundPooledConnection = true;, +        result = connection;, +      } else {, +        selectedRoute = route;, +      }, +    // If we found a pooled connection, we're done., +    if (foundPooledConnection) {, +      eventListener.connectionAcquired(call, result);, +      return result;, +            foundPooledConnection = true;, +            result = connection;, +            break;]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(server.getPort() > 0).isTrue();, +      assertThat(e.getMessage().contains("refused")).isTrue();, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(server.getPort() > 0).isTrue();, +      assertThat(e.getMessage().contains("refused")).isTrue();, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    List<Header> responseHeaders = Arrays.asList(, +    List<Header> responseHeaders = Arrays.asList(, +    List<Header> responseHeaders = Arrays.asList(, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(server.getPort() > 0).isTrue();, +      assertThat(e.getMessage().contains("refused")).isTrue();, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    List<Header> responseHeaders = Arrays.asList(, +    List<Header> responseHeaders = Arrays.asList(, +    List<Header> responseHeaders = Arrays.asList(, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import java.util.Arrays;, +      return bootstrapDnsHosts(Arrays.asList(bootstrapDnsHosts));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(server.getPort() > 0).isTrue();, +      assertThat(e.getMessage().contains("refused")).isTrue();, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    List<Header> responseHeaders = Arrays.asList(, +    List<Header> responseHeaders = Arrays.asList(, +    List<Header> responseHeaders = Arrays.asList(, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import java.util.Arrays;, +      return bootstrapDnsHosts(Arrays.asList(bootstrapDnsHosts));, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +import java.util.HashSet;]
[+++ b/okhttp-sse/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-sse/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    call.timeout().clearTimeout();, +++ b/okhttp-sse/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    call.timeout().clearTimeout();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import java.util.concurrent.TimeUnit;, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +    client = client.newBuilder(), +        .callTimeout(100, TimeUnit.MILLISECONDS), +        .build();, +, +    server.enqueue(new MockResponse(), +        .setBodyDelay(500, TimeUnit.MILLISECONDS), +        .setHeader("content-type", "text/event-stream"), +        .setBody("data: hey\n\n"));, +, +    EventSource source = newEventSource();, +, +    assertEquals("/", source.request().url().encodedPath());, +, +    listener.assertOpen();, +    listener.assertEvent(null, null, "hey");, +    listener.assertClose();, +  }, +, +    EventSource.Factory factory = EventSources.createFactory(client);, +++ b/okhttp-sse/pom.xml, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    call.timeout().clearTimeout();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import java.util.concurrent.TimeUnit;, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +    client = client.newBuilder(), +        .callTimeout(100, TimeUnit.MILLISECONDS), +        .build();, +, +    server.enqueue(new MockResponse(), +        .setBodyDelay(500, TimeUnit.MILLISECONDS), +        .setHeader("content-type", "text/event-stream"), +        .setBody("data: hey\n\n"));, +, +    EventSource source = newEventSource();, +, +    assertEquals("/", source.request().url().encodedPath());, +, +    listener.assertOpen();, +    listener.assertEvent(null, null, "hey");, +    listener.assertClose();, +  }, +, +    EventSource.Factory factory = EventSources.createFactory(client);, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.UnknownHostException;, +import java.util.ArrayList;]
[+++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.1.1-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.1.1-SNAPSHOT</version>]
[+++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/samples/crawler/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>]
[+++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.logging.HttpLoggingInterceptor;, +  @Test public void successfulCallEventSequenceWithListener() throws IOException {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    client = client.newBuilder().addNetworkInterceptor(new HttpLoggingInterceptor().setLevel(, +        HttpLoggingInterceptor.Level.BODY)).build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    assertEquals("abc", response.body().string());, +    response.body().close();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.logging.HttpLoggingInterceptor;, +  @Test public void successfulCallEventSequenceWithListener() throws IOException {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    client = client.newBuilder().addNetworkInterceptor(new HttpLoggingInterceptor().setLevel(, +        HttpLoggingInterceptor.Level.BODY)).build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    assertEquals("abc", response.body().string());, +    response.body().close();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +    return ResponseBody.create(mediaType, ByteString.decodeHex(hex));, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.logging.HttpLoggingInterceptor;, +  @Test public void successfulCallEventSequenceWithListener() throws IOException {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    client = client.newBuilder().addNetworkInterceptor(new HttpLoggingInterceptor().setLevel(, +        HttpLoggingInterceptor.Level.BODY)).build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    assertEquals("abc", response.body().string());, +    response.body().close();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +    public Builder certificateChain(HeldCertificate serverCert, HeldCertificate... chain) {, +      return certificateChain(serverCert.keyPair, serverCert.certificate, certificates);, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +    public Builder certificateChain(HeldCertificate serverCert, HeldCertificate... chain) {, +      return certificateChain(serverCert.keyPair, serverCert.certificate, certificates);, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +    public Builder certificateChain(HeldCertificate serverCert, HeldCertificate... chain) {, +      return certificateChain(serverCert.keyPair, serverCert.certificate, certificates);, +++ /dev/null, +++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_102</id>, +      <activation>, +        <jdk>1.8.0_102</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +import static org.junit.Assert.assertEquals;, +, +public final class FakeDns implements Dns {, +  private List<String> requestedHosts = new ArrayList<>();, +  private List<InetAddress> addresses = Collections.emptyList();, +, +  /** Sets the addresses to be returned by this fake DNS service. */, +  public FakeDns addresses(List<InetAddress> addresses) {, +    this.addresses = new ArrayList<>(addresses);, +    return this;, +  }, +, +  /** Sets the service to throw when a hostname is requested. */, +  public FakeDns unknownHost() {, +    this.addresses = Collections.emptyList();, +    return this;, +  }, +, +  public InetAddress address(int index) {, +    return addresses.get(index);, +  }, +, +  @Override public List<InetAddress> lookup(String hostname) throws UnknownHostException {, +    requestedHosts.add(hostname);, +    if (addresses.isEmpty()) throw new UnknownHostException();, +    return addresses;, +  }, +, +  public void assertRequests(String... expectedHosts) {, +    assertEquals(Arrays.asList(expectedHosts), requestedHosts);, +    requestedHosts.clear();, +  }, +}, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +import static org.junit.Assert.assertEquals;, +, +public final class FakeDns implements Dns {]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1].]
[+++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  /** Returns true if there is a failure that retrying might fix. */, +  boolean hasStreamFailure() {, +      return hasStreamFailure;, +    }, +  }, +  /** Returns true if a current route is still good or if there are routes we haven't tried yet. */, +  boolean hasRouteToTry() {, +    synchronized (connectionPool) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  /** Returns true if there is a failure that retrying might fix. */, +  boolean hasStreamFailure() {, +      return hasStreamFailure;, +    }, +  }, +  /** Returns true if a current route is still good or if there are routes we haven't tried yet. */, +  boolean hasRouteToTry() {, +    synchronized (connectionPool) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (sameConnection(this.request.url(), request.url()) && exchangeFinder.hasRouteToTry()) {, +        return; // Already ready., +      }, +    return exchangeFinder.hasStreamFailure() && exchangeFinder.hasRouteToTry();, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  /** Returns true if there is a failure that retrying might fix. */, +  boolean hasStreamFailure() {, +      return hasStreamFailure;, +    }, +  }, +  /** Returns true if a current route is still good or if there are routes we haven't tried yet. */, +  boolean hasRouteToTry() {, +    synchronized (connectionPool) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (sameConnection(this.request.url(), request.url()) && exchangeFinder.hasRouteToTry()) {, +        return; // Already ready., +      }, +    return exchangeFinder.hasStreamFailure() && exchangeFinder.hasRouteToTry();, +++ b/okhttp/src/test/java/okhttp3/CallTest.java, +  /** https://github.com/square/okhttp/issues/4875 */, +  @Test public void interceptorRecoversWhenRoutesExhausted() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));, +    server.enqueue(new MockResponse());, +, +    client = client.newBuilder(), +        .addInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            try {, +              chain.proceed(chain.request());, +              throw new AssertionError();, +            } catch (IOException expected) {, +              return chain.proceed(chain.request());, +            }, +          }, +        }), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    executeSynchronously(request), +        .assertCode(200);, +  }, +]
[+++ b/README.md, +An HTTP+SPDY client for Android and Java applications., +Download [the latest JAR][1] or grab via Maven:, +Known Issues, +------------, +, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [2]: http://developer.android.com/reference/java/net/ProxySelector.html, +++ b/README.md, +An HTTP+SPDY client for Android and Java applications., +Download [the latest JAR][1] or grab via Maven:, +Known Issues, +------------, +, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [2]: http://developer.android.com/reference/java/net/ProxySelector.html, +++ b/deploy_website.sh, +rm javadoc.zip, +++ b/README.md, +An HTTP+SPDY client for Android and Java applications., +Download [the latest JAR][1] or grab via Maven:, +Known Issues, +------------, +, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [2]: http://developer.android.com/reference/java/net/ProxySelector.html, +++ b/deploy_website.sh, +rm javadoc.zip, +++ b/okhttp-apache/pom.xml, +++ b/README.md, +An HTTP+SPDY client for Android and Java applications., +Download [the latest JAR][1] or grab via Maven:, +Known Issues, +------------, +, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [2]: http://developer.android.com/reference/java/net/ProxySelector.html, +++ b/deploy_website.sh, +rm javadoc.zip, +++ b/okhttp-apache/pom.xml, +++ /dev/null, +++ b/README.md, +An HTTP+SPDY client for Android and Java applications., +Download [the latest JAR][1] or grab via Maven:, +Known Issues, +------------, +, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [2]: http://developer.android.com/reference/java/net/ProxySelector.html, +++ b/deploy_website.sh, +rm javadoc.zip, +++ b/okhttp-apache/pom.xml, +++ /dev/null, +++ b/pom.xml]
[+++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, +    Internal.instance.setCallWebSocket(call);, +    call.enqueue(responseCallback);, +++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, +    Internal.instance.setCallWebSocket(call);, +    call.enqueue(responseCallback);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +, +      @Override public void setCallWebSocket(Call call) {, +        ((RealCall) call).setForWebSocket();, +      }, +++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, +    Internal.instance.setCallWebSocket(call);, +    call.enqueue(responseCallback);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +, +      @Override public void setCallWebSocket(Call call) {, +        ((RealCall) call).setForWebSocket();, +      }, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +  private boolean forWebSocket;, +      Response result = getResponseWithInterceptorChain();, +  synchronized void setForWebSocket() {, +    if (executed) throw new IllegalStateException("Already Executed");, +    this.forWebSocket = true;, +  @Override public void enqueue(Callback responseCallback) {, +    client.dispatcher().enqueue(new AsyncCall(responseCallback));, +    private AsyncCall(Callback responseCallback) {, +        Response response = getResponseWithInterceptorChain();, +  private Response getResponseWithInterceptorChain() throws IOException {, +    Interceptor.Chain chain = new ApplicationInterceptorChain(0, originalRequest);, +    ApplicationInterceptorChain(int index, Request request) {, +      Interceptor.Chain chain = new ApplicationInterceptorChain(index + 1, request);, +, +      return new RetryAndFollowUpInterceptor().intercept(chain);, +   * Performs the request and returns the response. May throw if this call was canceled. This isn't, +   * a regular interceptor because it doesn't delegate to the chain., +  class RetryAndFollowUpInterceptor implements Interceptor {, +    @Override public Response intercept(Chain chain) throws IOException {, +      Request request = chain.request();, +, +      engine = new HttpEngine(client, request.url(), forWebSocket, null, null);, +        Response response = null;, +          response = engine.proceed(request);, +          HttpEngine retryEngine = engine.recover(e.getLastConnectException(), true, null);, +          HttpEngine retryEngine = engine.recover(e, false, null);, +            StreamAllocation streamAllocation = engine.close(null);, +        Request followUp = engine.followUpRequest(response);, +        StreamAllocation streamAllocation = engine.close(response);, +        if (!engine.sameConnection(response, followUp.url())) {, +        engine = new HttpEngine(client, request.url(), forWebSocket, streamAllocation,, +            response);, +      }, +++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, +    Internal.instance.setCallWebSocket(call);, +    call.enqueue(responseCallback);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +, +      @Override public void setCallWebSocket(Call call) {, +        ((RealCall) call).setForWebSocket();, +      }, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +  private boolean forWebSocket;, +      Response result = getResponseWithInterceptorChain();, +  synchronized void setForWebSocket() {, +    if (executed) throw new IllegalStateException("Already Executed");, +    this.forWebSocket = true;, +  @Override public void enqueue(Callback responseCallback) {, +    client.dispatcher().enqueue(new AsyncCall(responseCallback));, +    private AsyncCall(Callback responseCallback) {, +        Response response = getResponseWithInterceptorChain();, +  private Response getResponseWithInterceptorChain() throws IOException {, +    Interceptor.Chain chain = new ApplicationInterceptorChain(0, originalRequest);, +    ApplicationInterceptorChain(int index, Request request) {, +      Interceptor.Chain chain = new ApplicationInterceptorChain(index + 1, request);, +, +      return new RetryAndFollowUpInterceptor().intercept(chain);, +   * Performs the request and returns the response. May throw if this call was canceled. This isn't, +   * a regular interceptor because it doesn't delegate to the chain., +  class RetryAndFollowUpInterceptor implements Interceptor {, +    @Override public Response intercept(Chain chain) throws IOException {, +      Request request = chain.request();, +, +      engine = new HttpEngine(client, request.url(), forWebSocket, null, null);, +        Response response = null;, +          response = engine.proceed(request);, +          HttpEngine retryEngine = engine.recover(e.getLastConnectException(), true, null);, +          HttpEngine retryEngine = engine.recover(e, false, null);, +            StreamAllocation streamAllocation = engine.close(null);, +        Request followUp = engine.followUpRequest(response);, +        StreamAllocation streamAllocation = engine.close(response);, +        if (!engine.sameConnection(response, followUp.url())) {, +        engine = new HttpEngine(client, request.url(), forWebSocket, streamAllocation,, +            response);, +      }, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +, +  public abstract void setCallWebSocket(Call call);, +++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, +    Internal.instance.setCallWebSocket(call);]
[+++ b/okhttp/src/main/java/okhttp3/CipherSuite.java, +import static java.lang.Integer.MAX_VALUE;, +, +  // Last updated 2014-11-11 using cipher suites from Android 21 and Java 8., +  // public static final CipherSuite TLS_NULL_WITH_NULL_NULL = of("TLS_NULL_WITH_NULL_NULL", 0x0000, 5246, MAX_VALUE, MAX_VALUE);, +  public static final CipherSuite TLS_RSA_WITH_NULL_MD5 = of("SSL_RSA_WITH_NULL_MD5", 0x0001, 5246, 6, 10);, +  public static final CipherSuite TLS_RSA_WITH_NULL_SHA = of("SSL_RSA_WITH_NULL_SHA", 0x0002, 5246, 6, 10);, +  public static final CipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5 = of("SSL_RSA_EXPORT_WITH_RC4_40_MD5", 0x0003, 4346, 6, 10);, +  public static final CipherSuite TLS_RSA_WITH_RC4_128_MD5 = of("SSL_RSA_WITH_RC4_128_MD5", 0x0004, 5246, 6, 10);, +  public static final CipherSuite TLS_RSA_WITH_RC4_128_SHA = of("SSL_RSA_WITH_RC4_128_SHA", 0x0005, 5246, 6, 10);, +  // public static final CipherSuite TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = of("SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5", 0x0006, 4346, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_RSA_WITH_IDEA_CBC_SHA = of("TLS_RSA_WITH_IDEA_CBC_SHA", 0x0007, 5469, MAX_VALUE, MAX_VALUE);, +  public static final CipherSuite TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = of("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x0008, 4346, 6, 10);, +  public static final CipherSuite TLS_RSA_WITH_DES_CBC_SHA = of("SSL_RSA_WITH_DES_CBC_SHA", 0x0009, 5469, 6, 10);, +  public static final CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA = of("SSL_RSA_WITH_3DES_EDE_CBC_SHA", 0x000a, 5246, 6, 10);, +  // public static final CipherSuite TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = of("SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA", 0x000b, 4346, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_DSS_WITH_DES_CBC_SHA = of("TLS_DH_DSS_WITH_DES_CBC_SHA", 0x000c, 5469, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = of("TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA", 0x000d, 5246, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = of("SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x000e, 4346, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_RSA_WITH_DES_CBC_SHA = of("TLS_DH_RSA_WITH_DES_CBC_SHA", 0x000f, 5469, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = of("TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA", 0x0010, 5246, MAX_VALUE, MAX_VALUE);, +  public static final CipherSuite TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = of("SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 0x0011, 4346, 6, 10);, +  public static final CipherSuite TLS_DHE_DSS_WITH_DES_CBC_SHA = of("SSL_DHE_DSS_WITH_DES_CBC_SHA", 0x0012, 5469, 6, 10);, +  public static final CipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = of("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 0x0013, 5246, 6, 10);, +  public static final CipherSuite TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = of("SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x0014, 4346, 6, 10);, +  public static final CipherSuite TLS_DHE_RSA_WITH_DES_CBC_SHA = of("SSL_DHE_RSA_WITH_DES_CBC_SHA", 0x0015, 5469, 6, 10);, +  public static final CipherSuite TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = of("SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 0x0016, 5246, 6, 10);, +  public static final CipherSuite TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 = of("SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", 0x0017, 4346, 6, 10);, +  public static final CipherSuite TLS_DH_anon_WITH_RC4_128_MD5 = of("SSL_DH_anon_WITH_RC4_128_MD5", 0x0018, 5246, 6, 10);, +  public static final CipherSuite TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA = of("SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 0x0019, 4346, 6, 10);, +  public static final CipherSuite TLS_DH_anon_WITH_DES_CBC_SHA = of("SSL_DH_anon_WITH_DES_CBC_SHA", 0x001a, 5469, 6, 10);, +  public static final CipherSuite TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = of("SSL_DH_anon_WITH_3DES_EDE_CBC_SHA", 0x001b, 5246, 6, 10);, +  public static final CipherSuite TLS_KRB5_WITH_DES_CBC_SHA = of("TLS_KRB5_WITH_DES_CBC_SHA", 0x001e, 2712, 6, MAX_VALUE);, +  public static final CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_SHA = of("TLS_KRB5_WITH_3DES_EDE_CBC_SHA", 0x001f, 2712, 6, MAX_VALUE);, +  public static final CipherSuite TLS_KRB5_WITH_RC4_128_SHA = of("TLS_KRB5_WITH_RC4_128_SHA", 0x0020, 2712, 6, MAX_VALUE);, +  // public static final CipherSuite TLS_KRB5_WITH_IDEA_CBC_SHA = of("TLS_KRB5_WITH_IDEA_CBC_SHA", 0x0021, 2712, MAX_VALUE, MAX_VALUE);, +  public static final CipherSuite TLS_KRB5_WITH_DES_CBC_MD5 = of("TLS_KRB5_WITH_DES_CBC_MD5", 0x0022, 2712, 6, MAX_VALUE);, +  public static final CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_MD5 = of("TLS_KRB5_WITH_3DES_EDE_CBC_MD5", 0x0023, 2712, 6, MAX_VALUE);, +  public static final CipherSuite TLS_KRB5_WITH_RC4_128_MD5 = of("TLS_KRB5_WITH_RC4_128_MD5", 0x0024, 2712, 6, MAX_VALUE);, +  // public static final CipherSuite TLS_KRB5_WITH_IDEA_CBC_MD5 = of("TLS_KRB5_WITH_IDEA_CBC_MD5", 0x0025, 2712, MAX_VALUE, MAX_VALUE);, +  public static final CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA = of("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", 0x0026, 2712, 6, MAX_VALUE);, +  // public static final CipherSuite TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA = of("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA", 0x0027, 2712, MAX_VALUE, MAX_VALUE);, +  public static final CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_SHA = of("TLS_KRB5_EXPORT_WITH_RC4_40_SHA", 0x0028, 2712, 6, MAX_VALUE);, +  public static final CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 = of("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", 0x0029, 2712, 6, MAX_VALUE);, +  // public static final CipherSuite TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5 = of("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5", 0x002a, 2712, MAX_VALUE, MAX_VALUE);, +  public static final CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_MD5 = of("TLS_KRB5_EXPORT_WITH_RC4_40_MD5", 0x002b, 2712, 6, MAX_VALUE);, +  // public static final CipherSuite TLS_PSK_WITH_NULL_SHA = of("TLS_PSK_WITH_NULL_SHA", 0x002c, 4785, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DHE_PSK_WITH_NULL_SHA = of("TLS_DHE_PSK_WITH_NULL_SHA", 0x002d, 4785, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_RSA_PSK_WITH_NULL_SHA = of("TLS_RSA_PSK_WITH_NULL_SHA", 0x002e, 4785, MAX_VALUE, MAX_VALUE);, +  public static final CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA = of("TLS_RSA_WITH_AES_128_CBC_SHA", 0x002f, 5246, 6, 10);, +  // public static final CipherSuite TLS_DH_DSS_WITH_AES_128_CBC_SHA = of("TLS_DH_DSS_WITH_AES_128_CBC_SHA", 0x0030, 5246, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_RSA_WITH_AES_128_CBC_SHA = of("TLS_DH_RSA_WITH_AES_128_CBC_SHA", 0x0031, 5246, MAX_VALUE, MAX_VALUE);, +  public static final CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA = of("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", 0x0032, 5246, 6, 10);, +  public static final CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA = of("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", 0x0033, 5246, 6, 10);, +  public static final CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA = of("TLS_DH_anon_WITH_AES_128_CBC_SHA", 0x0034, 5246, 6, 10);, +  public static final CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA = of("TLS_RSA_WITH_AES_256_CBC_SHA", 0x0035, 5246, 6, 10);, +  // public static final CipherSuite TLS_DH_DSS_WITH_AES_256_CBC_SHA = of("TLS_DH_DSS_WITH_AES_256_CBC_SHA", 0x0036, 5246, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_RSA_WITH_AES_256_CBC_SHA = of("TLS_DH_RSA_WITH_AES_256_CBC_SHA", 0x0037, 5246, MAX_VALUE, MAX_VALUE);, +  public static final CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA = of("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", 0x0038, 5246, 6, 10);, +  public static final CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA = of("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", 0x0039, 5246, 6, 10);, +  public static final CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA = of("TLS_DH_anon_WITH_AES_256_CBC_SHA", 0x003a, 5246, 6, 10);, +  public static final CipherSuite TLS_RSA_WITH_NULL_SHA256 = of("TLS_RSA_WITH_NULL_SHA256", 0x003b, 5246, 7, 21);, +  public static final CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256 = of("TLS_RSA_WITH_AES_128_CBC_SHA256", 0x003c, 5246, 7, 21);, +  public static final CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256 = of("TLS_RSA_WITH_AES_256_CBC_SHA256", 0x003d, 5246, 7, 21);, +  // public static final CipherSuite TLS_DH_DSS_WITH_AES_128_CBC_SHA256 = of("TLS_DH_DSS_WITH_AES_128_CBC_SHA256", 0x003e, 5246, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_RSA_WITH_AES_128_CBC_SHA256 = of("TLS_DH_RSA_WITH_AES_128_CBC_SHA256", 0x003f, 5246, MAX_VALUE, MAX_VALUE);, +  public static final CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = of("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", 0x0040, 5246, 7, 21);, +  // public static final CipherSuite TLS_RSA_WITH_CAMELLIA_128_CBC_SHA = of("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA", 0x0041, 5932, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = of("TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA", 0x0042, 5932, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = of("TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA", 0x0043, 5932, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = of("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA", 0x0044, 5932, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = of("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA", 0x0045, 5932, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA = of("TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA", 0x0046, 5932, MAX_VALUE, MAX_VALUE);, +  public static final CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = of("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", 0x0067, 5246, 7, 21);, +  // public static final CipherSuite TLS_DH_DSS_WITH_AES_256_CBC_SHA256 = of("TLS_DH_DSS_WITH_AES_256_CBC_SHA256", 0x0068, 5246, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_RSA_WITH_AES_256_CBC_SHA256 = of("TLS_DH_RSA_WITH_AES_256_CBC_SHA256", 0x0069, 5246, MAX_VALUE, MAX_VALUE);, +  public static final CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = of("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", 0x006a, 5246, 7, 21);, +  public static final CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = of("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", 0x006b, 5246, 7, 21);, +  public static final CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA256 = of("TLS_DH_anon_WITH_AES_128_CBC_SHA256", 0x006c, 5246, 7, 21);, +  public static final CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA256 = of("TLS_DH_anon_WITH_AES_256_CBC_SHA256", 0x006d, 5246, 7, 21);, +  // public static final CipherSuite TLS_RSA_WITH_CAMELLIA_256_CBC_SHA = of("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA", 0x0084, 5932, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = of("TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA", 0x0085, 5932, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = of("TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA", 0x0086, 5932, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = of("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA", 0x0087, 5932, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = of("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA", 0x0088, 5932, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA = of("TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA", 0x0089, 5932, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_PSK_WITH_RC4_128_SHA = of("TLS_PSK_WITH_RC4_128_SHA", 0x008a, 4279, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_PSK_WITH_3DES_EDE_CBC_SHA = of("TLS_PSK_WITH_3DES_EDE_CBC_SHA", 0x008b, 4279, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_PSK_WITH_AES_128_CBC_SHA = of("TLS_PSK_WITH_AES_128_CBC_SHA", 0x008c, 4279, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_PSK_WITH_AES_256_CBC_SHA = of("TLS_PSK_WITH_AES_256_CBC_SHA", 0x008d, 4279, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DHE_PSK_WITH_RC4_128_SHA = of("TLS_DHE_PSK_WITH_RC4_128_SHA", 0x008e, 4279, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA = of("TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA", 0x008f, 4279, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DHE_PSK_WITH_AES_128_CBC_SHA = of("TLS_DHE_PSK_WITH_AES_128_CBC_SHA", 0x0090, 4279, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DHE_PSK_WITH_AES_256_CBC_SHA = of("TLS_DHE_PSK_WITH_AES_256_CBC_SHA", 0x0091, 4279, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_RSA_PSK_WITH_RC4_128_SHA = of("TLS_RSA_PSK_WITH_RC4_128_SHA", 0x0092, 4279, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA = of("TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA", 0x0093, 4279, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_RSA_PSK_WITH_AES_128_CBC_SHA = of("TLS_RSA_PSK_WITH_AES_128_CBC_SHA", 0x0094, 4279, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_RSA_PSK_WITH_AES_256_CBC_SHA = of("TLS_RSA_PSK_WITH_AES_256_CBC_SHA", 0x0095, 4279, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_RSA_WITH_SEED_CBC_SHA = of("TLS_RSA_WITH_SEED_CBC_SHA", 0x0096, 4162, MAX_VALUE, MAX_VALUE);, +  // public static final CipherSuite TLS_DH_DSS_WITH_SEED_CBC_SHA = of("TLS_DH_DSS_WITH_SEED_CBC_SHA", 0x0097, 4162, MAX_VALUE, MAX_VALUE);]
[+++ b/okhttp/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-protocols</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/okhttp/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-protocols</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java, +    // If delete() fails, make sure it's because the file didn't exist!, +    if (!file.delete() && file.exists()) {, +      throw new IOException("failed to delete " + file);, +  public synchronized long getMaxSize() {, +      deleteIfExists(file);]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/OkHeaders.java, +    Headers requestHeaders = response.request().headers();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/OkHeaders.java, +    Headers requestHeaders = response.request().headers();, +++ b/pom.xml, +    <bouncycastle.version>1.50</bouncycastle.version>]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, +              transport = Transport.HTTP_20_DRAFT_06;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, +          if (transport == Transport.SPDY_3) {, +          } else {, +            builder.http20Draft06();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, +              transport = Transport.HTTP_20_DRAFT_06;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, +          if (transport == Transport.SPDY_3) {, +          } else {, +            builder.http20Draft06();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, +              transport = Transport.HTTP_20_DRAFT_06;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, +          if (transport == Transport.SPDY_3) {, +          } else {, +            builder.http20Draft06();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/ErrorCode.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, +              transport = Transport.HTTP_20_DRAFT_06;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, +          if (transport == Transport.SPDY_3) {, +          } else {, +            builder.http20Draft06();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/ErrorCode.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java, +package com.squareup.okhttp.internal.spdy;, +, +import java.io.DataInputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.BitSet;, +import java.util.List;, +, +/**, + * Read and write HPACK v03., + * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-03, + */, +final class Hpack {, +, +  static class HeaderEntry {, +    private final String name;, +    private final String value;, +, +    HeaderEntry(String name, String value) {, +      this.name = name;, +      this.value = value;, +    }, +, +    // TODO: This needs to be the length in UTF-8 bytes, not the length in chars., +    int length() {, +      return 32 + name.length() + value.length();, +    }, +  }, +, +  static final int PREFIX_5_BITS = 0x1f;, +  static final int PREFIX_6_BITS = 0x3f;, +  static final int PREFIX_7_BITS = 0x7f;, +  static final int PREFIX_8_BITS = 0xff;, +, +  static final List<HeaderEntry> INITIAL_CLIENT_TO_SERVER_HEADER_TABLE = Arrays.asList(, +      new HeaderEntry(":scheme", "http"),, +      new HeaderEntry(":scheme", "https"),, +      new HeaderEntry(":host", ""),, +      new HeaderEntry(":path", "/"),, +      new HeaderEntry(":method", "GET"),, +      new HeaderEntry("accept", ""),, +      new HeaderEntry("accept-charset", ""),, +      new HeaderEntry("accept-encoding", ""),, +      new HeaderEntry("accept-language", ""),, +      new HeaderEntry("cookie", ""),, +      new HeaderEntry("if-modified-since", ""),, +      new HeaderEntry("user-agent", ""),, +      new HeaderEntry("referer", ""),]
[+++ /dev/null, +++ /dev/null, +++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the, +      Work or Derivative Works thereof in any medium, with or without, +      modifications, and in Source or Object form, provided that You, +      meet the following conditions:, +, +      (a) You must give any other recipients of the Work or, +          Derivative Works a copy of this License; and, +]
[+++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.1.1</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.1.1</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.13.0-SNAPSHOT</version>]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp/src/test/java/okhttp3/InterceptorTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp/src/test/java/okhttp3/InterceptorTest.java, +++ b/okhttp/src/test/java/okhttp3/MediaTypeTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp/src/test/java/okhttp3/InterceptorTest.java, +++ b/okhttp/src/test/java/okhttp3/MediaTypeTest.java, +++ b/okhttp/src/test/java/okhttp3/URLConnectionTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp/src/test/java/okhttp3/InterceptorTest.java, +++ b/okhttp/src/test/java/okhttp3/MediaTypeTest.java, +++ b/okhttp/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp/src/test/java/okhttp3/internal/DoubleInetAddressDns.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp/src/test/java/okhttp3/InterceptorTest.java, +++ b/okhttp/src/test/java/okhttp3/MediaTypeTest.java, +++ b/okhttp/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp/src/test/java/okhttp3/internal/DoubleInetAddressDns.java, +++ b/okhttp/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp/src/test/java/okhttp3/InterceptorTest.java, +++ b/okhttp/src/test/java/okhttp3/MediaTypeTest.java, +++ b/okhttp/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp/src/test/java/okhttp3/internal/DoubleInetAddressDns.java, +++ b/okhttp/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java, +++ b/okhttp/src/test/java/okhttp3/internal/http/RecordingProxySelector.java, +++ b/build.gradle, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java, +++ b/okhttp/src/test/java/okhttp3/ConscryptTest.java, +++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp/src/test/java/okhttp3/InterceptorTest.java, +++ b/okhttp/src/test/java/okhttp3/MediaTypeTest.java]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp/src/main/java/okhttp3/Call.java, +public interface Call {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp/src/main/java/okhttp3/Call.java, +public interface Call {, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp/src/main/java/okhttp3/Call.java, +public interface Call {, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java, +import okhttp3.MediaType;, +    MediaType mediaType = MediaType.parse(contentType);, +    if (mediaType == null || !mediaType.subtype().equalsIgnoreCase("html")) {, +      response.body().close();, +      return;, +    }, +]
[+++ b/deploy_website.sh, +#!/bin/bash, +, +set -ex, +, +DIR=temp-clone, +, +# Delete any existing temporary website clone, +rm -rf $DIR, +, +# Clone the current repo into temp folder, +git clone git@github.com:square/okhttp.git $DIR, +, +# Move working directory into temp folder, +cd $DIR, +, +# Checkout and track the gh-pages branch, +git checkout -t origin/gh-pages, +, +# Delete everything, +rm -rf *, +, +# Copy website files from real repo, +cp -R ../website/* ., +, +# Stage all files in git and create a commit, +git add ., +git add -u, +git commit -m "Website at $(date)", +, +# Push the new files up to GitHub, +git push origin gh-pages, +, +# Delete our temp folder, +cd .., +rm -rf $DIR, +++ b/deploy_website.sh, +#!/bin/bash, +, +set -ex, +, +DIR=temp-clone, +, +# Delete any existing temporary website clone, +rm -rf $DIR, +, +# Clone the current repo into temp folder, +git clone git@github.com:square/okhttp.git $DIR, +, +# Move working directory into temp folder, +cd $DIR, +, +# Checkout and track the gh-pages branch, +git checkout -t origin/gh-pages, +, +# Delete everything, +rm -rf *, +, +# Copy website files from real repo, +cp -R ../website/* ., +, +# Stage all files in git and create a commit, +git add ., +git add -u, +git commit -m "Website at $(date)", +, +# Push the new files up to GitHub, +git push origin gh-pages, +, +# Delete our temp folder, +cd .., +rm -rf $DIR, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService =, +      new ThreadPoolExecutor(0, 1, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());, +++ b/deploy_website.sh, +#!/bin/bash, +, +set -ex, +, +DIR=temp-clone, +, +# Delete any existing temporary website clone, +rm -rf $DIR, +, +# Clone the current repo into temp folder, +git clone git@github.com:square/okhttp.git $DIR, +, +# Move working directory into temp folder, +cd $DIR, +, +# Checkout and track the gh-pages branch, +git checkout -t origin/gh-pages, +, +# Delete everything, +rm -rf *, +, +# Copy website files from real repo, +cp -R ../website/* ., +]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void mockResponseSetHeaders() {, +    MockResponse response = new MockResponse(), +        .clearHeaders(), +        .addHeader("Cookie: s=square"), +        .addHeader("Cookies: delicious");, +, +    response.setHeaders(new Headers.Builder().add("Cookie", "a=android").build());, +, +    assertEquals(Arrays.asList("Cookie: a=android"), headersToList(response));, +  }, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, +  @Test public void headersToString() {, +    Headers headers = new Headers.Builder(), +        .add("A", "a"), +        .add("B", "bb"), +        .build();, +    assertEquals("A: a\nB: bb\n", headers.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, +  @Test public void headersToString() {, +    Headers headers = new Headers.Builder(), +        .add("A", "a"), +        .add("B", "bb"), +        .build();, +    assertEquals("A: a\nB: bb\n", headers.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, +    hpackWriter = new Hpack.Writer(bytesOut);, +    Hpack.Writer writer = new Hpack.Writer(110, bytesOut);, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, +  @Test public void headersToString() {, +    Headers headers = new Headers.Builder(), +        .add("A", "a"), +        .add("B", "bb"), +        .build();, +    assertEquals("A: a\nB: bb\n", headers.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, +    hpackWriter = new Hpack.Writer(bytesOut);, +    Hpack.Writer writer = new Hpack.Writer(110, bytesOut);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HuffmanTest.java, +import java.io.ByteArrayOutputStream;, +import java.io.DataOutputStream;, +      assertRoundTrip(s.substring(0, i).getBytes());, +    assertRoundTrip(buf);, +  private void assertRoundTrip(byte[] buf) throws IOException {, +    ByteArrayOutputStream baos = new ByteArrayOutputStream();, +    DataOutputStream dos = new DataOutputStream(baos);, +    Huffman.get().encode(buf, dos);, +    assertEquals(baos.size(), Huffman.get().encodedLength(buf));, +, +    byte[] decodedBytes = Huffman.get().decode(baos.toByteArray());, +    assertTrue(Arrays.equals(buf, decodedBytes));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, +  @Test public void headersToString() {, +    Headers headers = new Headers.Builder(), +        .add("A", "a"), +        .add("B", "bb"), +        .build();, +    assertEquals("A: a\nB: bb\n", headers.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, +    hpackWriter = new Hpack.Writer(bytesOut);, +    Hpack.Writer writer = new Hpack.Writer(110, bytesOut);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HuffmanTest.java, +import java.io.ByteArrayOutputStream;, +import java.io.DataOutputStream;, +      assertRoundTrip(s.substring(0, i).getBytes());, +    assertRoundTrip(buf);, +  private void assertRoundTrip(byte[] buf) throws IOException {, +    ByteArrayOutputStream baos = new ByteArrayOutputStream();, +    DataOutputStream dos = new DataOutputStream(baos);, +    Huffman.get().encode(buf, dos);, +    assertEquals(baos.size(), Huffman.get().encodedLength(buf));, +, +    byte[] decodedBytes = Huffman.get().decode(baos.toByteArray());, +    assertTrue(Arrays.equals(buf, decodedBytes));, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, +  @Test public void headersToString() {, +    Headers headers = new Headers.Builder(), +        .add("A", "a"), +        .add("B", "bb"), +        .build();, +    assertEquals("A: a\nB: bb\n", headers.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, +    hpackWriter = new Hpack.Writer(bytesOut);, +    Hpack.Writer writer = new Hpack.Writer(110, bytesOut);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HuffmanTest.java, +import java.io.ByteArrayOutputStream;, +import java.io.DataOutputStream;, +      assertRoundTrip(s.substring(0, i).getBytes());, +    assertRoundTrip(buf);, +  private void assertRoundTrip(byte[] buf) throws IOException {, +    ByteArrayOutputStream baos = new ByteArrayOutputStream();, +    DataOutputStream dos = new DataOutputStream(baos);, +    Huffman.get().encode(buf, dos);, +    assertEquals(baos.size(), Huffman.get().encodedLength(buf));, +, +    byte[] decodedBytes = Huffman.get().decode(baos.toByteArray());, +    assertTrue(Arrays.equals(buf, decodedBytes));, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +  @Override public void setInstanceFollowRedirects(boolean followRedirects) {]
[+++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <bouncycastle.version>1.48</bouncycastle.version>, +    <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ b/pom.xml, +    <bouncycastle.version>1.48</bouncycastle.version>, +    <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <bouncycastle.version>1.48</bouncycastle.version>, +    <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <bouncycastle.version>1.48</bouncycastle.version>, +    <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <bouncycastle.version>1.48</bouncycastle.version>, +    <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <bouncycastle.version>1.48</bouncycastle.version>, +    <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <bouncycastle.version>1.48</bouncycastle.version>, +    <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <bouncycastle.version>1.48</bouncycastle.version>, +    <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <bouncycastle.version>1.48</bouncycastle.version>, +    <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <bouncycastle.version>1.48</bouncycastle.version>, +    <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +    <bouncycastle.version>1.48</bouncycastle.version>, +    <gson.version>2.2.3</gson.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, +      @Override public void initExchange(, +          Response.Builder responseBuilder, Exchange exchange) {, +        responseBuilder.initExchange(exchange);, +      }, +, +      @Override public @Nullable Exchange exchange(Response response) {, +        return response.exchange;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, +      @Override public void initExchange(, +          Response.Builder responseBuilder, Exchange exchange) {, +        responseBuilder.initExchange(exchange);, +      }, +, +      @Override public @Nullable Exchange exchange(Response response) {, +        return response.exchange;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +      return getResponseWithInterceptorChain();, +        transmitter.noMoreExchanges(ioException);, +        if (transmitter.isCanceled()) throw new IOException("Canceled");, +    IOException ioException = null;, +    } catch (IOException e) {, +      ioException = e;, +      throw e;, +      transmitter.noMoreExchanges(ioException);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, +      @Override public void initExchange(, +          Response.Builder responseBuilder, Exchange exchange) {, +        responseBuilder.initExchange(exchange);, +      }, +, +      @Override public @Nullable Exchange exchange(Response response) {, +        return response.exchange;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +      return getResponseWithInterceptorChain();, +        transmitter.noMoreExchanges(ioException);, +        if (transmitter.isCanceled()) throw new IOException("Canceled");, +    IOException ioException = null;, +    } catch (IOException e) {, +      ioException = e;, +      throw e;, +      transmitter.noMoreExchanges(ioException);, +++ b/okhttp/src/main/java/okhttp3/Response.java, +import okhttp3.internal.connection.Exchange;, +  final @Nullable Exchange exchange;, +    this.exchange = builder.exchange;, +    if (exchange == null) throw new IllegalStateException("trailers not available");, +    return exchange.trailers();, +    @Nullable Exchange exchange;, +      this.exchange = response.exchange;, +    void initExchange(Exchange deferredTrailers) {, +      this.exchange = deferredTrailers;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, +      @Override public void initExchange(, +          Response.Builder responseBuilder, Exchange exchange) {, +        responseBuilder.initExchange(exchange);, +      }, +, +      @Override public @Nullable Exchange exchange(Response response) {, +        return response.exchange;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +      return getResponseWithInterceptorChain();, +        transmitter.noMoreExchanges(ioException);, +        if (transmitter.isCanceled()) throw new IOException("Canceled");, +    IOException ioException = null;, +    } catch (IOException e) {, +      ioException = e;, +      throw e;, +      transmitter.noMoreExchanges(ioException);, +++ b/okhttp/src/main/java/okhttp3/Response.java, +import okhttp3.internal.connection.Exchange;, +  final @Nullable Exchange exchange;, +    this.exchange = builder.exchange;, +    if (exchange == null) throw new IllegalStateException("trailers not available");, +    return exchange.trailers();, +    @Nullable Exchange exchange;]
[+++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ /dev/null, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ /dev/null, +++ /dev/null, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you might need to add the following options:, +```, +-dontwarn okhttp3.**, +-dontwarn okio.**, +-dontwarn javax.annotation.**, +-dontwarn org.conscrypt.**, +# A resource is loaded with a relative path so the package of this class must be preserved., +-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase, +```, +++ /dev/null]
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +        .addHeader("Cache-Control", "immutable"), +        .addHeader("Cache-Control", "immutable"), +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +        .addHeader("Cache-Control", "immutable"), +        .addHeader("Cache-Control", "immutable"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        .authenticator(new RecordingOkAuthenticator(credential, null)), +        .authenticator(new RecordingOkAuthenticator(credential, null)), +        .authenticator(new RecordingOkAuthenticator(credential, null)), +    RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(null, null);, +        .authenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret"), null)), +        .authenticator(new RecordingOkAuthenticator("password", null)), +        .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic")), +        .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic")), +        .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic")), +        .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic")), +  @Test public void noPreemptiveProxyAuthorization() throws Exception {, +    RecordedRequest connect1 = server.takeRequest();, +    assertNull(connect1.getHeader("Proxy-Authorization"));, +, +    RecordedRequest connect2 = server.takeRequest();, +    assertEquals("password", connect2.getHeader("Proxy-Authorization"));, +  }, +, +  /** Confirm that we can send authentication information without being prompted first. */, +  @Test public void preemptiveProxyAuthentication() throws Exception {, +    server.useHttps(handshakeCertificates.sslSocketFactory(), true);, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    server.enqueue(new MockResponse(), +        .setBody("encrypted response from the origin server"));, +, +    final String credential = Credentials.basic("jesse", "password1");, +, +    client = client.newBuilder(), +        .sslSocketFactory(, +            handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager()), +        .proxy(server.toProxyAddress()), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .proxyAuthenticator(new Authenticator() {, +          @Override public Request authenticate(Route route, Response response) {, +            assertEquals("CONNECT", response.request().method());, +            assertEquals(HttpURLConnection.HTTP_PROXY_AUTH, response.code());, +            assertEquals("android.com", response.request().url().host());, +, +            List<Challenge> challenges = response.challenges();, +            assertEquals("OkHttp-Preemptive", challenges.get(0).scheme());, +, +            return response.request().newBuilder(), +                .header("Proxy-Authorization", credential), +                .build();, +          }, +        }), +        .build();, +, +    Request request = new Request.Builder(), +        .url("https://android.com/foo"), +        .build();, +, +    executeSynchronously(request).assertSuccessful();, +, +    assertEquals("CONNECT", connect.getMethod());, +    assertEquals(credential, connect.getHeader("Proxy-Authorization"));, +    assertEquals("/", connect.getPath());, +    assertEquals("GET", get.getMethod());, +    assertNull(get.getHeader("Proxy-Authorization"));, +    assertEquals("/foo", get.getPath());, +  }, +, +  @Test public void preemptiveThenReactiveProxyAuthentication() throws Exception {, +    server.useHttps(handshakeCertificates.sslSocketFactory(), true);, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_PROXY_AUTH), +        .addHeader("Proxy-Authenticate", "Basic realm=\"localhost\""), +        .setBody("proxy auth required"));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    server.enqueue(new MockResponse());, +, +    final List<String> challengeSchemes = new ArrayList<>();, +    final String credential = Credentials.basic("jesse", "password1");, +, +    client = client.newBuilder(), +        .sslSocketFactory(, +            handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager()), +        .proxy(server.toProxyAddress()), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .proxyAuthenticator(new Authenticator() {, +          @Override public Request authenticate(Route route, Response response) {, +            List<Challenge> challenges = response.challenges();, +            challengeSchemes.add(challenges.get(0).scheme());, +            return response.request().newBuilder(), +                .header("Proxy-Authorization", credential), +                .build();, +          }, +        }), +        .build();]
[+++ b/pom.xml, +        <mockwebserver.version>20120905</mockwebserver.version>, +++ b/pom.xml, +        <mockwebserver.version>20120905</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpsConnection.java, +++ b/pom.xml, +        <mockwebserver.version>20120905</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpsConnection.java, +++ b/src/main/java/libcore/io/StrictLineReader.java, +        if (!(charset.equals(Charsets.US_ASCII) || charset.equals(Charsets.UTF_8) ||, +                charset.equals(Charsets.ISO_8859_1))) {, +++ b/pom.xml, +        <mockwebserver.version>20120905</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpsConnection.java, +++ b/src/main/java/libcore/io/StrictLineReader.java, +        if (!(charset.equals(Charsets.US_ASCII) || charset.equals(Charsets.UTF_8) ||, +                charset.equals(Charsets.ISO_8859_1))) {, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +        inputStream = address.requiresTunnel(), +            Proxy proxy, int connectTimeout) throws IOException {, +                    : new Address(uri, sslSocketFactory, proxy);, +                    Address address = new Address(uri, sslSocketFactory, selectedProxy);, +        public Address(URI uri, SSLSocketFactory sslSocketFactory, Proxy proxy), +                throws UnknownHostException {, +                        && Objects.equal(this.sslSocketFactory, that.sslSocketFactory);, +, +        /**, +         * Returns true if the HTTP connection needs to tunnel one protocol over, +         * another, such as when using HTTPS through an HTTP proxy. When doing so,, +         * we must avoid buffering bytes intended for the higher-level protocol., +         */, +        public boolean requiresTunnel() {, +            return sslSocketFactory != null && proxy != null && proxy.type() == Proxy.Type.HTTP;, +        }, +++ b/pom.xml, +        <mockwebserver.version>20120905</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpsConnection.java, +++ b/src/main/java/libcore/io/StrictLineReader.java, +        if (!(charset.equals(Charsets.US_ASCII) || charset.equals(Charsets.UTF_8) ||, +                charset.equals(Charsets.ISO_8859_1))) {, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +        inputStream = address.requiresTunnel(), +            Proxy proxy, int connectTimeout) throws IOException {, +                    : new Address(uri, sslSocketFactory, proxy);, +                    Address address = new Address(uri, sslSocketFactory, selectedProxy);, +        public Address(URI uri, SSLSocketFactory sslSocketFactory, Proxy proxy), +                throws UnknownHostException {, +                        && Objects.equal(this.sslSocketFactory, that.sslSocketFactory);, +, +        /**, +         * Returns true if the HTTP connection needs to tunnel one protocol over, +         * another, such as when using HTTPS through an HTTP proxy. When doing so,, +         * we must avoid buffering bytes intended for the higher-level protocol., +         */, +        public boolean requiresTunnel() {, +            return sslSocketFactory != null && proxy != null && proxy.type() == Proxy.Type.HTTP;, +        }, +++ b/src/main/java/libcore/net/http/HttpEngine.java, +                policy.getProxy(), policy.getConnectTimeout());, +++ b/pom.xml, +        <mockwebserver.version>20120905</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpsConnection.java, +++ b/src/main/java/libcore/io/StrictLineReader.java, +        if (!(charset.equals(Charsets.US_ASCII) || charset.equals(Charsets.UTF_8) ||, +                charset.equals(Charsets.ISO_8859_1))) {, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +        inputStream = address.requiresTunnel(), +            Proxy proxy, int connectTimeout) throws IOException {, +                    : new Address(uri, sslSocketFactory, proxy);, +                    Address address = new Address(uri, sslSocketFactory, selectedProxy);, +        public Address(URI uri, SSLSocketFactory sslSocketFactory, Proxy proxy), +                throws UnknownHostException {, +                        && Objects.equal(this.sslSocketFactory, that.sslSocketFactory);, +, +        /**, +         * Returns true if the HTTP connection needs to tunnel one protocol over, +         * another, such as when using HTTPS through an HTTP proxy. When doing so,, +         * we must avoid buffering bytes intended for the higher-level protocol., +         */, +        public boolean requiresTunnel() {, +            return sslSocketFactory != null && proxy != null && proxy.type() == Proxy.Type.HTTP;, +        }, +++ b/src/main/java/libcore/net/http/HttpEngine.java, +                policy.getProxy(), policy.getConnectTimeout());, +++ b/src/main/java/libcore/net/http/HttpResponseCache.java, +import java.io.BufferedInputStream;, +import libcore.io.Streams;, +++ b/pom.xml, +        <mockwebserver.version>20120905</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpsConnection.java, +++ b/src/main/java/libcore/io/StrictLineReader.java, +        if (!(charset.equals(Charsets.US_ASCII) || charset.equals(Charsets.UTF_8) ||, +                charset.equals(Charsets.ISO_8859_1))) {, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +        inputStream = address.requiresTunnel(), +            Proxy proxy, int connectTimeout) throws IOException {, +                    : new Address(uri, sslSocketFactory, proxy);, +                    Address address = new Address(uri, sslSocketFactory, selectedProxy);, +        public Address(URI uri, SSLSocketFactory sslSocketFactory, Proxy proxy), +                throws UnknownHostException {]
[+++ b/CHANGELOG.md, +    `runningCalls()` and `queuedCalls()` methods. You can write code that, +    selects calls by tag, host, or whatever, and invokes `Call.cancel()` on the, +    ones that are no longer necessary., +++ b/CHANGELOG.md, +    `runningCalls()` and `queuedCalls()` methods. You can write code that, +    selects calls by tag, host, or whatever, and invokes `Call.cancel()` on the, +    ones that are no longer necessary., +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +    return (installedCache.getDirectory().equals(directory), +        && installedCache.getMaxSize() == maxSize, +    return delegate.getSize();, +    return delegate.getMaxSize();, +    return delegate.getNetworkCount();, +    return delegate.getHitCount();, +    return delegate.getRequestCount();, +++ b/CHANGELOG.md, +    `runningCalls()` and `queuedCalls()` methods. You can write code that, +    selects calls by tag, host, or whatever, and invokes `Call.cancel()` on the, +    ones that are no longer necessary., +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +    return (installedCache.getDirectory().equals(directory), +        && installedCache.getMaxSize() == maxSize, +    return delegate.getSize();, +    return delegate.getMaxSize();, +    return delegate.getNetworkCount();, +    return delegate.getHitCount();, +    return delegate.getRequestCount();, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    assertEquals(1, cache.getWriteSuccessCount());, +    assertEquals(0, cache.getWriteAbortCount());, +    assertEquals(1, cache.getWriteSuccessCount());, +    assertEquals(0, cache.getWriteAbortCount());, +    assertEquals(2, cache.getRequestCount());, +    assertEquals(1, cache.getHitCount());, +    assertEquals(2, cache.getRequestCount());, +    assertEquals(1, cache.getNetworkCount());, +    assertEquals(1, cache.getHitCount());, +    assertEquals(4, cache.getRequestCount()); // 2 requests + 2 redirects, +    assertEquals(2, cache.getNetworkCount());, +    assertEquals(2, cache.getHitCount());, +    assertEquals(4, cache.getRequestCount()); // 2 direct + 2 redirect = 4, +    assertEquals(2, cache.getHitCount());, +    assertEquals(4, cache.getRequestCount()); // 2 direct + 2 redirect = 4, +    assertEquals(2, cache.getHitCount());, +    assertEquals(1, cache.getWriteAbortCount());, +    assertEquals(0, cache.getWriteSuccessCount());, +    assertEquals(1, cache.getWriteAbortCount());, +    assertEquals(1, cache.getWriteSuccessCount());, +    assertEquals(1, cache.getWriteAbortCount());, +    assertEquals(0, cache.getWriteSuccessCount());, +    assertEquals(1, cache.getWriteAbortCount());, +    assertEquals(1, cache.getWriteSuccessCount());, +    assertEquals(1, client.connectionPool().getIdleConnectionCount());, +    assertEquals(1, cache.getRequestCount());, +    assertEquals(0, cache.getNetworkCount());, +    assertEquals(0, cache.getHitCount());, +    assertEquals(2, cache.getRequestCount());, +    assertEquals(1, cache.getNetworkCount());, +    assertEquals(1, cache.getHitCount());, +    assertEquals(2, cache.getRequestCount());, +    assertEquals(1, cache.getNetworkCount());, +    assertEquals(0, cache.getHitCount());, +    assertEquals(2, cache.getRequestCount());, +    assertEquals(1, cache.getNetworkCount());, +    assertEquals(0, cache.getHitCount());, +    assertEquals(1, cache.getRequestCount());, +    assertEquals(1, cache.getNetworkCount());, +    assertEquals(0, cache.getHitCount());, +    assertEquals(3, cache.getRequestCount());, +    assertEquals(3, cache.getNetworkCount());, +    assertEquals(0, cache.getHitCount());, +    assertEquals(1, cache.getRequestCount());, +    assertEquals(1, cache.getNetworkCount());, +    assertEquals(0, cache.getHitCount());, +    assertEquals(3, cache.getRequestCount());, +    assertEquals(3, cache.getNetworkCount());, +    assertEquals(2, cache.getHitCount());, +    assertEquals(1, cache.getRequestCount());, +    assertEquals(1, cache.getNetworkCount());, +    assertEquals(0, cache.getHitCount());, +    assertEquals(3, cache.getRequestCount());, +    assertEquals(1, cache.getNetworkCount());, +    assertEquals(2, cache.getHitCount());, +    writeFile(cache.getDirectory(), urlKey + ".0", entryMetadata);, +    writeFile(cache.getDirectory(), urlKey + ".1", entryBody);, +    writeFile(cache.getDirectory(), "journal", journalBody);, +    cache = new Cache(cache.getDirectory(), Integer.MAX_VALUE, fileSystem);, +    writeFile(cache.getDirectory(), urlKey + ".0", entryMetadata);, +    writeFile(cache.getDirectory(), urlKey + ".1", entryBody);, +    writeFile(cache.getDirectory(), "journal", journalBody);, +    cache = new Cache(cache.getDirectory(), Integer.MAX_VALUE, fileSystem);, +    writeFile(cache.getDirectory(), urlKey + ".0", entryMetadata);, +    writeFile(cache.getDirectory(), urlKey + ".1", entryBody);, +    writeFile(cache.getDirectory(), "journal", journalBody);, +    cache = new Cache(cache.getDirectory(), Integer.MAX_VALUE, fileSystem);, +    writeFile(cache.getDirectory(), urlKey + ".0", entryMetadata);, +    writeFile(cache.getDirectory(), urlKey + ".1", entryBody);, +    writeFile(cache.getDirectory(), "journal", journalBody);, +    cache = new Cache(cache.getDirectory(), Integer.MAX_VALUE, fileSystem);]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/FaultyFileSystem.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/FaultyFileSystem.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/FaultyFileSystem.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, +      @Override public Socket deduplicate(, +++ b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/FaultyFileSystem.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, +      @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.net.Socket;, +  public abstract Socket deduplicate(, +++ b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/FaultyFileSystem.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, +      @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.net.Socket;, +  public abstract Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +import java.net.Socket;, +    Socket socket = null;, +        socket = Internal.instance.deduplicate(connectionPool, address, this);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(noNewStreams, false, true);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(false, true, false);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(true, false, false);, +    closeQuietly(socket);, +  private Socket deallocate(boolean noNewStreams, boolean released, boolean streamFinished) {, +    Socket socket = null;, +            socket = connection.socket();, +    return socket;, +    Socket socket;, +      socket = deallocate(noNewStreams, false, true);, +    closeQuietly(socket);, +  public Socket releaseAndAcquire(RealConnection newConnection) {, +    Socket socket = deallocate(true, false, false);, +    return socket;]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +import java.net.SocketTimeoutException;, +    } catch (SocketTimeoutException expected) {, +      assertEquals("timeout", expected.getMessage());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +import java.net.SocketTimeoutException;, +    } catch (SocketTimeoutException expected) {, +      assertEquals("timeout", expected.getMessage());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import java.net.SocketTimeoutException;, +    } catch (SocketTimeoutException expected) {, +    } catch (SocketTimeoutException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +import java.net.SocketTimeoutException;, +    } catch (SocketTimeoutException expected) {, +      assertEquals("timeout", expected.getMessage());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import java.net.SocketTimeoutException;, +    } catch (SocketTimeoutException expected) {, +    } catch (SocketTimeoutException expected) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +import java.net.SocketTimeoutException;, +, +    @Override protected IOException newTimeoutException(IOException cause) {, +      SocketTimeoutException socketTimeoutException = new SocketTimeoutException("timeout");, +      if (cause != null) {, +        socketTimeoutException.initCause(cause);, +      }, +      return socketTimeoutException;, +    }, +, +    public void exitAndThrowIfTimedOut() throws IOException {, +      if (exit()) throw newTimeoutException(null /* cause */);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +import java.net.SocketTimeoutException;, +    } catch (SocketTimeoutException expected) {, +      assertEquals("timeout", expected.getMessage());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import java.net.SocketTimeoutException;, +    } catch (SocketTimeoutException expected) {, +    } catch (SocketTimeoutException expected) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +import java.net.SocketTimeoutException;, +, +    @Override protected IOException newTimeoutException(IOException cause) {, +      SocketTimeoutException socketTimeoutException = new SocketTimeoutException("timeout");, +      if (cause != null) {, +        socketTimeoutException.initCause(cause);, +      }, +      return socketTimeoutException;, +    }, +, +    public void exitAndThrowIfTimedOut() throws IOException {, +      if (exit()) throw newTimeoutException(null /* cause */);, +++ b/pom.xml, +    <okio.version>1.5.0-SNAPSHOT</okio.version>]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    // Limit the size of the request body that the server holds in memory to an arbitrary, +    // 3.5 MBytes so this test can pass on devices with little memory., +    server.setBodyLimit(7 * 512 * 1024);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    // Limit the size of the request body that the server holds in memory to an arbitrary, +    // 3.5 MBytes so this test can pass on devices with little memory., +    server.setBodyLimit(7 * 512 * 1024);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    // Limit the size of the request body that the server holds in memory to an arbitrary, +    // 3.5 MBytes so this test can pass on devices with little memory., +    server.setBodyLimit(7 * 512 * 1024);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  @Test public void successfulFindMatchingPinsIgnoresCase() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("EXAMPLE.com", certA1Sha256Pin), +        .add("*.MyExample.Com", certB1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin1 = Arrays.asList(new Pin("EXAMPLE.com", certA1Sha256Pin));, +    assertEquals(expectedPin1, certificatePinner.findMatchingPins("example.com"));, +, +    List<Pin> expectedPin2 = Arrays.asList(new Pin("*.MyExample.Com", certB1Sha256Pin));, +    assertEquals(expectedPin2, certificatePinner.findMatchingPins("a.myexample.com"));, +  }, +, +  @Test public void successfulFindMatchingPinPunycode() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("σkhttp.com", certA1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin = Arrays.asList(new Pin("σkhttp.com", certA1Sha256Pin));, +    assertEquals(expectedPin, certificatePinner.findMatchingPins("xn--khttp-fde.com"));, +  }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    // Limit the size of the request body that the server holds in memory to an arbitrary, +    // 3.5 MBytes so this test can pass on devices with little memory., +    server.setBodyLimit(7 * 512 * 1024);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  @Test public void successfulFindMatchingPinsIgnoresCase() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("EXAMPLE.com", certA1Sha256Pin), +        .add("*.MyExample.Com", certB1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin1 = Arrays.asList(new Pin("EXAMPLE.com", certA1Sha256Pin));, +    assertEquals(expectedPin1, certificatePinner.findMatchingPins("example.com"));, +, +    List<Pin> expectedPin2 = Arrays.asList(new Pin("*.MyExample.Com", certB1Sha256Pin));, +    assertEquals(expectedPin2, certificatePinner.findMatchingPins("a.myexample.com"));, +  }, +, +  @Test public void successfulFindMatchingPinPunycode() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("σkhttp.com", certA1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin = Arrays.asList(new Pin("σkhttp.com", certA1Sha256Pin));, +    assertEquals(expectedPin, certificatePinner.findMatchingPins("xn--khttp-fde.com"));, +  }, +++ /dev/null, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    // Limit the size of the request body that the server holds in memory to an arbitrary, +    // 3.5 MBytes so this test can pass on devices with little memory., +    server.setBodyLimit(7 * 512 * 1024);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  @Test public void successfulFindMatchingPinsIgnoresCase() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("EXAMPLE.com", certA1Sha256Pin), +        .add("*.MyExample.Com", certB1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin1 = Arrays.asList(new Pin("EXAMPLE.com", certA1Sha256Pin));, +    assertEquals(expectedPin1, certificatePinner.findMatchingPins("example.com"));, +, +    List<Pin> expectedPin2 = Arrays.asList(new Pin("*.MyExample.Com", certB1Sha256Pin));, +    assertEquals(expectedPin2, certificatePinner.findMatchingPins("a.myexample.com"));, +  }, +, +  @Test public void successfulFindMatchingPinPunycode() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder()]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, + * is <strong>not</strong> used to indicate not whether this URLConnection is, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, + * is <strong>not</strong> used to indicate not whether this URLConnection is, +++ b/okhttp-ws-tests/fuzzingserver-config.json, +{, +  "url": "ws://127.0.0.1:9001",, +  "outdir": "./target/fuzzingserver-report",, +  "cases": ["*"],, +  "exclude-cases": [, +    "6.1.1",, +    "6.1.2",, +    "6.1.3",, +    "6.2.1",, +    "6.2.2",, +    "6.2.3",, +    "6.2.4",, +    "6.3.1",, +    "6.3.2",, +    "6.4.1",, +    "6.4.2",, +    "6.4.3",, +    "6.4.4",, +    "6.5.1",, +    "6.5.2",, +    "6.5.3",, +    "6.5.4",, +    "6.5.5",, +    "6.6.1",, +    "6.6.2",, +    "6.6.3",, +    "6.6.4",, +    "6.6.5",, +    "6.6.6",, +    "6.6.7",, +    "6.6.8",, +    "6.6.9",, +    "6.6.10",, +    "6.6.11",, +    "6.7.1",, +    "6.7.2",, +    "6.7.3",, +    "6.7.4",, +    "6.8.1",, +    "6.8.2",, +    "6.9.1",, +    "6.9.2",, +    "6.9.3",, +    "6.9.4",, +    "6.10.1",, +    "6.10.2",, +    "6.10.3",, +    "6.11.1",, +    "6.11.2",, +    "6.11.3",, +    "6.11.4",, +    "6.11.5",, +    "6.12.1",, +    "6.12.2",, +    "6.12.3",, +    "6.12.4",, +    "6.12.5",, +    "6.12.6",, +    "6.12.7",, +    "6.12.8",, +    "6.13.1",, +    "6.13.2",, +    "6.13.3",, +    "6.13.4",, +    "6.13.5",, +    "6.14.1",, +    "6.14.2",, +    "6.14.3",, +    "6.14.4",, +    "6.14.5",, +    "6.14.6",, +    "6.14.7",, +    "6.14.8",, +    "6.14.9",, +    "6.14.10",, +    "6.15.1",, +    "6.16.1",, +    "6.16.2",, +    "6.16.3",, +    "6.17.1",, +    "6.17.2",, +    "6.17.3",, +    "6.17.4",, +    "6.17.5",, +    "6.18.1",, +    "6.18.2",, +    "6.18.3",, +    "6.18.4",, +    "6.18.5",]
[+++ b/okhttp-dnsoverhttps/README.md, +OkHttp DNS over HTTPS Implementation, +====================================, +, +This module is an experimental implementation of DNS over HTTPS using OkHttp., +API is not considered stable and may change at any time., +++ b/okhttp-dnsoverhttps/README.md, +OkHttp DNS over HTTPS Implementation, +====================================, +, +This module is an experimental implementation of DNS over HTTPS using OkHttp., +API is not considered stable and may change at any time., +++ b/okhttp-dnsoverhttps/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3</groupId>, +    <artifactId>parent</artifactId>, +    <version>3.11.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-dnsoverhttps</artifactId>, +  <name>OkHttp DNS over HTTPS</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.conscrypt</groupId>, +      <artifactId>conscrypt-openjdk-uber</artifactId>, +      <version>1.1.0</version>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <version>3.0.2</version>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.dnsoverhttps</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/okhttp-dnsoverhttps/README.md, +OkHttp DNS over HTTPS Implementation, +====================================, +, +This module is an experimental implementation of DNS over HTTPS using OkHttp., +API is not considered stable and may change at any time., +++ b/okhttp-dnsoverhttps/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3</groupId>, +    <artifactId>parent</artifactId>, +    <version>3.11.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-dnsoverhttps</artifactId>, +  <name>OkHttp DNS over HTTPS</name>]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, +    callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, +    // Force requests to be executed serially., +    okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, +    dispatcher.setMaxRequests(1);, +    client = client.newBuilder(), +        .dispatcher(dispatcher), +        .build();, +    callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, +    callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, +    // Force requests to be executed serially., +    okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, +    dispatcher.setMaxRequests(1);, +    client = client.newBuilder(), +        .dispatcher(dispatcher), +        .build();, +    callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +  private static final Dispatcher dispatcher = new Dispatcher();, +        .dispatcher(dispatcher), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, +    callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, +    // Force requests to be executed serially., +    okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, +    dispatcher.setMaxRequests(1);, +    client = client.newBuilder(), +        .dispatcher(dispatcher), +        .build();, +    callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +  private static final Dispatcher dispatcher = new Dispatcher();, +        .dispatcher(dispatcher), +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.cancel();, +      call.cancel();, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, +    callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, +    // Force requests to be executed serially., +    okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, +    dispatcher.setMaxRequests(1);, +    client = client.newBuilder(), +        .dispatcher(dispatcher), +        .build();, +    callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +  private static final Dispatcher dispatcher = new Dispatcher();, +        .dispatcher(dispatcher), +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.cancel();, +      call.cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +        return ((RealCall) call).engine.streamAllocation;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, +    callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, +    // Force requests to be executed serially., +    okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, +    dispatcher.setMaxRequests(1);, +    client = client.newBuilder(), +        .dispatcher(dispatcher), +        .build();, +    callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +  private static final Dispatcher dispatcher = new Dispatcher();, +        .dispatcher(dispatcher), +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.cancel();, +      call.cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +        return ((RealCall) call).engine.streamAllocation;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import java.net.HttpRetryException;, +import java.net.ProtocolException;, +import okhttp3.internal.http.HttpEngine;, +import okhttp3.internal.http.RouteException;, +import okhttp3.internal.http.UnrepeatableRequestBody;, +import static okhttp3.internal.http.HttpEngine.MAX_FOLLOW_UPS;, +  volatile boolean canceled;, +  private boolean forWebSocket;, +  HttpEngine engine;, +    this.forWebSocket = true;, +    canceled = true;, +    if (engine != null) engine.cancel();, +    return canceled;, +    void cancel() {, +      RealCall.this.cancel();, +    }, +, +        if (canceled) {, +    String string = canceled ? "canceled call" : "call";, +    interceptors.add(new RetryAndFollowUpInterceptor());, +    if (!forWebSocket) {, +    interceptors.add(new HttpEngine.CallServerInterceptor(forWebSocket));, +, +  /**]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java, +    String urlKey = Cache.key(HttpUrl.get(url));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java, +    String urlKey = Cache.key(HttpUrl.get(url));, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +  public static String key(HttpUrl url) {, +    return ByteString.encodeUtf8(url.toString()).md5().hex();, +    String key = key(request.url());, +      editor = cache.edit(key(response.request().url()));, +    cache.remove(key(request.url()));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java, +    String urlKey = Cache.key(HttpUrl.get(url));, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +  public static String key(HttpUrl url) {, +    return ByteString.encodeUtf8(url.toString()).md5().hex();, +    String key = key(request.url());, +      editor = cache.edit(key(response.request().url()));, +    cache.remove(key(request.url()));, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +    return ByteString.of(x509Certificate.getPublicKey().getEncoded()).sha1();, +    return ByteString.of(x509Certificate.getPublicKey().getEncoded()).sha256();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java, +    String urlKey = Cache.key(HttpUrl.get(url));, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +  public static String key(HttpUrl url) {, +    return ByteString.encodeUtf8(url.toString()).md5().hex();, +    String key = key(request.url());, +      editor = cache.edit(key(response.request().url()));, +    cache.remove(key(request.url()));, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +    return ByteString.of(x509Certificate.getPublicKey().getEncoded()).sha1();, +    return ByteString.of(x509Certificate.getPublicKey().getEncoded()).sha256();, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    String urlKey = Cache.key(url);, +    String urlKey = Cache.key(url);]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    client = new OkHttpClient.Builder(), +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    client = new OkHttpClient.Builder(), +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/okhttp-sse/src/main/java/okhttp3/sse/EventSources.java, +    return (request, listener) -> {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {]
[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +public final class CookieTest {, +  HttpUrl url = HttpUrl.parse("https://example.com/");, +  @Test public void idnDomainMatches() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://☃.net/"), "a=b; domain=☃.net");, +    assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, +  }, +, +  @Test public void punycodeDomainMatches() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://xn--n3h.net/"), "a=b; domain=xn--n3h.net");, +    assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, +  }, +, +  @Test public void domainMatchesIpAddress() throws Exception {, +    HttpUrl urlWithIp = HttpUrl.parse("http://123.45.234.56/");, +    assertNull(Cookie.parse(urlWithIp, "a=b; domain=234.56"));, +    assertEquals("123.45.234.56", Cookie.parse(urlWithIp, "a=b; domain=123.45.234.56").domain());, +  }, +, +  @Test public void hostOnly() throws Exception {, +    assertTrue(Cookie.parse(url, "a=b").hostOnly());, +    assertFalse(Cookie.parse(url, "a=b; domain=example.com").hostOnly());, +  }, +, +  @Test public void defaultPath() throws Exception {, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"), "a=b").path());, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/"), "a=b").path());, +    assertEquals("/", Cookie.parse(HttpUrl.parse("http://example.com/foo"), "a=b").path());, +    assertEquals("/", Cookie.parse(HttpUrl.parse("http://example.com/"), "a=b").path());, +  }, +, +  @Test public void defaultPathIsUsedIfPathDoesntHaveLeadingSlash() throws Exception {, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"),, +        "a=b; path=quux").path());, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"),, +        "a=b; path=").path());, +  }, +, +  @Test public void pathAttributeDoesntNeedToMatch() throws Exception {, +    assertEquals("/quux", Cookie.parse(HttpUrl.parse("http://example.com/"),, +        "a=b; path=/quux").path());, +    assertEquals("/quux", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"),, +        "a=b; path=/quux").path());, +  }, +, +  @Test public void httpOnly() throws Exception {, +    assertFalse(Cookie.parse(url, "a=b").httpOnly());, +    assertTrue(Cookie.parse(url, "a=b; HttpOnly").httpOnly());, +  }, +, +  @Test public void secure() throws Exception {, +    assertFalse(Cookie.parse(url, "a=b").secure());, +    assertTrue(Cookie.parse(url, "a=b; Secure").secure());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +public final class CookieTest {, +  HttpUrl url = HttpUrl.parse("https://example.com/");, +  @Test public void idnDomainMatches() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://☃.net/"), "a=b; domain=☃.net");, +    assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, +  }, +, +  @Test public void punycodeDomainMatches() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://xn--n3h.net/"), "a=b; domain=xn--n3h.net");, +    assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, +  }, +, +  @Test public void domainMatchesIpAddress() throws Exception {, +    HttpUrl urlWithIp = HttpUrl.parse("http://123.45.234.56/");, +    assertNull(Cookie.parse(urlWithIp, "a=b; domain=234.56"));, +    assertEquals("123.45.234.56", Cookie.parse(urlWithIp, "a=b; domain=123.45.234.56").domain());, +  }, +, +  @Test public void hostOnly() throws Exception {, +    assertTrue(Cookie.parse(url, "a=b").hostOnly());, +    assertFalse(Cookie.parse(url, "a=b; domain=example.com").hostOnly());, +  }, +, +  @Test public void defaultPath() throws Exception {, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"), "a=b").path());, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/"), "a=b").path());, +    assertEquals("/", Cookie.parse(HttpUrl.parse("http://example.com/foo"), "a=b").path());, +    assertEquals("/", Cookie.parse(HttpUrl.parse("http://example.com/"), "a=b").path());, +  }, +, +  @Test public void defaultPathIsUsedIfPathDoesntHaveLeadingSlash() throws Exception {, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"),]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java, +        synchronized (connection) { // Multiple application threads may hit this section., +          connection.unacknowledgedBytesRead += read;, +          if (connection.unacknowledgedBytesRead, +              >= connection.okHttpSettings.getInitialWindowSize() / 2) {, +            connection.writeWindowUpdateLater(0, connection.unacknowledgedBytesRead);, +            connection.unacknowledgedBytesRead = 0;, +          }, +        }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java, +        synchronized (connection) { // Multiple application threads may hit this section., +          connection.unacknowledgedBytesRead += read;, +          if (connection.unacknowledgedBytesRead, +              >= connection.okHttpSettings.getInitialWindowSize() / 2) {, +            connection.writeWindowUpdateLater(0, connection.unacknowledgedBytesRead);, +            connection.unacknowledgedBytesRead = 0;, +          }, +        }, +, +++ b/pom.xml, +    <apache.http.version>4.2.6</apache.http.version>, +          <version>3.7.0</version>, +              <version>2.8.4</version>, +              <version>2.3.1</version>, +          <version>2.21.0</version>, +              <version>2.21.0</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, +    callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, +    // Force requests to be executed serially., +    okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, +    dispatcher.setMaxRequests(1);, +    client = client.newBuilder(), +        .dispatcher(dispatcher), +        .build();, +    callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, +    callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, +    // Force requests to be executed serially., +    okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, +    dispatcher.setMaxRequests(1);, +    client = client.newBuilder(), +        .dispatcher(dispatcher), +        .build();, +    callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +  private static final Dispatcher dispatcher = new Dispatcher();, +        .dispatcher(dispatcher), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, +    callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, +    // Force requests to be executed serially., +    okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, +    dispatcher.setMaxRequests(1);, +    client = client.newBuilder(), +        .dispatcher(dispatcher), +        .build();, +    callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +  private static final Dispatcher dispatcher = new Dispatcher();, +        .dispatcher(dispatcher), +++ b/pom.xml, +                <argLine>-Xbootclasspath/p:${bootclasspathPrefix} -Xms512m -Xmx512m</argLine>, +                <argLine>-Xbootclasspath/p:${bootclasspathPrefix} -Xms512m -Xmx512m</argLine>]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, +              transport = Transport.HTTP_20_DRAFT_09;, +        if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, +          if (transport == Transport.HTTP_20_DRAFT_09) {, +            builder.http20Draft09();, +            builder.spdy3();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, +              transport = Transport.HTTP_20_DRAFT_09;, +        if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, +          if (transport == Transport.HTTP_20_DRAFT_09) {, +            builder.http20Draft09();, +            builder.spdy3();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, +              transport = Transport.HTTP_20_DRAFT_09;, +        if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, +          if (transport == Transport.HTTP_20_DRAFT_09) {, +            builder.http20Draft09();, +            builder.spdy3();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +package com.squareup.okhttp.internal.spdy;, +, +import java.io.DataInputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.BitSet;, +import java.util.List;, +import java.util.ListIterator;, +, +/**, + * Read and write HPACK v05., + * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-05, + */, +final class HpackDraft05 {, +, +  // Visible for testing., +  static class HeaderEntry implements Cloneable {, +    final String name;, +    final String value;, +    final int size;, +    boolean referenced = true;, +, +    HeaderEntry(String name, String value) {, +      this.name = name;, +      this.value = value;, +      // TODO: This needs to be the size in bytes, not the length in chars., +      this.size = 32 + name.length() + value.length();, +    }, +, +    /** Adds name and value, if this entry is referenced. */, +    void addTo(List<String> out) {, +      if (!referenced) return;, +      out.add(name);, +      out.add(value);, +    }, +, +    @Override public HeaderEntry clone() {, +      try {, +        return (HeaderEntry) super.clone();, +      } catch (CloneNotSupportedException e) {, +        throw new AssertionError();, +      }, +    }, +  }, +, +  static final int PREFIX_5_BITS = 0x1f;, +  static final int PREFIX_6_BITS = 0x3f;, +  static final int PREFIX_7_BITS = 0x7f;, +  static final int PREFIX_8_BITS = 0xff;, +, +  static final List<HeaderEntry> STATIC_HEADER_TABLE = Arrays.asList(, +      new HeaderEntry(":authority", ""),, +      new HeaderEntry(":method", "GET"),, +      new HeaderEntry(":method", "POST"),, +      new HeaderEntry(":path", "/"),, +      new HeaderEntry(":path", "/index.html"),, +      new HeaderEntry(":scheme", "http"),, +      new HeaderEntry(":scheme", "https"),, +      new HeaderEntry(":status", "200"),, +      new HeaderEntry(":status", "500"),, +      new HeaderEntry(":status", "404"),, +      new HeaderEntry(":status", "403"),]
[+++ b/okhttp/build.gradle, +      'okhttp3.OkHttpClient$Builder#addInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#addNetworkInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#authenticator(okhttp3.Authenticator)',, +      'okhttp3.OkHttpClient$Builder#build()',, +      'okhttp3.OkHttpClient$Builder#cache(okhttp3.Cache)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#certificatePinner(okhttp3.CertificatePinner)',, +      'okhttp3.OkHttpClient$Builder#connectionPool(okhttp3.ConnectionPool)',, +      'okhttp3.OkHttpClient$Builder#connectionSpecs(java.util.List)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#cookieJar(okhttp3.CookieJar)',, +      'okhttp3.OkHttpClient$Builder#dispatcher(okhttp3.Dispatcher)',, +      'okhttp3.OkHttpClient$Builder#dns(okhttp3.Dns)',, +      'okhttp3.OkHttpClient$Builder#eventListener(okhttp3.EventListener)',, +      'okhttp3.OkHttpClient$Builder#eventListenerFactory(okhttp3.EventListener$Factory)',, +      'okhttp3.OkHttpClient$Builder#followRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#followSslRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#hostnameVerifier(javax.net.ssl.HostnameVerifier)',, +      'okhttp3.OkHttpClient$Builder#interceptors()',, +      'okhttp3.OkHttpClient$Builder#networkInterceptors()',, +      'okhttp3.OkHttpClient$Builder#pingInterval(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#pingInterval(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#protocols(java.util.List)',, +      'okhttp3.OkHttpClient$Builder#proxy(java.net.Proxy)',, +      'okhttp3.OkHttpClient$Builder#proxyAuthenticator(okhttp3.Authenticator)',, +      'okhttp3.OkHttpClient$Builder#proxySelector(java.net.ProxySelector)',, +      'okhttp3.OkHttpClient$Builder#readTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#readTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#retryOnConnectionFailure(boolean)',, +      'okhttp3.OkHttpClient$Builder#socketFactory(javax.net.SocketFactory)',, +      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory)',, +      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory, javax.net.ssl.X509TrustManager)',, +      'okhttp3.OkHttpClient$Builder#writeTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#writeTimeout(java.time.Duration)',, +++ b/okhttp/build.gradle, +      'okhttp3.OkHttpClient$Builder#addInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#addNetworkInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#authenticator(okhttp3.Authenticator)',, +      'okhttp3.OkHttpClient$Builder#build()',, +      'okhttp3.OkHttpClient$Builder#cache(okhttp3.Cache)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#certificatePinner(okhttp3.CertificatePinner)',, +      'okhttp3.OkHttpClient$Builder#connectionPool(okhttp3.ConnectionPool)',, +      'okhttp3.OkHttpClient$Builder#connectionSpecs(java.util.List)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#cookieJar(okhttp3.CookieJar)',, +      'okhttp3.OkHttpClient$Builder#dispatcher(okhttp3.Dispatcher)',, +      'okhttp3.OkHttpClient$Builder#dns(okhttp3.Dns)',, +      'okhttp3.OkHttpClient$Builder#eventListener(okhttp3.EventListener)',, +      'okhttp3.OkHttpClient$Builder#eventListenerFactory(okhttp3.EventListener$Factory)',, +      'okhttp3.OkHttpClient$Builder#followRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#followSslRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#hostnameVerifier(javax.net.ssl.HostnameVerifier)',, +      'okhttp3.OkHttpClient$Builder#interceptors()',, +      'okhttp3.OkHttpClient$Builder#networkInterceptors()',, +      'okhttp3.OkHttpClient$Builder#pingInterval(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#pingInterval(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#protocols(java.util.List)',, +      'okhttp3.OkHttpClient$Builder#proxy(java.net.Proxy)',, +      'okhttp3.OkHttpClient$Builder#proxyAuthenticator(okhttp3.Authenticator)',, +      'okhttp3.OkHttpClient$Builder#proxySelector(java.net.ProxySelector)',, +      'okhttp3.OkHttpClient$Builder#readTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#readTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#retryOnConnectionFailure(boolean)',, +      'okhttp3.OkHttpClient$Builder#socketFactory(javax.net.SocketFactory)',, +      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory)',, +      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory, javax.net.ssl.X509TrustManager)',, +      'okhttp3.OkHttpClient$Builder#writeTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#writeTimeout(java.time.Duration)',, +++ /dev/null, +++ b/okhttp/build.gradle, +      'okhttp3.OkHttpClient$Builder#addInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#addNetworkInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#authenticator(okhttp3.Authenticator)',, +      'okhttp3.OkHttpClient$Builder#build()',, +      'okhttp3.OkHttpClient$Builder#cache(okhttp3.Cache)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#certificatePinner(okhttp3.CertificatePinner)',, +      'okhttp3.OkHttpClient$Builder#connectionPool(okhttp3.ConnectionPool)',, +      'okhttp3.OkHttpClient$Builder#connectionSpecs(java.util.List)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#cookieJar(okhttp3.CookieJar)',, +      'okhttp3.OkHttpClient$Builder#dispatcher(okhttp3.Dispatcher)',, +      'okhttp3.OkHttpClient$Builder#dns(okhttp3.Dns)',, +      'okhttp3.OkHttpClient$Builder#eventListener(okhttp3.EventListener)',, +      'okhttp3.OkHttpClient$Builder#eventListenerFactory(okhttp3.EventListener$Factory)',, +      'okhttp3.OkHttpClient$Builder#followRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#followSslRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#hostnameVerifier(javax.net.ssl.HostnameVerifier)',, +      'okhttp3.OkHttpClient$Builder#interceptors()',, +      'okhttp3.OkHttpClient$Builder#networkInterceptors()',, +      'okhttp3.OkHttpClient$Builder#pingInterval(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#pingInterval(java.time.Duration)',]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +        + "--123--\r\n";, +        + "--123--\r\n";, +        + "\r\n", +        + "--AaB03x--\r\n";, +        .addFormDataPart("submit-name", "Larry"), +        .addFormDataPart("files", null,, +  @Test public void stringEscapingIsWeird() throws Exception {, +    String expected = "", +        + "--AaB03x\r\n", +        + "Content-Disposition: form-data; name=\"field with spaces\"; filename=\"filename with spaces.txt\"\r\n", +        + "Content-Type: text/plain; charset=utf-8\r\n", +        + "Content-Length: 4\r\n", +        + "\r\n", +        + "okay\r\n", +        + "--AaB03x\r\n", +        + "Content-Disposition: form-data; name=\"field with %22\"\r\n", +        + "Content-Length: 1\r\n", +        + "\r\n", +        + "\"\r\n", +        + "--AaB03x\r\n", +        + "Content-Disposition: form-data; name=\"field with %22\"\r\n", +        + "Content-Length: 3\r\n"]
[+++ b/benchmarks/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-ws-tests/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-RC1</version>]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  private static Logger frameLogger;, +    frameLogger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +    frameLogger.setLevel(Level.FINE);, +    frameLogger.addHandler(handler);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  private static Logger frameLogger;, +    frameLogger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +    frameLogger.setLevel(Level.FINE);, +    frameLogger.addHandler(handler);, +++ b/okhttp/src/main/java/okhttp3/internal/Platform.java]
[+++ b/fuzzing/fuzzingserver-config.json, +{, +  "url": "ws://127.0.0.1:9099",, +  "outdir": "./target/fuzzingserver-report",, +  "cases": ["*"],, +  "exclude-cases": [, +    "6.1.1",, +    "6.1.2",, +    "6.1.3",, +    "6.2.1",, +    "6.2.2",, +    "6.2.3",, +    "6.2.4",, +    "6.3.1",, +    "6.3.2",, +    "6.4.1",, +    "6.4.2",, +    "6.4.3",, +    "6.4.4",, +    "6.5.1",, +    "6.5.2",, +    "6.5.3",, +    "6.5.4",, +    "6.5.5",, +    "6.6.1",, +    "6.6.2",, +    "6.6.3",, +    "6.6.4",, +    "6.6.5",, +    "6.6.6",, +    "6.6.7",, +    "6.6.8",, +    "6.6.9",, +    "6.6.10",, +    "6.6.11",, +    "6.7.1",, +    "6.7.2",, +    "6.7.3",, +    "6.7.4",, +    "6.8.1",, +    "6.8.2",, +    "6.9.1",, +    "6.9.2",, +    "6.9.3",, +    "6.9.4",, +    "6.10.1",, +    "6.10.2",, +    "6.10.3",, +    "6.11.1",, +    "6.11.2",, +    "6.11.3",, +    "6.11.4",, +    "6.11.5",, +    "6.12.1",, +    "6.12.2",, +    "6.12.3",, +    "6.12.4",, +    "6.12.5",, +    "6.12.6",, +    "6.12.7",, +    "6.12.8",, +    "6.13.1",, +    "6.13.2",, +    "6.13.3",, +    "6.13.4",, +    "6.13.5",, +    "6.14.1",, +    "6.14.2",, +    "6.14.3",, +    "6.14.4",, +    "6.14.5",, +    "6.14.6",, +    "6.14.7",, +    "6.14.8",, +    "6.14.9",, +    "6.14.10",, +    "6.15.1",, +    "6.16.1",, +    "6.16.2",, +    "6.16.3",, +    "6.17.1",, +    "6.17.2",, +    "6.17.3",, +    "6.17.4",, +    "6.17.5",, +    "6.18.1",, +    "6.18.2",, +    "6.18.3",, +    "6.18.4",, +    "6.18.5",, +    "6.19.1",, +    "6.19.2",, +    "6.19.3",, +    "6.19.4",, +    "6.19.5",, +    "6.20.1",, +    "6.20.2",, +    "6.20.3",, +    "6.20.4",, +    "6.20.5",]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, +   * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, +   * frame</a> immediately after the response and will close the connection when the client's socket, +   * is exhausted., +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, +   * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, +   * frame</a> immediately after the response and will close the connection when the client's socket, +   * is exhausted., +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +   * <p>These differences may have a significant consequence when the URI is interpretted by a, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, +   * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, +   * frame</a> immediately after the response and will close the connection when the client's socket, +   * is exhausted., +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +   * <p>These differences may have a significant consequence when the URI is interpretted by a, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +      return !http2Connection.isShutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, +   * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, +   * frame</a> immediately after the response and will close the connection when the client's socket, +   * is exhausted., +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +   * <p>These differences may have a significant consequence when the URI is interpretted by a, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +      return !http2Connection.isShutdown();, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +      // TODO: propagate exception message into debugData., +      // TODO: configure a timeout on the reader so that it doesn’t block forever., +  public synchronized boolean isShutdown() {, +    return shutdown;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, +   * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, +   * frame</a> immediately after the response and will close the connection when the client's socket, +   * is exhausted., +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +   * <p>These differences may have a significant consequence when the URI is interpretted by a, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +      return !http2Connection.isShutdown();, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +      // TODO: propagate exception message into debugData., +      // TODO: configure a timeout on the reader so that it doesn’t block forever., +  public synchronized boolean isShutdown() {, +    return shutdown;, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java, +   * and (@code :path}., +   * @param byteCount must be between 0 and the minimum of {code source.length} and {@link, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2]
[+++ b/CHANGELOG.md, +## Version 2.5.0, +, +_2015-08-25_, +, + *  **Timeouts now default to 10 seconds.** Previously we defaulted to never, +    timing out, and that was a lousy policy. If establishing a connection,, +    reading the next byte from a connection, or writing the next byte to a, +    connection takes more than 10 seconds to complete, you’ll need to adjust, +    the timeouts manually., +, + *  **OkHttp now rejects request headers that contain invalid characters.** This, +    includes potential security problems (newline characters) as well as simple, +    non-ASCII characters (including international characters and emoji)., +, + *  **Call canceling is more reliable.**  We had a bug where a socket being, +     connected wasn't being closed when the application used `Call.cancel()`., +, + *  **Changing a HttpUrl’s scheme now tracks the default port.** We had a bug, +    where changing a URL from `http` to `https` would leave it on port 80., +, + *  **Okio has been updated to 1.6.0.**, +     ```, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.6.0</version>, +     </dependency>, +     ```, +, + *  New: `Cache.initialize()`. Call this on a background thread to eagerly, +    initialize the response cache., + *  New: Fold `MockWebServerRule` into `MockWebServer`. This makes it easier to, +    write JUnit tests with `MockWebServer`. The `MockWebServer` library now, +    depends on JUnit, though it continues to work with all testing frameworks., + *  Fix: `FormEncodingBuilder` is now consistent with browsers in which, +    characters it escapes. Previously we weren’t percent-encoding commas,, +    parens, and other characters., + *  Fix: Relax `FormEncodingBuilder` to support building empty forms., + *  Fix: Timeouts throw `SocketTimeoutException`, not `InterruptedIOException`., + *  Fix: Change `MockWebServer` to use the same logic as OkHttp when determining, +    whether an HTTP request permits a body., + *  Fix: `HttpUrl` now uses the canonical form for IPv6 addresses., + *  Fix: Use `HttpUrl` internally., + *  Fix: Recover from Android 4.2.2 EBADF crashes., + *  Fix: Don't crash with an `IllegalStateException` if an HTTP/2 or SPDY, +    write fails, leaving the connection in an inconsistent state., + *  Fix: Make sure the default user agent is ASCII., +, +, +++ b/CHANGELOG.md, +## Version 2.5.0, +, +_2015-08-25_, +, + *  **Timeouts now default to 10 seconds.** Previously we defaulted to never, +    timing out, and that was a lousy policy. If establishing a connection,, +    reading the next byte from a connection, or writing the next byte to a, +    connection takes more than 10 seconds to complete, you’ll need to adjust, +    the timeouts manually., +, + *  **OkHttp now rejects request headers that contain invalid characters.** This, +    includes potential security problems (newline characters) as well as simple, +    non-ASCII characters (including international characters and emoji)., +, + *  **Call canceling is more reliable.**  We had a bug where a socket being, +     connected wasn't being closed when the application used `Call.cancel()`., +, + *  **Changing a HttpUrl’s scheme now tracks the default port.** We had a bug, +    where changing a URL from `http` to `https` would leave it on port 80., +, + *  **Okio has been updated to 1.6.0.**, +     ```, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.6.0</version>, +     </dependency>, +     ```, +, + *  New: `Cache.initialize()`. Call this on a background thread to eagerly, +    initialize the response cache., + *  New: Fold `MockWebServerRule` into `MockWebServer`. This makes it easier to, +    write JUnit tests with `MockWebServer`. The `MockWebServer` library now, +    depends on JUnit, though it continues to work with all testing frameworks., + *  Fix: `FormEncodingBuilder` is now consistent with browsers in which, +    characters it escapes. Previously we weren’t percent-encoding commas,, +    parens, and other characters., + *  Fix: Relax `FormEncodingBuilder` to support building empty forms., + *  Fix: Timeouts throw `SocketTimeoutException`, not `InterruptedIOException`., + *  Fix: Change `MockWebServer` to use the same logic as OkHttp when determining, +    whether an HTTP request permits a body., + *  Fix: `HttpUrl` now uses the canonical form for IPv6 addresses., + *  Fix: Use `HttpUrl` internally., + *  Fix: Recover from Android 4.2.2 EBADF crashes., + *  Fix: Don't crash with an `IllegalStateException` if an HTTP/2 or SPDY, +    write fails, leaving the connection in an inconsistent state., + *  Fix: Make sure the default user agent is ASCII., +, +]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +      assertEquals("timeout", e.getMessage());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +      assertEquals("timeout", e.getMessage());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +      assertEquals("timeout", e.getMessage());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import java.net.ProxySelector;, +import java.net.SocketAddress;, +  private final FakeProxySelector proxySelector = new FakeProxySelector();, +, +  private static class FakeProxySelector extends ProxySelector {, +    List<URI> requestedUris = new ArrayList<URI>();, +    List<Proxy> proxies = new ArrayList<Proxy>();, +    List<String> failures = new ArrayList<String>();, +, +    @Override public List<Proxy> select(URI uri) {, +      requestedUris.add(uri);, +      return proxies;, +    }, +, +    public void assertRequests(URI... expectedUris) {, +      assertEquals(Arrays.asList(expectedUris), requestedUris);, +      requestedUris.clear();, +    }, +, +    @Override public void connectFailed(URI uri, SocketAddress sa, IOException ioe) {, +      InetSocketAddress socketAddress = (InetSocketAddress) sa;, +      failures.add(, +          String.format("%s %s:%d %s", uri, socketAddress.getHostName(), socketAddress.getPort(),, +              ioe.getMessage()));, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +      assertEquals("timeout", e.getMessage());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import java.net.ProxySelector;, +import java.net.SocketAddress;, +  private final FakeProxySelector proxySelector = new FakeProxySelector();, +, +  private static class FakeProxySelector extends ProxySelector {, +    List<URI> requestedUris = new ArrayList<URI>();, +    List<Proxy> proxies = new ArrayList<Proxy>();, +    List<String> failures = new ArrayList<String>();, +, +    @Override public List<Proxy> select(URI uri) {, +      requestedUris.add(uri);, +      return proxies;, +    }, +, +    public void assertRequests(URI... expectedUris) {, +      assertEquals(Arrays.asList(expectedUris), requestedUris);, +      requestedUris.clear();, +    }, +, +    @Override public void connectFailed(URI uri, SocketAddress sa, IOException ioe) {, +      InetSocketAddress socketAddress = (InetSocketAddress) sa;, +      failures.add(, +          String.format("%s %s:%d %s", uri, socketAddress.getHostName(), socketAddress.getPort(),, +              ioe.getMessage()));, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +import okio.Sink;, +  @Test public void getResponseHeadersTimesOut() throws Exception {, +    peer.acceptFrame(); // RST_STREAM, +    stream.readTimeout().timeout(500, TimeUnit.MILLISECONDS);, +    long startNanos = System.nanoTime();, +    try {, +      stream.getResponseHeaders();, +      fail();, +    } catch (InterruptedIOException expected) {, +    }, +    long elapsedNanos = System.nanoTime() - startNanos;, +    assertEquals(500d, TimeUnit.NANOSECONDS.toMillis(elapsedNanos), 200d /* 200ms delta */);, +    assertEquals(0, connection.openStreamCount());, +, +    // verify the peer received what was expected, +    assertEquals(TYPE_HEADERS, peer.takeFrame().type);, +    assertEquals(TYPE_RST_STREAM, peer.takeFrame().type);]
[+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import okhttp3.internal.http.AuthenticatorAdapter;, +  private Authenticator authenticator = AuthenticatorAdapter.INSTANCE;, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import okhttp3.internal.http.AuthenticatorAdapter;, +  private Authenticator authenticator = AuthenticatorAdapter.INSTANCE;, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +public final class CookieTest {, +  HttpUrl url = HttpUrl.parse("https://example.com/");, +  @Test public void idnDomainMatches() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://☃.net/"), "a=b; domain=☃.net");, +    assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, +  }, +, +  @Test public void punycodeDomainMatches() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://xn--n3h.net/"), "a=b; domain=xn--n3h.net");, +    assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, +  }, +, +  @Test public void domainMatchesIpAddress() throws Exception {, +    HttpUrl urlWithIp = HttpUrl.parse("http://123.45.234.56/");, +    assertNull(Cookie.parse(urlWithIp, "a=b; domain=234.56"));, +    assertEquals("123.45.234.56", Cookie.parse(urlWithIp, "a=b; domain=123.45.234.56").domain());, +  }, +, +  @Test public void hostOnly() throws Exception {, +    assertTrue(Cookie.parse(url, "a=b").hostOnly());, +    assertFalse(Cookie.parse(url, "a=b; domain=example.com").hostOnly());, +  }, +, +  @Test public void defaultPath() throws Exception {, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"), "a=b").path());, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/"), "a=b").path());, +    assertEquals("/", Cookie.parse(HttpUrl.parse("http://example.com/foo"), "a=b").path());, +    assertEquals("/", Cookie.parse(HttpUrl.parse("http://example.com/"), "a=b").path());, +  }, +, +  @Test public void defaultPathIsUsedIfPathDoesntHaveLeadingSlash() throws Exception {, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"),, +        "a=b; path=quux").path());, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"),, +        "a=b; path=").path());, +  }, +, +  @Test public void pathAttributeDoesntNeedToMatch() throws Exception {, +    assertEquals("/quux", Cookie.parse(HttpUrl.parse("http://example.com/"),, +        "a=b; path=/quux").path());, +    assertEquals("/quux", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"),, +        "a=b; path=/quux").path());, +  }, +, +  @Test public void httpOnly() throws Exception {, +    assertFalse(Cookie.parse(url, "a=b").httpOnly());, +    assertTrue(Cookie.parse(url, "a=b; HttpOnly").httpOnly());, +  }, +, +  @Test public void secure() throws Exception {, +    assertFalse(Cookie.parse(url, "a=b").secure());, +    assertTrue(Cookie.parse(url, "a=b; Secure").secure());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import okhttp3.internal.http.AuthenticatorAdapter;, +  private Authenticator authenticator = AuthenticatorAdapter.INSTANCE;, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +public final class CookieTest {, +  HttpUrl url = HttpUrl.parse("https://example.com/");, +  @Test public void idnDomainMatches() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://☃.net/"), "a=b; domain=☃.net");, +    assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, +  }, +, +  @Test public void punycodeDomainMatches() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://xn--n3h.net/"), "a=b; domain=xn--n3h.net");, +    assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, +  }, +, +  @Test public void domainMatchesIpAddress() throws Exception {, +    HttpUrl urlWithIp = HttpUrl.parse("http://123.45.234.56/");, +    assertNull(Cookie.parse(urlWithIp, "a=b; domain=234.56"));, +    assertEquals("123.45.234.56", Cookie.parse(urlWithIp, "a=b; domain=123.45.234.56").domain());, +  }, +, +  @Test public void hostOnly() throws Exception {, +    assertTrue(Cookie.parse(url, "a=b").hostOnly());, +    assertFalse(Cookie.parse(url, "a=b; domain=example.com").hostOnly());, +  }, +]
[+++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.14.0-SNAPSHOT</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +  @Test public void applicationInterceptorResponseMustHaveBody() throws Exception {, +    server.enqueue(new MockResponse());, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        return chain.proceed(chain.request()).newBuilder().body(null).build();, +      }, +    };, +    client = client.newBuilder(), +        .addInterceptor(interceptor), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("interceptor " + interceptor + " returned a response with no body",, +          expected.getMessage());, +    }, +  }, +, +  @Test public void networkInterceptorResponseMustHaveBody() throws Exception {, +    server.enqueue(new MockResponse());, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        return chain.proceed(chain.request()).newBuilder().body(null).build();, +      }, +    };, +    client = client.newBuilder(), +        .addNetworkInterceptor(interceptor), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("interceptor " + interceptor + " returned a response with no body",, +          expected.getMessage());, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +  @Test public void applicationInterceptorResponseMustHaveBody() throws Exception {, +    server.enqueue(new MockResponse());, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        return chain.proceed(chain.request()).newBuilder().body(null).build();, +      }, +    };, +    client = client.newBuilder(), +        .addInterceptor(interceptor), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("interceptor " + interceptor + " returned a response with no body",, +          expected.getMessage());, +    }, +  }, +, +  @Test public void networkInterceptorResponseMustHaveBody() throws Exception {, +    server.enqueue(new MockResponse());, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        return chain.proceed(chain.request()).newBuilder().body(null).build();, +      }, +    };, +    client = client.newBuilder(), +        .addNetworkInterceptor(interceptor), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("interceptor " + interceptor + " returned a response with no body",, +          expected.getMessage());, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java]
[+++ b/CHANGELOG.md, +## Version 3.3.1, +, +_2016-05-28_, +, + *  Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified, +    newline characters as control characters. This is fixed., + *  Fix: Don't crash reading non-ASCII characters in HTTP/2 headers or in cached, +    HTTP headers., + *  Fix: Retain the response body when an attempt to open a web socket returns a, +    non-101 response code., +, +, +## Version 3.3.0, +, +_2016-05-24_, +, + *  New: `Response.sentRequestAtMillis()` and `receivedResponseAtMillis()`, +    methods track the system's local time when network calls are made. These, +    replace the `OkHttp-Sent-Millis` and `OkHttp-Received-Millis` headers that were, +    present in earlier versions of OkHttp., + *  New: Accept user-provided trust managers in `OkHttpClient.Builder`. This, +    allows OkHttp to satisfy its TLS requirements directly. Otherwise OkHttp, +    will use reflection to extract the `TrustManager` from the, +    `SSLSocketFactory`., + *  New: Support prerelease Java 9. This gets ALPN from the platform rather than, +    relying on the alpn-boot bootclasspath override., + *  New: `HttpLoggingInterceptor` now logs connection failures., + *  New: Upgrade to Okio 1.8.0., +, +     ```xml, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.8.0</version>, +     </dependency>, +     ```, +, + *  Fix: Gracefully recover from a failure to rebuild the cache journal., + *  Fix: Don't corrupt cache entries when a cache entry is evicted while it is, +    being updated., + *  Fix: Make logging more consistent throughout OkHttp., + *  Fix: Log plaintext bodies only. This uses simple heuristics to differentiate, +    text from other data., + *  Fix: Recover from `REFUSED_STREAM` errors in HTTP/2. This should improve, +    interoperability with Nginx 1.10.0, which [refuses][nginx_959] streams, +    created before HTTP/2 settings have been acknowledged., + *  Fix: Improve recovery from failed routes., + *  Fix: Accommodate tunneling proxies that close the connection after an auth, +    challenge., + *  Fix: Use the proxy authenticator when authenticating HTTP proxies. This, +    regression was introduced in OkHttp 3.0., + *  Fix: Fail fast if network interceptors transform the response body such that, +    closing it doesn't also close the underlying stream. We had a bug where, +    OkHttp would attempt to reuse a connection but couldn't because it was still, +    held by a prior request., + *  Fix: Ensure network interceptors always have access to the underlying, +    connection., + *  Fix: Use `X509TrustManagerExtensions` on Android 17+., + *  Fix: Unblock waiting dispatchers on MockWebServer shutdown., +, +, + [nginx_959]: https://trac.nginx.org/nginx/ticket/959, +++ b/CHANGELOG.md, +## Version 3.3.1, +, +_2016-05-28_, +, + *  Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified, +    newline characters as control characters. This is fixed., + *  Fix: Don't crash reading non-ASCII characters in HTTP/2 headers or in cached, +    HTTP headers., + *  Fix: Retain the response body when an attempt to open a web socket returns a, +    non-101 response code., +, +, +## Version 3.3.0, +, +_2016-05-24_, +, + *  New: `Response.sentRequestAtMillis()` and `receivedResponseAtMillis()`, +    methods track the system's local time when network calls are made. These, +    replace the `OkHttp-Sent-Millis` and `OkHttp-Received-Millis` headers that were, +    present in earlier versions of OkHttp., + *  New: Accept user-provided trust managers in `OkHttpClient.Builder`. This, +    allows OkHttp to satisfy its TLS requirements directly. Otherwise OkHttp, +    will use reflection to extract the `TrustManager` from the, +    `SSLSocketFactory`., + *  New: Support prerelease Java 9. This gets ALPN from the platform rather than, +    relying on the alpn-boot bootclasspath override., + *  New: `HttpLoggingInterceptor` now logs connection failures., + *  New: Upgrade to Okio 1.8.0., +, +     ```xml, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.8.0</version>, +     </dependency>, +     ```]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    try (Response response = client.newCall(request).execute()) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    try (Response response = client.newCall(request).execute()) {, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static org.junit.Assert.assertNotEquals;, +    assertTrue(cookie.secure());, +    assertTrue(cookie.httpOnly());, +          assertNotEquals(cookieA.hashCode(), cookieB.hashCode());, +          assertNotEquals(cookieA, cookieB);, +      assertNotEquals(null, cookieA);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    try (Response response = client.newCall(request).execute()) {, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static org.junit.Assert.assertNotEquals;, +    assertTrue(cookie.secure());, +    assertTrue(cookie.httpOnly());, +          assertNotEquals(cookieA.hashCode(), cookieB.hashCode());, +          assertNotEquals(cookieA, cookieB);, +      assertNotEquals(null, cookieA);, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +          try (DiskLruCache.Snapshot snapshot = delegate.next()) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java, +import java.util.Arrays;, +  public void check(String hostname, List<Certificate> peerCertificates), +    for (int i = 0, size = peerCertificates.size(); i < size; i++) {, +      X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, +    for (int i = 0, size = peerCertificates.size(); i < size; i++) {, +      X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, +    for (int i = 0, size = pins.size(); i < size; i++) {, +      ByteString pin = pins.get(i);, +  /** @deprecated replaced with {@link #check(String, List)}. */, +  public void check(String hostname, Certificate... peerCertificates), +      throws SSLPeerUnverifiedException {, +    check(hostname, Arrays.asList(peerCertificates));, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java, +import java.util.Arrays;, +  public void check(String hostname, List<Certificate> peerCertificates), +    for (int i = 0, size = peerCertificates.size(); i < size; i++) {, +      X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, +    for (int i = 0, size = peerCertificates.size(); i < size; i++) {, +      X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, +    for (int i = 0, size = pins.size(); i < size; i++) {, +      ByteString pin = pins.get(i);, +  /** @deprecated replaced with {@link #check(String, List)}. */, +  public void check(String hostname, Certificate... peerCertificates), +      throws SSLPeerUnverifiedException {, +    check(hostname, Arrays.asList(peerCertificates));, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    try {, +      String maybeProtocol;, +      if (route.connectionSpec.supportsTlsExtensions(), +          && (maybeProtocol = platform.getSelectedProtocol(sslSocket)) != null) {, +        protocol = Protocol.get(maybeProtocol); // Throws IOE on unknown., +      }, +    } finally {, +      platform.afterHandshake(sslSocket);, +    }, +, +    handshake = Handshake.get(sslSocket.getSession());, +, +    route.address.certificatePinner.check(route.address.uriHost, handshake.peerCertificates());, +++ b/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java, +import java.util.Arrays;, +  public void check(String hostname, List<Certificate> peerCertificates), +    for (int i = 0, size = peerCertificates.size(); i < size; i++) {, +      X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, +    for (int i = 0, size = peerCertificates.size(); i < size; i++) {, +      X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, +    for (int i = 0, size = pins.size(); i < size; i++) {, +      ByteString pin = pins.get(i);, +  /** @deprecated replaced with {@link #check(String, List)}. */, +  public void check(String hostname, Certificate... peerCertificates), +      throws SSLPeerUnverifiedException {, +    check(hostname, Arrays.asList(peerCertificates));, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    try {, +      String maybeProtocol;, +      if (route.connectionSpec.supportsTlsExtensions(), +          && (maybeProtocol = platform.getSelectedProtocol(sslSocket)) != null) {, +        protocol = Protocol.get(maybeProtocol); // Throws IOE on unknown., +      }, +    } finally {, +      platform.afterHandshake(sslSocket);, +    }, +, +    handshake = Handshake.get(sslSocket.getSession());, +, +    route.address.certificatePinner.check(route.address.uriHost, handshake.peerCertificates());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, +  /**, +   * Called after the TLS handshake to release resources allocated by {@link, +   * #configureTlsExtensions}., +   */, +  public void afterHandshake(SSLSocket sslSocket) {, +  }, +, +      Method removeMethod = negoClass.getMethod("remove", SSLSocket.class);, +          putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass);, +    private final Method getMethod;, +    private final Method removeMethod;, +    public JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method removeMethod,, +      this.removeMethod = removeMethod;, +    @Override public void afterHandshake(SSLSocket sslSocket) {, +      try {, +        removeMethod.invoke(null, sslSocket);, +      } catch (IllegalAccessException ignored) {, +        throw new AssertionError();, +      } catch (InvocationTargetException ignored) {, +        throw new AssertionError();, +      }, +    }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java, +import java.util.Arrays;, +  public void check(String hostname, List<Certificate> peerCertificates)]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import okhttp3.internal.tls.SslClient;, +import okhttp3.mockwebserver.SocketPolicy;, +import static org.junit.Assert.assertNotNull;, +  private final SslClient sslClient = SslClient.localhost();, +  @Test public void successfulCallEventSequence() throws IOException {, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    List<Class<?>> expectedEvents = Arrays.asList(DnsStart.class, DnsEnd.class);, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +  @Test public void successfulHttpsCallEventSequence() throws IOException {, +    enableTls(false);, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    List<Class<?>> expectedEvents = Arrays.asList(, +        DnsStart.class, DnsEnd.class,, +        SecureConnectStart.class, SecureConnectEnd.class);, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +    DnsStart dnsStart = listener.findNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.findNextEvent(DnsEnd.class);, +    listener.findNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.findNextEvent(DnsEnd.class);, +    listener.findNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.findNextEvent(DnsEnd.class);, +  @Test public void successfulSecureConnect() throws IOException {, +    enableTls(false);, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    SecureConnectStart secureStart = listener.findNextEvent(SecureConnectStart.class);, +    assertSame(call, secureStart.call);, +, +    SecureConnectEnd secureEnd = listener.findNextEvent(SecureConnectEnd.class);, +    assertSame(call, secureEnd.call);, +    assertNotNull(secureEnd.handshake);, +    assertNull(secureEnd.throwable);, +  }, +, +  @Test public void failedSecureConnect() {, +    enableTls(false);, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +, +    SecureConnectStart secureStart = listener.findNextEvent(SecureConnectStart.class);, +    assertSame(call, secureStart.call);, +, +    SecureConnectEnd secureEnd = listener.findNextEvent(SecureConnectEnd.class);, +    assertSame(call, secureEnd.call);, +    assertNull(secureEnd.handshake);, +    assertTrue(secureEnd.throwable instanceof IOException);, +  }, +, +  @Test public void secureConnectWithTunnel() throws IOException {, +    enableTls(true);, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END));, +    server.enqueue(new MockResponse());, +, +    client = client.newBuilder(), +        .proxy(server.toProxyAddress()), +        .build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, +    hpackWriter = new Hpack.Writer(4096, false, bytesOut);, +    Hpack.Writer writer = new Hpack.Writer(110, false, bytesOut);, +  @Test public void huffmanEncode() throws IOException {, +    hpackWriter = new Hpack.Writer(4096, true, bytesOut);, +    hpackWriter.writeHeaders(headerEntries("foo", "bar"));, +, +    ByteString expected = new Buffer(), +        .writeByte(0x40) // Literal header, new name., +        .writeByte(0x82) // String literal is Huffman encoded (len = 2)., +        .writeByte(0x94) // 'foo' Huffman encoded., +        .writeByte(0xE7), +        .writeByte(3) // String literal not Huffman encoded (len = 3)., +        .writeByte('b'), +        .writeByte('a'), +        .writeByte('r'), +        .readByteString();, +, +    ByteString actual = bytesOut.readByteString();, +    assertEquals(expected, actual);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, +    hpackWriter = new Hpack.Writer(4096, false, bytesOut);, +    Hpack.Writer writer = new Hpack.Writer(110, false, bytesOut);, +  @Test public void huffmanEncode() throws IOException {, +    hpackWriter = new Hpack.Writer(4096, true, bytesOut);, +    hpackWriter.writeHeaders(headerEntries("foo", "bar"));, +, +    ByteString expected = new Buffer(), +        .writeByte(0x40) // Literal header, new name., +        .writeByte(0x82) // String literal is Huffman encoded (len = 2)., +        .writeByte(0x94) // 'foo' Huffman encoded., +        .writeByte(0xE7), +        .writeByte(3) // String literal not Huffman encoded (len = 3)., +        .writeByte('b'), +        .writeByte('a'), +        .writeByte('r'), +        .readByteString();, +, +    ByteString actual = bytesOut.readByteString();, +    assertEquals(expected, actual);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HuffmanTest.java, +import okio.Buffer;, +import okio.ByteString;, +      assertRoundTrip(ByteString.encodeUtf8(s.substring(0, i)));, +    assertRoundTrip(ByteString.of(buf));, +  private void assertRoundTrip(ByteString data) throws IOException {, +    Buffer buffer = new Buffer();, +    Huffman.get().encode(data, buffer);, +    assertEquals(buffer.size(), Huffman.get().encodedLength(data));, +    byte[] decodedBytes = Huffman.get().decode(buffer.readByteArray());, +    assertTrue(Arrays.equals(data.toByteArray(), decodedBytes));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, +    hpackWriter = new Hpack.Writer(4096, false, bytesOut);, +    Hpack.Writer writer = new Hpack.Writer(110, false, bytesOut);, +  @Test public void huffmanEncode() throws IOException {, +    hpackWriter = new Hpack.Writer(4096, true, bytesOut);, +    hpackWriter.writeHeaders(headerEntries("foo", "bar"));, +, +    ByteString expected = new Buffer(), +        .writeByte(0x40) // Literal header, new name., +        .writeByte(0x82) // String literal is Huffman encoded (len = 2)., +        .writeByte(0x94) // 'foo' Huffman encoded., +        .writeByte(0xE7), +        .writeByte(3) // String literal not Huffman encoded (len = 3)., +        .writeByte('b'), +        .writeByte('a'), +        .writeByte('r'), +        .readByteString();, +, +    ByteString actual = bytesOut.readByteString();, +    assertEquals(expected, actual);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HuffmanTest.java, +import okio.Buffer;, +import okio.ByteString;, +      assertRoundTrip(ByteString.encodeUtf8(s.substring(0, i)));, +    assertRoundTrip(ByteString.of(buf));, +  private void assertRoundTrip(ByteString data) throws IOException {, +    Buffer buffer = new Buffer();, +    Huffman.get().encode(data, buffer);, +    assertEquals(buffer.size(), Huffman.get().encodedLength(data));, +    byte[] decodedBytes = Huffman.get().decode(buffer.readByteArray());, +    assertTrue(Arrays.equals(data.toByteArray(), decodedBytes));, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java, +    private final boolean useCompression;, +      this(SETTINGS_HEADER_TABLE_SIZE, true, out);, +    Writer(int headerTableSizeSetting, boolean useCompression, Buffer out) {, +      this.useCompression = useCompression;, +      if (useCompression && Huffman.get().encodedLength(data) < data.size()) {, +        Buffer huffmanBuffer = new Buffer();, +        Huffman.get().encode(data, huffmanBuffer);, +        ByteString huffmanBytes = huffmanBuffer.readByteString();, +        writeInt(huffmanBytes.size(), PREFIX_7_BITS, 0x80);, +        out.write(huffmanBytes);, +      } else {]
[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java, +  /** Earliest draft that is code-compatible with latest. */, +  private static final int BASE_DRAFT = 9;, +          if (firstStory.getDraft() >= BASE_DRAFT) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java, +  /** Earliest draft that is code-compatible with latest. */, +  private static final int BASE_DRAFT = 9;, +          if (firstStory.getDraft() >= BASE_DRAFT) {, +++ /dev/null, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java, +  /** Earliest draft that is code-compatible with latest. */, +  private static final int BASE_DRAFT = 9;, +          if (firstStory.getDraft() >= BASE_DRAFT) {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp2Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.http;, +, +import com.squareup.okhttp.Headers;, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.PushPromise;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class HttpOverHttp2Test extends HttpOverSpdyTest {, +, +  public HttpOverHttp2Test() {, +    super(Protocol.HTTP_2);, +    this.hostHeader = ":authority";, +  }, +, +  @Test public void serverSendsPushPromise_GET() throws Exception {]
[+++ b/checkstyle.xml, +        <module name="NeedBraces"/>, +++ b/checkstyle.xml, +        <module name="NeedBraces"/>, +++ b/src/main/java/libcore/net/http/HttpConnectionPool.java, +            throw new IllegalArgumentException(); // TODO: just 'return' here?, +++ b/checkstyle.xml, +        <module name="NeedBraces"/>, +++ b/src/main/java/libcore/net/http/HttpConnectionPool.java, +            throw new IllegalArgumentException(); // TODO: just 'return' here?, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.SynchronousQueue;, +import java.util.concurrent.ThreadPoolExecutor;, +import java.util.concurrent.TimeUnit;, +, +import static libcore.net.spdy.Threads.newThreadFactory;, + *, + * <p>Many methods in this API are <strong>synchronous:</strong> the call is, + * completed before the method returns. This is typical for Java but atypical, + * for SPDY. This is motivated by exception transparency: an IOException that, + * was triggered by a certain caller can be caught and handled by that caller., +     * Internal state of this connection is guarded by 'this'. No blocking, +     * operations may be performed while holding this lock!, +     *, +     * Socket writes are guarded by spdyWriter., +     *, +     * Socket reads are unguarded but are only made by the reader thread., +     *, +     * Certain operations (like SYN_STREAM) need to synchronize on both the, +     * spdyWriter (to do blocking I/O) and this (to create streams). Such, +     * operations must synchronize on 'this' last. This ensures that we never, +     * wait for a blocking operation while holding 'this'., +    private final ExecutorService readExecutor;, +    private final ExecutorService writeExecutor;, +    private final ExecutorService callbackExecutor;, +, +    /**, +     * User code to run in response to an incoming stream. Callbacks must not be, +     * run on the callback executor., +     */, +    private final IncomingStreamHandler handler;, +, +    private final Map<Integer, SpdyStream> streams = new HashMap<Integer, SpdyStream>();, +    private int nextStreamId;, +, +    /** Lazily-created map of in-flight pings awaiting a response. Guarded by this. */, +    private Map<Integer, Ping> pings;, +    private int nextPingId;, +        nextStreamId = builder.client ? 1 : 2;, +        nextPingId = builder.client ? 1 : 2;, +        String prefix = isClient() ? "Spdy Client " : "Spdy Server ";, +        readExecutor = new ThreadPoolExecutor(1, 1, 60, TimeUnit.SECONDS,, +                new SynchronousQueue<Runnable>(), newThreadFactory(prefix + "Reader", true));, +        writeExecutor = new ThreadPoolExecutor(0, 1, 60, TimeUnit.SECONDS,, +                new LinkedBlockingQueue<Runnable>(), newThreadFactory(prefix + "Writer", true));, +        callbackExecutor = new ThreadPoolExecutor(1, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,, +                new SynchronousQueue<Runnable>(), newThreadFactory(prefix + "Callbacks", true));, +, +        readExecutor.execute(new Reader());, +    private synchronized SpdyStream getStream(int id) {, +            // TODO: rst stream, +            throw new UnsupportedOperationException("TODO " + id + "; " + streams);, +    synchronized void removeStream(int streamId) {, +    public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in), +        SpdyStream stream;, +        int streamId;, +        synchronized (spdyWriter) {, +            synchronized (this) {, +                streamId = nextStreamId;, +                nextStreamId += 2;, +                stream = new SpdyStream(streamId, this, requestHeaders, flags);, +                streams.put(streamId, stream);, +            }, +        return stream;, +    }, +, +    void writeSynReply(int streamId, List<String> alternating) throws IOException {, +        synchronized (spdyWriter) {, +    }, +    void writeFrame(byte[] bytes, int offset, int length) throws IOException {, +        synchronized (spdyWriter) {, +    }, +        writeExecutor.execute(new Runnable() {, +    void writeSynReset(int streamId, int statusCode) throws IOException {, +        synchronized (spdyWriter) {, +    }, +     * Sends a ping frame to the peer. Use the returned object to await the, +     * ping's response and observe its round trip time., +    public synchronized Ping ping() {, +        int pingId = nextPingId;, +        if (pings == null) pings = new HashMap<Integer, Ping>();, +    private void writePingLater(final int id, final Ping ping) {, +        writeExecutor.execute(new Runnable() {, +    private void writePing(int id, Ping ping) throws IOException {, +, +        synchronized (spdyWriter) {, +            spdyWriter.flags = 0;, +            spdyWriter.id = id;, +    }]
[+++ b/okhttp/pom.xml, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-assembly-plugin</artifactId>, +        <configuration>, +          <descriptorRefs>, +            <descriptorRef>jar-with-dependencies</descriptorRef>, +          </descriptorRefs>, +        </configuration>, +        <executions>, +          <execution>, +            <phase>package</phase>, +            <goals>, +              <goal>single</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +++ b/okhttp/pom.xml, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-assembly-plugin</artifactId>, +        <configuration>, +          <descriptorRefs>, +            <descriptorRef>jar-with-dependencies</descriptorRef>, +          </descriptorRefs>, +        </configuration>, +        <executions>, +          <execution>, +            <phase>package</phase>, +            <goals>, +              <goal>single</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/DelegatingHttpsURLConnection.java, +/*, + *  Licensed to the Apache Software Foundation (ASF) under one or more, + *  contributor license agreements.  See the NOTICE file distributed with, + *  this work for additional information regarding copyright ownership., + *  The ASF licenses this file to You under the Apache License, Version 2.0, + *  (the "License"); you may not use this file except in compliance with, + *  the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + *  Unless required by applicable law or agreed to in writing, software, + *  distributed under the License is distributed on an "AS IS" BASIS,, + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *  See the License for the specific language governing permissions and, + *  limitations under the License., + */, +package com.squareup.okhttp.internal.http;, +, +import com.squareup.okhttp.Handshake;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.net.HttpURLConnection;, +import java.net.ProtocolException;, +import java.net.URL;, +import java.security.Permission;, +import java.security.Principal;, +import java.security.cert.Certificate;, +import java.util.List;, +import java.util.Map;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLPeerUnverifiedException;, +import javax.net.ssl.SSLSocketFactory;, +, +/**, + * Implement an HTTPS connection by delegating to an HTTP connection for, + * everything but the HTTPS-specific stuff., + */, +abstract class DelegatingHttpsURLConnection extends HttpsURLConnection {, +  private final HttpURLConnection delegate;, +, +  public DelegatingHttpsURLConnection(HttpURLConnection delegate) {, +    super(delegate.getURL());, +    this.delegate = delegate;, +  }, +, +  protected abstract Handshake handshake();, +, +  @Override public abstract void setHostnameVerifier(HostnameVerifier hostnameVerifier);, +, +  @Override public abstract HostnameVerifier getHostnameVerifier();, +, +  @Override public abstract void setSSLSocketFactory(SSLSocketFactory sslSocketFactory);, +, +  @Override public abstract SSLSocketFactory getSSLSocketFactory();, +, +  @Override public String getCipherSuite() {, +    Handshake handshake = handshake();, +    return handshake != null ? handshake.cipherSuite() : null;, +  }]
[+++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_121</id>, +      <activation>, +        <jdk>1.8.0_121</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ b/build.xml, +    <target name="docs">, +        <mkdir dir="build/api"/>, +		<javadoc destdir="build/api" windowtitle="MockWebServer" source="1.6">, +			<packageset dir="src/main/java"/>, +		</javadoc>, +	</target>, +, +++ b/build.xml, +    <target name="docs">, +        <mkdir dir="build/api"/>, +		<javadoc destdir="build/api" windowtitle="MockWebServer" source="1.6">, +			<packageset dir="src/main/java"/>, +		</javadoc>, +	</target>, +, +++ b/javadoc/allclasses-frame.html, +<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">, +<!--NewPage-->, +<HTML>, +<HEAD>, +<!-- Generated by javadoc (build 1.6.0_24) on Tue May 24 23:30:28 PDT 2011 -->, +<TITLE>, +All Classes (MockWebServer), +</TITLE>, +, +<META NAME="date" CONTENT="2011-05-24">, +, +<LINK REL ="stylesheet" TYPE="text/css" HREF="stylesheet.css" TITLE="Style">, +, +, +</HEAD>, +, +<BODY BGCOLOR="white">, +<FONT size="+1" CLASS="FrameHeadingFont">, +<B>All Classes</B></FONT>, +<BR>, +, +<TABLE BORDER="0" WIDTH="100%" SUMMARY="">, +<TR>, +<TD NOWRAP><FONT CLASS="FrameItemFont"><A HREF="com/google/mockwebserver/MockResponse.html" title="class in com.google.mockwebserver" target="classFrame">MockResponse</A>, +<BR>, +<A HREF="com/google/mockwebserver/MockWebServer.html" title="class in com.google.mockwebserver" target="classFrame">MockWebServer</A>, +<BR>, +<A HREF="com/google/mockwebserver/RecordedRequest.html" title="class in com.google.mockwebserver" target="classFrame">RecordedRequest</A>, +<BR>, +<A HREF="com/google/mockwebserver/SocketPolicy.html" title="enum in com.google.mockwebserver" target="classFrame">SocketPolicy</A>, +<BR>, +</FONT></TD>, +</TR>, +</TABLE>, +, +</BODY>, +</HTML>, +++ b/build.xml, +    <target name="docs">, +        <mkdir dir="build/api"/>, +		<javadoc destdir="build/api" windowtitle="MockWebServer" source="1.6">, +			<packageset dir="src/main/java"/>, +		</javadoc>, +	</target>, +, +++ b/javadoc/allclasses-frame.html, +<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">, +<!--NewPage-->, +<HTML>, +<HEAD>, +<!-- Generated by javadoc (build 1.6.0_24) on Tue May 24 23:30:28 PDT 2011 -->, +<TITLE>, +All Classes (MockWebServer), +</TITLE>, +, +<META NAME="date" CONTENT="2011-05-24">, +, +<LINK REL ="stylesheet" TYPE="text/css" HREF="stylesheet.css" TITLE="Style">, +, +, +</HEAD>, +, +<BODY BGCOLOR="white">, +<FONT size="+1" CLASS="FrameHeadingFont">, +<B>All Classes</B></FONT>, +<BR>, +, +<TABLE BORDER="0" WIDTH="100%" SUMMARY="">, +<TR>, +<TD NOWRAP><FONT CLASS="FrameItemFont"><A HREF="com/google/mockwebserver/MockResponse.html" title="class in com.google.mockwebserver" target="classFrame">MockResponse</A>, +<BR>, +<A HREF="com/google/mockwebserver/MockWebServer.html" title="class in com.google.mockwebserver" target="classFrame">MockWebServer</A>, +<BR>, +<A HREF="com/google/mockwebserver/RecordedRequest.html" title="class in com.google.mockwebserver" target="classFrame">RecordedRequest</A>, +<BR>, +<A HREF="com/google/mockwebserver/SocketPolicy.html" title="enum in com.google.mockwebserver" target="classFrame">SocketPolicy</A>, +<BR>, +</FONT></TD>, +</TR>, +</TABLE>, +, +</BODY>, +</HTML>]
[+++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +import okhttp3.internal.connection.RealConnectionPool;, +  public final RealConnectionPool connectionPool;, +    this.connectionPool = Internal.instance.realConnectionPool(client.connectionPool());, +  public void noNewStreamsOnConnection() {, +    connection().noNewStreams();, +  public void responseBodyComplete(long bytesRead, IOException e) {, +      streamAllocation.responseBodyComplete(bytesRead, e);, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +import okhttp3.internal.connection.RealConnectionPool;, +  public final RealConnectionPool connectionPool;, +    this.connectionPool = Internal.instance.realConnectionPool(client.connectionPool());, +  public void noNewStreamsOnConnection() {, +    connection().noNewStreams();, +  public void responseBodyComplete(long bytesRead, IOException e) {, +      streamAllocation.responseBodyComplete(bytesRead, e);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public final RealConnectionPool connectionPool;, +  /**, +   * If true, no new streams can be created on this connection. Once true this is always true., +   * Guarded by {@link #connectionPool}., +   */, +  /** Prevent further streams from being created on this connection. */, +  public void noNewStreams() {, +    assert (!Thread.holdsLock(connectionPool));, +    synchronized (connectionPool) {, +      noNewStreams = true;, +    }, +  }, +, +      Http1Codec tunnelConnection = new Http1Codec(null, this, null, source, sink);, +      return new Http1Codec(client, this, transmitter, source, sink);, +        transmitter.responseBodyComplete(-1L, null);, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +import okhttp3.internal.connection.RealConnectionPool;, +  public final RealConnectionPool connectionPool;, +    this.connectionPool = Internal.instance.realConnectionPool(client.connectionPool());, +  public void noNewStreamsOnConnection() {, +    connection().noNewStreams();, +  public void responseBodyComplete(long bytesRead, IOException e) {, +      streamAllocation.responseBodyComplete(bytesRead, e);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public final RealConnectionPool connectionPool;, +  /**, +   * If true, no new streams can be created on this connection. Once true this is always true., +   * Guarded by {@link #connectionPool}., +   */, +  /** Prevent further streams from being created on this connection. */, +  public void noNewStreams() {, +    assert (!Thread.holdsLock(connectionPool));, +    synchronized (connectionPool) {, +      noNewStreams = true;, +    }, +  }, +, +      Http1Codec tunnelConnection = new Http1Codec(null, this, null, source, sink);, +      return new Http1Codec(client, this, transmitter, source, sink);, +        transmitter.responseBodyComplete(-1L, null);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, + *     <li>{@link RealConnection#noNewStreams} prevents the connection from being used for new, + *         streams in the future. Use this after a {@code Connection: close} header, or when the, + *         connection may be inconsistent., + *     <li>{@link #responseBodyComplete} releases the active stream from this allocation., + *         it before creating a subsequent stream with {@link #newStream}., +        candidate.noNewStreams();, +      return deallocate(false, true);, +  public void responseBodyComplete(long bytesRead, IOException e) {, +      if (codec == null) throw new IllegalStateException("codec == null");, +      socket = deallocate(false, true);, +  public RealConnection connection() {, +    synchronized (connectionPool) {, +  }, +      socket = deallocate(true, false);, +  private Socket deallocate(boolean released, boolean streamFinished) {, +            connection.noNewStreams = true;, +          connection.noNewStreams = true;, +        connection.noNewStreams = true;, +      socket = deallocate(false, true);, +    connection.noNewStreams = true;, +    Socket socket = transmitterReleaseConnection();, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +import okhttp3.internal.connection.RealConnectionPool;, +  public final RealConnectionPool connectionPool;, +    this.connectionPool = Internal.instance.realConnectionPool(client.connectionPool());, +  public void noNewStreamsOnConnection() {, +    connection().noNewStreams();, +  public void responseBodyComplete(long bytesRead, IOException e) {, +      streamAllocation.responseBodyComplete(bytesRead, e);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public final RealConnectionPool connectionPool;, +  /**, +   * If true, no new streams can be created on this connection. Once true this is always true., +   * Guarded by {@link #connectionPool}., +   */, +  /** Prevent further streams from being created on this connection. */, +  public void noNewStreams() {, +    assert (!Thread.holdsLock(connectionPool));, +    synchronized (connectionPool) {, +      noNewStreams = true;, +    }]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.Buffer;, +      result.setChunkedBody(new Buffer().write(body), 1024);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.Buffer;, +      result.setChunkedBody(new Buffer().write(body), 1024);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import okio.Buffer;, +  private Buffer body;, +    setBody(new Buffer());, +  public Buffer getBody() {, +    return body != null ? body.clone() : null; // Defensive copy., +    return bodyStream != null ? bodyStream : getBody().inputStream();, +    return setBody(new Buffer().write(body));, +  }, +, +  public MockResponse setBody(Buffer body) {, +    setHeader("Content-Length", body.size());, +    this.body = body.clone(); // Defensive copy., +    return setBody(new Buffer().writeUtf8(body));, +  public MockResponse setChunkedBody(Buffer body, int maxChunkSize) {, +    Buffer bytesOut = new Buffer();, +    while (!body.exhausted()) {, +      long chunkSize = Math.min(body.size(), maxChunkSize);, +      bytesOut.writeUtf8(Long.toHexString(chunkSize));, +      bytesOut.writeUtf8("\r\n");, +      bytesOut.write(body, chunkSize);, +      bytesOut.writeUtf8("\r\n");, +    bytesOut.writeUtf8("0\r\n\r\n"); // Last chunk + empty trailer + CRLF., +    this.body = bytesOut;, +    return setChunkedBody(new Buffer().writeUtf8(body), maxChunkSize);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.Buffer;, +      result.setChunkedBody(new Buffer().write(body), 1024);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import okio.Buffer;, +  private Buffer body;, +    setBody(new Buffer());, +  public Buffer getBody() {, +    return body != null ? body.clone() : null; // Defensive copy., +    return bodyStream != null ? bodyStream : getBody().inputStream();, +    return setBody(new Buffer().write(body));, +  }, +, +  public MockResponse setBody(Buffer body) {, +    setHeader("Content-Length", body.size());, +    this.body = body.clone(); // Defensive copy., +    return setBody(new Buffer().writeUtf8(body));, +  public MockResponse setChunkedBody(Buffer body, int maxChunkSize) {, +    Buffer bytesOut = new Buffer();, +    while (!body.exhausted()) {, +      long chunkSize = Math.min(body.size(), maxChunkSize);, +      bytesOut.writeUtf8(Long.toHexString(chunkSize));, +      bytesOut.writeUtf8("\r\n");, +      bytesOut.write(body, chunkSize);, +      bytesOut.writeUtf8("\r\n");, +    bytesOut.writeUtf8("0\r\n\r\n"); // Last chunk + empty trailer + CRLF., +    this.body = bytesOut;, +    return setChunkedBody(new Buffer().writeUtf8(body), maxChunkSize);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      Buffer body = response.getBody();, +      if (body == null) body = new Buffer();, +        Buffer pushedBody = pushPromise.getResponse().getBody();, +            stream.getConnection().pushStream(stream.getId(), pushedHeaders, pushedBody.size() > 0);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.Buffer;, +      result.setChunkedBody(new Buffer().write(body), 1024);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import okio.Buffer;, +  private Buffer body;, +    setBody(new Buffer());, +  public Buffer getBody() {, +    return body != null ? body.clone() : null; // Defensive copy., +    return bodyStream != null ? bodyStream : getBody().inputStream();, +    return setBody(new Buffer().write(body));, +  }, +, +  public MockResponse setBody(Buffer body) {, +    setHeader("Content-Length", body.size());, +    this.body = body.clone(); // Defensive copy., +    return setBody(new Buffer().writeUtf8(body));, +  public MockResponse setChunkedBody(Buffer body, int maxChunkSize) {, +    Buffer bytesOut = new Buffer();, +    while (!body.exhausted()) {, +      long chunkSize = Math.min(body.size(), maxChunkSize);, +      bytesOut.writeUtf8(Long.toHexString(chunkSize));, +      bytesOut.writeUtf8("\r\n");, +      bytesOut.write(body, chunkSize);, +      bytesOut.writeUtf8("\r\n");, +    bytesOut.writeUtf8("0\r\n\r\n"); // Last chunk + empty trailer + CRLF., +    this.body = bytesOut;, +    return setChunkedBody(new Buffer().writeUtf8(body), maxChunkSize);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      Buffer body = response.getBody();, +      if (body == null) body = new Buffer();, +        Buffer pushedBody = pushPromise.getResponse().getBody();, +            stream.getConnection().pushStream(stream.getId(), pushedHeaders, pushedBody.size() > 0);, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +  private static Buffer gzip(String body) throws IOException {, +    return buffer;]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import okhttp3.HttpUrl;, +  private final HttpUrl requestUrl;, +, +      String scheme = socket instanceof SSLSocket ? "https" : "http";, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +      this.requestUrl = null;, +  public HttpUrl getRequestUrl() {, +    return requestUrl;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import okhttp3.HttpUrl;, +  private final HttpUrl requestUrl;, +, +      String scheme = socket instanceof SSLSocket ? "https" : "http";, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +      this.requestUrl = null;, +  public HttpUrl getRequestUrl() {, +    return requestUrl;, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.HttpUrl;, +, +  @Test public void requestUrlReconstructed() throws Exception {, +    server.enqueue(new MockResponse().setBody("hello world"));, +, +    URL url = server.url("/a/deep/path?key=foo%20bar").url();, +    HttpURLConnection connection = (HttpURLConnection) url.openConnection();, +    InputStream in = connection.getInputStream();, +    BufferedReader reader = new BufferedReader(new InputStreamReader(in));, +    assertEquals(HttpURLConnection.HTTP_OK, connection.getResponseCode());, +    assertEquals("hello world", reader.readLine());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /a/deep/path?key=foo%20bar HTTP/1.1", request.getRequestLine());, +, +    HttpUrl requestUrl = request.getRequestUrl();, +    assertEquals("http", requestUrl.scheme());, +    assertEquals(server.getHostName(), requestUrl.host());, +    assertEquals(server.getPort(), requestUrl.port());, +    assertEquals("/a/deep/path", requestUrl.encodedPath());, +    assertEquals("foo bar", requestUrl.queryParameter("key"));, +  }]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +import java.net.HttpURLConnection;, +import java.util.Arrays;, +import okhttp3.Protocol;, +  /**, +   * We had a bug where web socket connections were leaked if the HTTP connection upgrade was not, +   * successful. This test confirms that connections are released back to the connection pool!, +   * https://github.com/square/okhttp/issues/4258, +   */, +  @Test public void webSocketConnectionIsReleased() throws Exception {, +    // This test assumes HTTP/1.1 pooling semantics., +    client = client.newBuilder(), +        .protocols(Arrays.asList(Protocol.HTTP_1_1)), +        .build();, +, +    webServer.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_FOUND), +        .setBody("not found!"));, +    webServer.enqueue(new MockResponse());, +, +    newWebSocket();, +    clientListener.assertFailure();, +, +    Request regularRequest = new Request.Builder(), +        .url(webServer.url("/")), +        .build();, +    Response response = client.newCall(regularRequest).execute();, +    response.close();, +, +    assertEquals(0, webServer.takeRequest().getSequenceNumber());, +    assertEquals(1, webServer.takeRequest().getSequenceNumber());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +import java.net.HttpURLConnection;, +import java.util.Arrays;, +import okhttp3.Protocol;, +  /**, +   * We had a bug where web socket connections were leaked if the HTTP connection upgrade was not, +   * successful. This test confirms that connections are released back to the connection pool!, +   * https://github.com/square/okhttp/issues/4258, +   */, +  @Test public void webSocketConnectionIsReleased() throws Exception {, +    // This test assumes HTTP/1.1 pooling semantics., +    client = client.newBuilder(), +        .protocols(Arrays.asList(Protocol.HTTP_1_1)), +        .build();, +, +    webServer.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_FOUND), +        .setBody("not found!"));, +    webServer.enqueue(new MockResponse());, +, +    newWebSocket();, +    clientListener.assertFailure();, +, +    Request regularRequest = new Request.Builder(), +        .url(webServer.url("/")), +        .build();, +    Response response = client.newCall(regularRequest).execute();, +    response.close();, +, +    assertEquals(0, webServer.takeRequest().getSequenceNumber());, +    assertEquals(1, webServer.takeRequest().getSequenceNumber());, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java]
[+++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +import okio.ByteString;, +          @Override public void onPong(ByteString payload) {, +      @Override public void onPong(ByteString payload) {, +      @Override public void onPong(ByteString payload) {, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +import okio.ByteString;, +          @Override public void onPong(ByteString payload) {, +      @Override public void onPong(ByteString payload) {, +      @Override public void onPong(ByteString payload) {, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okio.ByteString;, +    client.sendPing(ByteString.encodeUtf8("Hello, WebSockets!"));, +    clientListener.assertPong(ByteString.encodeUtf8("Hello, WebSockets!"));, +  }, +, +  @Test public void nullPingPayloadThrows() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    enqueueClientWebSocket();, +, +    WebSocket client = clientListener.assertOpen();, +    try {, +      client.sendPing(null);, +      fail();, +    } catch (NullPointerException e) {, +      assertEquals("payload == null", e.getMessage());, +    }, +      @Override public void onPong(ByteString payload) {, +    client.sendPing(ByteString.EMPTY);, +    client.sendPing(ByteString.encodeUtf8("WebSockets are fun!"));, +    clientListener.assertPong(ByteString.encodeUtf8("WebSockets are fun!"));, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +import okio.ByteString;, +          @Override public void onPong(ByteString payload) {, +      @Override public void onPong(ByteString payload) {, +      @Override public void onPong(ByteString payload) {, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okio.ByteString;, +    client.sendPing(ByteString.encodeUtf8("Hello, WebSockets!"));, +    clientListener.assertPong(ByteString.encodeUtf8("Hello, WebSockets!"));, +  }, +, +  @Test public void nullPingPayloadThrows() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    enqueueClientWebSocket();, +, +    WebSocket client = clientListener.assertOpen();, +    try {, +      client.sendPing(null);, +      fail();, +    } catch (NullPointerException e) {, +      assertEquals("payload == null", e.getMessage());, +    }, +      @Override public void onPong(ByteString payload) {, +    client.sendPing(ByteString.EMPTY);, +    client.sendPing(ByteString.encodeUtf8("WebSockets are fun!"));, +    clientListener.assertPong(ByteString.encodeUtf8("WebSockets are fun!"));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/EmptyWebSocketListener.java, +import okio.ByteString;, +  @Override public void onPong(ByteString payload) {, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +import okio.ByteString;, +          @Override public void onPong(ByteString payload) {, +      @Override public void onPong(ByteString payload) {, +      @Override public void onPong(ByteString payload) {, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okio.ByteString;, +    client.sendPing(ByteString.encodeUtf8("Hello, WebSockets!"));, +    clientListener.assertPong(ByteString.encodeUtf8("Hello, WebSockets!"));, +  }, +, +  @Test public void nullPingPayloadThrows() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    enqueueClientWebSocket();, +, +    WebSocket client = clientListener.assertOpen();, +    try {, +      client.sendPing(null);, +      fail();, +    } catch (NullPointerException e) {, +      assertEquals("payload == null", e.getMessage());, +    }, +      @Override public void onPong(ByteString payload) {, +    client.sendPing(ByteString.EMPTY);, +    client.sendPing(ByteString.encodeUtf8("WebSockets are fun!"));, +    clientListener.assertPong(ByteString.encodeUtf8("WebSockets are fun!"));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/EmptyWebSocketListener.java, +import okio.ByteString;, +  @Override public void onPong(ByteString payload) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +        client.sendPing(ByteString.encodeUtf8("Pong?"));, +    clientListener.assertPong(ByteString.encodeUtf8("Pong?"));, +    client.sendPing(ByteString.encodeUtf8("Hello!"));, +    clientListener.assertPong(ByteString.encodeUtf8("Hello!"));, +    client.sendPong(ByteString.encodeUtf8("Hello!"));, +    serverListener.assertPong(ByteString.encodeUtf8("Hello!"));, +  }, +, +  @Test public void nullPongPayloadThrows() throws IOException {, +    try {]
[+++ b/.gitignore, +*.ipr, +*.iws, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +      if (entity != null) {, +          // Buffer short, fixed-length request bodies. This costs memory, but permits the request, +          // to be transparently retried if there is a connection failure., +    }, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +      if (entity != null) {, +          // Buffer short, fixed-length request bodies. This costs memory, but permits the request, +          // to be transparently retried if there is a connection failure., +    }, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import org.apache.http.client.methods.HttpPost;, +, +  @Test public void noEntity() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    client.execute(post);, +  }, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +      if (entity != null) {, +          // Buffer short, fixed-length request bodies. This costs memory, but permits the request, +          // to be transparently retried if there is a connection failure., +    }, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import org.apache.http.client.methods.HttpPost;, +, +  @Test public void noEntity() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    client.execute(post);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +  public long getSize() {, +    return cache.size();, +  }, +, +  public long getMaxSize() {, +    return cache.getMaxSize();, +  }, +, +  public void flush() throws IOException {, +    cache.flush();, +  }, +, +  public void close() throws IOException {, +    cache.close();, +  }, +, +  public File getDirectory() {, +    return cache.getDirectory();, +  }, +, +  public boolean isClosed() {, +    return cache.isClosed();, +  }, +, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +      if (entity != null) {, +          // Buffer short, fixed-length request bodies. This costs memory, but permits the request, +          // to be transparently retried if there is a connection failure., +    }, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import org.apache.http.client.methods.HttpPost;, +, +  @Test public void noEntity() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    client.execute(post);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +  public long getSize() {, +    return cache.size();, +  }, +, +  public long getMaxSize() {, +    return cache.getMaxSize();, +  }, +, +  public void flush() throws IOException {]
[+++ b/.travis.yml, +    - $HOME/.m2, +++ b/.travis.yml, +    - $HOME/.m2, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    CountDownLatch responseDequeuedLatch = new CountDownLatch(1);, +    CountDownLatch requestCanceledLatch = new CountDownLatch(1);, +, +    QueueDispatcher dispatcher = new QueueDispatcher() {, +      @Override, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +        // This guarantees a deterministic sequence when handling the canceled request:, +        // 1. Server reads request and dequeues first response, +        // 2. Client cancels request, +        // 3. Server tries to send response on the canceled stream, +        // Otherwise, there is no guarantee for the sequence. For example, the server may use the, +        // first mocked response to respond to the second request., +        MockResponse response = super.dispatch(request);, +        responseDequeuedLatch.countDown();, +        requestCanceledLatch.await();, +        return response;, +      }, +    };, +    server.setDispatcher(dispatcher);, +, +    dispatcher.enqueueResponse(new MockResponse(), +    dispatcher.enqueueResponse(new MockResponse(), +    callAndCancel(0, responseDequeuedLatch, requestCanceledLatch);, +    callAndCancel(0, new CountDownLatch(0), new CountDownLatch(0));, +    callAndCancel(1, new CountDownLatch(0), new CountDownLatch(0));, +  private void callAndCancel(int expectedSequenceNumber, CountDownLatch responseDequeuedLatch,, +      CountDownLatch requestCanceledLatch) throws Exception {, +    responseDequeuedLatch.await();, +    requestCanceledLatch.countDown();]
[+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, +      Platform.get().configureTrustManager(trustManager), +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, +      Platform.get().configureTrustManager(trustManager), +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import okhttp3.internal.platform.Platform;, +    return Platform.get().platformTrustManager();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, +      Platform.get().configureTrustManager(trustManager), +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import okhttp3.internal.platform.Platform;, +    return Platform.get().platformTrustManager();, +++ b/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.kt, + * Requires org.conscrypt:conscrypt-openjdk-uber >= 2.1.0 on the classpath., +    get() {, +      // n.b. We should consider defaulting to OpenJDK 11 trust manager, +      // https://groups.google.com/forum/#!topic/conscrypt/3vYzbesjOb4, +      return Conscrypt.newProviderBuilder().provideTrustManager(true).build(), +    }, +, +  // See release notes https://groups.google.com/forum/#!forum/conscrypt, +  // for version differences, +  override fun getSSLContext(): SSLContext =, +      // supports TLSv1.3 by default (version api is >= 1.4.0), +, +  override fun platformTrustManager(): X509TrustManager {, +    return Conscrypt.getDefaultX509TrustManager(), +  override fun configureTrustManager(trustManager: X509TrustManager?) {, +    if (Conscrypt.isConscrypt(trustManager)) {, +      // OkHttp will verify, +      Conscrypt.setHostnameVerifier(trustManager) { hostname, session -> true }, +    }, +  }, +, +      Class.forName("org.conscrypt.Conscrypt\$Version"), +        Conscrypt.isAvailable() && atLeastVersion(2, 1, 0) -> ConscryptPlatform(), +, +    @JvmStatic @JvmOverloads, +    fun atLeastVersion(major: Int, minor: Int = 0, patch: Int = 0): Boolean {, +      val conscryptVersion = Conscrypt.version(), +, +      if (conscryptVersion.major() != major) {, +        return conscryptVersion.major() > major, +      }, +, +      if (conscryptVersion.minor() != minor) {, +        return conscryptVersion.minor() > minor, +      }, +, +      return conscryptVersion.patch() >= patch, +    }, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, +      Platform.get().configureTrustManager(trustManager), +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import okhttp3.internal.platform.Platform;, +    return Platform.get().platformTrustManager();, +++ b/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.kt, + * Requires org.conscrypt:conscrypt-openjdk-uber >= 2.1.0 on the classpath., +    get() {, +      // n.b. We should consider defaulting to OpenJDK 11 trust manager, +      // https://groups.google.com/forum/#!topic/conscrypt/3vYzbesjOb4, +      return Conscrypt.newProviderBuilder().provideTrustManager(true).build(), +    }, +, +  // See release notes https://groups.google.com/forum/#!forum/conscrypt, +  // for version differences, +  override fun getSSLContext(): SSLContext =, +      // supports TLSv1.3 by default (version api is >= 1.4.0), +, +  override fun platformTrustManager(): X509TrustManager {, +    return Conscrypt.getDefaultX509TrustManager(), +  override fun configureTrustManager(trustManager: X509TrustManager?) {, +    if (Conscrypt.isConscrypt(trustManager)) {, +      // OkHttp will verify, +      Conscrypt.setHostnameVerifier(trustManager) { hostname, session -> true }, +    }, +  }, +, +      Class.forName("org.conscrypt.Conscrypt\$Version"), +        Conscrypt.isAvailable() && atLeastVersion(2, 1, 0) -> ConscryptPlatform(), +, +    @JvmStatic @JvmOverloads, +    fun atLeastVersion(major: Int, minor: Int = 0, patch: Int = 0): Boolean {, +      val conscryptVersion = Conscrypt.version(), +, +      if (conscryptVersion.major() != major) {, +        return conscryptVersion.major() > major, +      }, +, +      if (conscryptVersion.minor() != minor) {, +        return conscryptVersion.minor() > minor, +      }, +, +      return conscryptVersion.patch() >= patch, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt, +import java.security.GeneralSecurityException, +import java.security.KeyStore, +import java.util.Arrays, +import javax.net.ssl.TrustManagerFactory]
[+++ b/.gitignore, +local.properties]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      Response response = client.newCall(request).execute();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      Response response = client.newCall(request).execute();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +          body.contentType().charset());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      Response response = client.newCall(request).execute();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +          body.contentType().charset());, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    Response okResponse = client.newCall(okRequest).execute();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      Response response = client.newCall(request).execute();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +          body.contentType().charset());, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    Response okResponse = client.newCall(okRequest).execute();, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8(buffer.size());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      Response response = client.newCall(request).execute();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +          body.contentType().charset());, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    Response okResponse = client.newCall(okRequest).execute();, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8(buffer.size());, +++ /dev/null, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      Response response = client.newCall(request).execute();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +          body.contentType().charset());, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    Response okResponse = client.newCall(okRequest).execute();, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8(buffer.size());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.internal.RecordingHostnameVerifier;, +import com.squareup.okhttp.internal.SslContextBuilder;, +import com.squareup.okhttp.mockwebserver.Dispatcher;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import com.squareup.okhttp.mockwebserver.SocketPolicy;, +import java.io.File;, +import java.io.IOException;]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, +          nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, +          nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, +          nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.getProtocol() : Protocol.HTTP_1_1;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, +          nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.getProtocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, +          nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.getProtocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void timeoutsNotRetried() throws Exception {, +    client.setDns(new DoubleInetAddressDns());, +    Call call = client.newCall(new Request.Builder(), +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, +          nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.getProtocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void timeoutsNotRetried() throws Exception {, +    client.setDns(new DoubleInetAddressDns());, +    Call call = client.newCall(new Request.Builder(), +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.getRoute().address());, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, +          nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.getProtocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void timeoutsNotRetried() throws Exception {, +    client.setDns(new DoubleInetAddressDns());, +    Call call = client.newCall(new Request.Builder(), +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.getRoute().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +        Address address = chain.connection().getRoute().address();, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, +          nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.getProtocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void timeoutsNotRetried() throws Exception {, +    client.setDns(new DoubleInetAddressDns());, +    Call call = client.newCall(new Request.Builder(), +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    StreamAllocation leak = new StreamAllocation(pool, connection.getRoute().address());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +        Address address = chain.connection().getRoute().address();, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, +          nullSafeImmutableList(localCertificates));]
[+++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    processResponse(response);, +  }, +, +  public void processResponse(Response response) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    processResponse(response);, +  }, +, +  public void processResponse(Response response) {, +++ b/okhttp-sse/src/main/java/okhttp3/sse/EventSources.java, +import okhttp3.Response;, +  public static void processResponse(Response response, EventSourceListener listener) {, +    RealEventSource eventSource = new RealEventSource(response.request(), listener);, +    eventSource.processResponse(response);, +  }, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void canRetryNormalRequestBody() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(503), +        .setHeader("Retry-After", "0"), +        .setBody("please retry"));, +    server.enqueue(new MockResponse(), +        .setBody("thank you for retrying"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(new RequestBody() {, +          int attempt = 0;, +, +          @Override public @Nullable MediaType contentType() {, +            return null;, +          }, +, +          @Override public void writeTo(BufferedSink sink) throws IOException {, +            sink.writeUtf8("attempt " + (attempt++));, +          }, +        }), +        .build();, +    Response response = client.newCall(request).execute();, +    assertEquals(200, response.code());, +    assertEquals("thank you for retrying", response.body().string());, +, +    assertEquals("attempt 0", server.takeRequest().getBody().readUtf8());, +    assertEquals("attempt 1", server.takeRequest().getBody().readUtf8());, +    assertEquals(2, server.getRequestCount());, +  }, +, +  @Test public void cannotRetryOneShotRequestBody() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(503), +        .setHeader("Retry-After", "0"), +        .setBody("please retry"));, +    server.enqueue(new MockResponse(), +        .setBody("thank you for retrying"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(new RequestBody() {, +          int attempt = 0;, +, +          @Override public @Nullable MediaType contentType() {, +            return null;, +          }, +, +          @Override public void writeTo(BufferedSink sink) throws IOException {, +            sink.writeUtf8("attempt " + (attempt++));, +          }, +, +          @Override public boolean isOneShot() {, +            return true;, +          }, +        }), +        .build();, +    Response response = client.newCall(request).execute();, +    assertEquals(503, response.code());, +    assertEquals("please retry", response.body().string());, +, +    assertEquals("attempt 0", server.takeRequest().getBody().readUtf8());, +    assertEquals(1, server.getRequestCount());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void canRetryNormalRequestBody() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(503), +        .setHeader("Retry-After", "0"), +        .setBody("please retry"));, +    server.enqueue(new MockResponse(), +        .setBody("thank you for retrying"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(new RequestBody() {, +          int attempt = 0;, +, +          @Override public @Nullable MediaType contentType() {, +            return null;, +          }, +, +          @Override public void writeTo(BufferedSink sink) throws IOException {, +            sink.writeUtf8("attempt " + (attempt++));, +          }, +        }), +        .build();, +    Response response = client.newCall(request).execute();, +    assertEquals(200, response.code());, +    assertEquals("thank you for retrying", response.body().string());, +, +    assertEquals("attempt 0", server.takeRequest().getBody().readUtf8());, +    assertEquals("attempt 1", server.takeRequest().getBody().readUtf8());, +    assertEquals(2, server.getRequestCount());, +  }, +, +  @Test public void cannotRetryOneShotRequestBody() throws Exception {, +    server.enqueue(new MockResponse()]
[+++ b/okhttp/pom.xml, +      <scope>provided</scope>]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnection(c1);, +    assertTrue(c1.noNewStreams); // Can't allocate once a leak has been detected., +      transmitter.acquireConnection(connection);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnection(c1);, +    assertTrue(c1.noNewStreams); // Can't allocate once a leak has been detected., +      transmitter.acquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, +      @Override public Transmitter transmitter(Call call) {, +        return ((RealCall) call).transmitter();, +      }, +, +      @Override public void initDeferredTrailers(, +          Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, +        responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnection(c1);, +    assertTrue(c1.noNewStreams); // Can't allocate once a leak has been detected., +      transmitter.acquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, +      @Override public Transmitter transmitter(Call call) {, +        return ((RealCall) call).transmitter();, +      }, +, +      @Override public void initDeferredTrailers(, +          Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, +        responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +    captureCallStackTrace();, +      Response result = getResponseWithInterceptorChain();, +      if (result == null) throw new IOException("Canceled");, +      return result;, +    } catch (IOException e) {, +      e = timeoutExit(e);, +      transmitter.callFailed(e);, +      throw e;, +  private void captureCallStackTrace() {, +    transmitter.initCallStackTrace(, +        Platform.get().getStackTraceForCloseable("response.body().close()"));, +  }, +, +    captureCallStackTrace();, +  Transmitter transmitter() {, +    return transmitter;, +  }, +, +        transmitter.callFailed(ioException);, +        if (transmitter.isCanceled()) {, +          signalledCallback = true;, +          responseCallback.onFailure(RealCall.this, new IOException("Canceled"));, +        } else {, +        }, +        e = timeoutExit(e);, +          transmitter.callFailed(e);, +      transmitter.noMoreStreamsOnCall();, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnection(c1);, +    assertTrue(c1.noNewStreams); // Can't allocate once a leak has been detected., +      transmitter.acquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, +      @Override public Transmitter transmitter(Call call) {, +        return ((RealCall) call).transmitter();, +      }, +, +      @Override public void initDeferredTrailers(, +          Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, +        responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +    captureCallStackTrace();, +      Response result = getResponseWithInterceptorChain();, +      if (result == null) throw new IOException("Canceled");, +      return result;, +    } catch (IOException e) {, +      e = timeoutExit(e);, +      transmitter.callFailed(e);, +      throw e;, +  private void captureCallStackTrace() {, +    transmitter.initCallStackTrace(, +        Platform.get().getStackTraceForCloseable("response.body().close()"));, +  }, +, +    captureCallStackTrace();, +  Transmitter transmitter() {, +    return transmitter;, +  }, +, +        transmitter.callFailed(ioException);, +        if (transmitter.isCanceled()) {, +          signalledCallback = true;, +          responseCallback.onFailure(RealCall.this, new IOException("Canceled"));, +        } else {, +        }, +        e = timeoutExit(e);]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, +    try {, +      call.execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, +    try {, +      call.execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, +    try {, +      call.execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, +    try {, +      call.execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (this.exchange == null) throw new IllegalStateException();, +      if (this.exchange != exchange) throw new IllegalStateException();, +      if (exchangeRequestDone && exchangeResponseDone) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, +    try {, +      call.execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (this.exchange == null) throw new IllegalStateException();, +      if (this.exchange != exchange) throw new IllegalStateException();, +      if (exchangeRequestDone && exchangeResponseDone) {, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +      Request followUp;, +      try {, +        followUp = followUpRequest(response, route);, +      } catch (IOException e) {, +        throw e;, +      }, +, +        throw new IllegalStateException("Closing the body of " + response, +            + " didn't close its backing stream. Bad interceptor?");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, +    try {, +      call.execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (this.exchange == null) throw new IllegalStateException();, +      if (this.exchange != exchange) throw new IllegalStateException();, +      if (exchangeRequestDone && exchangeResponseDone) {, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +      Request followUp;, +      try {, +        followUp = followUpRequest(response, route);, +      } catch (IOException e) {, +        throw e;, +      }, +, +        throw new IllegalStateException("Closing the body of " + response, +            + " didn't close its backing stream. Bad interceptor?");, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1ExchangeCodec.java, +      throw new ProtocolException("Duplex connections are not supported for HTTP/1");]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setProtocols(protocols);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setProtocols(protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setProtocols(sslSocket, spdyProtocols);, +    String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setProtocols(protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setProtocols(sslSocket, spdyProtocols);, +    String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +   * When {@link MockWebServer#setProtocols(java.util.List) protocols}, +   * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2}, this attaches a, +   * pushed stream to this response., +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setProtocols(protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setProtocols(sslSocket, spdyProtocols);, +    String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +   * When {@link MockWebServer#setProtocols(java.util.List) protocols}, +   * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2}, this attaches a, +   * pushed stream to this response., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private boolean protocolNegotiationEnabled = true;, +   * @deprecated Use {@link #setProtocolNegotiationEnabled}., +    this.protocolNegotiationEnabled = npnEnabled;, +  }, +, +  /**, +   * Sets whether ALPN or NPN is used on incoming HTTPS connections to, +   * negotiate a protocol like HTTP/1.1 or HTTP/2. Call this method to disable, +   * negotiation and restrict connections to HTTP/1.1., +   */, +  public void setProtocolNegotiationEnabled(boolean protocolNegotiationEnabled) {, +    this.protocolNegotiationEnabled = protocolNegotiationEnabled;, +   * @deprecated Use {@link #setProtocols(java.util.List)}., +    setProtocols(protocols);, +  }, +, +  /**, +   * Indicates the protocols supported by NPN or ALPN on incoming HTTPS, +   * connections. This list is ignored when, +   * {@link #setProtocolNegotiationEnabled negotiation is disabled}., +   *, +   * @param protocols the protocols to use, in order of preference. The list, +   *     must contain {@linkplain Protocol#HTTP_1_1}. It must not contain null., +   */, +  public void setProtocols(List<Protocol> protocols) {, +    this.npnProtocols = protocols;, +          if (protocolNegotiationEnabled) {, +            Platform.get().setProtocols(sslSocket, npnProtocols);, +          if (protocolNegotiationEnabled) {, +            String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setProtocols(protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setProtocols(sslSocket, spdyProtocols);, +    String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +   * When {@link MockWebServer#setProtocols(java.util.List) protocols}, +   * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2}, this attaches a, +   * pushed stream to this response., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private boolean protocolNegotiationEnabled = true;, +   * @deprecated Use {@link #setProtocolNegotiationEnabled}., +    this.protocolNegotiationEnabled = npnEnabled;, +  }, +, +  /**, +   * Sets whether ALPN or NPN is used on incoming HTTPS connections to, +   * negotiate a protocol like HTTP/1.1 or HTTP/2. Call this method to disable, +   * negotiation and restrict connections to HTTP/1.1., +   */, +  public void setProtocolNegotiationEnabled(boolean protocolNegotiationEnabled) {, +    this.protocolNegotiationEnabled = protocolNegotiationEnabled;, +   * @deprecated Use {@link #setProtocols(java.util.List)}., +    setProtocols(protocols);, +  }, +, +  /**, +   * Indicates the protocols supported by NPN or ALPN on incoming HTTPS, +   * connections. This list is ignored when, +   * {@link #setProtocolNegotiationEnabled negotiation is disabled}., +   *, +   * @param protocols the protocols to use, in order of preference. The list, +   *     must contain {@linkplain Protocol#HTTP_1_1}. It must not contain null., +   */, +  public void setProtocols(List<Protocol> protocols) {, +    this.npnProtocols = protocols;, +          if (protocolNegotiationEnabled) {, +            Platform.get().setProtocols(sslSocket, npnProtocols);, +          if (protocolNegotiationEnabled) {, +            String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    server.setProtocols(client.getProtocols());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setProtocols(protocols);]
[+++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/AccessHeaders.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.recipes;, +, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.Request;, +import com.squareup.okhttp.Response;, +import java.io.IOException;, +, +public final class AccessHeaders {, +  private final OkHttpClient client = new OkHttpClient();, +, +  public void run() throws Exception {, +    Request request = new Request.Builder(), +        .url("https://api.github.com/repos/square/okhttp/issues"), +        .header("User-Agent", "OkHttp Headers.java"), +        .addHeader("Accept", "application/json; q=0.5"), +        .addHeader("Accept", "application/vnd.github.v3+json"), +        .build();, +, +    Response response = client.newCall(request).execute();, +    if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);, +, +    System.out.println("Server: " + response.header("Server"));, +    System.out.println("Date: " + response.header("Date"));, +    System.out.println("Vary: " + response.headers("Vary"));, +  }, +, +  public static void main(String... args) throws Exception {, +    new AccessHeaders().run();, +  }, +}, +++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/AccessHeaders.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.recipes;, +, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.Request;, +import com.squareup.okhttp.Response;, +import java.io.IOException;, +, +public final class AccessHeaders {, +  private final OkHttpClient client = new OkHttpClient();, +, +  public void run() throws Exception {, +    Request request = new Request.Builder(), +        .url("https://api.github.com/repos/square/okhttp/issues"), +        .header("User-Agent", "OkHttp Headers.java"), +        .addHeader("Accept", "application/json; q=0.5"), +        .addHeader("Accept", "application/vnd.github.v3+json"), +        .build();, +, +    Response response = client.newCall(request).execute();, +    if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);, +, +    System.out.println("Server: " + response.header("Server"));, +    System.out.println("Date: " + response.header("Date"));, +    System.out.println("Vary: " + response.headers("Vary"));, +  }, +, +  public static void main(String... args) throws Exception {, +    new AccessHeaders().run();, +  }, +}, +++ /dev/null, +++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/AccessHeaders.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/LICENSE.txt, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +  @Override public void onStream(final Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +      System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +  @Override public void onStream(final Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +      System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  /** Processes HTTP requests layered over framed protocols. */, +  private class FramedSocketHandler extends Http2Connection.Listener {, +    private FramedSocketHandler(Socket socket, Protocol protocol) {, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +  @Override public void onStream(final Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +      System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  /** Processes HTTP requests layered over framed protocols. */, +  private class FramedSocketHandler extends Http2Connection.Listener {, +    private FramedSocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +  @Override public void onStream(final Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +      System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  /** Processes HTTP requests layered over framed protocols. */, +  private class FramedSocketHandler extends Http2Connection.Listener {, +    private FramedSocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .setBody("Body with unknown charset"));, +        .assertLogEqual("Body with unknown charset"), +        .assertLogEqual("<-- END HTTP (25-byte body)"), +        .assertLogEqual("Body with unknown charset"), +        .assertLogEqual("<-- END HTTP (25-byte body)"), +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +  @Override public void onStream(final Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +      System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  /** Processes HTTP requests layered over framed protocols. */, +  private class FramedSocketHandler extends Http2Connection.Listener {, +    private FramedSocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .setBody("Body with unknown charset"));, +        .assertLogEqual("Body with unknown charset"), +        .assertLogEqual("<-- END HTTP (25-byte body)"), +        .assertLogEqual("Body with unknown charset"), +        .assertLogEqual("<-- END HTTP (25-byte body)"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void interceptorGetsFramedProtocol() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +  @Override public void onStream(final Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +      System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  /** Processes HTTP requests layered over framed protocols. */, +  private class FramedSocketHandler extends Http2Connection.Listener {, +    private FramedSocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .setBody("Body with unknown charset"));, +        .assertLogEqual("Body with unknown charset"), +        .assertLogEqual("<-- END HTTP (25-byte body)"), +        .assertLogEqual("Body with unknown charset"), +        .assertLogEqual("<-- END HTTP (25-byte body)"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void interceptorGetsFramedProtocol() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/MediaTypeTest.java, +    assertNull(MediaType.parse("text/plain; charset=utf-8; charset=utf-16"));, +    assertNull(mediaType.charset());, +    assertNull(mediaType.charset());, +    assertNull(mediaType.charset());, +    assertNull(mediaType.charset());, +    assertNull(mediaType.charset());, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java]
[+++ b/okhttp-apache/pom.xml, +    <version>1.0.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.1</version>, +++ b/okhttp/pom.xml, +    <version>1.0.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.1</version>, +++ b/okhttp/pom.xml, +    <version>1.0.1</version>, +++ b/pom.xml, +  <version>1.0.1</version>, +    <tag>parent-1.0.1</tag>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.1</version>, +++ b/okhttp/pom.xml, +    <version>1.0.1</version>, +++ b/pom.xml, +  <version>1.0.1</version>, +    <tag>parent-1.0.1</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.1</version>, +++ b/okhttp/pom.xml, +    <version>1.0.1</version>, +++ b/pom.xml, +  <version>1.0.1</version>, +    <tag>parent-1.0.1</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.1</version>, +++ b/samples/pom.xml, +    <version>1.0.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.1</version>, +++ b/okhttp/pom.xml, +    <version>1.0.1</version>, +++ b/pom.xml, +  <version>1.0.1</version>, +    <tag>parent-1.0.1</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.1</version>, +++ b/samples/pom.xml, +    <version>1.0.1</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.0.1</version>]
[+++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, +  1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., +  2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, +  1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., +  2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/pom.xml, +  <build>, +    <plugins>, +    <plugin>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>exec-maven-plugin</artifactId>, +      <executions>, +        <execution>, +          <goals>, +            <goal>java</goal>, +          </goals>, +        </execution>, +      </executions>, +      <configuration>, +        <executable>java</executable>, +        <arguments>, +          <argument>-Xms512m</argument>, +          <argument>-Xmx512m</argument>, +          <commandlineArgs>-Xbootclasspath/p:${settings.localRepository}/org/mortbay/jetty/npn/npn-boot/${npn.version}/npn-boot-${npn.version}.jar</commandlineArgs>, +          <argument>-classpath</argument>, +          <classpath/>, +          <argument>com.squareup.okhttp.benchmarks.Benchmark</argument>, +        </arguments>, +      </configuration>, +    </plugin>, +    </plugins>, +  </build>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      this.path = requestLine.substring(methodEnd + 1, pathEnd);, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      this.path = requestLine.substring(methodEnd + 1, pathEnd);, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      this.path = requestLine.substring(methodEnd + 1, pathEnd);, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      this.path = requestLine.substring(methodEnd + 1, pathEnd);, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      this.path = requestLine.substring(methodEnd + 1, pathEnd);, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ /dev/null, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import java.util.concurrent.TimeUnit;, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-11, +  public static final MediaType UDPWIREFORMAT = MediaType.get("application/dns-udpwireformat");, +  private final MediaType contentType;, +    this.contentType = builder.contentType;, +  public MediaType contentType() {, +    return contentType;, +  }, +, +    UnknownHostException firstUhe = null;, +, +      ByteString query = DnsRecordCodec.encodeQuery(hostname, includeIPv6);, +      Request request = buildRequest(query);, +      Response response = executeRequest(request);, +, +      return readResponse(hostname, response);, +    } catch (UnknownHostException uhe) {, +      throw uhe;, +      unknownHostException.initCause(e);, +  }, +  private Response executeRequest(Request request) throws IOException {, +    // cached request, +      CacheControl cacheControl =, +          new CacheControl.Builder().maxStale(Integer.MAX_VALUE, TimeUnit.SECONDS).build();, +      Request cacheRequest = request.newBuilder().cacheControl(cacheControl).build();, +      Response response = client.newCall(cacheRequest).execute();, +      if (response.isSuccessful()) {, +        return response;, +    return client.newCall(request).execute();, +  private Request buildRequest(ByteString query) {, +    Request.Builder requestBuilder = new Request.Builder().header("Accept", contentType.toString());, +      requestBuilder = requestBuilder.url(url).post(RequestBody.create(contentType, query));, +    MediaType contentType = DNS_MESSAGE;, +    public Builder contentType(MediaType contentType) {, +      this.contentType = contentType;, +      return this;, +    }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      this.path = requestLine.substring(methodEnd + 1, pathEnd);, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ /dev/null, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import java.util.concurrent.TimeUnit;, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-11, +  public static final MediaType UDPWIREFORMAT = MediaType.get("application/dns-udpwireformat");, +  private final MediaType contentType;, +    this.contentType = builder.contentType;, +  public MediaType contentType() {, +    return contentType;, +  }, +, +    UnknownHostException firstUhe = null;, +]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/** What should be done with the incoming socket. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/** What should be done with the incoming socket. */, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(, +          httpsUrlConnection.getCipherSuite(), nullSafeImmutableList(peerCertificates),, +      Handshake handshake = Handshake.get(, +          javaSecureCacheResponse.getCipherSuite(), peerCertificates, localCertificates);, +          return handshake != null ? handshake.cipherSuite() : null;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/** What should be done with the incoming socket. */, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(, +          httpsUrlConnection.getCipherSuite(), nullSafeImmutableList(peerCertificates),, +      Handshake handshake = Handshake.get(, +          javaSecureCacheResponse.getCipherSuite(), peerCertificates, localCertificates);, +          return handshake != null ? handshake.cipherSuite() : null;, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java, +        return "SuperSecure";, +    assertNotNullAndEquals("SuperSecure", handshake.cipherSuite());, +    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),, +        Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals("SecureCipher", httpsUrlConnection.getCipherSuite());, +    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),, +        Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals(handshake.cipherSuite(), javaCacheResponse.getCipherSuite());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/** What should be done with the incoming socket. */, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(, +          httpsUrlConnection.getCipherSuite(), nullSafeImmutableList(peerCertificates),, +      Handshake handshake = Handshake.get(, +          javaSecureCacheResponse.getCipherSuite(), peerCertificates, localCertificates);, +          return handshake != null ? handshake.cipherSuite() : null;, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java, +        return "SuperSecure";, +    assertNotNullAndEquals("SuperSecure", handshake.cipherSuite());, +    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),, +        Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals("SecureCipher", httpsUrlConnection.getCipherSuite());, +    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),, +        Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals(handshake.cipherSuite(), javaCacheResponse.getCipherSuite());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    String suite = response1.handshake().cipherSuite();, +    assertEquals(suite, response2.handshake().cipherSuite());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/** What should be done with the incoming socket. */, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(, +          httpsUrlConnection.getCipherSuite(), nullSafeImmutableList(peerCertificates),, +      Handshake handshake = Handshake.get(, +          javaSecureCacheResponse.getCipherSuite(), peerCertificates, localCertificates);, +          return handshake != null ? handshake.cipherSuite() : null;, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java, +        return "SuperSecure";, +    assertNotNullAndEquals("SuperSecure", handshake.cipherSuite());, +    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),, +        Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals("SecureCipher", httpsUrlConnection.getCipherSuite());, +    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),, +        Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals(handshake.cipherSuite(), javaCacheResponse.getCipherSuite());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    String suite = response1.handshake().cipherSuite();, +    assertEquals(suite, response2.handshake().cipherSuite());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/FormBodyTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import java.io.IOException;, +import okio.Buffer;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public final class FormBodyTest {, +  @Test public void urlEncoding() throws Exception {, +    FormBody body = new FormBody.Builder()]
[+++ b/.github/CONTRIBUTING.md, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  /** Replaces all headers with those specified in {@code headers}. */, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  /** Replaces all headers with those specified in {@code headers}. */, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      writeResponse(stream, response);, +      if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, +    private void writeResponse(Http2Stream stream, MockResponse response) throws IOException {, +      boolean closeStreamAfterHeaders = body != null || !response.getPushPromises().isEmpty();, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +      pushPromises(stream, response.getPushPromises());, +      } else if (closeStreamAfterHeaders) {, +    private void pushPromises(Http2Stream stream, List<PushPromise> promises) throws IOException {, +        writeResponse(pushedStream, pushPromise.response());, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  /** Replaces all headers with those specified in {@code headers}. */, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      writeResponse(stream, response);, +      if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, +    private void writeResponse(Http2Stream stream, MockResponse response) throws IOException {, +      boolean closeStreamAfterHeaders = body != null || !response.getPushPromises().isEmpty();, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +      pushPromises(stream, response.getPushPromises());, +      } else if (closeStreamAfterHeaders) {, +    private void pushPromises(Http2Stream stream, List<PushPromise> promises) throws IOException {, +        writeResponse(pushedStream, pushPromise.response());, +++ /dev/null, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  /** Replaces all headers with those specified in {@code headers}. */, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      writeResponse(stream, response);, +      if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, +    private void writeResponse(Http2Stream stream, MockResponse response) throws IOException {, +      boolean closeStreamAfterHeaders = body != null || !response.getPushPromises().isEmpty();, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +      pushPromises(stream, response.getPushPromises());, +      } else if (closeStreamAfterHeaders) {, +    private void pushPromises(Http2Stream stream, List<PushPromise> promises) throws IOException {, +        writeResponse(pushedStream, pushPromise.response());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  /** Replaces all headers with those specified in {@code headers}. */, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java]
[+++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +            return equal(this.proxy, that.proxy), +                    && equal(this.sslSocketFactory, that.sslSocketFactory), +                    && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +            return equal(this.proxy, that.proxy), +                    && equal(this.sslSocketFactory, that.sslSocketFactory), +                    && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Platform;, +                if (!connection.isEligibleForRecycling()) {, +                    IoUtils.closeQuietly(connection);, +                    continue;, +                try {, +                    Platform.get().tagSocket(connection.getSocket());, +                } catch (SocketException e) {, +                    // When unable to tag, skip recycling and close, +                    Platform.get().logW("Unable to tagSocket(): " + e);, +                    IoUtils.closeQuietly(connection);, +                    continue;, +                }, +                return connection;, +            Platform.get().untagSocket(connection.getSocket());, +            Platform.get().logW("Unable to untagSocket(): " + e);, +++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +            return equal(this.proxy, that.proxy), +                    && equal(this.sslSocketFactory, that.sslSocketFactory), +                    && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Platform;, +                if (!connection.isEligibleForRecycling()) {, +                    IoUtils.closeQuietly(connection);, +                    continue;, +                try {, +                    Platform.get().tagSocket(connection.getSocket());, +                } catch (SocketException e) {, +                    // When unable to tag, skip recycling and close, +                    Platform.get().logW("Unable to tagSocket(): " + e);, +                    IoUtils.closeQuietly(connection);, +                    continue;, +                }, +                return connection;, +            Platform.get().untagSocket(connection.getSocket());, +            Platform.get().logW("Unable to untagSocket(): " + e);, +++ b/src/main/java/com/squareup/okhttp/TunnelRequest.java, +import static com.squareup.okhttp.internal.Util.getDefaultPort;, +        result.set("Host", port == getDefaultPort("https") ? host : (host + ":" + port));, +++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +            return equal(this.proxy, that.proxy), +                    && equal(this.sslSocketFactory, that.sslSocketFactory), +                    && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Platform;, +                if (!connection.isEligibleForRecycling()) {, +                    IoUtils.closeQuietly(connection);, +                    continue;, +                try {, +                    Platform.get().tagSocket(connection.getSocket());, +                } catch (SocketException e) {, +                    // When unable to tag, skip recycling and close, +                    Platform.get().logW("Unable to tagSocket(): " + e);, +                    IoUtils.closeQuietly(connection);, +                    continue;, +                }, +                return connection;, +            Platform.get().untagSocket(connection.getSocket());, +            Platform.get().logW("Unable to untagSocket(): " + e);, +++ b/src/main/java/com/squareup/okhttp/TunnelRequest.java, +import static com.squareup.okhttp.internal.Util.getDefaultPort;, +        result.set("Host", port == getDefaultPort("https") ? host : (host + ":" + port));, +++ b/src/main/java/com/squareup/okhttp/internal/Platform.java, +import java.net.Socket;, +import java.net.SocketException;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.net.URL;, +    public void logW(String warning) {, +        System.out.println(warning);, +    }, +, +    public void tagSocket(Socket socket) throws SocketException {, +    }, +, +    public void untagSocket(Socket socket) throws SocketException {, +    }, +, +    public URI toUriLenient(URL url) throws URISyntaxException {, +        return url.toURI(); // this isn't as good as the built-in toUriLenient, +    }, +, +++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +            return equal(this.proxy, that.proxy), +                    && equal(this.sslSocketFactory, that.sslSocketFactory), +                    && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +++ /dev/null, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteDatabase.kt, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.connection, +, +import okhttp3.Route, +, +/**, + * A blacklist of failed routes to avoid when creating a new connection to a target address. This is, + * used so that OkHttp can learn from its mistakes: if there was a failure attempting to connect to, + * a specific IP address or proxy server, that failure is remembered and alternate routes are, + * preferred., + */, +class RouteDatabase {, +  private val failedRoutes = mutableSetOf<Route>(), +, +  /** Records a failure connecting to [failedRoute]. */, +  @Synchronized fun failed(failedRoute: Route) {, +    failedRoutes.add(failedRoute), +  }, +, +  /** Records success connecting to [route]. */, +  @Synchronized fun connected(route: Route) {, +    failedRoutes.remove(route), +  }, +, +  /** Returns true if [route] has failed recently and should be avoided. */, +  @Synchronized fun shouldPostpone(route: Route): Boolean = failedRoutes.contains(route), +}]
[+++ b/pom.xml, +    <jnr-unixsocket.version>0.19</jnr-unixsocket.version>, +      <dependency>, +        <groupId>com.github.jnr</groupId>, +        <artifactId>jnr-unixsocket</artifactId>, +        <version>${jnr-unixsocket.version}</version>, +      </dependency>, +++ b/pom.xml, +    <jnr-unixsocket.version>0.19</jnr-unixsocket.version>, +      <dependency>, +        <groupId>com.github.jnr</groupId>, +        <artifactId>jnr-unixsocket</artifactId>, +        <version>${jnr-unixsocket.version}</version>, +      </dependency>, +++ b/samples/pom.xml, +    <module>unixdomainsockets</module>, +++ b/pom.xml, +    <jnr-unixsocket.version>0.19</jnr-unixsocket.version>, +      <dependency>, +        <groupId>com.github.jnr</groupId>, +        <artifactId>jnr-unixsocket</artifactId>, +        <version>${jnr-unixsocket.version}</version>, +      </dependency>, +++ b/samples/pom.xml, +    <module>unixdomainsockets</module>, +++ b/samples/unixdomainsockets/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3.sample</groupId>, +    <artifactId>sample-parent</artifactId>, +    <version>3.11.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>unixdomainsockets</artifactId>, +  <name>Sample: UNIX domain sockets</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.github.jnr</groupId>, +      <artifactId>jnr-unixsocket</artifactId>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml, +    <jnr-unixsocket.version>0.19</jnr-unixsocket.version>, +      <dependency>, +        <groupId>com.github.jnr</groupId>, +        <artifactId>jnr-unixsocket</artifactId>, +        <version>${jnr-unixsocket.version}</version>, +      </dependency>, +++ b/samples/pom.xml, +    <module>unixdomainsockets</module>, +++ b/samples/unixdomainsockets/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3.sample</groupId>, +    <artifactId>sample-parent</artifactId>, +    <version>3.11.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>unixdomainsockets</artifactId>, +  <name>Sample: UNIX domain sockets</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.github.jnr</groupId>, +      <artifactId>jnr-unixsocket</artifactId>, +    </dependency>, +  </dependencies>, +</project>, +++ b/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/ClientAndServer.java, +/*]
[+++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_141</id>, +      <activation>, +        <jdk>1.8.0_141</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_144</id>, +      <activation>, +        <jdk>1.8.0_144</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ b/src/main/java/com/squareup/okhttp/Connection.java, +import com.squareup.okhttp.internal.http.HttpAuthenticator;, +import com.squareup.okhttp.internal.http.HttpEngine;, +import com.squareup.okhttp.internal.http.HttpTransport;, +import com.squareup.okhttp.internal.http.RawHeaders;, +import com.squareup.okhttp.internal.http.SpdyTransport;, +import com.squareup.okhttp.internal.spdy.SpdyConnection;, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +import com.squareup.okhttp.internal.http.HttpAuthenticator;, +import com.squareup.okhttp.internal.http.HttpEngine;, +import com.squareup.okhttp.internal.http.HttpTransport;, +import com.squareup.okhttp.internal.http.RawHeaders;, +import com.squareup.okhttp.internal.http.SpdyTransport;, +import com.squareup.okhttp.internal.spdy.SpdyConnection;, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Util;, +                    Util.closeQuietly(connection);, +                    Util.closeQuietly(connection);, +            Util.closeQuietly(connection);, +        Util.closeQuietly(connection);, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +import com.squareup.okhttp.internal.http.HttpAuthenticator;, +import com.squareup.okhttp.internal.http.HttpEngine;, +import com.squareup.okhttp.internal.http.HttpTransport;, +import com.squareup.okhttp.internal.http.RawHeaders;, +import com.squareup.okhttp.internal.http.SpdyTransport;, +import com.squareup.okhttp.internal.spdy.SpdyConnection;, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Util;, +                    Util.closeQuietly(connection);, +                    Util.closeQuietly(connection);, +            Util.closeQuietly(connection);, +        Util.closeQuietly(connection);, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +import com.squareup.okhttp.internal.http.HttpAuthenticator;, +import com.squareup.okhttp.internal.http.HttpEngine;, +import com.squareup.okhttp.internal.http.HttpTransport;, +import com.squareup.okhttp.internal.http.RawHeaders;, +import com.squareup.okhttp.internal.http.SpdyTransport;, +import com.squareup.okhttp.internal.spdy.SpdyConnection;, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Util;, +                    Util.closeQuietly(connection);, +                    Util.closeQuietly(connection);, +            Util.closeQuietly(connection);, +        Util.closeQuietly(connection);, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;, +++ b/src/main/java/com/squareup/okhttp/TunnelRequest.java, +import com.squareup.okhttp.internal.http.RawHeaders;, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +import com.squareup.okhttp.internal.http.HttpAuthenticator;, +import com.squareup.okhttp.internal.http.HttpEngine;, +import com.squareup.okhttp.internal.http.HttpTransport;, +import com.squareup.okhttp.internal.http.RawHeaders;, +import com.squareup.okhttp.internal.http.SpdyTransport;, +import com.squareup.okhttp.internal.spdy.SpdyConnection;, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Util;, +                    Util.closeQuietly(connection);, +                    Util.closeQuietly(connection);, +            Util.closeQuietly(connection);, +        Util.closeQuietly(connection);, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;, +++ b/src/main/java/com/squareup/okhttp/TunnelRequest.java, +import com.squareup.okhttp.internal.http.RawHeaders;, +++ b/src/main/java/com/squareup/okhttp/internal/Base64.java, +/*, + *  Licensed to the Apache Software Foundation (ASF) under one or more, + *  contributor license agreements.  See the NOTICE file distributed with, + *  this work for additional information regarding copyright ownership., + *  The ASF licenses this file to You under the Apache License, Version 2.0, + *  (the "License"); you may not use this file except in compliance with, + *  the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + *  Unless required by applicable law or agreed to in writing, software, + *  distributed under the License is distributed on an "AS IS" BASIS,, + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *  See the License for the specific language governing permissions and, + *  limitations under the License., + */, +, +/**, +* @author Alexander Y. Kleymenov, +*/, +, +package com.squareup.okhttp.internal;, +, +import static com.squareup.okhttp.internal.Util.EMPTY_BYTE_ARRAY;, +import java.io.UnsupportedEncodingException;, +, +/**]
[+++ b/CHANGELOG.md, +    charset for the remaining bytes. Most applications should not need a byte order mark., + *  New: Update HTTP/2 support to `h2-16` and `hpack-10`., +++ b/CHANGELOG.md, +    charset for the remaining bytes. Most applications should not need a byte order mark., + *  New: Update HTTP/2 support to `h2-16` and `hpack-10`., +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +    // receiving a window update on the connection will unblock new streams., +++ b/CHANGELOG.md, +    charset for the remaining bytes. Most applications should not need a byte order mark., + *  New: Update HTTP/2 support to `h2-16` and `hpack-10`., +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +    // receiving a window update on the connection will unblock new streams., +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +   * Returns an array containing only elements found in {@code first} and also in {@code]
[+++ b/okhttp/pom.xml]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void successfulExpectContinuePermitsConnectionReuse() throws Exception {, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build());, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .build());, +  @Test public void successfulExpectContinuePermitsConnectionReuseWithHttp2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    successfulExpectContinuePermitsConnectionReuse();, +  }, +, +  @Test public void unsuccessfulExpectContinuePreventsConnectionReuse() throws Exception {, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build());, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .build());, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +  }, +, +  @Test public void unsuccessfulExpectContinuePermitsConnectionReuseWithHttp2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +, +    server.enqueue(new MockResponse());, +    server.enqueue(new MockResponse());, +, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build());, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .build());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void successfulExpectContinuePermitsConnectionReuse() throws Exception {, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build());, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .build());, +  @Test public void successfulExpectContinuePermitsConnectionReuseWithHttp2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    successfulExpectContinuePermitsConnectionReuse();, +  }, +, +  @Test public void unsuccessfulExpectContinuePreventsConnectionReuse() throws Exception {, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build());, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .build());, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +  }, +, +  @Test public void unsuccessfulExpectContinuePermitsConnectionReuseWithHttp2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +, +    server.enqueue(new MockResponse());, +    server.enqueue(new MockResponse());, +, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build());, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .build());, +++ b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java, +import okhttp3.internal.connection.RealConnection;, +    RealInterceptorChain realChain = (RealInterceptorChain) chain;, +    HttpCodec httpCodec = realChain.httpStream();, +    StreamAllocation streamAllocation = realChain.streamAllocation();, +    RealConnection connection = (RealConnection) realChain.connection();, +    Request request = realChain.request();, +        // Write the request body if the "Expect: 100-continue" expectation was met., +      } else if (!connection.isMultiplexed()) {, +        // If the "Expect: 100-continue" expectation wasn't met, prevent the HTTP/1 connection from, +        // being reused. Otherwise we're still obligated to transmit the request body to leave the, +        // connection in a consistent state., +        streamAllocation.noNewStreams();]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, +              transport = Transport.HTTP_20_DRAFT_09;, +        if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, +          if (transport == Transport.HTTP_20_DRAFT_09) {, +            builder.http20Draft09();, +            builder.spdy3();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, +              transport = Transport.HTTP_20_DRAFT_09;, +        if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, +          if (transport == Transport.HTTP_20_DRAFT_09) {, +            builder.http20Draft09();, +            builder.spdy3();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, +              transport = Transport.HTTP_20_DRAFT_09;, +        if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, +          if (transport == Transport.HTTP_20_DRAFT_09) {, +            builder.http20Draft09();, +            builder.spdy3();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +package com.squareup.okhttp.internal.spdy;, +, +import java.io.DataInputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.BitSet;, +import java.util.List;, +import java.util.ListIterator;, +, +/**, + * Read and write HPACK v05., + * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-05, + */, +final class HpackDraft05 {, +, +  // Visible for testing., +  static class HeaderEntry implements Cloneable {, +    final String name;, +    final String value;, +    final int size;, +    boolean referenced = true;, +, +    HeaderEntry(String name, String value) {, +      this.name = name;, +      this.value = value;, +      // TODO: This needs to be the size in bytes, not the length in chars., +      this.size = 32 + name.length() + value.length();, +    }, +, +    /** Adds name and value, if this entry is referenced. */, +    void addTo(List<String> out) {, +      if (!referenced) return;, +      out.add(name);, +      out.add(value);, +    }, +, +    @Override public HeaderEntry clone() {, +      try {, +        return (HeaderEntry) super.clone();, +      } catch (CloneNotSupportedException e) {, +        throw new AssertionError();, +      }, +    }, +  }, +, +  static final int PREFIX_5_BITS = 0x1f;, +  static final int PREFIX_6_BITS = 0x3f;, +  static final int PREFIX_7_BITS = 0x7f;, +  static final int PREFIX_8_BITS = 0xff;, +, +  static final List<HeaderEntry> STATIC_HEADER_TABLE = Arrays.asList(, +      new HeaderEntry(":authority", ""),, +      new HeaderEntry(":method", "GET"),, +      new HeaderEntry(":method", "POST"),, +      new HeaderEntry(":path", "/"),, +      new HeaderEntry(":path", "/index.html"),, +      new HeaderEntry(":scheme", "http"),, +      new HeaderEntry(":scheme", "https"),, +      new HeaderEntry(":status", "200"),, +      new HeaderEntry(":status", "500"),, +      new HeaderEntry(":status", "404"),, +      new HeaderEntry(":status", "403"),]
[+++ b/mockwebserver/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-tls/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.15.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.15.0-SNAPSHOT</version>]
[+++ b/build.gradle, +  id 'me.champeau.gradle.japicmp' version '0.2.6', +, +/**, + * Returns a .jar file for the golden version of this project., + * https://github.com/Visistema/Groovy1/blob/ba5eb9b2f19ca0cc8927359ce414c4e1974b7016/gradle/binarycompatibility.gradle#L48, + */, +ext.baselineJar = { project, version ->, +  def group = project.property("GROUP"), +  def artifactId = project.property("POM_ARTIFACT_ID"), +  try {, +    String jarFile = "$artifactId-${version}.jar", +    project.group = 'virtual_group_for_japicmp' // Prevent it from resolving the current version., +    def dependency = project.dependencies.create("$group:$artifactId:$version@jar"), +    return project.configurations.detachedConfiguration(dependency).files, +        .find { (it.name == jarFile) }, +  } finally {, +    project.group = group, +  }, +}, +ext.baselineVersion = "3.14.0", +++ b/build.gradle, +  id 'me.champeau.gradle.japicmp' version '0.2.6', +, +/**, + * Returns a .jar file for the golden version of this project., + * https://github.com/Visistema/Groovy1/blob/ba5eb9b2f19ca0cc8927359ce414c4e1974b7016/gradle/binarycompatibility.gradle#L48, + */, +ext.baselineJar = { project, version ->, +  def group = project.property("GROUP"), +  def artifactId = project.property("POM_ARTIFACT_ID"), +  try {, +    String jarFile = "$artifactId-${version}.jar", +    project.group = 'virtual_group_for_japicmp' // Prevent it from resolving the current version., +    def dependency = project.dependencies.create("$group:$artifactId:$version@jar"), +    return project.configurations.detachedConfiguration(dependency).files, +        .find { (it.name == jarFile) }, +  } finally {, +    project.group = group, +  }, +}, +ext.baselineVersion = "3.14.0", +++ b/mockwebserver/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, +  oldClasspath = files(baselineJar(project, baselineVersion)), +  newClasspath = files(jar.archivePath), +  onlyBinaryIncompatibleModified = true, +  failOnModification = true, +  txtOutputFile = file("$buildDir/reports/japi.txt"), +  ignoreMissingClasses = true, +  includeSynthetic = true, +}, +check.dependsOn(japicmp), +++ b/build.gradle, +  id 'me.champeau.gradle.japicmp' version '0.2.6', +, +/**, + * Returns a .jar file for the golden version of this project., + * https://github.com/Visistema/Groovy1/blob/ba5eb9b2f19ca0cc8927359ce414c4e1974b7016/gradle/binarycompatibility.gradle#L48, + */, +ext.baselineJar = { project, version ->, +  def group = project.property("GROUP"), +  def artifactId = project.property("POM_ARTIFACT_ID"), +  try {, +    String jarFile = "$artifactId-${version}.jar", +    project.group = 'virtual_group_for_japicmp' // Prevent it from resolving the current version., +    def dependency = project.dependencies.create("$group:$artifactId:$version@jar"), +    return project.configurations.detachedConfiguration(dependency).files, +        .find { (it.name == jarFile) }, +  } finally {, +    project.group = group, +  }, +}, +ext.baselineVersion = "3.14.0", +++ b/mockwebserver/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, +  oldClasspath = files(baselineJar(project, baselineVersion)), +  newClasspath = files(jar.archivePath), +  onlyBinaryIncompatibleModified = true, +  failOnModification = true, +  txtOutputFile = file("$buildDir/reports/japi.txt"), +  ignoreMissingClasses = true, +  includeSynthetic = true, +}, +check.dependsOn(japicmp), +++ b/okhttp-logging-interceptor/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, +  oldClasspath = files(baselineJar(project, baselineVersion)), +  newClasspath = files(jar.archivePath), +  onlyBinaryIncompatibleModified = true, +  failOnModification = true, +  txtOutputFile = file("$buildDir/reports/japi.txt"), +  ignoreMissingClasses = true, +  includeSynthetic = true]
[+++ b/benchmarks/pom.xml, +    <version>2.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp/pom.xml, +    <version>2.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp/pom.xml, +    <version>2.2.0</version>, +++ b/pom.xml, +  <version>2.2.0</version>, +    <tag>parent-2.2.0</tag>, +++ b/benchmarks/pom.xml, +    <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp/pom.xml, +    <version>2.2.0</version>, +++ b/pom.xml, +  <version>2.2.0</version>, +    <tag>parent-2.2.0</tag>, +++ b/samples/crawler/pom.xml, +    <version>2.2.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0</version>]
[+++ b/.travis.yml, +  - ./mvnw dependency:resolve -B, +  - ./mvnw checkstyle:check -B, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B, +  - ./mvnw checkstyle:check -B, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_RELEASE TBD_, +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B, +  - ./mvnw checkstyle:check -B, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_RELEASE TBD_, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.13.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.13.1"), +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B, +  - ./mvnw checkstyle:check -B, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_RELEASE TBD_, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.13.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.13.1"), +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B, +  - ./mvnw checkstyle:check -B, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_RELEASE TBD_, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.13.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.13.1"), +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(server.getPort() > 0).isTrue();, +      assertThat(e.getMessage().contains("refused")).isTrue();, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B, +  - ./mvnw checkstyle:check -B, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_RELEASE TBD_, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.13.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.13.1"), +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(server.getPort() > 0).isTrue();, +      assertThat(e.getMessage().contains("refused")).isTrue();, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    List<Header> responseHeaders = Arrays.asList(]
[+++ b/mockwebserver/pom.xml, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/mockwebserver/pom.xml, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +    assertThat(requestsMade.size()).isEqualTo(0);, +    assertThat(requestsMade.size()).isEqualTo(1);, +    // First response is still waiting., +    assertThat(firstResponseCode.get()).isEqualTo(0);, +    // Second response is done., +    assertThat(secondResponseCode.get()).isEqualTo(200);, +    // And now it's done!, +    assertThat(firstResponseCode.get()).isEqualTo(200);, +    // (Still done)., +    assertThat(secondResponseCode.get()).isEqualTo(200);, +++ b/mockwebserver/pom.xml, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +    assertThat(requestsMade.size()).isEqualTo(0);, +    assertThat(requestsMade.size()).isEqualTo(1);, +    // First response is still waiting., +    assertThat(firstResponseCode.get()).isEqualTo(0);, +    // Second response is done., +    assertThat(secondResponseCode.get()).isEqualTo(200);, +    // And now it's done!, +    assertThat(firstResponseCode.get()).isEqualTo(200);, +    // (Still done)., +    assertThat(secondResponseCode.get()).isEqualTo(200);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.assertj.core.data.Offset.offset;, +    assertThat(headersToList(response)).containsExactly("Content-Length: 0");, +    assertThat(response.getStatus()).isEqualTo("HTTP/1.1 200 OK");, +      assertThat(response.getStatus()).isEqualTo(("HTTP/1.1 " + i + " " + expectedReason));, +      assertThat(headersToList(response)).containsExactly("Content-Length: 0");, +    assertThat(headersToList(response)).containsExactly("Content-Length: 0");, +    assertThat(response.getStatus()).isEqualTo("HTTP/1.1 202 That'll do pig");, +    assertThat(headersToList(response)).containsExactly("Content-Length: 3");, +    assertThat(response.getBody().readUtf8()).isEqualTo("ABC");, +    assertThat(headersToList(response)).containsExactly("Cookie: s=square", "Cookie: a=android");, +    assertThat(headersToList(response)).containsExactly("Cookies: delicious", "cookie: r=robot");, +    assertThat(headersToList(response)).containsExactly("Cookie: a=android");, +    assertThat(connection.getResponseCode()).isEqualTo(HttpURLConnection.HTTP_OK);, +    assertThat(reader.readLine()).isEqualTo("hello world");, +    assertThat(request.getRequestLine()).isEqualTo("GET / HTTP/1.1");, +    assertThat(request.getHeader("Accept-Language")).isEqualTo("en-US");, +    assertThat(reader.readLine()).isEqualTo("This is the new location!");, +    assertThat(first.getRequestLine()).isEqualTo("GET / HTTP/1.1");, +    assertThat(redirect.getRequestLine()).isEqualTo("GET /new-path HTTP/1.1");, +    assertThat(reader.readLine()).isEqualTo("enqueued in the background");, +    assertThat(in.read()).isEqualTo('A');, +    assertThat(in.read()).isEqualTo('B');, +    assertThat(in.read()).isEqualTo('C');, +    assertThat(in2.read()).isEqualTo('D');, +    assertThat(in2.read()).isEqualTo('E');, +    assertThat(in2.read()).isEqualTo('F');, +    assertThat(in2.read()).isEqualTo(-1);, +    assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(0);, +    assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(0);, +    assertThat(in.read()).isEqualTo(-1);, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(in.read()).isEqualTo('A');, +    assertThat(in.read()).isEqualTo('B');, +    assertThat(in.read()).isEqualTo('C');, +    assertThat(in.read()).isEqualTo('D');, +    assertThat(in.read()).isEqualTo('E');, +    assertThat(in.read()).isEqualTo('F');, +    assertThat(in.read()).isEqualTo(-1);, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(in.read()).isEqualTo('A');, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    // Halfway +/- 0.5%, +    assertThat((float) i).isCloseTo(512f, offset(5f));, +    assertThat(connection.getContentLength()).isEqualTo(2);, +    assertThat(in.read()).isEqualTo('a');, +      assertThat(byteRead).isEqualTo(-1);, +    assertThat(server.getPort() > 0).isTrue();, +    assertThat(server.getHostName()).isNotNull();, +    assertThat(server.toProxyAddress()).isNotNull();]
[+++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_191</id>, +      <activation>, +        <jdk>1.8.0_191</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.13.v20181017</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_192</id>, +      <activation>, +        <jdk>1.8.0_192</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.13.v20181017</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java, +    try (Response response = client.newCall(request).execute()) {, +      String responseSource = response.networkResponse() != null ? ("(network: ", +          + response.networkResponse().code(), +          + " over ", +          + response.protocol(), +          + ")") : "(cache)";, +  }, +++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java, +    try (Response response = client.newCall(request).execute()) {, +      String responseSource = response.networkResponse() != null ? ("(network: ", +          + response.networkResponse().code(), +          + " over ", +          + response.protocol(), +          + ")") : "(cache)";, +  }, +++ b/samples/simple-client/src/main/java/okhttp3/sample/OkHttpContributors.java, +    try (Response response = client.newCall(request).execute()) {, +  }]
[+++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java, +    result.add(buildChantra(client));]
[+++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/okhttp3/internal/duplex/DuplexRequestBody.java, +    pipe.fold(requestBodyOut);, +++ b/okhttp/src/main/java/okhttp3/internal/duplex/DuplexRequestBody.java, +    pipe.fold(requestBodyOut);, +++ b/pom.xml, +    <okio.version>1.17.1</okio.version>]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      SSLContext context = Platform.get().newSSLContext();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      SSLContext context = Platform.get().newSSLContext();, +++ b/okhttp-tls/build.gradle, +  packageExcludes = [, +      'okhttp3.tls.internal',, +  ], +  methodExcludes = [, +      // Became 'final' in 4.0.0:, +      'okhttp3.tls.HandshakeCertificates#keyManager()',, +      'okhttp3.tls.HandshakeCertificates#sslContext()',, +      'okhttp3.tls.HandshakeCertificates#sslSocketFactory()',, +      'okhttp3.tls.HandshakeCertificates#trustManager()',, +      'okhttp3.tls.HandshakeCertificates$Builder#addPlatformTrustedCertificates()',, +      'okhttp3.tls.HandshakeCertificates$Builder#addTrustedCertificate(java.security.cert.X509Certificate)',, +      'okhttp3.tls.HandshakeCertificates$Builder#build()',, +      'okhttp3.tls.HandshakeCertificates$Builder#heldCertificate(okhttp3.tls.HeldCertificate, java.security.cert.X509Certificate\\[\\])',, +      'okhttp3.tls.HeldCertificate#certificate()',, +      'okhttp3.tls.HeldCertificate#certificatePem()',, +      'okhttp3.tls.HeldCertificate#keyPair()',, +      'okhttp3.tls.HeldCertificate#privateKeyPkcs1Pem()',, +      'okhttp3.tls.HeldCertificate#privateKeyPkcs8Pem()',, +      'okhttp3.tls.HeldCertificate$Builder#addSubjectAlternativeName(java.lang.String)',, +      'okhttp3.tls.HeldCertificate$Builder#build()',, +      'okhttp3.tls.HeldCertificate$Builder#certificateAuthority(int)',, +      'okhttp3.tls.HeldCertificate$Builder#commonName(java.lang.String)',, +      'okhttp3.tls.HeldCertificate$Builder#duration(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.tls.HeldCertificate$Builder#ecdsa256()',, +      'okhttp3.tls.HeldCertificate$Builder#keyPair(java.security.KeyPair)',, +      'okhttp3.tls.HeldCertificate$Builder#keyPair(java.security.PublicKey, java.security.PrivateKey)',, +      'okhttp3.tls.HeldCertificate$Builder#organizationalUnit(java.lang.String)',, +      'okhttp3.tls.HeldCertificate$Builder#rsa2048()',, +      'okhttp3.tls.HeldCertificate$Builder#serialNumber(java.math.BigInteger)',, +      'okhttp3.tls.HeldCertificate$Builder#serialNumber(long)',, +      'okhttp3.tls.HeldCertificate$Builder#signedBy(okhttp3.tls.HeldCertificate)',, +      'okhttp3.tls.HeldCertificate$Builder#validityInterval(long, long)',, +  ], +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      SSLContext context = Platform.get().newSSLContext();, +++ b/okhttp-tls/build.gradle, +  packageExcludes = [, +      'okhttp3.tls.internal',, +  ], +  methodExcludes = [, +      // Became 'final' in 4.0.0:, +      'okhttp3.tls.HandshakeCertificates#keyManager()',, +      'okhttp3.tls.HandshakeCertificates#sslContext()',, +      'okhttp3.tls.HandshakeCertificates#sslSocketFactory()',, +      'okhttp3.tls.HandshakeCertificates#trustManager()',, +      'okhttp3.tls.HandshakeCertificates$Builder#addPlatformTrustedCertificates()',, +      'okhttp3.tls.HandshakeCertificates$Builder#addTrustedCertificate(java.security.cert.X509Certificate)',, +      'okhttp3.tls.HandshakeCertificates$Builder#build()',, +      'okhttp3.tls.HandshakeCertificates$Builder#heldCertificate(okhttp3.tls.HeldCertificate, java.security.cert.X509Certificate\\[\\])',, +      'okhttp3.tls.HeldCertificate#certificate()',, +      'okhttp3.tls.HeldCertificate#certificatePem()',, +      'okhttp3.tls.HeldCertificate#keyPair()',, +      'okhttp3.tls.HeldCertificate#privateKeyPkcs1Pem()',, +      'okhttp3.tls.HeldCertificate#privateKeyPkcs8Pem()',, +      'okhttp3.tls.HeldCertificate$Builder#addSubjectAlternativeName(java.lang.String)',, +      'okhttp3.tls.HeldCertificate$Builder#build()',, +      'okhttp3.tls.HeldCertificate$Builder#certificateAuthority(int)',, +      'okhttp3.tls.HeldCertificate$Builder#commonName(java.lang.String)',, +      'okhttp3.tls.HeldCertificate$Builder#duration(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.tls.HeldCertificate$Builder#ecdsa256()',, +      'okhttp3.tls.HeldCertificate$Builder#keyPair(java.security.KeyPair)',, +      'okhttp3.tls.HeldCertificate$Builder#keyPair(java.security.PublicKey, java.security.PrivateKey)',, +      'okhttp3.tls.HeldCertificate$Builder#organizationalUnit(java.lang.String)',, +      'okhttp3.tls.HeldCertificate$Builder#rsa2048()',, +      'okhttp3.tls.HeldCertificate$Builder#serialNumber(java.math.BigInteger)',, +      'okhttp3.tls.HeldCertificate$Builder#serialNumber(long)',, +      'okhttp3.tls.HeldCertificate$Builder#signedBy(okhttp3.tls.HeldCertificate)',, +      'okhttp3.tls.HeldCertificate$Builder#validityInterval(long, long)',, +  ], +++ /dev/null, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      SSLContext context = Platform.get().newSSLContext();, +++ b/okhttp-tls/build.gradle, +  packageExcludes = [, +      'okhttp3.tls.internal',, +  ], +  methodExcludes = [, +      // Became 'final' in 4.0.0:, +      'okhttp3.tls.HandshakeCertificates#keyManager()',, +      'okhttp3.tls.HandshakeCertificates#sslContext()',, +      'okhttp3.tls.HandshakeCertificates#sslSocketFactory()',, +      'okhttp3.tls.HandshakeCertificates#trustManager()',, +      'okhttp3.tls.HandshakeCertificates$Builder#addPlatformTrustedCertificates()',, +      'okhttp3.tls.HandshakeCertificates$Builder#addTrustedCertificate(java.security.cert.X509Certificate)',, +      'okhttp3.tls.HandshakeCertificates$Builder#build()',, +      'okhttp3.tls.HandshakeCertificates$Builder#heldCertificate(okhttp3.tls.HeldCertificate, java.security.cert.X509Certificate\\[\\])',, +      'okhttp3.tls.HeldCertificate#certificate()',, +      'okhttp3.tls.HeldCertificate#certificatePem()',, +      'okhttp3.tls.HeldCertificate#keyPair()',, +      'okhttp3.tls.HeldCertificate#privateKeyPkcs1Pem()',, +      'okhttp3.tls.HeldCertificate#privateKeyPkcs8Pem()',, +      'okhttp3.tls.HeldCertificate$Builder#addSubjectAlternativeName(java.lang.String)',, +      'okhttp3.tls.HeldCertificate$Builder#build()',, +      'okhttp3.tls.HeldCertificate$Builder#certificateAuthority(int)',, +      'okhttp3.tls.HeldCertificate$Builder#commonName(java.lang.String)',]
[+++ b/.travis.yml, +, +addons:, +  apt:, +    packages:, +      - oracle-java8-installer, +++ b/.travis.yml, +, +addons:, +  apt:, +    packages:, +      - oracle-java8-installer, +++ b/pom.xml, +    <!-- ALPN library targeted to Java 8 update 71 - 74 -->, +    <alpn.jdk8.version>8.1.7.v20160121</alpn.jdk8.version>, +    <profile>, +      <id>jdk9</id>, +      <activation>, +        <jdk>9</jdk>, +      </activation>, +      <!-- Not currently used, but visible in Intellij etc -->, +    </profile>]
[+++ b/benchmarks/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.8.0-SNAPSHOT</version>]
[+++ b/README.md, +Download [the latest JAR][1] or grab via Maven:, +    <groupId>com.squareup.okhttp</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses, +[Jetty-NPN][3] which requires OpenJDK 7+., +, +, +Test on a USB-attached Android using [Vogar][4]. Unfortunately `dx` requires that you build with, +Java 6, otherwise the test class will be silently omitted from the `.dex` file., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [3]: http://wiki.eclipse.org/Jetty/Feature/NPN, + [4]: https://code.google.com/p/vogar/, +++ b/README.md, +Download [the latest JAR][1] or grab via Maven:, +    <groupId>com.squareup.okhttp</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses, +[Jetty-NPN][3] which requires OpenJDK 7+., +, +, +Test on a USB-attached Android using [Vogar][4]. Unfortunately `dx` requires that you build with, +Java 6, otherwise the test class will be silently omitted from the `.dex` file., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [3]: http://wiki.eclipse.org/Jetty/Feature/NPN, + [4]: https://code.google.com/p/vogar/, +++ /dev/null, +++ b/README.md, +Download [the latest JAR][1] or grab via Maven:, +    <groupId>com.squareup.okhttp</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses, +[Jetty-NPN][3] which requires OpenJDK 7+., +, +, +Test on a USB-attached Android using [Vogar][4]. Unfortunately `dx` requires that you build with, +Java 6, otherwise the test class will be silently omitted from the `.dex` file., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [3]: http://wiki.eclipse.org/Jetty/Feature/NPN, + [4]: https://code.google.com/p/vogar/, +++ /dev/null, +++ b/okhttp-apache/README.md, +OkHttp Apache HttpClient Implementation, +=======================================, +, +This module is an implementation of the Apache `HttpClient` interface that is backed by OkHttp., +, +**Warning**: Many core features of Apache HTTP client are not implemented by this API. This includes, +the keep-alive strategy, cookie store, credentials provider, route planner and others., +++ b/README.md, +Download [the latest JAR][1] or grab via Maven:, +    <groupId>com.squareup.okhttp</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses, +[Jetty-NPN][3] which requires OpenJDK 7+., +, +, +Test on a USB-attached Android using [Vogar][4]. Unfortunately `dx` requires that you build with, +Java 6, otherwise the test class will be silently omitted from the `.dex` file., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [3]: http://wiki.eclipse.org/Jetty/Feature/NPN, + [4]: https://code.google.com/p/vogar/, +++ /dev/null, +++ b/okhttp-apache/README.md, +OkHttp Apache HttpClient Implementation, +=======================================, +, +This module is an implementation of the Apache `HttpClient` interface that is backed by OkHttp.]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +  /**, +   * Enqueued on shutdown to release threads waiting on {@link #dispatch}. Note that this response, +   * isn't transmitted because the connection is closed before this response is returned., +   */, +  private static final MockResponse DEAD_LETTER = new MockResponse(), +      .setStatus("HTTP/1.1 " + 503 + " shutting down");, +, +    MockResponse result = responseQueue.take();, +, +    // If take() returned because we're shutting down, then enqueue another dead letter so that any, +    // other threads waiting on take() will also return., +    if (result == DEAD_LETTER) responseQueue.add(DEAD_LETTER);, +, +    return result;, +  @Override public void shutdown() {, +    responseQueue.add(DEAD_LETTER);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +  /**, +   * Enqueued on shutdown to release threads waiting on {@link #dispatch}. Note that this response, +   * isn't transmitted because the connection is closed before this response is returned., +   */, +  private static final MockResponse DEAD_LETTER = new MockResponse(), +      .setStatus("HTTP/1.1 " + 503 + " shutting down");, +, +    MockResponse result = responseQueue.take();, +, +    // If take() returned because we're shutting down, then enqueue another dead letter so that any, +    // other threads waiting on take() will also return., +    if (result == DEAD_LETTER) responseQueue.add(DEAD_LETTER);, +, +    return result;, +  @Override public void shutdown() {, +    responseQueue.add(DEAD_LETTER);, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +, +  @Test public void shutdownWhileBlockedDispatching() throws Exception {, +    // Enqueue a request that'll cause MockWebServer to hang on QueueDispatcher.dispatch()., +    HttpURLConnection connection = (HttpURLConnection) server.url("/").url().openConnection();, +    connection.setReadTimeout(500);, +    try {, +      connection.getResponseCode();, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +, +    // Shutting down the server should unblock the dispatcher., +    server.shutdown();, +  }]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +    assertEquals("192.168.1.254", parse("http://[::ffff:c0a8:1fe]/").host());, +  @Test public void hostIpv6Builder() throws Exception {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +    assertEquals("192.168.1.254", parse("http://[::ffff:c0a8:1fe]/").host());, +  @Test public void hostIpv6Builder() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java, +    SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    ConnectionSpec sslV3 =, +        new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +    TlsVersion[] enabledSocketTlsVersions = {TlsVersion.TLS_1_1, TlsVersion.TLS_1_0};, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_0);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +    assertEquals("192.168.1.254", parse("http://[::ffff:c0a8:1fe]/").host());, +  @Test public void hostIpv6Builder() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java, +    SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    ConnectionSpec sslV3 =, +        new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +    TlsVersion[] enabledSocketTlsVersions = {TlsVersion.TLS_1_1, TlsVersion.TLS_1_0};, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_0);, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +  /** A secure TLS connection assuming a modern client platform and server. */, +  /** A modern TLS connection with extensions like SNI and ALPN available. */, +      .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0), +  /** A backwards-compatible fallback connection for interop with obsolete servers. */, +      .tlsVersions(TlsVersion.TLS_1_0), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +    assertEquals("192.168.1.254", parse("http://[::ffff:c0a8:1fe]/").host());, +  @Test public void hostIpv6Builder() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java, +    SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    ConnectionSpec sslV3 =, +        new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +    TlsVersion[] enabledSocketTlsVersions = {TlsVersion.TLS_1_1, TlsVersion.TLS_1_0};, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_0);, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +  /** A secure TLS connection assuming a modern client platform and server. */, +  /** A modern TLS connection with extensions like SNI and ALPN available. */, +      .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0), +  /** A backwards-compatible fallback connection for interop with obsolete servers. */, +      .tlsVersions(TlsVersion.TLS_1_0), +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +      if (address.length == 4) return inetAddress.getHostAddress(); // An IPv4-mapped IPv6 address.]
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      StreamAllocation streamAllocation = new StreamAllocation(pool, addressA, null,, +          EventListener.NONE, null);, +      StreamAllocation leak = new StreamAllocation(pool, connection.route().address(), null,, +          EventListener.NONE, null);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      StreamAllocation streamAllocation = new StreamAllocation(pool, addressA, null,, +          EventListener.NONE, null);, +      StreamAllocation leak = new StreamAllocation(pool, connection.route().address(), null,, +          EventListener.NONE, null);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.util.ArrayDeque;, +import java.util.Collections;, +import java.util.Deque;, +import java.util.List;, +import okhttp3.internal.SingleInetAddressDns;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class EventListenerTest {, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  private OkHttpClient client;, +  private final RecordingEventListener listener = new RecordingEventListener();, +, +  @Before public void setUp() {, +    client = new OkHttpClient.Builder(), +        .dns(new SingleInetAddressDns()), +        .eventListener(listener), +        .build();, +  }, +, +  @Test public void successfulDnsLookup() throws IOException {, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    assertSame(call, dnsStart.call);, +    assertEquals("localhost", dnsStart.domainName);, +, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    assertSame(call, dnsEnd.call);, +    assertEquals("localhost", dnsEnd.domainName);, +    assertEquals(1, dnsEnd.inetAddressList.size());, +    assertNull(dnsEnd.throwable);, +  }, +, +  @Test public void failedDnsLookup() {, +    client = client.newBuilder(), +        .dns(new FakeDns()), +        .build();, +    Call call = client.newCall(new Request.Builder(), +        .url("http://fakeurl/"), +        .build());, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +, +    listener.expectNextEvent(DnsStart.class);, +, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    assertSame(call, dnsEnd.call);, +    assertEquals("fakeurl", dnsEnd.domainName);]
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.WebSocketListener;, +++ b/okhttp-tests/fuzzingserver-config.json, +{, +  "url": "ws://127.0.0.1:9001",, +  "outdir": "./target/fuzzingserver-report",, +  "cases": ["*"],, +  "exclude-cases": [, +    "6.1.1",, +    "6.1.2",, +    "6.1.3",, +    "6.2.1",, +    "6.2.2",, +    "6.2.3",, +    "6.2.4",, +    "6.3.1",, +    "6.3.2",, +    "6.4.1",, +    "6.4.2",, +    "6.4.3",, +    "6.4.4",, +    "6.5.1",, +    "6.5.2",, +    "6.5.3",, +    "6.5.4",, +    "6.5.5",, +    "6.6.1",, +    "6.6.2",, +    "6.6.3",, +    "6.6.4",, +    "6.6.5",, +    "6.6.6",, +    "6.6.7",, +    "6.6.8",, +    "6.6.9",, +    "6.6.10",, +    "6.6.11",, +    "6.7.1",, +    "6.7.2",, +    "6.7.3",, +    "6.7.4",, +    "6.8.1",, +    "6.8.2",, +    "6.9.1",, +    "6.9.2",, +    "6.9.3",, +    "6.9.4",, +    "6.10.1",, +    "6.10.2",, +    "6.10.3",, +    "6.11.1",, +    "6.11.2",, +    "6.11.3",, +    "6.11.4",, +    "6.11.5",, +    "6.12.1",, +    "6.12.2",, +    "6.12.3",, +    "6.12.4",, +    "6.12.5",, +    "6.12.6",, +    "6.12.7",, +    "6.12.8",, +    "6.13.1",, +    "6.13.2",, +    "6.13.3",, +    "6.13.4",, +    "6.13.5",, +    "6.14.1",, +    "6.14.2",, +    "6.14.3",, +    "6.14.4",, +    "6.14.5",, +    "6.14.6",, +    "6.14.7",, +    "6.14.8",, +    "6.14.9",, +    "6.14.10",, +    "6.15.1",, +    "6.16.1",, +    "6.16.2",, +    "6.16.3",, +    "6.17.1",, +    "6.17.2",, +    "6.17.3",, +    "6.17.4",, +    "6.17.5",, +    "6.18.1",]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.buffer();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.buffer();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.buffer().getByte(0)) {, +      byte nextByte = source.buffer().getByte(key.size());, +        && source.buffer().getByte(0) == '\n') {, +    if (source.buffer().getByte(0) == ':') {, +      if (source.buffer().getByte(0) == ' ') {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.buffer();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.buffer().getByte(0)) {, +      byte nextByte = source.buffer().getByte(key.size());, +        && source.buffer().getByte(0) == '\n') {, +    if (source.buffer().getByte(0) == ':') {, +      if (source.buffer().getByte(0) == ' ') {, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +      .supportsTlsExtensions(true), +    Response response = null;, +    try {, +      response = client.newCall(request).execute();, +, +    } finally {, +      if (response != null) {, +        response.close();, +      }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {]
[+++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/pom.xml, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +import org.junit.Ignore;, +@Ignore // HttpUrl isn't implemented yet., +  @Ignore // Need to define expected results., +    assertEquals(null, HttpUrl.parse("http://host/\u000b")); // line tabulation, +    assertEquals(null, HttpUrl.parse("http://host/\u001c")); // information separator 4, +    assertEquals(null, HttpUrl.parse("http://host/\u001d")); // information separator 3, +    assertEquals(null, HttpUrl.parse("http://host/\u001e")); // information separator 2, +    assertEquals(null, HttpUrl.parse("http://host/\u001f")); // information separator 1, +    assertEquals(null, HttpUrl.parse("http://host/\u0085")); // next line, +    assertEquals(null, HttpUrl.parse("http://host/\u00a0")); // non-breaking space, +    assertEquals(null, HttpUrl.parse("http://host/\u1680")); // ogham space mark, +    assertEquals(null, HttpUrl.parse("http://host/\u180e")); // mongolian vowel separator, +    assertEquals(null, HttpUrl.parse("http://host/\u2000")); // en quad, +    assertEquals(null, HttpUrl.parse("http://host/\u2001")); // em quad, +    assertEquals(null, HttpUrl.parse("http://host/\u2002")); // en space, +    assertEquals(null, HttpUrl.parse("http://host/\u2003")); // em space, +    assertEquals(null, HttpUrl.parse("http://host/\u2004")); // three-per-em space, +    assertEquals(null, HttpUrl.parse("http://host/\u2005")); // four-per-em space, +    assertEquals(null, HttpUrl.parse("http://host/\u2006")); // six-per-em space, +    assertEquals(null, HttpUrl.parse("http://host/\u2007")); // figure space, +    assertEquals(null, HttpUrl.parse("http://host/\u2008")); // punctuation space, +    assertEquals(null, HttpUrl.parse("http://host/\u2009")); // thin space, +    assertEquals(null, HttpUrl.parse("http://host/\u200a")); // hair space, +    assertEquals(null, HttpUrl.parse("http://host/\u200b")); // zero-width space, +    assertEquals(null, HttpUrl.parse("http://host/\u200c")); // zero-width non-joiner, +    assertEquals(null, HttpUrl.parse("http://host/\u200d")); // zero-width joiner, +    assertEquals(null, HttpUrl.parse("http://host/\u200e")); // left-to-right mark, +    assertEquals(null, HttpUrl.parse("http://host/\u200f")); // right-to-left mark, +    assertEquals(null, HttpUrl.parse("http://host/\u2028")); // line separator, +    assertEquals(null, HttpUrl.parse("http://host/\u2029")); // paragraph separator]
[+++ b/benchmarks/pom.xml, +    <version>2.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-ws-tests/pom.xml, +    <version>2.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import java.net.HttpCookie;, +import java.util.ArrayList;, +import java.util.Arrays;, +  public void assertCookies(HttpUrl url, String... expectedCookies) throws Exception {, +    List<String> actualCookies = new ArrayList<>();, +    for (HttpCookie cookie : cookieManager.getCookieStore().get(url.uri())) {, +      actualCookies.add(cookie.toString());, +    }, +    assertEquals(Arrays.asList(expectedCookies), actualCookies);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import java.net.HttpCookie;, +import java.util.ArrayList;, +import java.util.Arrays;, +  public void assertCookies(HttpUrl url, String... expectedCookies) throws Exception {, +    List<String> actualCookies = new ArrayList<>();, +    for (HttpCookie cookie : cookieManager.getCookieStore().get(url.uri())) {, +      actualCookies.add(cookie.toString());, +    }, +    assertEquals(Arrays.asList(expectedCookies), actualCookies);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    executeSynchronously("/").assertFailure(IOException.class);, +  @Test public void requestHeaderNameWithSpaceForbidden() throws Exception {, +    try {, +      new Request.Builder().addHeader("a b", "c");, +      fail();, +    } catch (IllegalArgumentException expected) {, +      assertEquals("Unexpected char 0x20 at 1 in header name: a b", expected.getMessage());, +    }, +  }, +, +  @Test public void requestHeaderNameWithTabForbidden() throws Exception {, +    try {, +      new Request.Builder().addHeader("a\tb", "c");, +      fail();, +    } catch (IllegalArgumentException expected) {, +      assertEquals("Unexpected char 0x09 at 1 in header name: a\tb", expected.getMessage());, +    }, +  }, +, +  @Test public void responseHeaderNameWithSpacePermitted() throws Exception {, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .addHeader("content-length: 0"), +        .addHeaderLenient("a b", "c"));, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +    Response response = call.execute();, +    assertEquals("c", response.header("a b"));, +  }, +, +  @Test public void responseHeaderNameWithTabPermitted() throws Exception {, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .addHeader("content-length: 0"), +        .addHeaderLenient("a\tb", "c"));, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +    Response response = call.execute();, +    assertEquals("c", response.header("a\tb"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import java.net.HttpCookie;, +import java.util.ArrayList;, +import java.util.Arrays;, +  public void assertCookies(HttpUrl url, String... expectedCookies) throws Exception {, +    List<String> actualCookies = new ArrayList<>();, +    for (HttpCookie cookie : cookieManager.getCookieStore().get(url.uri())) {, +      actualCookies.add(cookie.toString());, +    }, +    assertEquals(Arrays.asList(expectedCookies), actualCookies);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    executeSynchronously("/").assertFailure(IOException.class);, +  @Test public void requestHeaderNameWithSpaceForbidden() throws Exception {, +    try {, +      new Request.Builder().addHeader("a b", "c");, +      fail();, +    } catch (IllegalArgumentException expected) {, +      assertEquals("Unexpected char 0x20 at 1 in header name: a b", expected.getMessage());, +    }, +  }, +, +  @Test public void requestHeaderNameWithTabForbidden() throws Exception {, +    try {, +      new Request.Builder().addHeader("a\tb", "c");, +      fail();, +    } catch (IllegalArgumentException expected) {, +      assertEquals("Unexpected char 0x09 at 1 in header name: a\tb", expected.getMessage());, +    }]
[+++ b/CHANGELOG.md, +## Version 3.12.2, +, + *  Fix: Don't crash if the HTTPS server returns no certificates in the TLS handshake., + *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`, +    callback., +, +, +++ b/CHANGELOG.md, +## Version 3.12.2, +, + *  Fix: Don't crash if the HTTPS server returns no certificates in the TLS handshake., + *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`, +    callback., +, +, +++ b/pom.xml, +            <version>8.15</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  private static final List<ConnectionSpec> DEFAULT_CONNECTION_SPECS = Util.immutableList(, +      ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS, ConnectionSpec.CLEARTEXT);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  private static final List<ConnectionSpec> DEFAULT_CONNECTION_SPECS = Util.immutableList(, +      ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS, ConnectionSpec.CLEARTEXT);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +    if (route.address().sslSocketFactory() == null) {, +      if (!connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) {, +            "CLEARTEXT communication not enabled for client"));, +      }, +      String host = route.address().url().host();, +      if (!Platform.get().isCleartextTrafficPermitted(host)) {, +        throw new RouteException(new UnknownServiceException(, +            "CLEARTEXT communication to " + host + " not permitted by network security policy"));, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  private static final List<ConnectionSpec> DEFAULT_CONNECTION_SPECS = Util.immutableList(, +      ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS, ConnectionSpec.CLEARTEXT);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +    if (route.address().sslSocketFactory() == null) {, +      if (!connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) {, +            "CLEARTEXT communication not enabled for client"));, +      }, +      String host = route.address().url().host();, +      if (!Platform.get().isCleartextTrafficPermitted(host)) {, +        throw new RouteException(new UnknownServiceException(, +            "CLEARTEXT communication to " + host + " not permitted by network security policy"));, +      }, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +  @Override public boolean isCleartextTrafficPermitted(String hostname) {, +          .getMethod("isCleartextTrafficPermitted", String.class);, +      return (boolean) isCleartextTrafficPermittedMethod.invoke(networkSecurityPolicy, hostname);, +    } catch (ClassNotFoundException | NoSuchMethodException e) {, +      return super.isCleartextTrafficPermitted(hostname);, +    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  private static final List<ConnectionSpec> DEFAULT_CONNECTION_SPECS = Util.immutableList(, +      ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS, ConnectionSpec.CLEARTEXT);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +    if (route.address().sslSocketFactory() == null) {, +      if (!connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) {, +            "CLEARTEXT communication not enabled for client"));, +      }, +      String host = route.address().url().host();, +      if (!Platform.get().isCleartextTrafficPermitted(host)) {, +        throw new RouteException(new UnknownServiceException(, +            "CLEARTEXT communication to " + host + " not permitted by network security policy"));, +      }, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +  @Override public boolean isCleartextTrafficPermitted(String hostname) {, +          .getMethod("isCleartextTrafficPermitted", String.class);, +      return (boolean) isCleartextTrafficPermittedMethod.invoke(networkSecurityPolicy, hostname);, +    } catch (ClassNotFoundException | NoSuchMethodException e) {, +      return super.isCleartextTrafficPermitted(hostname);, +    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.java, +  public boolean isCleartextTrafficPermitted(String hostname) {]
[+++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import okhttp3.CertificatePinner.Pin;, +  static String certA1Sha256Pin;, +  static String certB1Sha256Pin;, +  static String certC1Sha256Pin;, +      certA1Sha256Pin = "sha256/" + CertificatePinner.sha256(certA1.certificate).base64();, +      certB1Sha256Pin = "sha256/" + CertificatePinner.sha256(certB1.certificate).base64();, +      certC1Sha256Pin = "sha256/" + CertificatePinner.sha256(certC1.certificate).base64();, +    assertTrue(certA1Sha256Pin.equals(keypairACertificate2Pin));, +    assertTrue(certB1Sha256Pin.equals(keypairBCertificate2Pin));, +    assertFalse(certA1Sha256Pin.equals(certB1Sha256Pin));, +        .add("example.com", certA1Sha256Pin), +        .build();, +, +    certificatePinner.check("example.com", certA1.certificate);, +  }, +, +  @Test public void successfulCheckSha1Pin() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("example.com", "sha1/" + CertificatePinner.sha1(certA1.certificate).base64()), +        .add("example.com", certB1Sha256Pin), +        .add("example.com", certA1Sha256Pin), +        .add("example.com", certA1Sha256Pin, certB1Sha256Pin), +        .add("example.com", certA1Sha256Pin), +        .add("www.example.com", certA1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("*.example.com", certB1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin, certB1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("a.example.com", certB1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("a.example.com", certB1Sha256Pin), +        .add("first.com", certA1Sha256Pin, certB1Sha256Pin), +        .add("second.com", certC1Sha256Pin), +    List<Pin> expectedPins = Arrays.asList(, +        new Pin("first.com", certA1Sha256Pin),, +        new Pin("first.com", certB1Sha256Pin));, +    assertEquals(expectedPins, certificatePinner.findMatchingPins("first.com"));, +        .add("*.example.com", certA1Sha256Pin), +        .add("a.example.com", certB1Sha256Pin), +        .add("b.example.com", certC1Sha256Pin), +    List<Pin> expectedPins = Arrays.asList(, +        new Pin("*.example.com", certA1Sha256Pin),, +        new Pin("a.example.com", certB1Sha256Pin));, +    assertEquals(expectedPins, certificatePinner.findMatchingPins("a.example.com"));, +        .add("*.example.com", certA1Sha256Pin), +    assertEquals(Collections.emptyList(), certificatePinner.findMatchingPins("example.com"));, +    assertEquals(Collections.emptyList(), certificatePinner.findMatchingPins("a.b.example.com"));, +++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import okhttp3.CertificatePinner.Pin;, +  static String certA1Sha256Pin;, +  static String certB1Sha256Pin;, +  static String certC1Sha256Pin;, +      certA1Sha256Pin = "sha256/" + CertificatePinner.sha256(certA1.certificate).base64();, +      certB1Sha256Pin = "sha256/" + CertificatePinner.sha256(certB1.certificate).base64();, +      certC1Sha256Pin = "sha256/" + CertificatePinner.sha256(certC1.certificate).base64();, +    assertTrue(certA1Sha256Pin.equals(keypairACertificate2Pin));, +    assertTrue(certB1Sha256Pin.equals(keypairBCertificate2Pin));, +    assertFalse(certA1Sha256Pin.equals(certB1Sha256Pin));, +        .add("example.com", certA1Sha256Pin), +        .build();, +, +    certificatePinner.check("example.com", certA1.certificate);, +  }, +, +  @Test public void successfulCheckSha1Pin() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("example.com", "sha1/" + CertificatePinner.sha1(certA1.certificate).base64()), +        .add("example.com", certB1Sha256Pin), +        .add("example.com", certA1Sha256Pin), +        .add("example.com", certA1Sha256Pin, certB1Sha256Pin), +        .add("example.com", certA1Sha256Pin), +        .add("www.example.com", certA1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("*.example.com", certB1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin, certB1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("a.example.com", certB1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("a.example.com", certB1Sha256Pin), +        .add("first.com", certA1Sha256Pin, certB1Sha256Pin), +        .add("second.com", certC1Sha256Pin), +    List<Pin> expectedPins = Arrays.asList(, +        new Pin("first.com", certA1Sha256Pin),, +        new Pin("first.com", certB1Sha256Pin));, +    assertEquals(expectedPins, certificatePinner.findMatchingPins("first.com"));, +        .add("*.example.com", certA1Sha256Pin), +        .add("a.example.com", certB1Sha256Pin), +        .add("b.example.com", certC1Sha256Pin), +    List<Pin> expectedPins = Arrays.asList(, +        new Pin("*.example.com", certA1Sha256Pin),, +        new Pin("a.example.com", certB1Sha256Pin));]
[+++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.Util;, +          .body(Util.EMPTY_RESPONSE)]
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +import java.util.concurrent.atomic.AtomicReference;, +  /** Test a previously coalesced connection that's no longer healthy. */, +  @Test public void staleCoalescedConnection() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(200));, +    server.enqueue(new MockResponse().setResponseCode(200));, +, +    final AtomicReference<Connection> connection = new AtomicReference<>();, +    client = client.newBuilder(), +        .addNetworkInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            connection.set(chain.connection());, +            return chain.proceed(chain.request());, +          }, +        }), +        .build();, +    dns.set("san.com", Dns.SYSTEM.lookup(server.getHostName()).subList(0, 1));, +, +    assert200Http2Response(execute(url), server.getHostName());, +, +    // Simulate a stale connection in the pool., +    connection.get().socket().close();, +, +    HttpUrl sanUrl = url.newBuilder().host("san.com").build();, +    assert200Http2Response(execute(sanUrl), "san.com");, +, +    assertEquals(1, client.connectionPool().connectionCount());, +  }, +, +    response.body().close();, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +import java.util.concurrent.atomic.AtomicReference;, +  /** Test a previously coalesced connection that's no longer healthy. */, +  @Test public void staleCoalescedConnection() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(200));, +    server.enqueue(new MockResponse().setResponseCode(200));, +, +    final AtomicReference<Connection> connection = new AtomicReference<>();, +    client = client.newBuilder(), +        .addNetworkInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            connection.set(chain.connection());, +            return chain.proceed(chain.request());, +          }, +        }), +        .build();, +    dns.set("san.com", Dns.SYSTEM.lookup(server.getHostName()).subList(0, 1));, +, +    assert200Http2Response(execute(url), server.getHostName());, +, +    // Simulate a stale connection in the pool., +    connection.get().socket().close();, +, +    HttpUrl sanUrl = url.newBuilder().host("san.com").build();, +    assert200Http2Response(execute(sanUrl), "san.com");, +, +    assertEquals(1, client.connectionPool().connectionCount());, +  }, +, +    response.body().close();, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +import java.util.concurrent.atomic.AtomicReference;, +  /** Test a previously coalesced connection that's no longer healthy. */, +  @Test public void staleCoalescedConnection() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(200));, +    server.enqueue(new MockResponse().setResponseCode(200));, +, +    final AtomicReference<Connection> connection = new AtomicReference<>();, +    client = client.newBuilder(), +        .addNetworkInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            connection.set(chain.connection());, +            return chain.proceed(chain.request());, +          }, +        }), +        .build();, +    dns.set("san.com", Dns.SYSTEM.lookup(server.getHostName()).subList(0, 1));, +, +    assert200Http2Response(execute(url), server.getHostName());, +, +    // Simulate a stale connection in the pool., +    connection.get().socket().close();, +, +    HttpUrl sanUrl = url.newBuilder().host("san.com").build();, +    assert200Http2Response(execute(sanUrl), "san.com");, +, +    assertEquals(1, client.connectionPool().connectionCount());, +  }, +, +    response.body().close();, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +      if (connection != null) {, +        route = selectedRoute;, +        return connection;, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +import java.util.concurrent.atomic.AtomicReference;, +  /** Test a previously coalesced connection that's no longer healthy. */]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName("localhost");, +          // Workaround for bug on Android: closing the input/output streams should close an, +          // SSLSocket but does not. https://code.google.com/p/android/issues/detail?id=97564, +          socket.close();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName("localhost");, +          // Workaround for bug on Android: closing the input/output streams should close an, +          // SSLSocket but does not. https://code.google.com/p/android/issues/detail?id=97564, +          socket.close();, +++ b/okhttp-android-support/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.3.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-android-support</artifactId>, +  <name>OkHttp Android Platform Support</name>, +  <description>Classes to support the Android platform's use of OkHttp (not required for most developers).</description>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, + , +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <excludePackageNames>com.squareup.okhttp.internal.*</excludePackageNames>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +          </links>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    inetAddress = InetAddress.getByName("localhost");, +          // Workaround for bug on Android: closing the input/output streams should close an, +          // SSLSocket but does not. https://code.google.com/p/android/issues/detail?id=97564, +          socket.close();, +++ b/okhttp-android-support/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.3.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-android-support</artifactId>, +  <name>OkHttp Android Platform Support</name>, +  <description>Classes to support the Android platform's use of OkHttp (not required for most developers).</description>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, + , +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>]
[+++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.travis.yml, +script: mvn test javadoc:jar source:jar -B, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import java.io.InterruptedIOException;, +import static org.junit.Assert.assertTrue;, +  @Test public void threadIsInterruptedOnFirstRead() {, +    Thread.currentThread().interrupt();, +    try {, +      String result = publicSuffixDatabase.getEffectiveTldPlusOne("squareup.com");, +      assertEquals("squareup.com", result);, +    } finally {, +      assertTrue(Thread.interrupted());, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import java.io.InterruptedIOException;, +import static org.junit.Assert.assertTrue;, +  @Test public void threadIsInterruptedOnFirstRead() {, +    Thread.currentThread().interrupt();, +    try {, +      String result = publicSuffixDatabase.getEffectiveTldPlusOne("squareup.com");, +      assertEquals("squareup.com", result);, +    } finally {, +      assertTrue(Thread.interrupted());, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +import java.io.InterruptedIOException;, +      readTheListUninterruptibly();, +  /**, +   * Reads the public suffix list treating the operation as uninterruptible. We always want to read, +   * the list otherwise we'll be left in a bad state. If the thread was interrupted prior to this, +   * operation, it will be re-interrupted after the list is read., +   */, +  private void readTheListUninterruptibly() {, +    boolean interrupted = false;, +    try {, +      while (true) {, +        try {, +          readTheList();, +          return;, +        } catch (InterruptedIOException e) {, +          interrupted = true;, +        } catch (IOException e) {, +          Platform.get().log(Platform.WARN, "Failed to read public suffix list", e);, +          return;, +        }, +      }, +    } finally {, +      if (interrupted) {, +        Thread.currentThread().interrupt();, +      }, +    }, +  }, +  private void readTheList() throws IOException {, +    byte[] publicSuffixListBytes;, +    byte[] publicSuffixExceptionListBytes;, +, +    InputStream resource = PublicSuffixDatabase.class.getClassLoader().getResourceAsStream(, +    if (resource == null) return;, +    BufferedSource bufferedSource = Okio.buffer(new GzipSource(Okio.source(resource)));]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    try (Response response = client.newCall(request).execute()) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    try (Response response = client.newCall(request).execute()) {, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static org.junit.Assert.assertNotEquals;, +    assertTrue(cookie.secure());, +    assertTrue(cookie.httpOnly());, +          assertNotEquals(cookieA.hashCode(), cookieB.hashCode());, +          assertNotEquals(cookieA, cookieB);, +      assertNotEquals(null, cookieA);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    try (Response response = client.newCall(request).execute()) {, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static org.junit.Assert.assertNotEquals;, +    assertTrue(cookie.secure());, +    assertTrue(cookie.httpOnly());, +          assertNotEquals(cookieA.hashCode(), cookieB.hashCode());, +          assertNotEquals(cookieA, cookieB);, +      assertNotEquals(null, cookieA);, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +          try (DiskLruCache.Snapshot snapshot = delegate.next()) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket, transport);, +    private final Transport transport;, +    private SpdySocketHandler(Socket socket, Transport transport) {, +      this.transport = transport;, +      logger.info("Received request: " + request + " and responded: " + response, +          + " transport is " + transport);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket, transport);, +    private final Transport transport;, +    private SpdySocketHandler(Socket socket, Transport transport) {, +      this.transport = transport;, +      logger.info("Received request: " + request + " and responded: " + response, +          + " transport is " + transport);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, +      throw new UnsupportedOperationException();, +      // TODO, +      // TODO, +      // TODO, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket, transport);, +    private final Transport transport;, +    private SpdySocketHandler(Socket socket, Transport transport) {, +      this.transport = transport;, +      logger.info("Received request: " + request + " and responded: " + response, +          + " transport is " + transport);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, +      throw new UnsupportedOperationException();, +      // TODO, +      // TODO, +      // TODO, +++ b/samples/pom.xml, +    <module>static-server</module>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket, transport);, +    private final Transport transport;, +    private SpdySocketHandler(Socket socket, Transport transport) {, +      this.transport = transport;, +      logger.info("Received request: " + request + " and responded: " + response, +          + " transport is " + transport);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, +      throw new UnsupportedOperationException();, +      // TODO, +      // TODO, +      // TODO, +++ b/samples/pom.xml, +    <module>static-server</module>, +++ b/samples/static-server/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp.sample</groupId>, +    <artifactId>sample-parent</artifactId>, +    <version>1.2.2-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>static-server</artifactId>, +  <name>Sample: Static Server</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-shade-plugin</artifactId>, +        <version>2.1</version>, +        <configuration>, +          <shadedArtifactAttached>true</shadedArtifactAttached>, +          <shadedClassifierName>shaded</shadedClassifierName>, +          <transformers>, +            <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">, +              <manifestEntries>, +                <Main-Class>com.squareup.okhttp.sample.SampleServer</Main-Class>, +              </manifestEntries>, +            </transformer>, +          </transformers>, +          <filters>, +            <filter>, +              <artifact>*:*</artifact>, +              <excludes>, +                <exclude>META-INF/*.SF</exclude>, +                <exclude>META-INF/*.DSA</exclude>, +                <exclude>META-INF/*.RSA</exclude>, +              </excludes>, +            </filter>, +          </filters>, +        </configuration>, +        <executions>, +          <execution>]
[+++ b/okhttp/pom.xml, +          <links>, +            <link>http://square.github.io/okio/</link>, +          </links>, +++ b/okhttp/pom.xml, +          <links>, +            <link>http://square.github.io/okio/</link>, +          </links>, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +++ b/okhttp/pom.xml, +          <links>, +            <link>http://square.github.io/okio/</link>, +          </links>, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +  public OkHttpClient setConnectTimeout(long timeout, TimeUnit unit) {, +    return this;, +  public OkHttpClient setReadTimeout(long timeout, TimeUnit unit) {, +    return this;, +  public OkHttpClient setWriteTimeout(long timeout, TimeUnit unit) {, +    return this;, +  public OkHttpClient cancel(Object tag) {, +    return this;]
[+++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    try (Response response = call.execute()) {, +  }, +    try (Response response = call.execute()) {, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    try (Response response = call.execute()) {, +  }, +    try (Response response = call.execute()) {, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +import static org.junit.Assert.assertSame;, + public class UtilTest {, +  @Test public void testAssertionError() {, +    NullPointerException nullPointerException = new NullPointerException();, +    AssertionError ae = Util.assertionError("npe", nullPointerException);, +    assertSame(nullPointerException, ae.getCause());, +    assertEquals("npe", ae.getMessage());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    try (Response response = call.execute()) {, +  }, +    try (Response response = call.execute()) {, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +import static org.junit.Assert.assertSame;, + public class UtilTest {, +  @Test public void testAssertionError() {, +    NullPointerException nullPointerException = new NullPointerException();, +    AssertionError ae = Util.assertionError("npe", nullPointerException);, +    assertSame(nullPointerException, ae.getCause());, +    assertEquals("npe", ae.getMessage());, +  }, +, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    try (Response response = call.execute()) {, +  }, +    try (Response response = call.execute()) {, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +import static org.junit.Assert.assertSame;, + public class UtilTest {, +  @Test public void testAssertionError() {, +    NullPointerException nullPointerException = new NullPointerException();, +    AssertionError ae = Util.assertionError("npe", nullPointerException);, +    assertSame(nullPointerException, ae.getCause());, +    assertEquals("npe", ae.getMessage());, +  }, +, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/JdkWithJettyBootPlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.platform;, +, +import org.junit.Test;, +, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assume.assumeTrue;, +, +public class JdkWithJettyBootPlatformTest {, +  @Test, +  public void testBuildsWithJettyBoot() {, +    assumeTrue(getPlatform().equals("jdk-with-jetty-boot"));, +, +    assertNotNull(JdkWithJettyBootPlatform.buildIfSupported());, +  }, +}, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    try (Response response = call.execute()) {, +  }, +    try (Response response = call.execute()) {, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +import static org.junit.Assert.assertSame;, + public class UtilTest {, +  @Test public void testAssertionError() {, +    NullPointerException nullPointerException = new NullPointerException();, +    AssertionError ae = Util.assertionError("npe", nullPointerException);, +    assertSame(nullPointerException, ae.getCause());, +    assertEquals("npe", ae.getMessage());, +  }, +, +++ /dev/null]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +        ? Util.EMPTY_REQUEST, +        ? Util.EMPTY_REQUEST, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +        ? Util.EMPTY_REQUEST, +        ? Util.EMPTY_REQUEST, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +import okhttp3.internal.Util;, +        body = Util.EMPTY_REQUEST;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +        ? Util.EMPTY_REQUEST, +        ? Util.EMPTY_REQUEST, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +import okhttp3.internal.Util;, +        body = Util.EMPTY_REQUEST;, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +import okhttp3.Interceptor;, +import static org.junit.Assert.assertNotNull;, +  private OkHttpClient client = new OkHttpClient.Builder(), +      .addInterceptor(new Interceptor() {, +        @Override public Response intercept(Chain chain) throws IOException {, +          Response response = chain.proceed(chain.request());, +          assertNotNull(response.body()); // Ensure application interceptors never see a null body., +          return response;, +        }, +      }), +      .build();, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +        ? Util.EMPTY_REQUEST, +        ? Util.EMPTY_REQUEST, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +import okhttp3.internal.Util;, +        body = Util.EMPTY_REQUEST;, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +import okhttp3.Interceptor;, +import static org.junit.Assert.assertNotNull;, +  private OkHttpClient client = new OkHttpClient.Builder(), +      .addInterceptor(new Interceptor() {, +        @Override public Response intercept(Chain chain) throws IOException {, +          Response response = chain.proceed(chain.request());, +          assertNotNull(response.body()); // Ensure application interceptors never see a null body., +          return response;, +        }, +      }), +      .build();, +++ b/okhttp/src/main/java/okhttp3/Request.java, +import okhttp3.internal.Util;, +      return delete(Util.EMPTY_REQUEST);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +        ? Util.EMPTY_REQUEST, +        ? Util.EMPTY_REQUEST, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +import okhttp3.internal.Util;, +        body = Util.EMPTY_REQUEST;, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +import okhttp3.Interceptor;, +import static org.junit.Assert.assertNotNull;, +  private OkHttpClient client = new OkHttpClient.Builder(), +      .addInterceptor(new Interceptor() {, +        @Override public Response intercept(Chain chain) throws IOException {, +          Response response = chain.proceed(chain.request());, +          assertNotNull(response.body()); // Ensure application interceptors never see a null body., +          return response;, +        }, +      }), +      .build();, +++ b/okhttp/src/main/java/okhttp3/Request.java, +import okhttp3.internal.Util;, +      return delete(Util.EMPTY_REQUEST);, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +  public static final ResponseBody EMPTY_RESPONSE = ResponseBody.create(null, EMPTY_BYTE_ARRAY);, +  public static final RequestBody EMPTY_REQUEST = RequestBody.create(null, EMPTY_BYTE_ARRAY);, +, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +        ? Util.EMPTY_REQUEST, +        ? Util.EMPTY_REQUEST, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +import okhttp3.internal.Util;, +        body = Util.EMPTY_REQUEST;, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +import okhttp3.Interceptor;, +import static org.junit.Assert.assertNotNull;, +  private OkHttpClient client = new OkHttpClient.Builder(), +      .addInterceptor(new Interceptor() {, +        @Override public Response intercept(Chain chain) throws IOException {, +          Response response = chain.proceed(chain.request());, +          assertNotNull(response.body()); // Ensure application interceptors never see a null body., +          return response;, +        }, +      }), +      .build();, +++ b/okhttp/src/main/java/okhttp3/Request.java, +import okhttp3.internal.Util;, +      return delete(Util.EMPTY_REQUEST);, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +  public static final ResponseBody EMPTY_RESPONSE = ResponseBody.create(null, EMPTY_BYTE_ARRAY);]
[+++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    private final SpdyReader spdyReader;, +    private final SpdyWriter spdyWriter;, +    private final ExecutorService readExecutor;, +    private final ExecutorService writeExecutor;, +    private final ExecutorService callbackExecutor;, +        handler = builder.handler;, +        callbackExecutor = new ThreadPoolExecutor(1, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,, +    /**, +     * Returns true if this peer initiated the connection., +     */, +    public synchronized boolean isClient() {, +        return nextStreamId % 2 == 1;, +    }, +, +            SpdyStream previous;, +            if (isClient() != (streamId % 2 == 1)) {, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    private final SpdyReader spdyReader;, +    private final SpdyWriter spdyWriter;, +    private final ExecutorService readExecutor;, +    private final ExecutorService writeExecutor;, +    private final ExecutorService callbackExecutor;, +        handler = builder.handler;, +        callbackExecutor = new ThreadPoolExecutor(1, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,, +    /**, +     * Returns true if this peer initiated the connection., +     */, +    public synchronized boolean isClient() {, +        return nextStreamId % 2 == 1;, +    }, +, +            SpdyStream previous;, +            if (isClient() != (streamId % 2 == 1)) {, +++ b/src/main/java/libcore/net/spdy/SpdyServer.java, +        OutputStream out = stream.reply(responseHeaders);, +        OutputStream out = stream.reply(Arrays.asList(, +        ));, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    private final SpdyReader spdyReader;, +    private final SpdyWriter spdyWriter;, +    private final ExecutorService readExecutor;, +    private final ExecutorService writeExecutor;, +    private final ExecutorService callbackExecutor;, +        handler = builder.handler;, +        callbackExecutor = new ThreadPoolExecutor(1, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,, +    /**, +     * Returns true if this peer initiated the connection., +     */, +    public synchronized boolean isClient() {, +        return nextStreamId % 2 == 1;, +    }, +, +            SpdyStream previous;, +            if (isClient() != (streamId % 2 == 1)) {, +++ b/src/main/java/libcore/net/spdy/SpdyServer.java, +        OutputStream out = stream.reply(responseHeaders);, +        OutputStream out = stream.reply(Arrays.asList(, +        ));, +++ b/src/main/java/libcore/net/spdy/SpdyStream.java, +    /**, +     * True if either side has shut down the input stream. We will receive no, +     * more bytes beyond those already in the buffer. Guarded by this., +     */, +    private boolean inFinished;, +, +    /**, +     * True if either side has shut down the output stream. We will write no]
[+++ b/pom.xml, +    <version>20130706</version>, +++ b/pom.xml, +    <version>20130706</version>, +++ b/src/main/java/com/google/mockwebserver/MockWebServer.java, +        long contentLength = -1;, +                contentLength = Long.parseLong(header.substring(15).trim());, +    private void transfer(long length, InputStream in, OutputStream out) throws IOException {, +            int count = in.read(buffer, 0, (int) Math.min(buffer.length, length));]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +  private boolean started;, +    if (started) return;, +    started = true;, +      server.play();, +    if (!started) before();, +    return server.getPort();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +  private boolean started;, +    if (started) return;, +    started = true;, +      server.play();, +    if (!started) before();, +    return server.getPort();, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRuleTest.java, +  @Test public void whenRuleCreatedPortIsAvailable() throws IOException {, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +  private boolean started;, +    if (started) return;, +    started = true;, +      server.play();, +    if (!started) before();, +    return server.getPort();, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRuleTest.java, +  @Test public void whenRuleCreatedPortIsAvailable() throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      call.execute(callback);, +    call.execute(callback);, +      call.execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(new Request.Builder().url(server.getUrl("/a")).build()).execute(callback);, +    client.newCall(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    client.newCall(new Request.Builder().url(server.getUrl("/c")).build()).execute(callback);, +    client.newCall(request).execute(new Response.Callback() {, +        client.newCall(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request1).execute(callback);, +    client.newCall(request2).execute(callback);, +    client.newCall(request1).execute(callback);, +    client.newCall(request2).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(requestA).execute(callback);, +    client.newCall(requestB).execute(callback);, +    client.newCall(requestA).execute(callback);, +    call.execute(new Response.Callback() {, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +  private boolean started;, +    if (started) return;, +    started = true;, +      server.play();, +    if (!started) before();, +    return server.getPort();, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRuleTest.java, +  @Test public void whenRuleCreatedPortIsAvailable() throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      call.execute(callback);, +    call.execute(callback);, +      call.execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(new Request.Builder().url(server.getUrl("/a")).build()).execute(callback);, +    client.newCall(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    client.newCall(new Request.Builder().url(server.getUrl("/c")).build()).execute(callback);, +    client.newCall(request).execute(new Response.Callback() {, +        client.newCall(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request1).execute(callback);, +    client.newCall(request2).execute(callback);, +    client.newCall(request1).execute(callback);, +    client.newCall(request2).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(requestA).execute(callback);, +    client.newCall(requestB).execute(callback);, +    client.newCall(requestA).execute(callback);, +    call.execute(new Response.Callback() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/DispatcherTest.java, +    client.newCall(newRequest("http://a/1")).execute(callback);, +    client.newCall(newRequest("http://a/1")).execute(callback);, +    client.newCall(newRequest("http://a/2")).execute(callback);, +    client.newCall(newRequest("http://b/1")).execute(callback);, +    client.newCall(newRequest("http://b/2")).execute(callback);, +    client.newCall(newRequest("http://a/1")).execute(callback);, +    client.newCall(newRequest("http://a/2")).execute(callback);]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status;, +    setResponseCode(200);, +    String reason = "Mock Response";, +    if (code >= 100 && code < 200) {, +      reason = "Informational";, +    } else if (code >= 200 && code < 300) {, +      reason = "OK";, +    } else if (code >= 300 && code < 400) {, +      reason = "Redirection";, +    } else if (code >= 400 && code < 500) {, +      reason = "Client Error";, +    } else if (code >= 500 && code < 600) {, +      reason = "Server Error";, +    }, +    return setStatus("HTTP/1.1 " + code + " " + reason);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status;, +    setResponseCode(200);, +    String reason = "Mock Response";, +    if (code >= 100 && code < 200) {, +      reason = "Informational";, +    } else if (code >= 200 && code < 300) {, +      reason = "OK";, +    } else if (code >= 300 && code < 400) {, +      reason = "Redirection";, +    } else if (code >= 400 && code < 500) {, +      reason = "Client Error";, +    } else if (code >= 500 && code < 600) {, +      reason = "Server Error";, +    }, +    return setStatus("HTTP/1.1 " + code + " " + reason);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void setResponseMockReason() {, +    String[] reasons = {, +        "Mock Response",, +        "Informational",, +        "OK",, +        "Redirection",, +        "Client Error",, +        "Server Error",, +        "Mock Response", +    };, +    for (int i = 0; i < 600; i++) {, +      MockResponse response = new MockResponse().setResponseCode(i);, +      String expectedReason = reasons[i / 100];, +      assertEquals("HTTP/1.1 " + i + " " + expectedReason, response.getStatus());, +      assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    }, +  }, +, +  @Test public void setStatusControlsWholeStatusLine() {, +    MockResponse response = new MockResponse().setStatus("HTTP/1.1 202 That'll do pig");, +    assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    assertEquals("HTTP/1.1 202 That'll do pig", response.getStatus());, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status;, +    setResponseCode(200);, +    String reason = "Mock Response";, +    if (code >= 100 && code < 200) {, +      reason = "Informational";, +    } else if (code >= 200 && code < 300) {, +      reason = "OK";, +    } else if (code >= 300 && code < 400) {, +      reason = "Redirection";, +    } else if (code >= 400 && code < 500) {, +      reason = "Client Error";, +    } else if (code >= 500 && code < 600) {, +      reason = "Server Error";, +    }, +    return setStatus("HTTP/1.1 " + code + " " + reason);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void setResponseMockReason() {, +    String[] reasons = {, +        "Mock Response",, +        "Informational",, +        "OK",, +        "Redirection",, +        "Client Error",, +        "Server Error",, +        "Mock Response", +    };, +    for (int i = 0; i < 600; i++) {, +      MockResponse response = new MockResponse().setResponseCode(i);, +      String expectedReason = reasons[i / 100];, +      assertEquals("HTTP/1.1 " + i + " " + expectedReason, response.getStatus());, +      assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    }, +  }, +, +  @Test public void setStatusControlsWholeStatusLine() {, +    MockResponse response = new MockResponse().setStatus("HTTP/1.1 202 That'll do pig");, +    assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    assertEquals("HTTP/1.1 202 That'll do pig", response.getStatus());, +  }, +, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +    server.enqueue(new MockResponse().setResponseCode(200));]
[+++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_112</id>, +      <activation>, +        <jdk>1.8.0_112</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ b/pom.xml, +    <version>0.8-SNAPSHOT</version>]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    client = new OkHttpClient.Builder(), +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    client = new OkHttpClient.Builder(), +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/okhttp-sse/src/main/java/okhttp3/sse/EventSources.java, +    return (request, listener) -> {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {]
[+++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/ExchangeCodec.java, +  Sink createRequestBody(Request request, long contentLength);, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/ExchangeCodec.java, +  Sink createRequestBody(Request request, long contentLength);, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1ExchangeCodec.java, +  @Override public Sink createRequestBody(Request request, long contentLength) {, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/ExchangeCodec.java, +  Sink createRequestBody(Request request, long contentLength);, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1ExchangeCodec.java, +  @Override public Sink createRequestBody(Request request, long contentLength) {, +++ b/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.java, +  @SuppressWarnings("deprecation") private Provider getProvider() {, +    // defaults to true, but allow for older versions of conscrypt if still compatible, +    // new form with boolean is only present in >= 2.0.0, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/ExchangeCodec.java, +  Sink createRequestBody(Request request, long contentLength);, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1ExchangeCodec.java, +  @Override public Sink createRequestBody(Request request, long contentLength) {, +++ b/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.java, +  @SuppressWarnings("deprecation") private Provider getProvider() {, +    // defaults to true, but allow for older versions of conscrypt if still compatible, +    // new form with boolean is only present in >= 2.0.0, +++ b/pom.xml, +    <conscrypt.version>2.0.0</conscrypt.version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2Codec;, +    Response response = Http2Codec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2Codec;, +    Response response = Http2Codec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void proxySelectorHttpWithConnectionReuse() throws IOException {, +    server.enqueue(new MockResponse(), +        .setBody("response 1"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(407));, +, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .proxySelector(new ProxySelector() {, +          @Override public List<Proxy> select(URI uri) {, +            return Collections.singletonList(server.toProxyAddress());, +          }, +, +          @Override public void connectFailed(, +              URI uri, SocketAddress socketAddress, IOException e) {, +          }, +        }).build());, +    URL url = new URL("http://android.com/foo");, +    assertContent("response 1", urlFactory.open(url));, +    assertEquals(407, urlFactory.open(url).getResponseCode());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2Codec;, +    Response response = Http2Codec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void proxySelectorHttpWithConnectionReuse() throws IOException {, +    server.enqueue(new MockResponse(), +        .setBody("response 1"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(407));, +, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .proxySelector(new ProxySelector() {, +          @Override public List<Proxy> select(URI uri) {, +            return Collections.singletonList(server.toProxyAddress());, +          }, +, +          @Override public void connectFailed(, +              URI uri, SocketAddress socketAddress, IOException e) {, +          }, +        }).build());, +    URL url = new URL("http://android.com/foo");, +    assertContent("response 1", urlFactory.open(url));, +    assertEquals(407, urlFactory.open(url).getResponseCode());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +import okhttp3.internal.Transmitter;, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2Codec;, +    Response response = Http2Codec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void proxySelectorHttpWithConnectionReuse() throws IOException {, +    server.enqueue(new MockResponse(), +        .setBody("response 1"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(407));, +, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .proxySelector(new ProxySelector() {, +          @Override public List<Proxy> select(URI uri) {, +            return Collections.singletonList(server.toProxyAddress());, +          }, +, +          @Override public void connectFailed(, +              URI uri, SocketAddress socketAddress, IOException e) {, +          }, +        }).build());, +    URL url = new URL("http://android.com/foo");, +    assertContent("response 1", urlFactory.open(url));, +    assertEquals(407, urlFactory.open(url).getResponseCode());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +import okhttp3.internal.Transmitter;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.Transmitter;, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2Codec;, +    Response response = Http2Codec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void proxySelectorHttpWithConnectionReuse() throws IOException {, +    server.enqueue(new MockResponse()]
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +      return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +      return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, +      'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, +      'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, +      'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, +      'okhttp3.CertificatePinner$Builder#build()',, +      'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +      return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, +      'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, +      'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, +      'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, +      'okhttp3.CertificatePinner$Builder#build()',, +      'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, +++ /dev/null, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +      return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, +      'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, +      'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, +      'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, +      'okhttp3.CertificatePinner$Builder#build()',, +      'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import okhttp3.internal.tls.CertificateChainCleaner, +import okio.ByteString, +import java.security.cert.Certificate, +import java.security.cert.X509Certificate, +import java.util.Objects, +import javax.net.ssl.SSLPeerUnverifiedException, +, +/**, + * Constrains which certificates are trusted. Pinning certificates defends against attacks on, + * certificate authorities. It also prevents connections through man-in-the-middle certificate, + * authorities either known or unknown to the application's user., + *, + * This class currently pins a certificate's Subject Public Key Info as described on [Adam Langley's, + * Weblog](http://goo.gl/AIx3e5). Pins are either base64 SHA-256 hashes as in [HTTP Public Key, + * Pinning (HPKP)](http://tools.ietf.org/html/rfc7469) or SHA-1 base64 hashes as in Chromium's, + * [static certificates](http://goo.gl/XDh6je)., + *, + * Setting up Certificate Pinning, + * ------------------------------, + *, + * The easiest way to pin a host is turn on pinning with a broken configuration and read the, + * expected configuration when the connection fails. Be sure to do this on a trusted network, and, + * without man-in-the-middle tools like [Charles](http://charlesproxy.com) or, + * [Fiddler](http://fiddlertool.com)., + *, + * For example, to pin `https://publicobject.com`, start with a broken configuration:, + *, + * ```, + * String hostname = "publicobject.com";, + * CertificatePinner certificatePinner = new CertificatePinner.Builder(), + *     .add(hostname, "sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="), + *     .build();, + * OkHttpClient client = OkHttpClient.Builder(), + *     .certificatePinner(certificatePinner), + *     .build();, + *, + * Request request = new Request.Builder(), + *     .url("https://" + hostname), + *     .build();, + * client.newCall(request).execute();, + * ```, + *, + * As expected, this fails with a certificate pinning exception:, + *, + * ```, + * javax.net.ssl.SSLPeerUnverifiedException: Certificate pinning failure!, + * Peer certificate chain:, + *     sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=: CN=publicobject.com, OU=PositiveSSL, + *     sha256/klO23nT2ehFDXCfx3eHTDRESMz3asj1muO+4aIdjiuY=: CN=COMODO RSA Secure Server CA, + *     sha256/grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=: CN=COMODO RSA Certification Authority, + *     sha256/lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=: CN=AddTrust External CA Root, + * Pinned certificates for publicobject.com:, + *     sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=, + *   at okhttp3.CertificatePinner.check(CertificatePinner.java)]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1].]
[+++ b/CHANGELOG.md, +## Version 3.0.0-RC1, +, +_2016-01-02_, +, +OkHttp 3 is a major release focused on API simplicity and consistency. The API, +changes are numerous but most are cosmetic. Applications should be able to, +upgrade from the 2.x API to the 3.x API mechanically and without risk., +, +Because the release includes breaking API changes, we're changing the project's, +package name from `com.squareup.okhttp` to `okhttp3`. This should make it, +possible for large applications to migrate incrementally. The Maven group ID, +is now `com.squareup.okhttp3`. For an explanation of this strategy, see Jake, +Wharton's post, [Java Interoperability Policy for Major Version, +Updates][major_versions]., +, +This release obsoletes OkHttp 2.x, and all code that uses OkHttp's, +`com.squareup.okhttp` package should upgrade to the `okhttp3` package. Libraries, +that depend on OkHttp should upgrade quickly to prevent applications from being, +stuck on the old version., +, + *  **There is no longer a global singleton connection pool.** In OkHttp 2.x,, +    all `OkHttpClient` instances shared a common connection pool by default., +    In OkHttp 3.x, each new `OkHttpClient` gets its own private connection pool., +    Applications should avoid creating many connection pools as doing so, +    prevents connection reuse. Each connection pool holds its own set of, +    connections alive so applications that have many pools also risk exhausting, +    memory!, +, +    The best practice in OkHttp 3 is to create a single OkHttpClient instance, +    and share it throughout the application. Requests that needs a customized, +    client should call `OkHttpClient.newBuilder()` on that shared instance., +    This allows customization without the drawbacks of separate connection, +    pools., +, + *  **OkHttpClient is now stateless.** In the 2.x API `OkHttpClient` had getters, +    and setters. Internally each request was forced to make its own complete, +    snapshot of the `OkHttpClient` instance to defend against racy configuration, +    changes. In 3.x, `OkHttpClient` is now stateless and has a builder. Note, +    that this class is not strictly immutable as it has stateful members like, +    the connection pool and cache., +, + *  **Get and Set prefixes are now avoided.** With ubiquitous builders, +    throughout OkHttp these accessor prefixes aren't necessary. Previously, +    OkHttp used _get_ and _set_ prefixes sporadically which make the API, +    inconsistent and awkward to explore., +, + *  **OkHttpClient now implements the new `Call.Factory` interface.** This, +    interface will make your code easier to test. When you test code that makes, +    HTTP requests, you can use this interface to replace the real `OkHttpClient`, +    with your own mocks or fakes., +, +    The interface will also let you use OkHttp's API with another HTTP client's, +    implementation. This is useful in sandboxed environments like Google App, +    Engine., +, + *  **OkHttp now does cookies.** We've replaced `java.net.CookieHandler` with, +    a new interface, `CookieJar` and added our own `Cookie` model class. This, +    new cookie follows the latest RFC and supports the same cookie attributes, +    as modern web browsers., +, + *  **Form and Multipart bodies are now modeled.** We've replaced the opaque, +    `FormEncodingBuilder` with the more powerful `FormBody` and, +    `FormBody.Builder` combo. Similarly we've upgraded `MultipartBuilder` into, +    `MultipartBody`, `MultipartBody.Part`, and `MultipartBody.Builder`., +, + *  **The Apache HTTP client and HttpURLConnection APIs are deprecated.** They, +    continue to work as they always have, but we're moving everything to the new, +    OkHttp 3 API. The `okhttp-apache` and `okhttp-urlconnection` modules should, +    be only be used to accelerate a transition to OkHttp's request/response API., +    These deprecated modules will be dropped in an upcoming OkHttp 3.x release., +, + *  **Canceling batches of calls is now the application's responsibility.**, +    The API to cancel calls by tag has been removed and replaced with a more, +    general mechanism. The dispatcher now exposes all in-flight calls via its, +    `runningCalls()` and `queuedCalls()` methods. You can write code to cancel, +    calls by tag, by host, or whatever other criteria is appropriate., +, + *  **OkHttp no longer uses the global `java.net.Authenticator` by default.**, +    We've changed our `Authenticator` interface to authenticate web and proxy, +    authentication failures through a single method. An adapter for the old, +    authenticator is available in the `okhttp-urlconnection` module., +, + *  Fix: Don't throw `IOException` on `ResponseBody.contentLength()` or `close()`., + *  Fix: Never throw converting an `HttpUrl` to a `java.net.URI`. This changes, +    the `uri()` method to handle malformed percent-escapes and characters, +    forbidden by `URI`., + *  Fix: When a connect times out, attempt an alternate route. Previously route, +    selection was less efficient when differentiating failures., + *  New: `Response.peekBody()` lets you access the response body without, +    consuming it. This may be handy for interceptors!, + *  New: `HttpUrl.newBuilder()` resolves a link to a builder., + *  New: Add the TLS version to the `Handshake`., + *  New: Drop `Request.uri()` and `Request#urlString()`. Just use, +    `Request.url().uri()` and `Request.url().toString()`., + *  New: Add URL to HTTP response logging., + *  New: Make `HttpUrl` the blessed URL method of `Request`., +, +, + [major_versions]: http://jakewharton.com/java-interoperability-policy-for-major-version-updates/]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.security.cert.Certificate;, +import java.util.ArrayList;, +import java.util.List;, +import javax.net.ssl.SSLPeerUnverifiedException;, +import okhttp3.internal.HeldCertificate;, +import okhttp3.internal.tls.CertificateChainCleaner;, +import okhttp3.internal.tls.RealTrustRootIndex;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public final class CertificateChainCleanerTest {, +  @Test public void normalizeSingleSelfSignedCertificate() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    CertificateChainCleaner council = new CertificateChainCleaner(, +        new RealTrustRootIndex(root.certificate));, +    assertEquals(list(root), council.clean(list(root)));, +  }, +, +  @Test public void normalizeUnknownSelfSignedCertificate() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    CertificateChainCleaner council = new CertificateChainCleaner(new RealTrustRootIndex());, +, +    try {, +      council.clean(list(root));, +      fail();, +    } catch (SSLPeerUnverifiedException expected) {, +    }, +  }, +, +  @Test public void orderedChainOfCertificatesWithRoot() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    HeldCertificate certA = new HeldCertificate.Builder(), +        .serialNumber("2"), +        .issuedBy(root), +        .build();, +    HeldCertificate certB = new HeldCertificate.Builder(), +        .serialNumber("3"), +        .issuedBy(certA), +        .build();, +, +    CertificateChainCleaner council = new CertificateChainCleaner(, +        new RealTrustRootIndex(root.certificate));, +    assertEquals(list(certB, certA, root), council.clean(list(certB, certA, root)));, +  }, +, +  @Test public void orderedChainOfCertificatesWithoutRoot() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    HeldCertificate certA = new HeldCertificate.Builder(), +        .serialNumber("2"), +        .issuedBy(root), +        .build();, +    HeldCertificate certB = new HeldCertificate.Builder(), +        .serialNumber("3"), +        .issuedBy(certA), +        .build();, +, +    CertificateChainCleaner council = new CertificateChainCleaner(, +        new RealTrustRootIndex(root.certificate));, +    assertEquals(list(certB, certA, root), council.clean(list(certB, certA))); // Root is added!, +  }, +, +  @Test public void unorderedChainOfCertificatesWithRoot() throws Exception {, +    HeldCertificate root = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    HeldCertificate certA = new HeldCertificate.Builder(), +        .serialNumber("2"), +        .issuedBy(root), +        .build();, +    HeldCertificate certB = new HeldCertificate.Builder()]
[+++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/samples/crawler/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>]
[+++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +   * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, +   * QueueDispatcher} but other dispatchers can be configured., +   */, +  public Dispatcher getDispatcher() {, +    return dispatcher;, +  }, +, +  /**, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +   * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, +   * QueueDispatcher} but other dispatchers can be configured., +   */, +  public Dispatcher getDispatcher() {, +    return dispatcher;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +   * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, +   * QueueDispatcher} but other dispatchers can be configured., +   */, +  public Dispatcher getDispatcher() {, +    return dispatcher;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +   * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, +   * QueueDispatcher} but other dispatchers can be configured., +   */, +  public Dispatcher getDispatcher() {, +    return dispatcher;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +   * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, +   * QueueDispatcher} but other dispatchers can be configured., +   */, +  public Dispatcher getDispatcher() {, +    return dispatcher;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>]
[+++ b/checkstyle.xml, +        <!--<module name="ConstantName"/>-->, +++ b/checkstyle.xml, +        <!--<module name="ConstantName"/>-->, +++ b/src/main/java/com/squareup/okhttp/Address.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.internal.util.Objects;, +import java.net.Proxy;, +import java.net.UnknownHostException;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSocketFactory;, +, +/**, + * A specification for a connection to an origin server. For simple connections,, + * this is the server's hostname and port. If an explicit proxy is requested (or, + * {@link Proxy#NO_PROXY no proxy} is explicitly requested), this also includes, + * that proxy information. For secure connections the address also includes the, + * SSL socket factory and hostname verifier., + *, + * <p>HTTP requests that share the same {@code Address} may also share the same, + * {@link Connection}., + */, +public final class Address {, +    final Proxy proxy;, +    final String uriHost;, +    final int uriPort;, +    final SSLSocketFactory sslSocketFactory;, +    final HostnameVerifier hostnameVerifier;, +, +    public Address(String uriHost, int uriPort, SSLSocketFactory sslSocketFactory,, +            HostnameVerifier hostnameVerifier, Proxy proxy) throws UnknownHostException {, +        if (uriHost == null) throw new NullPointerException("uriHost == null");, +        if (uriPort <= 0) throw new IllegalArgumentException("uriPort <= 0: " + uriPort);, +        this.proxy = proxy;, +        this.uriHost = uriHost;, +        this.uriPort = uriPort;, +        this.sslSocketFactory = sslSocketFactory;, +        this.hostnameVerifier = hostnameVerifier;, +    }, +, +    /**, +     * Returns the hostname of the origin server., +     */, +    public String getUriHost() {, +        return uriHost;, +    }, +, +    /**, +     * Returns the port of the origin server; typically 80 or 443. Unlike, +     * may {@code getPort()} accessors, this method never returns -1., +     */, +    public int getUriPort() {, +        return uriPort;, +    }, +, +    /**, +     * Returns the SSL socket factory, or null if this is not an HTTPS, +     * address., +     */, +    public SSLSocketFactory getSslSocketFactory() {, +        return sslSocketFactory;, +    }, +, +    /**, +     * Returns the hostname verifier, or null if this is not an HTTPS, +     * address., +     */, +    public HostnameVerifier getHostnameVerifier() {, +        return hostnameVerifier;, +    }, +, +    /**, +     * Returns this address's explicitly-specified HTTP proxy, or null to, +     * delegate to the HTTP client's proxy selector., +     */, +    public Proxy getProxy() {, +        return proxy;, +    }, +, +    @Override public boolean equals(Object other) {, +        if (other instanceof Address) {, +            Address that = (Address) other;, +            return Objects.equal(this.proxy, that.proxy), +                    && this.uriHost.equals(that.uriHost)]
[+++ b/pom.xml, +    <okio.version>1.6.0</okio.version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  @Test public void previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding() throws Exception {, +    server.enqueue(new MockResponse(), +            .setBody("ABCABCABC"), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Last-Modified: " + formatDate(-2, TimeUnit.HOURS)), +            .addHeader("Expires: " + formatDate(-1, TimeUnit.HOURS)));, +    server.enqueue(new MockResponse(), +            .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Content-Encoding: gzip"));, +    server.enqueue(new MockResponse(), +            .setBody("DEFDEFDEF"));, +, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("DEFDEFDEF", get(server.url("/")).body().string());, +  }, +, +  @Test public void changedGzippedContentIsNotModifiedAndSpecifiesNewEncoding() throws Exception {, +    server.enqueue(new MockResponse(), +            .setBody(gzip("ABCABCABC")), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Last-Modified: " + formatDate(-2, TimeUnit.HOURS)), +            .addHeader("Expires: " + formatDate(-1, TimeUnit.HOURS)), +            .addHeader("Content-Encoding: gzip"));, +    server.enqueue(new MockResponse(), +            .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Content-Encoding: identity"));, +    server.enqueue(new MockResponse(), +            .setBody("DEFDEFDEF"));, +, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("DEFDEFDEF", get(server.url("/")).body().string());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  @Test public void previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding() throws Exception {, +    server.enqueue(new MockResponse(), +            .setBody("ABCABCABC"), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Last-Modified: " + formatDate(-2, TimeUnit.HOURS)), +            .addHeader("Expires: " + formatDate(-1, TimeUnit.HOURS)));, +    server.enqueue(new MockResponse(), +            .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Content-Encoding: gzip"));, +    server.enqueue(new MockResponse(), +            .setBody("DEFDEFDEF"));, +, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("DEFDEFDEF", get(server.url("/")).body().string());, +  }, +, +  @Test public void changedGzippedContentIsNotModifiedAndSpecifiesNewEncoding() throws Exception {, +    server.enqueue(new MockResponse(), +            .setBody(gzip("ABCABCABC")), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Last-Modified: " + formatDate(-2, TimeUnit.HOURS)), +            .addHeader("Expires: " + formatDate(-1, TimeUnit.HOURS)), +            .addHeader("Content-Encoding: gzip"));, +    server.enqueue(new MockResponse(), +            .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Content-Encoding: identity"));, +    server.enqueue(new MockResponse(), +            .setBody("DEFDEFDEF"));, +, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("DEFDEFDEF", get(server.url("/")).body().string());, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +      if (isContentSpecificHeader(fieldName) || !isEndToEnd(fieldName), +              || networkHeaders.get(fieldName) == null) {, +      if (!isContentSpecificHeader(fieldName) && isEndToEnd(fieldName)) {, +, +  /**, +   * Returns true if {@code fieldName} is content specific and therefore should always be used, +   * from cached headers., +   */, +  static boolean isContentSpecificHeader(String fieldName) {, +    return "Content-Length".equalsIgnoreCase(fieldName), +        || "Content-Encoding".equalsIgnoreCase(fieldName), +        || "Content-Type".equalsIgnoreCase(fieldName);, +  }]
[+++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="square/okhttp", +JDK="oraclejdk8", +BRANCH="master", +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, +  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, +  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, +  echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, +  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.", +else, +  echo "Deploying snapshot...", +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +fi, +++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="square/okhttp", +JDK="oraclejdk8", +BRANCH="master", +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, +  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, +  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, +  echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, +  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.", +else, +  echo "Deploying snapshot...", +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +fi, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.buildscript/deploy_snapshot.sh, +#!/bin/bash, +#, +# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo., +#, +# Adapted from https://coderwall.com/p/9b_lfq and, +# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/, +, +SLUG="square/okhttp", +JDK="oraclejdk8", +BRANCH="master", +, +if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then, +  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.", +elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then, +  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.", +elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then, +  echo "Skipping snapshot deployment: was pull request.", +elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then, +  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.", +else, +  echo "Deploying snapshot...", +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true, +fi, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.travis.yml, +, +after_success:, +  - .buildscript/deploy_snapshot.sh, +, +env:, +  global:, +    - secure: "S0BTJVrF4fUCwhTdmoQY6LYr5r1wgXZ/p8lc5bIgUUsc1Ckalwt7s/GDwPuLJ4702sI5t56Eye2iEIMUjeFJKqebZRsX1C5oYsYFxGi3BGlepstYpmj0gLXuSWqCLniS9zmHXCxLhLkC6KxPVjhDlbq76XQx0o3K1J8oEIj/PCE="]
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +      server.useHttps(tlsNode.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +      server.useHttps(tlsNode.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.TlsNode;, +      @Override public void initChannel(SocketChannel channel) throws Exception {, +          TlsNode tlsNode = localhost();, +          SSLEngine engine = tlsNode.sslContext().createSSLEngine();, +        ChannelHandlerContext context, HttpObject message) throws Exception {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +      server.useHttps(tlsNode.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.TlsNode;, +      @Override public void initChannel(SocketChannel channel) throws Exception {, +          TlsNode tlsNode = localhost();, +          SSLEngine engine = tlsNode.sslContext().createSSLEngine();, +        ChannelHandlerContext context, HttpObject message) throws Exception {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +      SSLSocketFactory socketFactory = tlsNode.sslSocketFactory();, +          .sslSocketFactory(socketFactory, tlsNode.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +      server.useHttps(tlsNode.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.TlsNode;, +      @Override public void initChannel(SocketChannel channel) throws Exception {, +          TlsNode tlsNode = localhost();, +          SSLEngine engine = tlsNode.sslContext().createSSLEngine();, +        ChannelHandlerContext context, HttpObject message) throws Exception {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +      SSLSocketFactory socketFactory = tlsNode.sslSocketFactory();, +          .sslSocketFactory(socketFactory, tlsNode.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +      SSLSocketFactory socketFactory = tlsNode.sslSocketFactory();, +          .sslSocketFactory(socketFactory, tlsNode.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(tlsNode.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +      server.useHttps(tlsNode.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.TlsNode;, +      @Override public void initChannel(SocketChannel channel) throws Exception {, +          TlsNode tlsNode = localhost();, +          SSLEngine engine = tlsNode.sslContext().createSSLEngine();, +        ChannelHandlerContext context, HttpObject message) throws Exception {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +      SSLSocketFactory socketFactory = tlsNode.sslSocketFactory();, +          .sslSocketFactory(socketFactory, tlsNode.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +      SSLSocketFactory socketFactory = tlsNode.sslSocketFactory();, +          .sslSocketFactory(socketFactory, tlsNode.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();, +      SSLSocketFactory socketFactory = tlsNode.sslSocketFactory();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +      TlsNode tlsNode = localhost();]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertNull(request.body());, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertNull(request.body());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    callback.await(requestA.url()).assertFailure("Canceled");, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertNull(request.body());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    callback.await(requestA.url()).assertFailure("Canceled");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +  public void assertFailure(String message) {, +    assertEquals(message, failure.getMessage());, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>]
[+++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/okhttp3/Headers.java, +      if (value == null) throw new NullPointerException("value for name " + name + " == null");, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +      if (value == null) throw new NullPointerException("value for name " + name + " == null");, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +      if (value == null) throw new NullPointerException("value for name " + name + " == null");, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/pom.xml]
[+++ b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.TimeUnit;, +, +  private final ExecutorService writeExecutor = Executors.newSingleThreadExecutor();, +    OkHttpClient client = new OkHttpClient.Builder(), +        .readTimeout(0,  TimeUnit.MILLISECONDS), +        .build();, +    writeExecutor.shutdown();, +    writeExecutor.shutdown();]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnection(c1);, +      transmitter.acquireConnection(connection);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnection(c1);, +      transmitter.acquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +  public void acquireConnection(RealConnection connection) {, +    streamAllocation.transmitterAcquireConnection(connection);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnection(c1);, +      transmitter.acquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +  public void acquireConnection(RealConnection connection) {, +    streamAllocation.transmitterAcquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public boolean isEligible(Address address, @Nullable List<Route> routes) {, +    if (routes == null || !routeMatchesAny(routes)) return false;, +    if (address.hostnameVerifier() != OkHostnameVerifier.INSTANCE) return false;, +  /** Returns true if this connection's route has the same address as any of {@code routes}. */, +  private boolean routeMatchesAny(List<Route> candidates) {, +    for (int i = 0, size = candidates.size(); i < size; i++) {, +      Route candidate = candidates.get(i);, +      if (candidate.proxy().type() == Proxy.Type.DIRECT, +          && route.proxy().type() == Proxy.Type.DIRECT, +          && route.socketAddress().equals(candidate.socketAddress())) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnection(c1);, +      transmitter.acquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +  public void acquireConnection(RealConnection connection) {, +    streamAllocation.transmitterAcquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public boolean isEligible(Address address, @Nullable List<Route> routes) {, +    if (routes == null || !routeMatchesAny(routes)) return false;, +    if (address.hostnameVerifier() != OkHostnameVerifier.INSTANCE) return false;, +  /** Returns true if this connection's route has the same address as any of {@code routes}. */, +  private boolean routeMatchesAny(List<Route> candidates) {, +    for (int i = 0, size = candidates.size(); i < size; i++) {, +      Route candidate = candidates.get(i);, +      if (candidate.proxy().type() == Proxy.Type.DIRECT, +          && route.proxy().type() == Proxy.Type.DIRECT, +          && route.socketAddress().equals(candidate.socketAddress())) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnectionPool.java, +   * Attempts to acquire a recycled connection to {@code address} for {@code transmitter}. Returns, +   * true if a connection was acquired., +   *, +   * <p>If {@code routes} is non-null these are the resolved routes (ie. IP addresses) for the, +   * connection. This is used to coalesce related domains to the same HTTP/2 connection, such as, +   * {@code square.com} and {@code square.ca}., +  boolean transmitterAcquirePooledConnection(Address address, Transmitter transmitter,, +      @Nullable List<Route> routes, boolean requireMultiplexed) {, +      if (requireMultiplexed && !connection.isMultiplexed()) continue;, +      if (!connection.isEligible(address, routes)) continue;, +      transmitter.acquireConnection(connection);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnection(c1);, +      transmitter.acquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +  public void acquireConnection(RealConnection connection) {, +    streamAllocation.transmitterAcquireConnection(connection);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public boolean isEligible(Address address, @Nullable List<Route> routes) {, +    if (routes == null || !routeMatchesAny(routes)) return false;, +    if (address.hostnameVerifier() != OkHostnameVerifier.INSTANCE) return false;, +  /** Returns true if this connection's route has the same address as any of {@code routes}. */, +  private boolean routeMatchesAny(List<Route> candidates) {, +    for (int i = 0, size = candidates.size(); i < size; i++) {, +      Route candidate = candidates.get(i);, +      if (candidate.proxy().type() == Proxy.Type.DIRECT, +          && route.proxy().type() == Proxy.Type.DIRECT, +          && route.socketAddress().equals(candidate.socketAddress())) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnectionPool.java, +   * Attempts to acquire a recycled connection to {@code address} for {@code transmitter}. Returns, +   * true if a connection was acquired., +   *, +   * <p>If {@code routes} is non-null these are the resolved routes (ie. IP addresses) for the, +   * connection. This is used to coalesce related domains to the same HTTP/2 connection, such as, +   * {@code square.com} and {@code square.ca}., +  boolean transmitterAcquirePooledConnection(Address address, Transmitter transmitter,, +      @Nullable List<Route> routes, boolean requireMultiplexed) {, +      if (requireMultiplexed && !connection.isMultiplexed()) continue;]
[+++ b/benchmarks/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +++ b/benchmarks/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +++ /dev/null, +++ b/benchmarks/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.1.0-RC1</version>, +++ b/okhttp/pom.xml]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, +    return new Thread(new Runnable() {, +      @Override public void run() {, +        final URL url = mockWebServer.url(path).url();, +        final HttpURLConnection conn;, +        } catch (IOException e) {, +        }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, +    return new Thread(new Runnable() {, +      @Override public void run() {, +        final URL url = mockWebServer.url(path).url();, +        final HttpURLConnection conn;, +        } catch (IOException e) {, +        }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread() {, +      @Override public void run() {, +      }, +    }.start();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, +    return new Thread(new Runnable() {, +      @Override public void run() {, +        final URL url = mockWebServer.url(path).url();, +        final HttpURLConnection conn;, +        } catch (IOException e) {, +        }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread() {, +      @Override public void run() {, +      }, +    }.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import javax.net.ssl.SSLSession;, +      HttpLoggingInterceptor.Logger logger =, +          new HttpLoggingInterceptor.Logger() {, +            @Override, +            public void log(String message) {, +              System.out.println(message);, +            }, +          };, +    return new HostnameVerifier() {, +      @Override public boolean verify(String s, SSLSession sslSession) {, +        return true;, +      }, +    };, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, +    return new Thread(new Runnable() {, +      @Override public void run() {, +        final URL url = mockWebServer.url(path).url();, +        final HttpURLConnection conn;, +        } catch (IOException e) {, +        }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread() {, +      @Override public void run() {, +      }, +    }.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import javax.net.ssl.SSLSession;, +      HttpLoggingInterceptor.Logger logger =, +          new HttpLoggingInterceptor.Logger() {, +            @Override, +            public void log(String message) {, +              System.out.println(message);, +            }, +          };, +    return new HostnameVerifier() {, +      @Override public boolean verify(String s, SSLSession sslSession) {, +        return true;, +      }, +    };, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = new Logger() {, +      @Override public void log(String message) {, +        Platform.get().log(INFO, message, null);, +      }, +    };, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {, +    return new Thread(new Runnable() {, +      @Override public void run() {, +        final URL url = mockWebServer.url(path).url();, +        final HttpURLConnection conn;, +        } catch (IOException e) {, +        }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread() {, +      @Override public void run() {, +      }, +    }.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import javax.net.ssl.SSLSession;, +      HttpLoggingInterceptor.Logger logger =, +          new HttpLoggingInterceptor.Logger() {, +            @Override, +            public void log(String message) {]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +    responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +    responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString().hex();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +    responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString().hex();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft06Test.java, +    bytesIn.writeAll(bytesOut);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(bytesOut);, +    bytesIn.writeAll(bytesOut);, +    bytesIn.writeAll(firstRequestWithoutHuffman());, +    bytesIn.writeAll(secondRequestWithoutHuffman());, +    bytesIn.writeAll(thirdRequestWithoutHuffman());, +    bytesIn.writeAll(firstRequestWithHuffman());, +    bytesIn.writeAll(secondRequestWithHuffman());, +    bytesIn.writeAll(thirdRequestWithHuffman());, +    // TODO change to bytesOut.readByteString() once Okio 0.8.1+ is available., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +    responses.add(new RecordedResponse(response.request(), response, buffer.readUtf8(), null));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString().hex();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft06Test.java, +    bytesIn.writeAll(bytesOut);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(out);, +    bytesIn.writeAll(bytesOut);, +    bytesIn.writeAll(bytesOut);, +    bytesIn.writeAll(firstRequestWithoutHuffman());, +    bytesIn.writeAll(secondRequestWithoutHuffman());, +    bytesIn.writeAll(thirdRequestWithoutHuffman());, +    bytesIn.writeAll(firstRequestWithHuffman());, +    bytesIn.writeAll(secondRequestWithHuffman());, +    bytesIn.writeAll(thirdRequestWithHuffman());, +    // TODO change to bytesOut.readByteString() once Okio 0.8.1+ is available., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http20Draft10Test.java, +      frame.writeAll(headerBytes);, +      frame.writeAll(headerBytes);, +      frame.writeAll(headerBlock);, +      frame.writeAll(headerBytes);, +    frame.writeAll(headerBlock);, +    frame.writeAll(headerBlock);, +    frame.writeAll(headerBlock);, +    frame.writeAll(headerBlock);, +    frame.writeAll(headerBlock);, +      frame.writeAll(headerBlock);, +      frame.writeAll(headerBlock);, +      frame.writeAll(headerBlock);, +      frame.writeAll(headerBlock);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.writeAll(body);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return buffer.readString(body.contentType().charset());]
[+++ b/benchmarks/pom.xml, +    <dependency>, +      <groupId>org.apache.httpcomponents</groupId>, +      <artifactId>httpclient</artifactId>, +    </dependency>, +++ b/benchmarks/pom.xml, +    <dependency>, +      <groupId>org.apache.httpcomponents</groupId>, +      <artifactId>httpclient</artifactId>, +    </dependency>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClientRequest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.benchmarks;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.concurrent.TimeUnit;, +import java.util.zip.GZIPInputStream;, +import org.apache.http.Header;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.methods.HttpGet;, +, +class ApacheHttpClientRequest implements Runnable {, +  private static final boolean VERBOSE = false;, +  private final HttpClient client;, +  private final String url;, +, +  public ApacheHttpClientRequest(String url, HttpClient client) {, +    this.client = client;, +    this.url = url;, +  }, +, +  public void run() {, +    byte[] buffer = new byte[1024];, +    long start = System.nanoTime();, +    try {, +      HttpResponse response = client.execute(new HttpGet(url));, +      InputStream in = response.getEntity().getContent();, +      Header contentEncoding = response.getFirstHeader("Content-Encoding");, +      if (contentEncoding != null && contentEncoding.getValue().equals("gzip")) {, +        in = new GZIPInputStream(in);, +      }, +, +      // Consume the response body., +      int total = 0;, +      for (int count; (count = in.read(buffer)) != -1; ) {, +        total += count;, +      }, +      in.close();, +      long finish = System.nanoTime();, +, +      if (VERBOSE) {, +        System.out.println(String.format("Transferred % 8d bytes in %4d ms",, +            total, TimeUnit.NANOSECONDS.toMillis(finish - start)));, +      }, +    } catch (IOException e) {, +      System.out.println("Failed: " + e);, +    }, +  }, +}, +++ b/benchmarks/pom.xml, +    <dependency>, +      <groupId>org.apache.httpcomponents</groupId>, +      <artifactId>httpclient</artifactId>, +    </dependency>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClientRequest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.benchmarks;, +, +import java.io.IOException;, +import java.io.InputStream;]
[+++ b/build.xml, +        <mkdir dir="build/test-classes"/>, +        <javac srcdir="src/test/java" includes="**" destdir="build/test-classes", +               debug="on" source="1.6" target="1.6" includeantruntime="false">, +            <compilerarg value="-Xlint"/>, +            <classpath>, +                <pathelement location="build/classes" />, +                <pathelement location="lib/junit.jar" />, +            </classpath>, +        </javac>, +    <target name="test" depends="compile">, +        <junit printsummary="true" showoutput="false" fork="true", +               errorProperty="test.failed" failureProperty="test.failed">, +            <assertions><enable/></assertions>, +            <classpath>, +                <pathelement location="build/classes"/>, +                <pathelement location="build/test-classes"/>, +                <pathelement location="lib/junit.jar"/>, +            </classpath>, +            <batchtest>, +                <fileset dir="build/test-classes" includes="**/**Test.class"/>, +            </batchtest>, +        </junit>, +        <fail message="Tests failed." if="test.failed"/>, +    </target>, +, +++ b/build.xml, +        <mkdir dir="build/test-classes"/>, +        <javac srcdir="src/test/java" includes="**" destdir="build/test-classes", +               debug="on" source="1.6" target="1.6" includeantruntime="false">, +            <compilerarg value="-Xlint"/>, +            <classpath>, +                <pathelement location="build/classes" />, +                <pathelement location="lib/junit.jar" />, +            </classpath>, +        </javac>, +    <target name="test" depends="compile">, +        <junit printsummary="true" showoutput="false" fork="true", +               errorProperty="test.failed" failureProperty="test.failed">, +            <assertions><enable/></assertions>, +            <classpath>, +                <pathelement location="build/classes"/>, +                <pathelement location="build/test-classes"/>, +                <pathelement location="lib/junit.jar"/>, +            </classpath>, +            <batchtest>, +                <fileset dir="build/test-classes" includes="**/**Test.class"/>, +            </batchtest>, +        </junit>, +        <fail message="Tests failed." if="test.failed"/>, +    </target>, +, +++ b/lib/junit.jar, +++ b/build.xml, +        <mkdir dir="build/test-classes"/>, +        <javac srcdir="src/test/java" includes="**" destdir="build/test-classes", +               debug="on" source="1.6" target="1.6" includeantruntime="false">, +            <compilerarg value="-Xlint"/>, +            <classpath>, +                <pathelement location="build/classes" />, +                <pathelement location="lib/junit.jar" />, +            </classpath>, +        </javac>, +    <target name="test" depends="compile">, +        <junit printsummary="true" showoutput="false" fork="true", +               errorProperty="test.failed" failureProperty="test.failed">, +            <assertions><enable/></assertions>, +            <classpath>, +                <pathelement location="build/classes"/>, +                <pathelement location="build/test-classes"/>, +                <pathelement location="lib/junit.jar"/>, +            </classpath>, +            <batchtest>, +                <fileset dir="build/test-classes" includes="**/**Test.class"/>, +            </batchtest>, +        </junit>, +        <fail message="Tests failed." if="test.failed"/>, +    </target>, +, +++ b/lib/junit.jar, +++ b/src/test/java/com/google/mockwebserver/MockWebServerTest.java, +/*, + * Copyright (C) 2011 Google Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.mockwebserver;, +, +import java.io.BufferedReader;]
[+++ b/okhttp/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp</artifactId>, +  <name>OkHttp</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>org.mortbay.jetty.npn</groupId>, +      <artifactId>npn-boot</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.bouncycastle</groupId>, +      <artifactId>bcprov-jdk15on</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.mockwebserver</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/okhttp/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp</artifactId>, +  <name>OkHttp</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>org.mortbay.jetty.npn</groupId>, +      <artifactId>npn-boot</artifactId>, +      <optional>true</optional>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.bouncycastle</groupId>, +      <artifactId>bcprov-jdk15on</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.mockwebserver</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import java.net.Proxy;, +import java.net.UnknownHostException;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSocketFactory;]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.util.Collections;, +    assertEquals("android.com:443", connect.getHeader("Host"));, +  /** https://github.com/square/okhttp/issues/2344 */, +  @Test public void ipv6HostHasSquareBraces() throws Exception {, +    // Use a proxy to fake IPv6 connectivity, even if localhost doesn't have IPv6., +    server.useHttps(sslContext.getSocketFactory(), true);, +    server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    server.enqueue(new MockResponse(), +        .setBody("response body"));, +, +    client = client.newBuilder(), +        .sslSocketFactory(sslContext.getSocketFactory()), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .proxy(server.toProxyAddress()), +        .build();, +, +    Request request = new Request.Builder(), +        .url("https://[::1]/"), +        .build();, +    Response response = client.newCall(request).execute();, +    assertEquals("response body", response.body().string());, +, +    RecordedRequest connect = server.takeRequest();, +    assertEquals("CONNECT [::1]:443 HTTP/1.1", connect.getRequestLine());, +    assertEquals("[::1]:443", connect.getHeader("Host"));, +, +    RecordedRequest get = server.takeRequest();, +    assertEquals("GET / HTTP/1.1", get.getRequestLine());, +    assertEquals("[::1]", get.getHeader("Host"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.util.Collections;, +    assertEquals("android.com:443", connect.getHeader("Host"));, +  /** https://github.com/square/okhttp/issues/2344 */, +  @Test public void ipv6HostHasSquareBraces() throws Exception {, +    // Use a proxy to fake IPv6 connectivity, even if localhost doesn't have IPv6., +    server.useHttps(sslContext.getSocketFactory(), true);, +    server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    server.enqueue(new MockResponse(), +        .setBody("response body"));, +, +    client = client.newBuilder(), +        .sslSocketFactory(sslContext.getSocketFactory()), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .proxy(server.toProxyAddress()), +        .build();, +, +    Request request = new Request.Builder(), +        .url("https://[::1]/"), +        .build();, +    Response response = client.newCall(request).execute();, +    assertEquals("response body", response.body().string());, +, +    RecordedRequest connect = server.takeRequest();, +    assertEquals("CONNECT [::1]:443 HTTP/1.1", connect.getRequestLine());, +    assertEquals("[::1]:443", connect.getHeader("Host"));, +, +    RecordedRequest get = server.takeRequest();, +    assertEquals("GET / HTTP/1.1", get.getRequestLine());, +    assertEquals("[::1]", get.getHeader("Host"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +  /** The builder permits square braces but does not require them. */, +  @Test public void hostIPv6Builder() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://example.com/");, +    assertEquals("http://[::1]/", base.newBuilder().host("[::1]").build().toString());, +    assertEquals("http://[::1]/", base.newBuilder().host("[::0001]").build().toString());, +    assertEquals("http://[::1]/", base.newBuilder().host("::1").build().toString());, +    assertEquals("http://[::1]/", base.newBuilder().host("::0001").build().toString());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.util.Collections;, +    assertEquals("android.com:443", connect.getHeader("Host"));, +  /** https://github.com/square/okhttp/issues/2344 */, +  @Test public void ipv6HostHasSquareBraces() throws Exception {, +    // Use a proxy to fake IPv6 connectivity, even if localhost doesn't have IPv6., +    server.useHttps(sslContext.getSocketFactory(), true);, +    server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    server.enqueue(new MockResponse(), +        .setBody("response body"));, +, +    client = client.newBuilder(), +        .sslSocketFactory(sslContext.getSocketFactory()), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .proxy(server.toProxyAddress()), +        .build();, +]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException {, +    assertEquals(512f, i, 20f); // Halfway +/- 2%, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException {, +    assertEquals(512f, i, 20f); // Halfway +/- 2%, +++ b/okhttp-sse/src/main/java/okhttp3/EventSource.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +public interface EventSource {, +  /** Returns the original request that initiated this event source. */, +  Request request();, +, +  /**, +   * Immediately and violently release resources held by this event source. This does nothing if, +   * the event source has already been closed or canceled., +   */, +  void cancel();, +, +  interface Factory {, +    /**, +     * Creates a new event source and immediately returns it. Creating an event source initiates an, +     * asynchronous process to connect the socket. Once that succeeds or fails, {@code listener}, +     * will be notified. The caller must cancel the returned event source when it is no longer, +     * in use., +     */, +    EventSource newEventSource(Request request, EventSourceListener listener);, +  }, +}, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException {, +    assertEquals(512f, i, 20f); // Halfway +/- 2%, +++ b/okhttp-sse/src/main/java/okhttp3/EventSource.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +public interface EventSource {, +  /** Returns the original request that initiated this event source. */, +  Request request();, +, +  /**, +   * Immediately and violently release resources held by this event source. This does nothing if, +   * the event source has already been closed or canceled., +   */, +  void cancel();, +, +  interface Factory {, +    /**, +     * Creates a new event source and immediately returns it. Creating an event source initiates an, +     * asynchronous process to connect the socket. Once that succeeds or fails, {@code listener}, +     * will be notified. The caller must cancel the returned event source when it is no longer, +     * in use., +     */, +    EventSource newEventSource(Request request, EventSourceListener listener);, +  }, +}, +++ b/okhttp-sse/src/main/java/okhttp3/EventSourceListener.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]
[+++ b/pom.xml, +    <okio.version>1.5.0</okio.version>]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, +    Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, +    Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, +    Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, +    Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, +    Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      new Request.Builder().url("ftp://hostname/path");, +  @Test, +  public void setFollowRedirectsFalse() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(302), +        .addHeader("Location: /b"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setBody("B"));, +    server.play();, +, +    client.setFollowRedirects(false);, +    RecordedResponse recordedResponse = executeSynchronously(, +        new Request.Builder().url(server.getUrl("/a")).build());, +, +    recordedResponse, +        .assertBody("A")]
[+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void nullSSLSocketFactory_throws() throws Exception {, +    server.useHttps(sslClient.socketFactory, false /* tunnelProxy */);, +    HttpsURLConnection connection = (HttpsURLConnection) server.url("/").url().openConnection();, +    try {, +      connection.setSSLSocketFactory(null);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void nullSSLSocketFactory_throws() throws Exception {, +    server.useHttps(sslClient.socketFactory, false /* tunnelProxy */);, +    HttpsURLConnection connection = (HttpsURLConnection) server.url("/").url().openConnection();, +    try {, +      connection.setSSLSocketFactory(null);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import org.hamcrest.CoreMatchers;, +    for (String l: logs) {, +      if (l.contains(type)) {, +        return l;, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void nullSSLSocketFactory_throws() throws Exception {, +    server.useHttps(sslClient.socketFactory, false /* tunnelProxy */);, +    HttpsURLConnection connection = (HttpsURLConnection) server.url("/").url().openConnection();, +    try {, +      connection.setSSLSocketFactory(null);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import org.hamcrest.CoreMatchers;, +    for (String l: logs) {, +      if (l.contains(type)) {, +        return l;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java, +    if (sslSocketFactory == null) {, +        throw new IllegalArgumentException("null sslSocketFactory");, +    }, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void nullSSLSocketFactory_throws() throws Exception {, +    server.useHttps(sslClient.socketFactory, false /* tunnelProxy */);, +    HttpsURLConnection connection = (HttpsURLConnection) server.url("/").url().openConnection();, +    try {, +      connection.setSSLSocketFactory(null);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import org.hamcrest.CoreMatchers;, +    for (String l: logs) {, +      if (l.contains(type)) {, +        return l;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java, +    if (sslSocketFactory == null) {, +        throw new IllegalArgumentException("null sslSocketFactory");, +    }, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +     * Sets the interval between web socket pings initiated by this client. Use this to, +     * automatically send web socket ping frames until either the web socket fails or it is closed., +     * This keeps the connection alive and may detect connectivity failures., +     * client will assume that connectivity has been lost. When this happens the connection is, +     * canceled and its listener is {@linkplain WebSocketListener#onFailure notified of the, +     * failure}., +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void nullSSLSocketFactory_throws() throws Exception {, +    server.useHttps(sslClient.socketFactory, false /* tunnelProxy */);, +    HttpsURLConnection connection = (HttpsURLConnection) server.url("/").url().openConnection();, +    try {, +      connection.setSSLSocketFactory(null);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import org.hamcrest.CoreMatchers;, +    for (String l: logs) {, +      if (l.contains(type)) {, +        return l;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java, +    if (sslSocketFactory == null) {, +        throw new IllegalArgumentException("null sslSocketFactory");, +    }, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +     * Sets the interval between web socket pings initiated by this client. Use this to]
[+++ b/checkstyle.xml, +  <module name="SuppressWarningsFilter"/>, +, +    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->, +    <module name="SuppressWarningsHolder"/>, +++ b/checkstyle.xml, +  <module name="SuppressWarningsFilter"/>, +, +    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->, +    <module name="SuppressWarningsHolder"/>, +++ b/pom.xml, +        <version>2.12</version>, +++ b/checkstyle.xml, +  <module name="SuppressWarningsFilter"/>, +, +    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->, +    <module name="SuppressWarningsHolder"/>, +++ b/pom.xml, +        <version>2.12</version>, +++ b/samples/pom.xml, +    <module>slack</module>, +++ b/checkstyle.xml, +  <module name="SuppressWarningsFilter"/>, +, +    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->, +    <module name="SuppressWarningsHolder"/>, +++ b/pom.xml, +        <version>2.12</version>, +++ b/samples/pom.xml, +    <module>slack</module>, +++ b/samples/slack/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3.sample</groupId>, +    <artifactId>sample-parent</artifactId>, +    <version>3.5.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>slack</artifactId>, +  <name>Sample: Slack</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.moshi</groupId>, +      <artifactId>moshi</artifactId>, +    </dependency>, +  </dependencies>, +</project>, +++ b/checkstyle.xml, +  <module name="SuppressWarningsFilter"/>, +, +    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->, +    <module name="SuppressWarningsHolder"/>, +++ b/pom.xml, +        <version>2.12</version>, +++ b/samples/pom.xml, +    <module>slack</module>, +++ b/samples/slack/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3.sample</groupId>, +    <artifactId>sample-parent</artifactId>, +    <version>3.5.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>slack</artifactId>, +  <name>Sample: Slack</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.moshi</groupId>, +      <artifactId>moshi</artifactId>, +    </dependency>, +  </dependencies>, +</project>, +++ b/samples/slack/src/main/java/okhttp3/slack/OAuthSession.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at]
[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  @Test public void basicChunkedResponseBody() throws IOException {, +    setLevel(Level.BASIC);, +, +    server.enqueue(new MockResponse(), +        .setChunkedBody("Hello!", 2), +        .setHeader("Content-Type", PLAIN));, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +, +    applicationLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +, +    networkLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +  }, +, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  @Test public void basicChunkedResponseBody() throws IOException {, +    setLevel(Level.BASIC);, +, +    server.enqueue(new MockResponse(), +        .setChunkedBody("Hello!", 2), +        .setHeader("Content-Type", PLAIN));, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +, +    applicationLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +, +    networkLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  @Test public void basicChunkedResponseBody() throws IOException {, +    setLevel(Level.BASIC);, +, +    server.enqueue(new MockResponse(), +        .setChunkedBody("Hello!", 2), +        .setHeader("Content-Type", PLAIN));, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +, +    applicationLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +, +    networkLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  @Test public void basicChunkedResponseBody() throws IOException {, +    setLevel(Level.BASIC);, +, +    server.enqueue(new MockResponse(), +        .setChunkedBody("Hello!", 2), +        .setHeader("Content-Type", PLAIN));, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();]
[+++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-SNAPSHOT</version>]
[+++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ b/mockwebserver/src/main/java/okhttp3/internal/duplex/MwsDuplexAccess.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.duplex;, +, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.internal.duplex.DuplexResponseBody;, +, +/**, + * Internal access to MockWebServer APIs. Don't use this, don't use internal, these APIs are not, + * stable., + */, +public abstract class MwsDuplexAccess {, +  public static MwsDuplexAccess instance;, +, +  public abstract void setBody(MockResponse mockResponse, DuplexResponseBody duplexResponseBody);, +}, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ b/mockwebserver/src/main/java/okhttp3/internal/duplex/MwsDuplexAccess.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.duplex;, +, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.internal.duplex.DuplexResponseBody;, +, +/**, + * Internal access to MockWebServer APIs. Don't use this, don't use internal, these APIs are not, + * stable., + */, +public abstract class MwsDuplexAccess {, +  public static MwsDuplexAccess instance;, +, +  public abstract void setBody(MockResponse mockResponse, DuplexResponseBody duplexResponseBody);, +}, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.mockwebserver.internal.duplex.DuplexResponseBody;, +  private DuplexResponseBody duplexResponseBody;, +  boolean isDuplex() {, +    return duplexResponseBody != null;, +  }, +, +  DuplexResponseBody getDuplexResponseBody() {, +    return duplexResponseBody;, +  }, +, +  MockResponse setBody(DuplexResponseBody duplexResponseBody) {, +    this.duplexResponseBody = duplexResponseBody;, +    return this;, +  }, +, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>]
[+++ b/build.gradle, +      'kotlin': '1.3.20',, +      'kotlinStdlib': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",, +    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", +  apply plugin: 'org.jetbrains.kotlin.platform.jvm', +++ b/build.gradle, +      'kotlin': '1.3.20',, +      'kotlinStdlib': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",, +    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", +  apply plugin: 'org.jetbrains.kotlin.platform.jvm', +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionSpecTest.java, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +        new String[] {TlsVersion.TLS_1_2.javaName(), TlsVersion.TLS_1_1.javaName()});, +    socket.setEnabledProtocols(new String[] {TlsVersion.TLS_1_1.javaName()});, +++ b/build.gradle, +      'kotlin': '1.3.20',, +      'kotlinStdlib': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",, +    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", +  apply plugin: 'org.jetbrains.kotlin.platform.jvm', +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionSpecTest.java, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +        new String[] {TlsVersion.TLS_1_2.javaName(), TlsVersion.TLS_1_1.javaName()});, +    socket.setEnabledProtocols(new String[] {TlsVersion.TLS_1_1.javaName()});, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java, +import okhttp3.Call;, +import okhttp3.Request;, +import okhttp3.TestUtil;, +  private Call call;, +    call = TestUtil.defaultClient().newCall(new Request.Builder(), +        .url("https://" + uriHost + ":" + uriPort + "/"), +        .build());, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    routeSelector = new RouteSelector(address, routeDatabase, call, EventListener.NONE);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    routeSelector = new RouteSelector(address, routeDatabase, call, EventListener.NONE);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    routeSelector = new RouteSelector(address, routeDatabase, call, EventListener.NONE);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +++ b/build.gradle, +      'kotlin': '1.3.20',, +      'kotlinStdlib': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",, +    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", +  apply plugin: 'org.jetbrains.kotlin.platform.jvm', +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionSpecTest.java, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +        new String[] {TlsVersion.TLS_1_2.javaName(), TlsVersion.TLS_1_1.javaName()});, +    socket.setEnabledProtocols(new String[] {TlsVersion.TLS_1_1.javaName()});, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java, +import okhttp3.Call;, +import okhttp3.Request;, +import okhttp3.TestUtil;, +  private Call call;, +    call = TestUtil.defaultClient().newCall(new Request.Builder(), +        .url("https://" + uriHost + ":" + uriPort + "/"), +        .build());, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    routeSelector = new RouteSelector(address, routeDatabase, call, EventListener.NONE);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/CipherSuite.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import static java.lang.Integer.MAX_VALUE;, +, +/**, + * <a href="https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml">TLS cipher, + * suites</a>., + *, + * <p><strong>Not all cipher suites are supported on all platforms.</strong> As newer cipher suites, + * are created (for stronger privacy, better performance, etc.) they will be adopted by the platform, + * and then exposed here. Cipher suites that are not available on either Android (through API level, + * 20) or Java (through JDK 8) are omitted for brevity., + *, + * <p>See also <a href="https://android.googlesource.com/platform/external/conscrypt/+/master/src/main/java/org/conscrypt/NativeCrypto.java">NativeCrypto.java</a>, + * from conscrypt, which lists the cipher suites supported by Android., + */, +public enum CipherSuite {, +  // Last updated 2014-11-11 using cipher suites from Android 21 and Java 8., +, +  // TLS_NULL_WITH_NULL_NULL("TLS_NULL_WITH_NULL_NULL", 0x0000, 5246, MAX_VALUE, MAX_VALUE),, +  TLS_RSA_WITH_NULL_MD5("SSL_RSA_WITH_NULL_MD5", 0x0001, 5246, 6, 10),, +  TLS_RSA_WITH_NULL_SHA("SSL_RSA_WITH_NULL_SHA", 0x0002, 5246, 6, 10),, +  TLS_RSA_EXPORT_WITH_RC4_40_MD5("SSL_RSA_EXPORT_WITH_RC4_40_MD5", 0x0003, 4346, 6, 10),, +  TLS_RSA_WITH_RC4_128_MD5("SSL_RSA_WITH_RC4_128_MD5", 0x0004, 5246, 6, 10),, +  TLS_RSA_WITH_RC4_128_SHA("SSL_RSA_WITH_RC4_128_SHA", 0x0005, 5246, 6, 10),, +  // TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5("SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5", 0x0006, 4346, MAX_VALUE, MAX_VALUE),, +  // TLS_RSA_WITH_IDEA_CBC_SHA("TLS_RSA_WITH_IDEA_CBC_SHA", 0x0007, 5469, MAX_VALUE, MAX_VALUE),, +  TLS_RSA_EXPORT_WITH_DES40_CBC_SHA("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x0008, 4346, 6, 10),, +  TLS_RSA_WITH_DES_CBC_SHA("SSL_RSA_WITH_DES_CBC_SHA", 0x0009, 5469, 6, 10),, +  TLS_RSA_WITH_3DES_EDE_CBC_SHA("SSL_RSA_WITH_3DES_EDE_CBC_SHA", 0x000a, 5246, 6, 10),, +  // TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA("SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA", 0x000b, 4346, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_DSS_WITH_DES_CBC_SHA("TLS_DH_DSS_WITH_DES_CBC_SHA", 0x000c, 5469, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA("TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA", 0x000d, 5246, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA("SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x000e, 4346, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_RSA_WITH_DES_CBC_SHA("TLS_DH_RSA_WITH_DES_CBC_SHA", 0x000f, 5469, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA("TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA", 0x0010, 5246, MAX_VALUE, MAX_VALUE),, +  TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA("SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 0x0011, 4346, 6, 10),, +  TLS_DHE_DSS_WITH_DES_CBC_SHA("SSL_DHE_DSS_WITH_DES_CBC_SHA", 0x0012, 5469, 6, 10),, +  TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 0x0013, 5246, 6, 10),, +  TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA("SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x0014, 4346, 6, 10),, +  TLS_DHE_RSA_WITH_DES_CBC_SHA("SSL_DHE_RSA_WITH_DES_CBC_SHA", 0x0015, 5469, 6, 10),, +  TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA("SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 0x0016, 5246, 6, 10),, +  TLS_DH_anon_EXPORT_WITH_RC4_40_MD5("SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", 0x0017, 4346, 6, 10),, +  TLS_DH_anon_WITH_RC4_128_MD5("SSL_DH_anon_WITH_RC4_128_MD5", 0x0018, 5246, 6, 10),, +  TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA("SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 0x0019, 4346, 6, 10),, +  TLS_DH_anon_WITH_DES_CBC_SHA("SSL_DH_anon_WITH_DES_CBC_SHA", 0x001a, 5469, 6, 10),, +  TLS_DH_anon_WITH_3DES_EDE_CBC_SHA("SSL_DH_anon_WITH_3DES_EDE_CBC_SHA", 0x001b, 5246, 6, 10),, +  TLS_KRB5_WITH_DES_CBC_SHA("TLS_KRB5_WITH_DES_CBC_SHA", 0x001e, 2712, 6, MAX_VALUE),, +  TLS_KRB5_WITH_3DES_EDE_CBC_SHA("TLS_KRB5_WITH_3DES_EDE_CBC_SHA", 0x001f, 2712, 6, MAX_VALUE),, +  TLS_KRB5_WITH_RC4_128_SHA("TLS_KRB5_WITH_RC4_128_SHA", 0x0020, 2712, 6, MAX_VALUE),, +  // TLS_KRB5_WITH_IDEA_CBC_SHA("TLS_KRB5_WITH_IDEA_CBC_SHA", 0x0021, 2712, MAX_VALUE, MAX_VALUE),, +  TLS_KRB5_WITH_DES_CBC_MD5("TLS_KRB5_WITH_DES_CBC_MD5", 0x0022, 2712, 6, MAX_VALUE),, +  TLS_KRB5_WITH_3DES_EDE_CBC_MD5("TLS_KRB5_WITH_3DES_EDE_CBC_MD5", 0x0023, 2712, 6, MAX_VALUE),, +  TLS_KRB5_WITH_RC4_128_MD5("TLS_KRB5_WITH_RC4_128_MD5", 0x0024, 2712, 6, MAX_VALUE),, +  // TLS_KRB5_WITH_IDEA_CBC_MD5("TLS_KRB5_WITH_IDEA_CBC_MD5", 0x0025, 2712, MAX_VALUE, MAX_VALUE),, +  TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", 0x0026, 2712, 6, MAX_VALUE),, +  // TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA", 0x0027, 2712, MAX_VALUE, MAX_VALUE),, +  TLS_KRB5_EXPORT_WITH_RC4_40_SHA("TLS_KRB5_EXPORT_WITH_RC4_40_SHA", 0x0028, 2712, 6, MAX_VALUE),, +  TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", 0x0029, 2712, 6, MAX_VALUE),, +  // TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5", 0x002a, 2712, MAX_VALUE, MAX_VALUE),, +  TLS_KRB5_EXPORT_WITH_RC4_40_MD5("TLS_KRB5_EXPORT_WITH_RC4_40_MD5", 0x002b, 2712, 6, MAX_VALUE),, +  // TLS_PSK_WITH_NULL_SHA("TLS_PSK_WITH_NULL_SHA", 0x002c, 4785, MAX_VALUE, MAX_VALUE),, +  // TLS_DHE_PSK_WITH_NULL_SHA("TLS_DHE_PSK_WITH_NULL_SHA", 0x002d, 4785, MAX_VALUE, MAX_VALUE),, +  // TLS_RSA_PSK_WITH_NULL_SHA("TLS_RSA_PSK_WITH_NULL_SHA", 0x002e, 4785, MAX_VALUE, MAX_VALUE),, +  TLS_RSA_WITH_AES_128_CBC_SHA("TLS_RSA_WITH_AES_128_CBC_SHA", 0x002f, 5246, 6, 10),, +  // TLS_DH_DSS_WITH_AES_128_CBC_SHA("TLS_DH_DSS_WITH_AES_128_CBC_SHA", 0x0030, 5246, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_RSA_WITH_AES_128_CBC_SHA("TLS_DH_RSA_WITH_AES_128_CBC_SHA", 0x0031, 5246, MAX_VALUE, MAX_VALUE),, +  TLS_DHE_DSS_WITH_AES_128_CBC_SHA("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", 0x0032, 5246, 6, 10),, +  TLS_DHE_RSA_WITH_AES_128_CBC_SHA("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", 0x0033, 5246, 6, 10),, +  TLS_DH_anon_WITH_AES_128_CBC_SHA("TLS_DH_anon_WITH_AES_128_CBC_SHA", 0x0034, 5246, 6, 10),, +  TLS_RSA_WITH_AES_256_CBC_SHA("TLS_RSA_WITH_AES_256_CBC_SHA", 0x0035, 5246, 6, 10),, +  // TLS_DH_DSS_WITH_AES_256_CBC_SHA("TLS_DH_DSS_WITH_AES_256_CBC_SHA", 0x0036, 5246, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_RSA_WITH_AES_256_CBC_SHA("TLS_DH_RSA_WITH_AES_256_CBC_SHA", 0x0037, 5246, MAX_VALUE, MAX_VALUE),, +  TLS_DHE_DSS_WITH_AES_256_CBC_SHA("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", 0x0038, 5246, 6, 10),, +  TLS_DHE_RSA_WITH_AES_256_CBC_SHA("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", 0x0039, 5246, 6, 10),, +  TLS_DH_anon_WITH_AES_256_CBC_SHA("TLS_DH_anon_WITH_AES_256_CBC_SHA", 0x003a, 5246, 6, 10),, +  TLS_RSA_WITH_NULL_SHA256("TLS_RSA_WITH_NULL_SHA256", 0x003b, 5246, 7, 21),, +  TLS_RSA_WITH_AES_128_CBC_SHA256("TLS_RSA_WITH_AES_128_CBC_SHA256", 0x003c, 5246, 7, 21),, +  TLS_RSA_WITH_AES_256_CBC_SHA256("TLS_RSA_WITH_AES_256_CBC_SHA256", 0x003d, 5246, 7, 21),, +  // TLS_DH_DSS_WITH_AES_128_CBC_SHA256("TLS_DH_DSS_WITH_AES_128_CBC_SHA256", 0x003e, 5246, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_RSA_WITH_AES_128_CBC_SHA256("TLS_DH_RSA_WITH_AES_128_CBC_SHA256", 0x003f, 5246, MAX_VALUE, MAX_VALUE),, +  TLS_DHE_DSS_WITH_AES_128_CBC_SHA256("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", 0x0040, 5246, 7, 21),, +  // TLS_RSA_WITH_CAMELLIA_128_CBC_SHA("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA", 0x0041, 5932, MAX_VALUE, MAX_VALUE),, +  // TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA("TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA", 0x0042, 5932, MAX_VALUE, MAX_VALUE),]
[+++ b/benchmarks/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.12.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.12.0-SNAPSHOT</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +  @Test public void readSettingsFrameExperimentalId() throws IOException {, +    writeMedium(frame, 6); // 2 for the code and 4 for the value, +    frame.writeByte(Http2.TYPE_SETTINGS);, +    frame.writeByte(Http2.FLAG_NONE);, +    frame.writeInt(0); // Settings are always on the connection stream 0., +    frame.write(ByteString.decodeHex("f000")); // Id reserved for experimental use., +    frame.writeInt(1);, +, +    reader.nextFrame(false, new BaseTestHandler() {, +      @Override public void settings(boolean clearPrevious, Settings settings) {, +        // no-op, +      }, +    });, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +  @Test public void readSettingsFrameExperimentalId() throws IOException {, +    writeMedium(frame, 6); // 2 for the code and 4 for the value, +    frame.writeByte(Http2.TYPE_SETTINGS);, +    frame.writeByte(Http2.FLAG_NONE);, +    frame.writeInt(0); // Settings are always on the connection stream 0., +    frame.write(ByteString.decodeHex("f000")); // Id reserved for experimental use., +    frame.writeInt(1);, +, +    reader.nextFrame(false, new BaseTestHandler() {, +      @Override public void settings(boolean clearPrevious, Settings settings) {, +        // no-op, +      }, +    });, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Settings.java, +    if (id < 0 || id >= values.length) {]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +  /** We incorrectly report a CallEnd event with the CallFailed event. */, +  @Ignore, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +  /** We incorrectly report a CallEnd event with the CallFailed event. */, +  @Ignore, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public int refusedStreamCount;, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +  /** We incorrectly report a CallEnd event with the CallFailed event. */, +  @Ignore, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public int refusedStreamCount;, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +  private RouteSelector.Selection routeSelection;, +  private Route route;, +    RealConnection releasedConnection;, +      releasedConnection = connection;, +      toClose = connection != null && connection.noNewStreams, +          ? transmitterReleaseConnection(), +          : null;, +, +      if (connection != null) {, +        result = connection;, +, +      this.codec = null;, +      socket = this.released, +          ? transmitterReleaseConnection(), +          : null;, +      this.released = true;, +      socket = connection != null && this.codec == null, +          ? transmitterReleaseConnection(), +          : null;, +      if (connection != null || !reportedAcquired) releasedConnection = null;, +      if (released) throw new IllegalStateException();, +, +          connection.refusedStreamCount++;, +          if (connection.refusedStreamCount > 1) {, +      this.codec = null;, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +  /** We incorrectly report a CallEnd event with the CallFailed event. */, +  @Ignore, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public int refusedStreamCount;, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +  private RouteSelector.Selection routeSelection;, +  private Route route;, +    RealConnection releasedConnection;, +      releasedConnection = connection;, +      toClose = connection != null && connection.noNewStreams, +          ? transmitterReleaseConnection(), +          : null;, +, +      if (connection != null) {, +        result = connection;, +, +      this.codec = null;, +      socket = this.released, +          ? transmitterReleaseConnection(), +          : null;, +      this.released = true;, +      socket = connection != null && this.codec == null, +          ? transmitterReleaseConnection(), +          : null;, +      if (connection != null || !reportedAcquired) releasedConnection = null;, +      if (released) throw new IllegalStateException();, +, +          connection.refusedStreamCount++;, +          if (connection.refusedStreamCount > 1) {, +      this.codec = null;, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +        releaseConnection = false;, +        if (!recover(e, transmitter, requestSendStarted, request)) throw e;, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +  /** We incorrectly report a CallEnd event with the CallFailed event. */, +  @Ignore, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public int refusedStreamCount;, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +  private RouteSelector.Selection routeSelection;, +  private Route route;, +    RealConnection releasedConnection;, +      releasedConnection = connection;, +      toClose = connection != null && connection.noNewStreams, +          ? transmitterReleaseConnection(), +          : null;, +, +      if (connection != null) {, +        result = connection;, +, +      this.codec = null;, +      socket = this.released, +          ? transmitterReleaseConnection(), +          : null;, +      this.released = true;, +      socket = connection != null && this.codec == null, +          ? transmitterReleaseConnection(), +          : null;, +      if (connection != null || !reportedAcquired) releasedConnection = null;, +      if (released) throw new IllegalStateException();]
[+++ b/README.md, +An HTTP & SPDY client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +MockWebServer coupling with OkHttp is essential for proper testing of SPDY and HTTP/2.0 so that code can be shared., +++ b/README.md, +An HTTP & SPDY client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +MockWebServer coupling with OkHttp is essential for proper testing of SPDY and HTTP/2.0 so that code can be shared., +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/README.md, +An HTTP & SPDY client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +MockWebServer coupling with OkHttp is essential for proper testing of SPDY and HTTP/2.0 so that code can be shared., +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/README.md, +An HTTP & SPDY client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +MockWebServer coupling with OkHttp is essential for proper testing of SPDY and HTTP/2.0 so that code can be shared., +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java, +import okhttp3.JavaNetCookieJar;, +++ b/README.md, +An HTTP & SPDY client for Android and Java applications. For more information see [the website][1] and [the wiki][2]., +MockWebServer coupling with OkHttp is essential for proper testing of SPDY and HTTP/2.0 so that code can be shared., +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java, +import okhttp3.JavaNetCookieJar;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.net.CookieHandler;, +import java.net.HttpCookie;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +import okhttp3.internal.Internal;, +, +import static java.util.logging.Level.WARNING;, +, +/** A cookie jar that delegates to a {@link java.net.CookieHandler}. */, +public final class JavaNetCookieJar implements CookieJar {, +  private final CookieHandler cookieHandler;, +, +  public JavaNetCookieJar(CookieHandler cookieHandler) {, +    this.cookieHandler = cookieHandler;, +  }, +, +  @Override public void saveFromResponse(HttpUrl url, List<Cookie> cookies) {, +    if (cookieHandler != null) {, +      List<String> cookieStrings = new ArrayList<>();, +      for (Cookie cookie : cookies) {, +        cookieStrings.add(cookie.toString());, +      }, +      Map<String, List<String>> multimap = Collections.singletonMap("Set-Cookie", cookieStrings);, +      try {, +        cookieHandler.put(url.uri(), multimap);, +      } catch (IOException e) {, +        Internal.logger.log(WARNING, "Saving cookies failed for " + url.resolve("/..."), e);, +      }, +    }, +  }, +, +  @Override public List<Cookie> loadForRequest(HttpUrl url) {, +    // The RI passes all headers. We don't have 'em, so we don't pass 'em!, +    Map<String, List<String>> headers = Collections.emptyMap();, +    Map<String, List<String>> cookieHeaders;, +    try {, +      cookieHeaders = cookieHandler.get(url.uri(), headers);, +    } catch (IOException e) {, +      Internal.logger.log(WARNING, "Loading cookies failed for " + url.resolve("/..."), e);, +      return Collections.emptyList();, +    }, +, +    List<Cookie> cookies = null;, +    for (Map.Entry<String, List<String>> entry : cookieHeaders.entrySet()) {, +      String key = entry.getKey();, +      if (("Cookie".equalsIgnoreCase(key) || "Cookie2".equalsIgnoreCase(key)), +          && !entry.getValue().isEmpty()) {, +        for (String header : entry.getValue()) {, +          if (cookies == null) cookies = new ArrayList<>();, +          cookies.addAll(decodeHeaderAsJavaNetCookies(url, header));, +        }, +      }, +    }]
[+++ b/okhttp-apache/pom.xml, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.mockwebserver</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-apache/pom.xml, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.mockwebserver</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +package com.squareup.okhttp.apache;, +, +import com.google.mockwebserver.MockResponse;, +import com.google.mockwebserver.MockWebServer;, +import java.io.IOException;, +import org.apache.http.Header;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.util.EntityUtils;, +import org.junit.After;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class OkApacheClientTest {, +  private MockWebServer server = new MockWebServer();, +  private OkApacheClient client = new OkApacheClient();, +, +  @After public void tearDown() throws IOException {, +    server.shutdown();, +  }, +, +  @Test public void success() throws Exception {, +    server.enqueue(new MockResponse().setBody("Hello, World!"));, +    server.play();, +, +    HttpGet request = new HttpGet(server.getUrl("/").toURI());, +    HttpResponse response = client.execute(request);, +    String actual = EntityUtils.toString(response.getEntity());, +    assertEquals("Hello, World!", actual);, +  }, +, +  @Test public void redirect() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(302).addHeader("Location", "/foo"));, +    server.enqueue(new MockResponse().setBody("Hello, Redirect!"));, +    server.play();, +, +    HttpGet request = new HttpGet(server.getUrl("/").toURI());, +    HttpResponse response = client.execute(request);, +    String actual = EntityUtils.toString(response.getEntity());, +    assertEquals("Hello, Redirect!", actual);, +  }, +, +  @Test public void sessionExpired() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(422));, +    server.play();, +, +    HttpGet request = new HttpGet(server.getUrl("/").toURI());, +    HttpResponse response = client.execute(request);, +    assertEquals(422, response.getStatusLine().getStatusCode());, +  }, +, +  @Test public void headers() throws Exception {, +    server.enqueue(new MockResponse().addHeader("Foo", "Bar"));, +    server.enqueue(new MockResponse().addHeader("Foo", "Bar").addHeader("Foo", "Baz"));, +    server.play();, +, +    HttpGet request1 = new HttpGet(server.getUrl("/").toURI());, +    HttpResponse response1 = client.execute(request1);, +    Header[] headers1 = response1.getHeaders("Foo");, +    assertEquals(1, headers1.length);, +    assertEquals("Bar", headers1[0].getValue());, +, +    HttpGet request2 = new HttpGet(server.getUrl("/").toURI());, +    HttpResponse response2 = client.execute(request2);, +    Header[] headers2 = response2.getHeaders("Foo");, +    assertEquals(2, headers2.length);, +    assertEquals("Bar", headers2[0].getValue());, +    assertEquals("Baz", headers2[1].getValue());, +  }, +}]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the]
[+++ b/pom.xml, +    <okio.version>1.3.0</okio.version>]
[+++ b/benchmarks/pom.xml, +    <version>3.12.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0</version>, +++ b/bom/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.12.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0</version>, +++ b/bom/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.12.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0</version>, +++ b/bom/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.12.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0</version>, +++ b/bom/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.12.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.12.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0</version>, +++ b/bom/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.12.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.12.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0</version>, +++ b/bom/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.12.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.12.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0</version>, +++ b/bom/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.12.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.12.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0</version>, +++ b/bom/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.12.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.12.0</version>, +++ b/okcurl/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.12.0</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.12.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.12.0</version>]
[+++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.travis.yml, +    - secure: "S0BTJVrF4fUCwhTdmoQY6LYr5r1wgXZ/p8lc5bIgUUsc1Ckalwt7s/GDwPuLJ4702sI5t56Eye2iEIMUjeFJKqebZRsX1C5oYsYFxGi3BGlepstYpmj0gLXuSWqCLniS9zmHXCxLhLkC6KxPVjhDlbq76XQx0o3K1J8oEIj/PCE=", +    - secure: "awV7yLXURjlPbTOladsNDZk74KYCNXoiZpAP0gQFfK4Sc0fc7+kg8z/yhdWXeTxjsIZ6m0dVDHTqnH8ytnydwXpBam8JdQJ+EAWA6R3Svq1BR1bzl/PcZUoz+Xn8lMXdU3yA1p4qtQlUhMxwsE3MOVe24HSDJPAu4XeWFj1j3qo=", +before_cache:, +  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock, +  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, +    - $HOME/.gradle/caches/, +    - $HOME/.gradle/wrapper/, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.travis.yml, +    - secure: "S0BTJVrF4fUCwhTdmoQY6LYr5r1wgXZ/p8lc5bIgUUsc1Ckalwt7s/GDwPuLJ4702sI5t56Eye2iEIMUjeFJKqebZRsX1C5oYsYFxGi3BGlepstYpmj0gLXuSWqCLniS9zmHXCxLhLkC6KxPVjhDlbq76XQx0o3K1J8oEIj/PCE=", +    - secure: "awV7yLXURjlPbTOladsNDZk74KYCNXoiZpAP0gQFfK4Sc0fc7+kg8z/yhdWXeTxjsIZ6m0dVDHTqnH8ytnydwXpBam8JdQJ+EAWA6R3Svq1BR1bzl/PcZUoz+Xn8lMXdU3yA1p4qtQlUhMxwsE3MOVe24HSDJPAu4XeWFj1j3qo=", +before_cache:, +  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock, +  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, +    - $HOME/.gradle/caches/, +    - $HOME/.gradle/wrapper/, +++ b/gradle.properties, +VERSION_NAME=3.15.0-SNAPSHOT, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>, +++ b/.travis.yml, +    - secure: "S0BTJVrF4fUCwhTdmoQY6LYr5r1wgXZ/p8lc5bIgUUsc1Ckalwt7s/GDwPuLJ4702sI5t56Eye2iEIMUjeFJKqebZRsX1C5oYsYFxGi3BGlepstYpmj0gLXuSWqCLniS9zmHXCxLhLkC6KxPVjhDlbq76XQx0o3K1J8oEIj/PCE=", +    - secure: "awV7yLXURjlPbTOladsNDZk74KYCNXoiZpAP0gQFfK4Sc0fc7+kg8z/yhdWXeTxjsIZ6m0dVDHTqnH8ytnydwXpBam8JdQJ+EAWA6R3Svq1BR1bzl/PcZUoz+Xn8lMXdU3yA1p4qtQlUhMxwsE3MOVe24HSDJPAu4XeWFj1j3qo=", +before_cache:, +  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock, +  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/, +, +    - $HOME/.gradle/caches/, +    - $HOME/.gradle/wrapper/, +++ b/gradle.properties, +VERSION_NAME=3.15.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/settings.xml, +<settings>, +  <servers>, +    <server>, +      <id>sonatype-nexus-snapshots</id>, +      <username>${env.CI_DEPLOY_USERNAME}</username>, +      <password>${env.CI_DEPLOY_PASSWORD}</password>, +    </server>, +  </servers>, +</settings>]
[+++ b/pom.xml, +    <conscrypt.version>1.4.0</conscrypt.version>]
[+++ b/pom.xml, +            <version>8.18</version>]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft13;, +, +    Logger logger = Logger.getLogger(Http20Draft13.class.getName());, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft13;, +, +    Logger logger = Logger.getLogger(Http20Draft13.class.getName());, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft13;, +, +    Logger logger = Logger.getLogger(Http20Draft13.class.getName());, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft13;, +, +    Logger logger = Logger.getLogger(Http20Draft13.class.getName());, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft13;, +, +    Logger logger = Logger.getLogger(Http20Draft13.class.getName());, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ b/CHANGELOG.md, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft13;, +, +    Logger logger = Logger.getLogger(Http20Draft13.class.getName());, +++ b/okhttp-apache/pom.xml]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        boolean reuseSocket = true;, +          reuseSocket = false;, +        return reuseSocket;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        boolean reuseSocket = true;, +          reuseSocket = false;, +        return reuseSocket;, +++ b/okhttp-testing-support/src/main/java/com/squareup/okhttp/testing/RecordingHostnameVerifier.java, +/*, + * Copyright (C) 2013 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.testing;, +, +import java.util.ArrayList;, +import java.util.List;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSession;, +, +public final class RecordingHostnameVerifier implements HostnameVerifier {, +  public final List<String> calls = new ArrayList<>();, +, +  public boolean verify(String hostname, SSLSession session) {, +    calls.add("verify " + hostname);, +    return true;, +  }, +}, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        boolean reuseSocket = true;, +          reuseSocket = false;, +        return reuseSocket;, +++ b/okhttp-testing-support/src/main/java/com/squareup/okhttp/testing/RecordingHostnameVerifier.java, +/*, + * Copyright (C) 2013 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.testing;, +, +import java.util.ArrayList;, +import java.util.List;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSession;, +, +public final class RecordingHostnameVerifier implements HostnameVerifier {, +  public final List<String> calls = new ArrayList<>();, +, +  public boolean verify(String hostname, SSLSession session) {, +    calls.add("verify " + hostname);, +    return true;, +  }, +}, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.testing.RecordingHostnameVerifier;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        boolean reuseSocket = true;, +          reuseSocket = false;, +        return reuseSocket;, +++ b/okhttp-testing-support/src/main/java/com/squareup/okhttp/testing/RecordingHostnameVerifier.java, +/*, + * Copyright (C) 2013 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.testing;, +, +import java.util.ArrayList;, +import java.util.List;]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/Jdk9PlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal;, +, +import org.junit.Test;, +, +import static okhttp3.internal.PlatformTest.getPlatform;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assume.assumeTrue;, +, +public class Jdk9PlatformTest {, +  @Test, +  public void buildsWhenJdk9() {, +    assumeTrue(getPlatform().equals("jdk9"));, +, +    assertNotNull(Jdk9Platform.buildIfSupported());, +  }, +, +  @Test, +  public void findsAlpnMethods() {, +    assumeTrue(getPlatform().equals("jdk9"));, +, +    Jdk9Platform platform = Jdk9Platform.buildIfSupported();, +, +    assertEquals("getApplicationProtocol", platform.getProtocolMethod.getName());, +    assertEquals("setApplicationProtocols", platform.setProtocolMethod.getName());, +  }, +}, +++ b/okhttp-tests/src/test/java/okhttp3/internal/Jdk9PlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal;, +, +import org.junit.Test;, +, +import static okhttp3.internal.PlatformTest.getPlatform;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assume.assumeTrue;, +, +public class Jdk9PlatformTest {, +  @Test, +  public void buildsWhenJdk9() {, +    assumeTrue(getPlatform().equals("jdk9"));, +, +    assertNotNull(Jdk9Platform.buildIfSupported());, +  }, +, +  @Test, +  public void findsAlpnMethods() {, +    assumeTrue(getPlatform().equals("jdk9"));, +, +    Jdk9Platform platform = Jdk9Platform.buildIfSupported();, +, +    assertEquals("getApplicationProtocol", platform.getProtocolMethod.getName());, +    assertEquals("setApplicationProtocols", platform.setProtocolMethod.getName());, +  }, +}, +++ b/okhttp-tests/src/test/java/okhttp3/internal/JdkWithJettyBootPlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]
[+++ b/CHANGELOG.md, + *  New: Upgrade to Okio 1.12.0., +, +     ```xml, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.12.0</version>, +     </dependency>, +, +     com.squareup.okio:okio:1.12.0, +     ```, +, +++ b/CHANGELOG.md, + *  New: Upgrade to Okio 1.12.0., +, +     ```xml, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.12.0</version>, +     </dependency>, +, +     com.squareup.okio:okio:1.12.0, +     ```, +, +++ b/pom.xml, +    <okio.version>1.12.0</okio.version>]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +        // Buffer short, fixed-length request bodies. This costs memory, but permits the request to, +        // be transparently retried if there is a connection failure., +++ b/.gitignore, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +        // Buffer short, fixed-length request bodies. This costs memory, but permits the request to, +        // be transparently retried if there is a connection failure., +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +++ b/.gitignore, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +        // Buffer short, fixed-length request bodies. This costs memory, but permits the request to, +        // be transparently retried if there is a connection failure., +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +++ b/.gitignore, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +        // Buffer short, fixed-length request bodies. This costs memory, but permits the request to, +        // be transparently retried if there is a connection failure., +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +        : OkHostnameVerifier.INSTANCE;, +++ b/.gitignore, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +        // Buffer short, fixed-length request bodies. This costs memory, but permits the request to, +        // be transparently retried if there is a connection failure., +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +        : OkHostnameVerifier.INSTANCE;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, +      openSslSocketClass = Class.forName("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl");, +    return getMtu != null ? new Java5(getMtu) : new Platform();, +  private static class Java5 extends Platform {, +    private Java5(Method getMtu) {, +  /**, +   * Android version 2.3 and newer support TLS session tickets and server name, +   * indication (SNI)., +   */, +  private static class Android23 extends Java5 {, +  /**, +   * OpenJDK 7 plus {@code org.mortbay.jetty.npn/npn-boot} on the boot class, +   * path., +   */, +  private static class JdkWithJettyNpnPlatform extends Java5 {, +++ b/.gitignore, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +        // Buffer short, fixed-length request bodies. This costs memory, but permits the request to, +        // be transparently retried if there is a connection failure., +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +        : OkHostnameVerifier.INSTANCE;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, +      openSslSocketClass = Class.forName("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl");, +    return getMtu != null ? new Java5(getMtu) : new Platform();, +  private static class Java5 extends Platform {, +    private Java5(Method getMtu) {, +  /**, +   * Android version 2.3 and newer support TLS session tickets and server name, +   * indication (SNI)., +   */, +  private static class Android23 extends Java5 {, +  /**, +   * OpenJDK 7 plus {@code org.mortbay.jetty.npn/npn-boot} on the boot class, +   * path., +   */, +  private static class JdkWithJettyNpnPlatform extends Java5 {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +          hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.transports);, +++ b/.gitignore, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +        // Buffer short, fixed-length request bodies. This costs memory, but permits the request to, +        // be transparently retried if there is a connection failure., +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +        : OkHostnameVerifier.INSTANCE;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, +      openSslSocketClass = Class.forName("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl");, +    return getMtu != null ? new Java5(getMtu) : new Platform();, +  private static class Java5 extends Platform {, +    private Java5(Method getMtu) {, +  /**, +   * Android version 2.3 and newer support TLS session tickets and server name, +   * indication (SNI)., +   */, +  private static class Android23 extends Java5 {, +  /**, +   * OpenJDK 7 plus {@code org.mortbay.jetty.npn/npn-boot} on the boot class, +   * path., +   */, +  private static class JdkWithJettyNpnPlatform extends Java5 {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +          hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.transports);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    RawHeaders headers = RawHeaders.fromBytes(socketIn);, +    httpEngine.connection.setHttpMinorVersion(headers.getHttpMinorVersion());]
[+++ b/pom.xml, +            <version>8.18</version>]
[+++ b/.travis.yml, +  - ./mvnw dependency:resolve -B || true, +  - ./mvnw -DskipTests package checkstyle:check -B, +  - ./mvnw test javadoc:jar source:jar -B, +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B || true, +  - ./mvnw -DskipTests package checkstyle:check -B, +  - ./mvnw test javadoc:jar source:jar -B, +++ b/CHANGELOG.md]
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSession;, +import okhttp3.internal.tls.HeldCertificate;, +import okhttp3.internal.tls.SslClient;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +import org.junit.Ignore;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public final class ConnectionCoalescingTest {, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  private OkHttpClient client;, +, +  private HeldCertificate rootCa;, +  private HeldCertificate certificate;, +  private FakeDns dns = new FakeDns();, +  private HttpUrl url;, +  private List<InetAddress> serverIps;, +, +  @Before public void setUp() throws Exception {, +    rootCa = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .ca(3), +        .commonName("root"), +        .build();, +    certificate = new HeldCertificate.Builder(), +        .issuedBy(rootCa), +        .serialNumber("2"), +        .commonName(server.getHostName()), +        .subjectAlternativeName(server.getHostName()), +        .subjectAlternativeName("san.com"), +        .subjectAlternativeName("*.wildcard.com"), +        .subjectAlternativeName("differentdns.com"), +        .build();, +, +    serverIps = Dns.SYSTEM.lookup(server.getHostName());, +, +    dns.set(server.getHostName(), serverIps);, +    dns.set("san.com", serverIps);, +    dns.set("nonsan.com", serverIps);, +    dns.set("www.wildcard.com", serverIps);, +    dns.set("differentdns.com", Collections.<InetAddress>emptyList());, +, +    SslClient sslClient = new SslClient.Builder(), +        .addTrustedCertificate(rootCa.certificate), +        .build();, +, +    client = new OkHttpClient.Builder().dns(dns), +        .sslSocketFactory(sslClient.socketFactory, sslClient.trustManager), +        .build();, +, +    SslClient serverSslClient = new SslClient.Builder(), +        .certificateChain(certificate, rootCa), +        .build();, +    server.useHttps(serverSslClient.socketFactory, false);, +, +    url = server.url("/robots.txt");, +  }, +, +  /**, +   * Test connecting to the main host then an alternative, although only subject alternative names, +   * are used if present no special consideration of common name., +   */, +  @Test public void commonThenAlternative() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(200));, +    server.enqueue(new MockResponse().setResponseCode(200));, +, +    assert200Http2Response(execute(url), server.getHostName());, +, +    HttpUrl sanUrl = url.newBuilder().host("san.com").build();, +    assert200Http2Response(execute(sanUrl), "san.com");]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, +      assertTrue(Thread.interrupted());, +      assertTrue(Thread.interrupted());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, +      assertTrue(Thread.interrupted());, +      assertTrue(Thread.interrupted());, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +          Thread.interrupted(); // Temporarily clear the interrupted state., +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, +      assertTrue(Thread.interrupted());, +      assertTrue(Thread.interrupted());, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +          Thread.interrupted(); // Temporarily clear the interrupted state., +++ b/pom.xml, +    <okio.version>1.15.0</okio.version>]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, +        stream.close(ErrorCode.NO_ERROR);, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, +        stream.close(ErrorCode.NO_ERROR);, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    call.timeout().clearTimeout();, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, +        stream.close(ErrorCode.NO_ERROR);, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    call.timeout().clearTimeout();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +        .callTimeout(100, TimeUnit.MILLISECONDS), +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, +        stream.close(ErrorCode.NO_ERROR);, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    call.timeout().clearTimeout();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +        .callTimeout(100, TimeUnit.MILLISECONDS), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    // TODO https://github.com/square/okhttp/issues/4598, +//    java.util.NoSuchElementException, +//    at java.base/java.util.ArrayDeque.removeFirst(ArrayDeque.java:363), +//    at okhttp3.internal.tls.BasicCertificateChainCleaner.clean(BasicCertificateChainCleaner.java:58), +//    at okhttp3.CertificatePinner.check(CertificatePinner.java:166), +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, +        stream.close(ErrorCode.NO_ERROR);, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    call.timeout().clearTimeout();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +        .callTimeout(100, TimeUnit.MILLISECONDS), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    // TODO https://github.com/square/okhttp/issues/4598, +//    java.util.NoSuchElementException, +//    at java.base/java.util.ArrayDeque.removeFirst(ArrayDeque.java:363), +//    at okhttp3.internal.tls.BasicCertificateChainCleaner.clean(BasicCertificateChainCleaner.java:58), +//    at okhttp3.CertificatePinner.check(CertificatePinner.java:166), +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +  @Rule public final TestRule timeout = new Timeout(5_000);, +    stream1.close(ErrorCode.CANCEL);, +    } catch (IOException expected) {, +      assertEquals("stream was reset: PROTOCOL_ERROR", expected.getMessage());, +      assertEquals("stream was reset: PROTOCOL_ERROR", expected.getMessage());, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, +        stream.close(ErrorCode.NO_ERROR);, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    call.timeout().clearTimeout();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +        .callTimeout(100, TimeUnit.MILLISECONDS), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    // TODO https://github.com/square/okhttp/issues/4598, +//    java.util.NoSuchElementException, +//    at java.base/java.util.ArrayDeque.removeFirst(ArrayDeque.java:363), +//    at okhttp3.internal.tls.BasicCertificateChainCleaner.clean(BasicCertificateChainCleaner.java:58), +//    at okhttp3.CertificatePinner.check(CertificatePinner.java:166), +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +  @Rule public final TestRule timeout = new Timeout(5_000);, +    stream1.close(ErrorCode.CANCEL);, +    } catch (IOException expected) {, +      assertEquals("stream was reset: PROTOCOL_ERROR", expected.getMessage());, +      assertEquals("stream was reset: PROTOCOL_ERROR", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +        fail();, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, +        stream.close(ErrorCode.NO_ERROR);, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +    call.timeout().clearTimeout();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +        .callTimeout(100, TimeUnit.MILLISECONDS), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    // TODO https://github.com/square/okhttp/issues/4598, +//    java.util.NoSuchElementException, +//    at java.base/java.util.ArrayDeque.removeFirst(ArrayDeque.java:363), +//    at okhttp3.internal.tls.BasicCertificateChainCleaner.clean(BasicCertificateChainCleaner.java:58), +//    at okhttp3.CertificatePinner.check(CertificatePinner.java:166), +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +  @Rule public final TestRule timeout = new Timeout(5_000);, +    stream1.close(ErrorCode.CANCEL);, +    } catch (IOException expected) {, +      assertEquals("stream was reset: PROTOCOL_ERROR", expected.getMessage());, +      assertEquals("stream was reset: PROTOCOL_ERROR", expected.getMessage());]
[+++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is, +    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, +    used `Throwable`., + *  Fix: Fixed a caching bug where we weren't storing rewritten request headers, +    like `Accept-Encoding`., + *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, +    large downloads, + *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.), +, +++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is, +    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, +    used `Throwable`., + *  Fix: Fixed a caching bug where we weren't storing rewritten request headers, +    like `Accept-Encoding`., + *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, +    large downloads, + *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.), +, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is, +    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, +    used `Throwable`., + *  Fix: Fixed a caching bug where we weren't storing rewritten request headers, +    like `Accept-Encoding`., + *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, +    large downloads, + *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.), +, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is, +    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, +    used `Throwable`., + *  Fix: Fixed a caching bug where we weren't storing rewritten request headers, +    like `Accept-Encoding`., + *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, +    large downloads, + *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.), +, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is, +    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, +    used `Throwable`., + *  Fix: Fixed a caching bug where we weren't storing rewritten request headers, +    like `Accept-Encoding`., + *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, +    large downloads, + *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.), +, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml]
[+++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import static okhttp3.internal.Util.indexOf;, +    if (isFallback && indexOf(sslSocket.getSupportedCipherSuites(), "TLS_FALLBACK_SCSV") != -1) {, +      if (indexOf(b, toFind) != -1) {, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import static okhttp3.internal.Util.indexOf;, +    if (isFallback && indexOf(sslSocket.getSupportedCipherSuites(), "TLS_FALLBACK_SCSV") != -1) {, +      if (indexOf(b, toFind) != -1) {, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +  public static <T> int indexOf(T[] array, T value) {, +    for (int i = 0, size = array.length; i < size; i++) {, +      if (equal(array[i], value)) return i;, +    }, +    return -1;, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import static okhttp3.internal.Util.indexOf;, +    if (isFallback && indexOf(sslSocket.getSupportedCipherSuites(), "TLS_FALLBACK_SCSV") != -1) {, +      if (indexOf(b, toFind) != -1) {, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +  public static <T> int indexOf(T[] array, T value) {, +    for (int i = 0, size = array.length; i < size; i++) {, +      if (equal(array[i], value)) return i;, +    }, +    return -1;, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java, +import okhttp3.internal.Util;, +        Arrays.fill(dynamicTable, nextHeaderIndex + 1, nextHeaderIndex + 1 + entriesToEvict, null);, +          int dynamicIndex = Util.indexOf(dynamicTable, header);, +          if (dynamicIndex != -1) {, +            writeInt(dynamicIndex - nextHeaderIndex + STATIC_HEADER_TABLE.length, PREFIX_7_BITS,]
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertTrue(c2.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertTrue(c2.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c2.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertFalse(c2.socket().isClosed());, +    assertFalse(c3.socket().isClosed());, +    RealConnection result = RealConnection.testConnection(pool, route, new Socket(), idleAtNanos);, +      pool.put(result);, +    return result;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertTrue(c2.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertTrue(c2.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c2.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertFalse(c2.socket().isClosed());, +    assertFalse(c3.socket().isClosed());, +    RealConnection result = RealConnection.testConnection(pool, route, new Socket(), idleAtNanos);, +      pool.put(result);, +    return result;, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +import java.net.SocketException;, +import okhttp3.ConnectionPool;, +import okhttp3.OkHttpClient;, +import okhttp3.internal.http.HttpCodec;, +import okhttp3.internal.http2.Http2Codec;, +import okhttp3.internal.ws.RealWebSocket;, +  private final ConnectionPool connectionPool;, +  // The fields below are initialized by connect() and never reassigned., +, +  private Socket socket;, +  private Http2Connection http2Connection;, +  private BufferedSource source;, +  private BufferedSink sink;, +, +  // The fields below track connection state and are guarded by connectionPool., +, +  /** If true, no new streams can be created on this connection. Once true this is always true. */, +, +  public int successCount;, +, +  /**, +   * The maximum number of concurrent streams that can be carried by this connection. If {@code, +   * allocations.size() < allocationLimit} then new streams can be created on this connection., +   */, +  public int allocationLimit = 1;, +, +  /** Current streams carried by this connection. */, +  public final List<Reference<StreamAllocation>> allocations = new ArrayList<>();, +, +  /** Nanotime timestamp when {@code allocations.size()} reached zero. */, +  public RealConnection(ConnectionPool connectionPool, Route route) {, +    this.connectionPool = connectionPool;, +  public static RealConnection testConnection(, +      ConnectionPool connectionPool, Route route, Socket socket, long idleAtNanos) {, +    RealConnection result = new RealConnection(connectionPool, route);, +    result.socket = socket;, +    result.idleAtNanos = idleAtNanos;, +    return result;, +  }, +, +    while (true) {, +          connectTunnel(connectTimeout, readTimeout, writeTimeout);, +          connectSocket(connectTimeout, readTimeout);, +        establishProtocol(connectionSpecSelector);, +        break;, +        http2Connection = null;, +, +    if (http2Connection != null) {, +      synchronized (connectionPool) {, +        allocationLimit = http2Connection.maxConcurrentStreams();, +      }, +    }, +  private void connectTunnel(int connectTimeout, int readTimeout, int writeTimeout), +      throws IOException {, +  private void establishProtocol(ConnectionSpecSelector connectionSpecSelector) throws IOException {, +    if (route.address().sslSocketFactory() == null) {, +      return;]
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +    ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +    ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +    HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +    ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +    HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +    OkHttpRequest(Call call) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +    ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +    HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +    OkHttpRequest(Call call) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +    UrlConnectionRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +    ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +    HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +    OkHttpRequest(Call call) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +    UrlConnectionRequest(HttpUrl url) {, +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +    <!--<module name="RedundantThrows"/>-->, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +    ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +    HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +    OkHttpRequest(Call call) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +    UrlConnectionRequest(HttpUrl url) {, +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +    <!--<module name="RedundantThrows"/>-->, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    CacheHttpURLConnection(Response response) {, +    CacheHttpsURLConnection(CacheHttpURLConnection delegate) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +    ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +    HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +    OkHttpRequest(Call call) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +    UrlConnectionRequest(HttpUrl url) {, +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +    <!--<module name="RedundantThrows"/>-->, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    CacheHttpURLConnection(Response response) {, +    CacheHttpsURLConnection(CacheHttpURLConnection delegate) {, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseTest.java, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +    ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +    HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +    OkHttpRequest(Call call) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +    UrlConnectionRequest(HttpUrl url) {, +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +    <!--<module name="RedundantThrows"/>-->, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    CacheHttpURLConnection(Response response) {, +    CacheHttpsURLConnection(CacheHttpURLConnection delegate) {, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +    ApacheHttpClientRequest(HttpUrl url) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +    HttpChannel(SocketChannel channel) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +    OkHttpRequest(Call call) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +    UrlConnectionRequest(HttpUrl url) {, +++ b/checkstyle.xml, +    "-//Puppy Crawl//DTD Check Configuration 1.3//EN", +    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">, +    <!--<module name="RedundantThrows"/>-->, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    CacheHttpURLConnection(Response response) {, +    CacheHttpsURLConnection(CacheHttpURLConnection delegate) {, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java, +  DelegatingHttpsURLConnection(HttpURLConnection delegate) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/build.gradle, +dependencies {, +  testImplementation deps.okio, +  testImplementation project(':okhttp'), +  testImplementation project(':okhttp-testing-support'), +  testImplementation project(':okhttp-tls'), +  testImplementation project(':okhttp-urlconnection'), +  testImplementation project(':mockwebserver'), +  testImplementation project(':okhttp-logging-interceptor'), +  testImplementation deps.conscrypt, +  testImplementation deps.junit, +  testImplementation deps.assertj, +  testCompileOnly deps.jsr305, +}, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/build.gradle, +dependencies {, +  testImplementation deps.okio, +  testImplementation project(':okhttp'), +  testImplementation project(':okhttp-testing-support'), +  testImplementation project(':okhttp-tls'), +  testImplementation project(':okhttp-urlconnection'), +  testImplementation project(':mockwebserver'), +  testImplementation project(':okhttp-logging-interceptor'), +  testImplementation deps.conscrypt, +  testImplementation deps.junit, +  testImplementation deps.assertj, +  testCompileOnly deps.jsr305, +}, +++ b/okhttp-tests/fuzzingserver-config.json, +{, +  "url": "ws://127.0.0.1:9099",, +  "outdir": "./target/fuzzingserver-report",, +  "cases": ["*"],, +  "exclude-cases": [, +    "6.1.1",, +    "6.1.2",, +    "6.1.3",, +    "6.2.1",, +    "6.2.2",, +    "6.2.3",, +    "6.2.4",, +    "6.3.1",, +    "6.3.2",, +    "6.4.1",, +    "6.4.2",, +    "6.4.3",, +    "6.4.4",, +    "6.5.1",, +    "6.5.2",, +    "6.5.3",, +    "6.5.4",, +    "6.5.5",, +    "6.6.1",, +    "6.6.2",, +    "6.6.3",, +    "6.6.4",, +    "6.6.5",, +    "6.6.6",, +    "6.6.7",, +    "6.6.8",, +    "6.6.9",, +    "6.6.10",, +    "6.6.11",, +    "6.7.1",, +    "6.7.2",, +    "6.7.3",, +    "6.7.4",, +    "6.8.1",, +    "6.8.2",, +    "6.9.1",, +    "6.9.2",, +    "6.9.3",, +    "6.9.4",, +    "6.10.1",, +    "6.10.2",, +    "6.10.3",, +    "6.11.1",, +    "6.11.2",, +    "6.11.3",, +    "6.11.4",, +    "6.11.5",, +    "6.12.1",]
[+++ b/samples/guide/pom.xml, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +    </dependency>, +++ b/samples/guide/pom.xml, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +    </dependency>, +++ b/samples/guide/src/main/java/com/squareup/okhttp/guide/Recipes.java, +import com.google.gson.Gson;, +import com.squareup.okhttp.Cache;, +import java.io.File;, +import java.util.Map;, +  public void parseResponseWithGson() throws Exception {, +    OkHttpClient client = new OkHttpClient();, +    Gson gson = new Gson();, +, +    Request request = new Request.Builder(), +        .url("https://api.github.com/gists/c2a7c39532239ff261be"), +        .build();, +    Response response = client.newCall(request).execute();, +    Gist gist = gson.fromJson(response.body().charStream(), Gist.class);, +    for (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {, +      System.out.println(entry.getKey());, +      System.out.println(entry.getValue().content);, +    }, +  }, +, +  static class Gist {, +    Map<String, GistFile> files;, +  }, +, +  static class GistFile {, +    String content;, +  }, +, +  public void cacheResponse() throws Exception {, +    File cacheDirectory = new File(getClass().getName() + ".cacheResponse.tmp");, +    int cacheSize = 10 * 1024 * 1024; // 10 MiB, +    Cache cache = new Cache(cacheDirectory, cacheSize);, +, +    OkHttpClient client = new OkHttpClient();, +    client.setCache(cache);, +, +    Request request = new Request.Builder(), +        .url("http://publicobject.com/helloworld.txt"), +        .build();, +, +    Response response1 = client.newCall(request).execute();, +    if (response1.code() < 200 || response1.code() >= 300) {, +      throw new IOException("Unexpected code " + response1);, +    }, +    String response1Body = response1.body().string();, +    System.out.println("Response 1 response:          " + response1);, +    System.out.println("Response 1 cache response:    " + response1.cacheResponse());, +    System.out.println("Response 1 network response:  " + response1.networkResponse());, +, +    Response response2 = client.newCall(request).execute();, +    if (response2.code() < 200 || response2.code() >= 300) {, +      throw new IOException("Unexpected code " + response2);, +    }, +    String response2Body = response2.body().string();, +    System.out.println("Response 2 response:          " + response2);, +    System.out.println("Response 2 cache response:    " + response2.cacheResponse());, +    System.out.println("Response 2 network response:  " + response2.networkResponse());, +, +    System.out.println("Response 2 equals Response 1? " + response1Body.equals(response2Body));, +  }, +, +    recipes.parseResponseWithGson();, +    recipes.cacheResponse();]
[+++ b/okhttp/pom.xml, +      <version>1.1.3</version>, +++ b/okhttp/pom.xml, +      <version>1.1.3</version>, +++ b/pom.xml, +          <version>1.1.3</version>]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.HostResolver;, +        .setConnectionPool(ConnectionPool.getDefault()), +        .setHostResolver(dns);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    routeSelector = RouteSelector.get(httpsRequest, client);, +  private static class FakeDns implements HostResolver {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.HostResolver;, +        .setConnectionPool(ConnectionPool.getDefault()), +        .setHostResolver(dns);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    routeSelector = RouteSelector.get(httpsRequest, client);, +  private static class FakeDns implements HostResolver {, +++ b/okhttp/src/main/java/com/squareup/okhttp/HostResolver.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +, +/**, + * Domain name service. Prefer this over {@link InetAddress#getAllByName} to, + * make code more testable., + */, +public interface HostResolver {, +  HostResolver DEFAULT = new HostResolver() {, +    @Override public InetAddress[] getAllByName(String host) throws UnknownHostException {, +      if (host == null) throw new UnknownHostException("host == null");, +      return InetAddress.getAllByName(host);, +    }, +  };, +, +  InetAddress[] getAllByName(String host) throws UnknownHostException;, +}, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.HostResolver;, +        .setConnectionPool(ConnectionPool.getDefault()), +        .setHostResolver(dns);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +*.ipr, +*.iws, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/CHANGELOG.md, +Change Log, +==========, +, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS.]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp/src/main/java/okhttp3/FormBody.java, +      if (name == null) throw new NullPointerException("name == null");, +      if (value == null) throw new NullPointerException("value == null");, +, +      if (name == null) throw new NullPointerException("name == null");, +      if (value == null) throw new NullPointerException("value == null");, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp/src/main/java/okhttp3/FormBody.java, +      if (name == null) throw new NullPointerException("name == null");, +      if (value == null) throw new NullPointerException("value == null");, +, +      if (name == null) throw new NullPointerException("name == null");, +      if (value == null) throw new NullPointerException("value == null");, +, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +      Handshake unverifiedHandshake = Handshake.get(sslSocket.getSession());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp/src/main/java/okhttp3/FormBody.java, +      if (name == null) throw new NullPointerException("name == null");, +      if (value == null) throw new NullPointerException("value == null");, +, +      if (name == null) throw new NullPointerException("name == null");, +      if (value == null) throw new NullPointerException("value == null");, +, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +      Handshake unverifiedHandshake = Handshake.get(sslSocket.getSession());, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp/src/main/java/okhttp3/FormBody.java, +      if (name == null) throw new NullPointerException("name == null");, +      if (value == null) throw new NullPointerException("value == null");, +, +      if (name == null) throw new NullPointerException("name == null");, +      if (value == null) throw new NullPointerException("value == null");, +, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +      Handshake unverifiedHandshake = Handshake.get(sslSocket.getSession());, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java, +      short id = source.readShort();]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, +  public static void ensureAllConnectionsReleased(OkHttpClient client) {, +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +  }, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, +  public static void ensureAllConnectionsReleased(OkHttpClient client) {, +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, +  public static void ensureAllConnectionsReleased(OkHttpClient client) {, +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, +  public static void ensureAllConnectionsReleased(OkHttpClient client) {, +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +import org.junit.After;, +  @After, +  public void tearDown() {, +    TestUtil.ensureAllConnectionsReleased(client);, +  }, +, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, +  public static void ensureAllConnectionsReleased(OkHttpClient client) {, +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +import org.junit.After;, +  @After, +  public void tearDown() {, +    TestUtil.ensureAllConnectionsReleased(client);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import org.junit.After;, +  @After, +  public void tearDown() {, +    TestUtil.ensureAllConnectionsReleased(client);, +  }, +, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, +  public static void ensureAllConnectionsReleased(OkHttpClient client) {, +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +import org.junit.After;, +  @After, +  public void tearDown() {, +    TestUtil.ensureAllConnectionsReleased(client);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java]
[+++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/mockspdyserver/MockSpdyServer.java, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.QueueDispatcher;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/mockspdyserver/MockSpdyServer.java, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.QueueDispatcher;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +/*, + * Copyright (C) 2012 Google Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.mockwebserver;, +, +/**, + * Handler for mock server requests., + */, +public abstract class Dispatcher {, +    /**, +     * Returns a response to satisfy {@code request}. This method may block (for, +     * instance, to wait on a CountdownLatch)., +     */, +    public abstract MockResponse dispatch(RecordedRequest request) throws InterruptedException;, +, +    /**, +     * Returns the socket policy of the next request.  Default implementation, +     * returns {@link SocketPolicy#KEEP_OPEN}. Mischievous implementations can, +     * return other values to test HTTP edge cases., +     */, +    public SocketPolicy peekSocketPolicy() {, +        return SocketPolicy.KEEP_OPEN;, +    }, +}, +++ /dev/null, +++ b/mockwebserver/pom.xml, +++ /dev/null]
[+++ b/.travis.yml, +  - ./gradlew :okhttp:test --tests EventListenerTest, +++ b/.travis.yml, +  - ./gradlew :okhttp:test --tests EventListenerTest, +++ b/build.gradle, +    testLogging {, +      showStandardStreams = true, +    }, +  }, +, +  test {, +    filter {, +      includeTestsMatching "okhttp3.EventListenerTest.requestBodyFailHttp*", +    }, +  }, +, +  test {, +++ b/.travis.yml, +  - ./gradlew :okhttp:test --tests EventListenerTest, +++ b/build.gradle, +    testLogging {, +      showStandardStreams = true, +    }, +  }, +, +  test {, +    filter {, +      includeTestsMatching "okhttp3.EventListenerTest.requestBodyFailHttp*", +    }, +  }, +, +  test {, +++ b/okhttp/src/test/java/okhttp3/EventListenerTest.java, +import java.time.Clock;, +import okhttp3.logging.LoggingEventListener;, +  // XXX, +    client = client.newBuilder().eventListenerFactory(new LoggingEventListener.Factory()).build();, +    System.out.println("XXX requestBodyFailHttp2OverHttps start");, +    System.out.println("XXX requestBodyFailHttp2OverHttps end");, +    long start = System.currentTimeMillis();, +        long start = System.currentTimeMillis();, +          long start2 = System.currentTimeMillis();, +          System.out.println("XXX write took " + (System.currentTimeMillis() - start2));, +        System.out.println("XXX all writes took " + (System.currentTimeMillis() - start));, +, +    System.out.println("XXX took" + (System.currentTimeMillis() - start));, +        .protocols(asList(Protocol.HTTP_2, Protocol.HTTP_1_1))]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ /dev/null, +++ b/LICENSE.txt, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation]
[+++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java, +import okhttp3.internal.URLFilter;, +++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java, +import okhttp3.internal.URLFilter;, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +  private CertificatePinner(List<Pin> pins, CertificateChainCleaner certificateChainCleaner) {, +    this.pins = pins;, +    this.certificateChainCleaner = certificateChainCleaner;, +  /** Returns a certificate pinner that uses {@code certificateChainCleaner}. */, +  CertificatePinner withCertificateChainCleaner(CertificateChainCleaner certificateChainCleaner) {, +    return this.certificateChainCleaner != certificateChainCleaner, +        ? new CertificatePinner(pins, certificateChainCleaner), +        : this;, +      return new CertificatePinner(Util.immutableList(pins), null);, +++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java, +import okhttp3.internal.URLFilter;, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +  private CertificatePinner(List<Pin> pins, CertificateChainCleaner certificateChainCleaner) {, +    this.pins = pins;, +    this.certificateChainCleaner = certificateChainCleaner;, +  /** Returns a certificate pinner that uses {@code certificateChainCleaner}. */, +  CertificatePinner withCertificateChainCleaner(CertificateChainCleaner certificateChainCleaner) {, +    return this.certificateChainCleaner != certificateChainCleaner, +        ? new CertificatePinner(pins, certificateChainCleaner), +        : this;, +      return new CertificatePinner(Util.immutableList(pins), null);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.security.KeyStore;, +import java.util.Arrays;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.TrustManagerFactory;, +    } else {, +      X509TrustManager trustManager = systemDefaultTrustManager();, +      this.sslSocketFactory = systemDefaultSslSocketFactory(trustManager);, +      this.certificateChainCleaner = CertificateChainCleaner.get(trustManager);, +, +    this.certificatePinner = builder.certificatePinner.withCertificateChainCleaner(, +        certificateChainCleaner);, +  private X509TrustManager systemDefaultTrustManager() {, +    try {, +      TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(, +          TrustManagerFactory.getDefaultAlgorithm());, +      trustManagerFactory.init((KeyStore) null);, +      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();, +      if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {, +        throw new IllegalStateException("Unexpected default trust managers:", +            + Arrays.toString(trustManagers));, +      }, +      return (X509TrustManager) trustManagers[0];, +    } catch (GeneralSecurityException e) {, +      throw new AssertionError(); // The system has no TLS. Just give up., +    }, +  }, +, +  private SSLSocketFactory systemDefaultSslSocketFactory(X509TrustManager trustManager) {, +    try {, +      SSLContext sslContext = SSLContext.getInstance("TLS");, +      sslContext.init(null, new TrustManager[] { trustManager }, null);, +      return sslContext.getSocketFactory();, +    } catch (GeneralSecurityException e) {, +      throw new AssertionError(); // The system has no TLS. Just give up., +    }, +  }, +, +     * Sets the socket factory used to secure HTTPS connections. If unset, the system default will, +     * be used., +     * @deprecated {@code SSLSocketFactory} does not expose its {@link X509TrustManager}, which is, +     *     a field that OkHttp needs to build a clean certificate chain. This method instead must, +     *     use reflection to extract the trust manager. Applications should prefer to call {@link, +     *     #sslSocketFactory(SSLSocketFactory, X509TrustManager)}, which avoids such reflection., +      X509TrustManager trustManager = Platform.get().trustManager(sslSocketFactory);, +      if (trustManager == null) {, +        throw new IllegalStateException("Unable to extract the trust manager on " + Platform.get(), +            + ", sslSocketFactory is " + sslSocketFactory.getClass());, +      }, +      this.certificateChainCleaner = CertificateChainCleaner.get(trustManager);, +      return this;, +    }, +, +    /**, +     * Sets the socket factory and trust manager used to secure HTTPS connections. If unset, the, +     * system defaults will be used., +     *, +     * <p>Most applications should not call this method, and instead use the system defaults. Those, +     * classes include special optimizations that can be lost if the implementations are decorated., +     *, +     * <p>If necessary, you can create and configure the defaults yourself with the following code:, +     *, +     * <pre>   {@code, +     *, +     *   TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(, +     *       TrustManagerFactory.getDefaultAlgorithm());, +     *   trustManagerFactory.init((KeyStore) null);, +     *   TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();, +     *   if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {, +     *     throw new IllegalStateException("Unexpected default trust managers:", +     *         + Arrays.toString(trustManagers));, +     *   }, +     *   X509TrustManager trustManager = (X509TrustManager) trustManagers[0];, +     *]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private NewWebSocket newWebSocket(String path, NewWebSocket.Listener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new NewWebSocket.Listener() {, +      @Override public void onOpen(NewWebSocket webSocket, Response response) {, +      @Override public void onMessage(final NewWebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final NewWebSocket webSocket, final String text) {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new NewWebSocket.Listener() {, +      @Override public void onMessage(NewWebSocket webSocket, String text) {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new NewWebSocket.Listener() {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private NewWebSocket newWebSocket(String path, NewWebSocket.Listener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new NewWebSocket.Listener() {, +      @Override public void onOpen(NewWebSocket webSocket, Response response) {, +      @Override public void onMessage(final NewWebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final NewWebSocket webSocket, final String text) {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new NewWebSocket.Listener() {, +      @Override public void onMessage(NewWebSocket webSocket, String text) {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new NewWebSocket.Listener() {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public final NewWebSocket webSocket;, +  public RecordedResponse(Request request, Response response, NewWebSocket webSocket, String body,, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private NewWebSocket newWebSocket(String path, NewWebSocket.Listener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new NewWebSocket.Listener() {, +      @Override public void onOpen(NewWebSocket webSocket, Response response) {, +      @Override public void onMessage(final NewWebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final NewWebSocket webSocket, final String text) {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new NewWebSocket.Listener() {, +      @Override public void onMessage(NewWebSocket webSocket, String text) {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new NewWebSocket.Listener() {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public final NewWebSocket webSocket;, +  public RecordedResponse(Request request, Response response, NewWebSocket webSocket, String body,, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    // Ensure the GOAWAY frame has time to be read and processed., +    Thread.sleep(500);, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, +              transport = Transport.HTTP_20_DRAFT_06;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, +          if (transport == Transport.SPDY_3) {, +          } else {, +            builder.http20Draft06();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, +              transport = Transport.HTTP_20_DRAFT_06;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, +          if (transport == Transport.SPDY_3) {, +          } else {, +            builder.http20Draft06();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java, +package com.squareup.okhttp.internal.spdy;, +, +import java.io.DataInputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.BitSet;, +import java.util.List;, +, +/**, + * Read and write HPACK v03., + * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-03, + */, +final class Hpack {, +, +  static class HeaderEntry {, +    private final String name;, +    private final String value;, +, +    HeaderEntry(String name, String value) {, +      this.name = name;, +      this.value = value;, +    }, +, +    // TODO: This needs to be the length in UTF-8 bytes, not the length in chars., +    int length() {, +      return 32 + name.length() + value.length();, +    }, +  }, +, +  static final int PREFIX_5_BITS = 0x1f;, +  static final int PREFIX_6_BITS = 0x3f;, +  static final int PREFIX_7_BITS = 0x7f;, +  static final int PREFIX_8_BITS = 0xff;, +, +  static final List<HeaderEntry> INITIAL_CLIENT_TO_SERVER_HEADER_TABLE = Arrays.asList(, +      new HeaderEntry(":scheme", "http"),, +      new HeaderEntry(":scheme", "https"),, +      new HeaderEntry(":host", ""),, +      new HeaderEntry(":path", "/"),, +      new HeaderEntry(":method", "GET"),, +      new HeaderEntry("accept", ""),, +      new HeaderEntry("accept-charset", ""),, +      new HeaderEntry("accept-encoding", ""),, +      new HeaderEntry("accept-language", ""),, +      new HeaderEntry("cookie", ""),, +      new HeaderEntry("if-modified-since", ""),, +      new HeaderEntry("user-agent", ""),, +      new HeaderEntry("referer", ""),, +      new HeaderEntry("authorization", ""),, +      new HeaderEntry("allow", ""),, +      new HeaderEntry("cache-control", ""),, +      new HeaderEntry("connection", ""),, +      new HeaderEntry("content-length", ""),, +      new HeaderEntry("content-type", ""),, +      new HeaderEntry("date", ""),, +      new HeaderEntry("expect", ""),, +      new HeaderEntry("from", ""),, +      new HeaderEntry("if-match", ""),, +      new HeaderEntry("if-none-match", ""),, +      new HeaderEntry("if-range", ""),, +      new HeaderEntry("if-unmodified-since", ""),, +      new HeaderEntry("max-forwards", ""),, +      new HeaderEntry("proxy-authorization", ""),, +      new HeaderEntry("range", ""),, +      new HeaderEntry("via", ""), +  );, +, +  static final List<HeaderEntry> INITIAL_SERVER_TO_CLIENT_HEADER_TABLE = Arrays.asList(, +      new HeaderEntry(":status", "200"),, +      new HeaderEntry("age", ""),, +      new HeaderEntry("cache-control", ""),, +      new HeaderEntry("content-length", ""),, +      new HeaderEntry("content-type", ""),, +      new HeaderEntry("date", ""),, +      new HeaderEntry("etag", ""),]
[+++ b/pom.xml, +    <okio.version>1.6.0</okio.version>]
[+++ b/okhttp/src/main/java/okhttp3/Authenticator.java, + * <p>Implementations should check if the initial request already included an attempt to, + * authenticate. If so it is likely that further attempts will not be useful and the authenticator, + * should give up., + *, + *    if (response.request().header("Authorization") != null) {, + *      return null; // Give up, we've already failed to authenticate., + *    }, + *, + *    if (response.request().header("Proxy-Authorization") != null) {, + *      return null; // Give up, we've already failed to authenticate., + *    }, + *, +++ b/okhttp/src/main/java/okhttp3/Authenticator.java, + * <p>Implementations should check if the initial request already included an attempt to, + * authenticate. If so it is likely that further attempts will not be useful and the authenticator, + * should give up., + *, + *    if (response.request().header("Authorization") != null) {, + *      return null; // Give up, we've already failed to authenticate., + *    }, + *, + *    if (response.request().header("Proxy-Authorization") != null) {, + *      return null; // Give up, we've already failed to authenticate., + *    }, + *, +++ b/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java, +            if (response.request().header("Authorization") != null) {, +              return null; // Give up, we've already attempted to authenticate., +            }, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSession;, +import okhttp3.internal.tls.HeldCertificate;, +import okhttp3.internal.tls.SslClient;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +import org.junit.Ignore;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public final class ConnectionCoalescingTest {, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  private OkHttpClient client;, +, +  private HeldCertificate rootCa;, +  private HeldCertificate certificate;, +  private FakeDns dns = new FakeDns();, +  private HttpUrl url;, +  private List<InetAddress> serverIps;, +, +  @Before public void setUp() throws Exception {, +    rootCa = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .ca(3), +        .commonName("root"), +        .build();, +    certificate = new HeldCertificate.Builder(), +        .issuedBy(rootCa), +        .serialNumber("2"), +        .commonName(server.getHostName()), +        .subjectAlternativeName(server.getHostName()), +        .subjectAlternativeName("san.com"), +        .subjectAlternativeName("*.wildcard.com"), +        .subjectAlternativeName("differentdns.com"), +        .build();, +, +    serverIps = Dns.SYSTEM.lookup(server.getHostName());, +, +    dns.set(server.getHostName(), serverIps);, +    dns.set("san.com", serverIps);, +    dns.set("nonsan.com", serverIps);, +    dns.set("www.wildcard.com", serverIps);, +    dns.set("differentdns.com", Collections.<InetAddress>emptyList());, +, +    SslClient sslClient = new SslClient.Builder(), +        .addTrustedCertificate(rootCa.certificate), +        .build();, +, +    client = new OkHttpClient.Builder().dns(dns), +        .sslSocketFactory(sslClient.socketFactory, sslClient.trustManager), +        .build();, +, +    SslClient serverSslClient = new SslClient.Builder(), +        .certificateChain(certificate, rootCa), +        .build();, +    server.useHttps(serverSslClient.socketFactory, false);, +, +    url = server.url("/robots.txt");, +  }, +, +  /**, +   * Test connecting to the main host then an alternative, although only subject alternative names, +   * are used if present no special consideration of common name., +   */, +  @Test public void commonThenAlternative() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(200));, +    server.enqueue(new MockResponse().setResponseCode(200));, +, +    assert200Http2Response(execute(url), server.getHostName());, +, +    HttpUrl sanUrl = url.newBuilder().host("san.com").build();, +    assert200Http2Response(execute(sanUrl), "san.com");]
[+++ b/pom.xml, +    <version>20120819</version>, +++ b/pom.xml, +    <version>20120819</version>, +++ b/src/main/java/com/google/mockwebserver/Dispatcher.java, +     * Returns a response to satisfy {@code request}. This method may block (for, +     * instance, to wait on a CountdownLatch)., +     * Returns the socket policy of the next request.  Default implementation, +     * returns {@link SocketPolicy#KEEP_OPEN}. Mischievous implementations can, +     * return other values to test HTTP edge cases., +++ b/pom.xml, +    <version>20120819</version>, +++ b/src/main/java/com/google/mockwebserver/Dispatcher.java, +     * Returns a response to satisfy {@code request}. This method may block (for, +     * instance, to wait on a CountdownLatch)., +     * Returns the socket policy of the next request.  Default implementation, +     * returns {@link SocketPolicy#KEEP_OPEN}. Mischievous implementations can, +     * return other values to test HTTP edge cases., +++ b/src/main/java/com/google/mockwebserver/MockWebServer.java, +import java.io.BufferedInputStream;, +import java.io.BufferedOutputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.MalformedURLException;, +import java.net.Proxy;, +import java.net.ServerSocket;, +import java.net.Socket;, +import java.net.SocketException;, +import java.net.URL;, +import java.net.UnknownHostException;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.LinkedBlockingQueue;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.X509TrustManager;, +    /**, +     * Scripts {@code response} to be returned to a request made in sequence., +     * The first request is served by the first enqueued response; the second, +     * request by the second enqueued response; and so on., +     *, +     * @throws ClassCastException if the default dispatcher has been replaced, +     *     with {@link #setDispatcher(Dispatcher)}., +     */, +    /**, +     * Sets the dispatcher used to match incoming requests to mock responses., +     * The default dispatcher simply serves a fixed sequence of responses from, +     * a {@link #enqueue(MockResponse) queue}; custom dispatchers can vary the, +     * response based on timing or the content of the request., +     */, +        if (dispatcher == null) {, +            throw new NullPointerException();, +        }, +++ b/pom.xml, +    <version>20120819</version>, +++ b/src/main/java/com/google/mockwebserver/Dispatcher.java, +     * Returns a response to satisfy {@code request}. This method may block (for, +     * instance, to wait on a CountdownLatch)., +     * Returns the socket policy of the next request.  Default implementation, +     * returns {@link SocketPolicy#KEEP_OPEN}. Mischievous implementations can, +     * return other values to test HTTP edge cases., +++ b/src/main/java/com/google/mockwebserver/MockWebServer.java, +import java.io.BufferedInputStream;, +import java.io.BufferedOutputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.MalformedURLException;, +import java.net.Proxy;, +import java.net.ServerSocket;, +import java.net.Socket;, +import java.net.SocketException;, +import java.net.URL;, +import java.net.UnknownHostException;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.LinkedBlockingQueue;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.X509TrustManager;, +    /**, +     * Scripts {@code response} to be returned to a request made in sequence., +     * The first request is served by the first enqueued response; the second, +     * request by the second enqueued response; and so on., +     *]
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.http.ExchangeCodec;, +            && !discard(this, ExchangeCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.http.ExchangeCodec;, +            && !discard(this, ExchangeCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.http.ExchangeCodec;, +            && !discard(this, ExchangeCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectionSpecSelector.java, +final class ConnectionSpecSelector {, +  ConnectionSpecSelector(List<ConnectionSpec> connectionSpecs) {, +  ConnectionSpec configureSecureSocket(SSLSocket sslSocket) throws IOException {, +  boolean connectionFailed(IOException e) {, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.http.ExchangeCodec;, +            && !discard(this, ExchangeCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectionSpecSelector.java, +final class ConnectionSpecSelector {, +  ConnectionSpecSelector(List<ConnectionSpec> connectionSpecs) {, +  ConnectionSpec configureSecureSocket(SSLSocket sslSocket) throws IOException {, +  boolean connectionFailed(IOException e) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +import okhttp3.internal.http.ExchangeCodec;, + * on {@link ExchangeCodec}, which handles the actual I/O., +  final ExchangeCodec codec;, +      ExchangeFinder finder, ExchangeCodec codec) {, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java]
[+++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    return "Event{id='" + id + "', type='" + type + "', data='" + data + "'}";]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +        framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +        framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +        framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          framedConnection.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +          return null;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +        framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          framedConnection.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +          return null;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Ignore("currently broken"), +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +        framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          framedConnection.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +          return null;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Ignore("currently broken"), +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +        .pushObserver(observer), +        .build();, +    connection.start(false);, +    connection.start(false);, +    FramedConnection connection = connectionBuilder(peer, HTTP_2), +        .pushObserver(PushObserver.CANCEL), +        .build();, +    connection.start(false);, +    connection.start(false);, +    FramedConnection connection = connectionBuilder(peer, variant).build();, +    connection.start(false);, +    return connection;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +        framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          framedConnection.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +          return null;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Ignore("currently broken"), +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +        .pushObserver(observer), +        .build();, +    connection.start(false);, +    connection.start(false);, +    FramedConnection connection = connectionBuilder(peer, HTTP_2), +        .pushObserver(PushObserver.CANCEL), +        .build();, +    connection.start(false);, +    connection.start(false);, +    FramedConnection connection = connectionBuilder(peer, variant).build();, +    connection.start(false);, +    return connection;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Spdy3ConnectionTest.java, +    FramedConnection connection = new FramedConnection.Builder(true), +    connection.start(false);, +    FramedConnection connection = connectionBuilder(peer, SPDY3), +        .listener(listener), +        .build();, +    connection.start(false);, +    connection.start(false);, +    FramedConnection connection = new FramedConnection.Builder(true), +    connection.start(false);, +    connection.start(false);, +    FramedConnection connection = connectionBuilder(peer, variant).build();, +    connection.start(false);, +    return connection;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +        framedConnection.start();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          framedConnection.start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +          return null;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Ignore("currently broken"), +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +        .pushObserver(observer), +        .build();, +    connection.start(false);, +    connection.start(false);, +    FramedConnection connection = connectionBuilder(peer, HTTP_2), +        .pushObserver(PushObserver.CANCEL), +        .build();, +    connection.start(false);, +    connection.start(false);, +    FramedConnection connection = connectionBuilder(peer, variant).build();, +    connection.start(false);, +    return connection;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Spdy3ConnectionTest.java, +    FramedConnection connection = new FramedConnection.Builder(true), +    connection.start(false);]
[+++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.travis.yml, +#  - openjdk11, +addons:, +  apt:, +    packages:, +      - oracle-java8-installer # Updates JDK 8 to the latest available., +script: mvn test javadoc:jar source:jar -B, +++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.travis.yml, +#  - openjdk11, +addons:, +  apt:, +    packages:, +      - oracle-java8-installer # Updates JDK 8 to the latest available., +script: mvn test javadoc:jar source:jar -B, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "tlsVersion=TLS_1_2 ", +            + "cipherSuite=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 ", +            "connectFailed: null javax\\.net\\.ssl\\.SSLProtocolException: Handshake message sequence violation, 1"), +            "callFailed: javax.net.ssl.SSLProtocolException: Handshake message sequence violation, 1"), +++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.travis.yml, +#  - openjdk11, +addons:, +  apt:, +    packages:, +      - oracle-java8-installer # Updates JDK 8 to the latest available., +script: mvn test javadoc:jar source:jar -B, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "tlsVersion=TLS_1_2 ", +            + "cipherSuite=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 ", +            "connectFailed: null javax\\.net\\.ssl\\.SSLProtocolException: Handshake message sequence violation, 1"), +            "callFailed: javax.net.ssl.SSLProtocolException: Handshake message sequence violation, 1"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.travis.yml, +#  - openjdk11, +addons:, +  apt:, +    packages:, +      - oracle-java8-installer # Updates JDK 8 to the latest available., +script: mvn test javadoc:jar source:jar -B, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "tlsVersion=TLS_1_2 ", +            + "cipherSuite=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 ", +            "connectFailed: null javax\\.net\\.ssl\\.SSLProtocolException: Handshake message sequence violation, 1"), +            "callFailed: javax.net.ssl.SSLProtocolException: Handshake message sequence violation, 1"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    assertEquals(TlsVersion.TLS_1_2, fallbackRequest.getTlsVersion());, +        EnumSet.of(TlsVersion.TLS_1_0, TlsVersion.TLS_1_2); // v1.2 on OpenJDK 8., +      @Override public void saveFromResponse(HttpUrl url, List<Cookie> cookies) { }, +   * request that followed or prevented connection reuse., +   * http://code.google.com/p/android/issues/detail?id=7059, +    RecordingTrustManager trustManager = new RecordingTrustManager(handshakeCertificates.trustManager());, +   * Retry redirects if the socket is closed., +   * https://code.google.com/p/android/issues/detail?id=41576, +    Interceptor interceptor = chain -> { throw new AssertionError(); };, +        .dns(hostname -> { throw new RuntimeException("boom!"); }), +        .dns(hostname -> { throw new RuntimeException("boom!"); }), +++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.travis.yml, +#  - openjdk11, +addons:, +  apt:, +    packages:, +      - oracle-java8-installer # Updates JDK 8 to the latest available., +script: mvn test javadoc:jar source:jar -B, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "tlsVersion=TLS_1_2 ", +            + "cipherSuite=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 ", +            "connectFailed: null javax\\.net\\.ssl\\.SSLProtocolException: Handshake message sequence violation, 1"), +            "callFailed: javax.net.ssl.SSLProtocolException: Handshake message sequence violation, 1"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    assertEquals(TlsVersion.TLS_1_2, fallbackRequest.getTlsVersion());, +        EnumSet.of(TlsVersion.TLS_1_0, TlsVersion.TLS_1_2); // v1.2 on OpenJDK 8., +      @Override public void saveFromResponse(HttpUrl url, List<Cookie> cookies) { }, +   * request that followed or prevented connection reuse., +   * http://code.google.com/p/android/issues/detail?id=7059, +    RecordingTrustManager trustManager = new RecordingTrustManager(handshakeCertificates.trustManager());, +   * Retry redirects if the socket is closed., +   * https://code.google.com/p/android/issues/detail?id=41576, +    Interceptor interceptor = chain -> { throw new AssertionError(); };, +        .dns(hostname -> { throw new RuntimeException("boom!"); }), +        .dns(hostname -> { throw new RuntimeException("boom!"); }), +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/PlatformTest.java, +++ b/.buildscript/deploy_snapshot.sh, +  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests, +++ b/.travis.yml, +#  - openjdk11, +addons:]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, +  /** Synthetic response header: the local time when the request was sent. */, +  private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, +  /** Synthetic response header: the local time when the response was received. */, +  private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +, +        .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(SENT_MILLIS)) {, +        if (name.equals(RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, +  /** Synthetic response header: the local time when the request was sent. */, +  private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, +  /** Synthetic response header: the local time when the response was received. */, +  private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +, +        .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(SENT_MILLIS)) {, +        if (name.equals(RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, +  /** Synthetic response header: the local time when the request was sent. */, +  private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, +  /** Synthetic response header: the local time when the response was received. */, +  private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +, +        .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(SENT_MILLIS)) {, +        if (name.equals(RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +++ b/okhttp-tests/src/test/java/okhttp3/CipherSuiteTest.java, +/*, + * Copyright (C) 2016 Google Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import org.junit.Test;, +, +import static okhttp3.CipherSuite.TLS_KRB5_WITH_DES_CBC_MD5;, +import static okhttp3.CipherSuite.TLS_RSA_EXPORT_WITH_RC4_40_MD5;, +import static okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA256;, +import static okhttp3.CipherSuite.forJavaName;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotEquals;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.fail;, +, +public class CipherSuiteTest {, +  @Test public void nullCipherName() {, +    try {, +      forJavaName(null);, +      fail("Should have thrown");, +    } catch (NullPointerException expected) {, +    }, +  }, +, +  @Test public void hashCode_usesIdentityHashCode_legacyCase() {, +    CipherSuite cs = TLS_RSA_EXPORT_WITH_RC4_40_MD5; // This one's javaName starts with "SSL_"., +    assertEquals(cs.toString(), System.identityHashCode(cs), cs.hashCode());, +  }, +, +  @Test public void hashCode_usesIdentityHashCode_regularCase() {, +    CipherSuite cs = TLS_RSA_WITH_AES_128_CBC_SHA256; // This one's javaName matches the identifier., +    assertEquals(cs.toString(), System.identityHashCode(cs), cs.hashCode());]
[+++ b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +    data.write(ByteString.decodeHex("0a00")); // Empty pong., +    data.write(ByteString.decodeHex("ca00")); // Empty pong, flag 1 set., +    data.write(ByteString.decodeHex("aa00")); // Empty pong, flag 2 set., +    data.write(ByteString.decodeHex("9a00")); // Empty pong, flag 3 set.]
[+++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +        if (i == 513) {, +          // pause slightly after half way to make result more predictable, +          Thread.sleep(100);, +        }, +    assertEquals(512f, i, 5f); // Halfway +/- 0.5%, +++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +        if (i == 513) {, +          // pause slightly after half way to make result more predictable, +          Thread.sleep(100);, +        }, +    assertEquals(512f, i, 5f); // Halfway +/- 0.5%, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    dateFormat.setTimeZone(TimeZone.getTimeZone("America/New_York"));, +++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +        if (i == 513) {, +          // pause slightly after half way to make result more predictable, +          Thread.sleep(100);, +        }, +    assertEquals(512f, i, 5f); // Halfway +/- 0.5%, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    dateFormat.setTimeZone(TimeZone.getTimeZone("America/New_York"));, +++ b/okhttp-sse/README.md, +OkHttp Server-Sent Events, +=========================, +, +Experimental support for server-sent events., +API is not considered stable and may change at any time., +++ b/README.md, +R8 / ProGuard, +-------------, +If you are using R8 or ProGuard add the options from, +[this file](https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro)., +You might also need rules for Okio which is a dependency of this library., +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +        if (i == 513) {, +          // pause slightly after half way to make result more predictable, +          Thread.sleep(100);, +        }, +    assertEquals(512f, i, 5f); // Halfway +/- 0.5%, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    dateFormat.setTimeZone(TimeZone.getTimeZone("America/New_York"));, +++ b/okhttp-sse/README.md, +OkHttp Server-Sent Events, +=========================, +, +Experimental support for server-sent events., +API is not considered stable and may change at any time., +++ b/okhttp-sse/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3</groupId>, +    <artifactId>parent</artifactId>, +    <version>3.11.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-sse</artifactId>, +  <name>OkHttp Server-Sent Events</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp</artifactId>]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.7.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.7.0', +  <version>3.7.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.7.0', +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.7.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.7.0', +  <version>3.7.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.7.0', +++ b/okhttp-tests/src/test/java/okhttp3/CacheControlTest.java, +        + "no-transform", cacheControl.toString());, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.7.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.7.0', +  <version>3.7.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.7.0', +++ b/okhttp-tests/src/test/java/okhttp3/CacheControlTest.java, +        + "no-transform", cacheControl.toString());, +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, +      int minFreshSeconds, boolean onlyIfCached, boolean noTransform,, +        mustRevalidate, maxStaleSeconds, minFreshSeconds, onlyIfCached, noTransform, headerValue);, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.7.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.7.0', +  <version>3.7.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.7.0', +++ b/okhttp-tests/src/test/java/okhttp3/CacheControlTest.java, +        + "no-transform", cacheControl.toString());, +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, +      int minFreshSeconds, boolean onlyIfCached, boolean noTransform,, +        mustRevalidate, maxStaleSeconds, minFreshSeconds, onlyIfCached, noTransform, headerValue);, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +// TODO(jwilson): make this public after the 3.7 release., +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.7.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.7.0', +  <version>3.7.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.7.0', +++ b/okhttp-tests/src/test/java/okhttp3/CacheControlTest.java, +        + "no-transform", cacheControl.toString());, +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, +      int minFreshSeconds, boolean onlyIfCached, boolean noTransform,, +        mustRevalidate, maxStaleSeconds, minFreshSeconds, onlyIfCached, noTransform, headerValue);, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +// TODO(jwilson): make this public after the 3.7 release., +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  // TODO(jwilson): make this public after the 3.7 release., +    // TODO(jwilson): make this public after the 3.7 release., +    // TODO(jwilson): make this public after the 3.7 release., +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.7.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.7.0', +  <version>3.7.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.7.0', +++ b/okhttp-tests/src/test/java/okhttp3/CacheControlTest.java, +        + "no-transform", cacheControl.toString());, +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, +      int minFreshSeconds, boolean onlyIfCached, boolean noTransform,, +        mustRevalidate, maxStaleSeconds, minFreshSeconds, onlyIfCached, noTransform, headerValue);, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +// TODO(jwilson): make this public after the 3.7 release., +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  // TODO(jwilson): make this public after the 3.7 release., +    // TODO(jwilson): make this public after the 3.7 release., +    // TODO(jwilson): make this public after the 3.7 release., +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.7.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.7.0', +  <version>3.7.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.7.0', +++ b/okhttp-tests/src/test/java/okhttp3/CacheControlTest.java, +        + "no-transform", cacheControl.toString());, +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, +      int minFreshSeconds, boolean onlyIfCached, boolean noTransform,, +        mustRevalidate, maxStaleSeconds, minFreshSeconds, onlyIfCached, noTransform, headerValue);, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +// TODO(jwilson): make this public after the 3.7 release., +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  // TODO(jwilson): make this public after the 3.7 release., +    // TODO(jwilson): make this public after the 3.7 release., +    // TODO(jwilson): make this public after the 3.7 release., +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +      return api24IsCleartextTrafficPermitted(hostname, networkPolicyClass, networkSecurityPolicy);, +  private boolean api24IsCleartextTrafficPermitted(String hostname, Class<?> networkPolicyClass,, +      Object networkSecurityPolicy) throws InvocationTargetException, IllegalAccessException {, +    try {, +      Method isCleartextTrafficPermittedMethod = networkPolicyClass, +          .getMethod("isCleartextTrafficPermitted", String.class);, +      return (boolean) isCleartextTrafficPermittedMethod.invoke(networkSecurityPolicy, hostname);]
[+++ b/okhttp/build.gradle, +      'okhttp3.Dispatcher#cancelAll()',, +      'okhttp3.Dispatcher#executorService()',, +      'okhttp3.Dispatcher#getMaxRequests()',, +      'okhttp3.Dispatcher#getMaxRequestsPerHost()',, +      'okhttp3.Dispatcher#queuedCalls()',, +      'okhttp3.Dispatcher#queuedCallsCount()',, +      'okhttp3.Dispatcher#runningCalls()',, +      'okhttp3.Dispatcher#runningCallsCount()',, +      'okhttp3.Dispatcher#setIdleCallback(java.lang.Runnable)',, +      'okhttp3.Dispatcher#setMaxRequests(int)',, +      'okhttp3.Dispatcher#setMaxRequestsPerHost(int)',, +++ b/okhttp/build.gradle, +      'okhttp3.Dispatcher#cancelAll()',, +      'okhttp3.Dispatcher#executorService()',, +      'okhttp3.Dispatcher#getMaxRequests()',, +      'okhttp3.Dispatcher#getMaxRequestsPerHost()',, +      'okhttp3.Dispatcher#queuedCalls()',, +      'okhttp3.Dispatcher#queuedCallsCount()',, +      'okhttp3.Dispatcher#runningCalls()',, +      'okhttp3.Dispatcher#runningCallsCount()',, +      'okhttp3.Dispatcher#setIdleCallback(java.lang.Runnable)',, +      'okhttp3.Dispatcher#setMaxRequests(int)',, +      'okhttp3.Dispatcher#setMaxRequestsPerHost(int)',, +++ /dev/null, +++ b/okhttp/build.gradle, +      'okhttp3.Dispatcher#cancelAll()',, +      'okhttp3.Dispatcher#executorService()',, +      'okhttp3.Dispatcher#getMaxRequests()',, +      'okhttp3.Dispatcher#getMaxRequestsPerHost()',, +      'okhttp3.Dispatcher#queuedCalls()',, +      'okhttp3.Dispatcher#queuedCallsCount()',, +      'okhttp3.Dispatcher#runningCalls()',, +      'okhttp3.Dispatcher#runningCallsCount()',, +      'okhttp3.Dispatcher#setIdleCallback(java.lang.Runnable)',, +      'okhttp3.Dispatcher#setMaxRequests(int)',, +      'okhttp3.Dispatcher#setMaxRequestsPerHost(int)',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.kt, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import okhttp3.RealCall.AsyncCall, +import okhttp3.internal.Util, +import java.util.ArrayDeque, +import java.util.ArrayList, +import java.util.Collections, +import java.util.Deque, +import java.util.concurrent.ExecutorService, +import java.util.concurrent.SynchronousQueue, +import java.util.concurrent.ThreadPoolExecutor, +import java.util.concurrent.TimeUnit, +, +/**, + * Policy on when async requests are executed., + *, + *, + * Each dispatcher uses an [ExecutorService] to run calls internally. If you supply your own, + * executor, it should be able to run [the configured maximum][maxRequests] number of calls, + * concurrently., + */, +class Dispatcher constructor() {, +  /**, +   * Set the maximum number of requests to execute concurrently. Above this requests queue in, +   * memory, waiting for the running calls to complete., +   *, +   * If more than `maxRequests` requests are in flight when this is invoked, those requests, +   * will remain in flight., +   */, +  @get:Synchronized var maxRequests = 64, +    set(maxRequests) {, +      require(maxRequests >= 1) { "max < 1: $maxRequests" }, +      synchronized(this) {, +        field = maxRequests, +      }, +      promoteAndExecute(), +    }, +, +  /**, +   * Set the maximum number of requests for each host to execute concurrently. This limits requests, +   * by the URL's host name. Note that concurrent requests to a single IP address may still exceed, +   * this limit: multiple hostnames may share an IP address or be routed through the same HTTP, +   * proxy., +   *, +   * If more than `maxRequestsPerHost` requests are in flight when this is invoked, those, +   * requests will remain in flight.]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import okhttp3.internal.Util;, +import static org.junit.Assert.fail;, +    if (domain == null) {, +      try {, +        publicSuffixDatabase.getEffectiveTldPlusOne(null);, +        fail();, +      } catch (NullPointerException expected) {, +      }, +      return;, +    }, +, +    String canonicalDomain = Util.domainToAscii(domain);, +    if (canonicalDomain == null) return;, +, +    String result = publicSuffixDatabase.getEffectiveTldPlusOne(canonicalDomain);, +    if (registrablePart == null) {, +      assertNull(result);, +    } else {, +      assertEquals(Util.domainToAscii(registrablePart), result);, +    }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import okhttp3.internal.Util;, +import static org.junit.Assert.fail;, +    if (domain == null) {, +      try {, +        publicSuffixDatabase.getEffectiveTldPlusOne(null);, +        fail();, +      } catch (NullPointerException expected) {, +      }, +      return;, +    }, +, +    String canonicalDomain = Util.domainToAscii(domain);, +    if (canonicalDomain == null) return;, +, +    String result = publicSuffixDatabase.getEffectiveTldPlusOne(canonicalDomain);, +    if (registrablePart == null) {, +      assertNull(result);, +    } else {, +      assertEquals(Util.domainToAscii(registrablePart), result);, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +   *, +   * @param domain A canonicalized domain. An International Domain Name (IDN) should be punycode, +   *    encoded., +    if (domain == null) throw new NullPointerException("domain == null");, +    // We use UTF-8 in the list so we need to convert to Unicode., +    String unicodeDomain = IDN.toUnicode(domain);, +    String[] punycodeLabels = domain.split("\\.");, +    for (int i = firstLabelOffset; i < punycodeLabels.length; i++) {, +      effectiveTldPlusOne.append(punycodeLabels[i]).append('.');]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    <T> T expectNextEvent(Class<T> eventClass) {, +      if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    <T> T expectNextEvent(Class<T> eventClass) {, +      if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +    InputStream resource = PublicSuffixDatabaseTest.class, +    InputStream resource = PublicSuffixDatabaseTest.class, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    <T> T expectNextEvent(Class<T> eventClass) {, +      if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +    InputStream resource = PublicSuffixDatabaseTest.class, +    InputStream resource = PublicSuffixDatabaseTest.class, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +  public void secureConnectEnd(Call call, Handshake handshake,, +      Throwable throwable) {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    <T> T expectNextEvent(Class<T> eventClass) {, +      if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +    InputStream resource = PublicSuffixDatabaseTest.class, +    InputStream resource = PublicSuffixDatabaseTest.class, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +  public void secureConnectEnd(Call call, Handshake handshake,, +      Throwable throwable) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public void connect(, +      int connectTimeout, int readTimeout, int writeTimeout, boolean connectionRetryEnabled) {, +        establishProtocol(connectionSpecSelector);, +  private void establishProtocol(ConnectionSpecSelector connectionSpecSelector) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    <T> T expectNextEvent(Class<T> eventClass) {, +      if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +    InputStream resource = PublicSuffixDatabaseTest.class, +    InputStream resource = PublicSuffixDatabaseTest.class, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +  public void secureConnectEnd(Call call, Handshake handshake,, +      Throwable throwable) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public void connect(, +      int connectTimeout, int readTimeout, int writeTimeout, boolean connectionRetryEnabled) {, +        establishProtocol(connectionSpecSelector);, +  private void establishProtocol(ConnectionSpecSelector connectionSpecSelector) throws IOException {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +    result.connect(connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    <T> T expectNextEvent(Class<T> eventClass) {, +      if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +    InputStream resource = PublicSuffixDatabaseTest.class, +    InputStream resource = PublicSuffixDatabaseTest.class, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +  public void secureConnectEnd(Call call, Handshake handshake,, +      Throwable throwable) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public void connect(, +      int connectTimeout, int readTimeout, int writeTimeout, boolean connectionRetryEnabled) {, +        establishProtocol(connectionSpecSelector);, +  private void establishProtocol(ConnectionSpecSelector connectionSpecSelector) throws IOException {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +    result.connect(connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled);]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +  private WebSocketListener webSocketListener;, +    return setStatus("HTTP/1.1 " + code + " OK");, +    if (bodyStream != null) {, +      return bodyStream;, +    }, +    Buffer body = getBody();, +    return body != null ? body.inputStream() : null;, +  /**, +   * Attempts to perform a web socket upgrade on the connection. This will overwrite any previously, +   * set status or body., +   */, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +    setStatus("HTTP/1.1 101 Switching Protocols");, +    setHeader("Connection", "Upgrade");, +    setHeader("Upgrade", "websocket");, +    body = null;, +    bodyStream = null;, +    webSocketListener = listener;, +    return this;, +  }, +, +  public WebSocketListener getWebSocketListener() {, +    return webSocketListener;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +  private WebSocketListener webSocketListener;, +    return setStatus("HTTP/1.1 " + code + " OK");, +    if (bodyStream != null) {, +      return bodyStream;, +    }, +    Buffer body = getBody();, +    return body != null ? body.inputStream() : null;, +  /**, +   * Attempts to perform a web socket upgrade on the connection. This will overwrite any previously, +   * set status or body., +   */, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +    setStatus("HTTP/1.1 101 Switching Protocols");, +    setHeader("Connection", "Upgrade");, +    setHeader("Upgrade", "websocket");, +    body = null;, +    bodyStream = null;, +    webSocketListener = listener;, +    return this;, +  }, +, +  public WebSocketListener getWebSocketListener() {, +    return webSocketListener;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.Headers;, +import com.squareup.okhttp.Request;, +import com.squareup.okhttp.Response;, +import com.squareup.okhttp.internal.ws.RealWebSocket;, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +import com.squareup.okhttp.internal.ws.WebSocketProtocol;, +import java.util.concurrent.CountDownLatch;, +import okio.BufferedSource;, +, +, +, +        boolean requestWantsWebSockets = "Upgrade".equalsIgnoreCase(request.getHeader("Connection")), +            && "websocket".equalsIgnoreCase(request.getHeader("Upgrade"));, +        boolean responseWantsWebSockets = response.getWebSocketListener() != null;, +        if (requestWantsWebSockets && responseWantsWebSockets) {, +          handleWebSocketUpgrade(socket, in, out, request, response);, +        } else {, +          writeHttpResponse(socket, out, response);, +        }, +, +, +  private void handleWebSocketUpgrade(Socket socket, InputStream in, OutputStream out,, +      RecordedRequest request, MockResponse response) throws IOException {, +    String key = request.getHeader("Sec-WebSocket-Key");, +    String acceptKey = Util.shaBase64(key + WebSocketProtocol.ACCEPT_MAGIC);, +    response.setHeader("Sec-WebSocket-Accept", acceptKey);, +, +    writeHttpResponse(socket, out, response);, +, +    BufferedSource source = Okio.buffer(Okio.source(in));, +    BufferedSink sink = Okio.buffer(Okio.sink(out));, +, +    final WebSocketListener listener = response.getWebSocketListener();, +    final CountDownLatch connectionClose = new CountDownLatch(1);, +    final RealWebSocket webSocket =, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +          @Override protected void closeConnection() throws IOException {, +            connectionClose.countDown();, +          }, +        };, +, +    // Adapt the request and response into our Request and Response domain model., +    Request.Builder fancyRequestBuilder = new Request.Builder(), +        .get().url(request.getPath());]
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // A cache miss writes the cache., +    long t0 = System.currentTimeMillis();, +    assertEquals(0, response1.receivedResponseAtMillis() - t0, 250.0);, +    // A conditional cache hit updates the cache., +    Thread.sleep(500); // Make sure t0 and t1 are distinct., +    long t1 = System.currentTimeMillis();, +    assertEquals(0, response2.receivedResponseAtMillis() - t1, 250.0);, +    // A full cache hit reads the cache., +    Thread.sleep(500); // Make sure t1 and t2 are distinct., +    long t2 = System.currentTimeMillis();, +    assertEquals(0, response3.receivedResponseAtMillis() - t1, 250.0);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // A cache miss writes the cache., +    long t0 = System.currentTimeMillis();, +    assertEquals(0, response1.receivedResponseAtMillis() - t0, 250.0);, +    // A conditional cache hit updates the cache., +    Thread.sleep(500); // Make sure t0 and t1 are distinct., +    long t1 = System.currentTimeMillis();, +    assertEquals(0, response2.receivedResponseAtMillis() - t1, 250.0);, +    // A full cache hit reads the cache., +    Thread.sleep(500); // Make sure t1 and t2 are distinct., +    long t2 = System.currentTimeMillis();, +    assertEquals(0, response3.receivedResponseAtMillis() - t1, 250.0);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    long request1SentAt = System.currentTimeMillis();, +        .assertSentRequestAtMillis(request2SentAt, request2ReceivedAt), +        .assertReceivedResponseAtMillis(request2SentAt, request2ReceivedAt);, +        .assertSentRequestAtMillis(request1SentAt, request1ReceivedAt), +        .assertReceivedResponseAtMillis(request1SentAt, request1ReceivedAt);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // A cache miss writes the cache., +    long t0 = System.currentTimeMillis();, +    assertEquals(0, response1.receivedResponseAtMillis() - t0, 250.0);, +    // A conditional cache hit updates the cache., +    Thread.sleep(500); // Make sure t0 and t1 are distinct., +    long t1 = System.currentTimeMillis();, +    assertEquals(0, response2.receivedResponseAtMillis() - t1, 250.0);, +    // A full cache hit reads the cache., +    Thread.sleep(500); // Make sure t1 and t2 are distinct., +    long t2 = System.currentTimeMillis();, +    assertEquals(0, response3.receivedResponseAtMillis() - t1, 250.0);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    long request1SentAt = System.currentTimeMillis();, +        .assertSentRequestAtMillis(request2SentAt, request2ReceivedAt), +        .assertReceivedResponseAtMillis(request2SentAt, request2ReceivedAt);, +        .assertSentRequestAtMillis(request1SentAt, request1ReceivedAt), +        .assertReceivedResponseAtMillis(request1SentAt, request1ReceivedAt);, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +            .sentRequestAtMillis(networkResponse.sentRequestAtMillis()), +            .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis())]
[+++ b/okhttp-tls/src/main/java/okhttp3/tls/TlsNode.java, +import java.security.KeyManagementException;, +  private final X509KeyManager keyManager;, +  private TlsNode(X509KeyManager keyManager, X509TrustManager trustManager) {, +    this.keyManager = keyManager;, +  public X509KeyManager keyManager() {, +    return keyManager;, +  public SSLSocketFactory sslSocketFactory() {, +    return sslContext().getSocketFactory();, +  public SSLContext sslContext() {, +    try {, +      SSLContext sslContext = Platform.get().getSSLContext();, +      sslContext.init(new KeyManager[] { keyManager }, new TrustManager[] { trustManager },, +          new SecureRandom());, +      return sslContext;, +    } catch (KeyManagementException e) {, +      throw new AssertionError(e);, +    }, +  }, +, +  public static final class Builder {, +        return new TlsNode(keyManager, trustManager);, +++ b/okhttp-tls/src/main/java/okhttp3/tls/TlsNode.java, +import java.security.KeyManagementException;, +  private final X509KeyManager keyManager;, +  private TlsNode(X509KeyManager keyManager, X509TrustManager trustManager) {, +    this.keyManager = keyManager;, +  public X509KeyManager keyManager() {, +    return keyManager;, +  public SSLSocketFactory sslSocketFactory() {, +    return sslContext().getSocketFactory();, +  public SSLContext sslContext() {, +    try {, +      SSLContext sslContext = Platform.get().getSSLContext();, +      sslContext.init(new KeyManager[] { keyManager }, new TrustManager[] { trustManager },, +          new SecureRandom());, +      return sslContext;, +    } catch (KeyManagementException e) {, +      throw new AssertionError(e);, +    }, +  }, +, +  public static final class Builder {, +        return new TlsNode(keyManager, trustManager);, +++ b/okhttp-tls/src/test/java/okhttp3/tls/HeldCertificateTest.java, +public final class HeldCertificateTest {, +++ b/okhttp-tls/src/main/java/okhttp3/tls/TlsNode.java, +import java.security.KeyManagementException;, +  private final X509KeyManager keyManager;, +  private TlsNode(X509KeyManager keyManager, X509TrustManager trustManager) {, +    this.keyManager = keyManager;, +  public X509KeyManager keyManager() {, +    return keyManager;, +  public SSLSocketFactory sslSocketFactory() {, +    return sslContext().getSocketFactory();, +  public SSLContext sslContext() {, +    try {, +      SSLContext sslContext = Platform.get().getSSLContext();, +      sslContext.init(new KeyManager[] { keyManager }, new TrustManager[] { trustManager },, +          new SecureRandom());, +      return sslContext;, +    } catch (KeyManagementException e) {, +      throw new AssertionError(e);, +    }, +  }, +, +  public static final class Builder {, +        return new TlsNode(keyManager, trustManager);, +++ b/okhttp-tls/src/test/java/okhttp3/tls/HeldCertificateTest.java, +public final class HeldCertificateTest {, +++ b/okhttp-tls/src/test/java/okhttp3/tls/TlsNodeTest.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.tls;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.ServerSocket;, +import java.net.Socket;, +import java.security.PrivateKey;, +import java.util.Arrays;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +import javax.net.ServerSocketFactory;]
[+++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +   * Returns null if the domain is a public suffix., +    if (domainLabels.length == rule.length && rule[0].charAt(0) != EXCEPTION_MARKER) {, +      // The domain is a public suffix., +        throw new IllegalStateException("Unable to load " + PUBLIC_SUFFIX_RESOURCE + " resource ", +            + "from the classpath.");]
[+++ b/README.md, +An HTTP & SPDY client for Android and Java applications., +, +For more information please see [the website][1]., +, +Download [the latest JAR][2] or grab via Maven:, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, + [1]: http://square.github.io/okhttp, + [2]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, +++ b/README.md, +An HTTP & SPDY client for Android and Java applications., +, +For more information please see [the website][1]., +, +Download [the latest JAR][2] or grab via Maven:, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, + [1]: http://square.github.io/okhttp, + [2]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, +++ b/okhttp-apache/pom.xml, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.mockwebserver</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/README.md, +An HTTP & SPDY client for Android and Java applications., +, +For more information please see [the website][1]., +, +Download [the latest JAR][2] or grab via Maven:, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, + [1]: http://square.github.io/okhttp, + [2]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, +++ b/okhttp-apache/pom.xml, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.google.mockwebserver</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +package com.squareup.okhttp.apache;, +, +import com.google.mockwebserver.MockResponse;, +import com.google.mockwebserver.MockWebServer;, +import java.io.IOException;, +import org.apache.http.Header;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.util.EntityUtils;, +import org.junit.After;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class OkApacheClientTest {, +  private MockWebServer server = new MockWebServer();, +  private OkApacheClient client = new OkApacheClient();, +, +  @After public void tearDown() throws IOException {, +    server.shutdown();, +  }, +, +  @Test public void success() throws Exception {, +    server.enqueue(new MockResponse().setBody("Hello, World!"));, +    server.play();, +, +    HttpGet request = new HttpGet(server.getUrl("/").toURI());, +    HttpResponse response = client.execute(request);, +    String actual = EntityUtils.toString(response.getEntity());, +    assertEquals("Hello, World!", actual);, +  }, +, +  @Test public void redirect() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(302).addHeader("Location", "/foo"));, +    server.enqueue(new MockResponse().setBody("Hello, Redirect!"));, +    server.play();, +, +    HttpGet request = new HttpGet(server.getUrl("/").toURI());, +    HttpResponse response = client.execute(request);, +    String actual = EntityUtils.toString(response.getEntity());, +    assertEquals("Hello, Redirect!", actual);, +  }]
[+++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +   * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, +   * QueueDispatcher} but other dispatchers can be configured., +   */, +  public Dispatcher getDispatcher() {, +    return dispatcher;, +  }, +, +  /**, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +   * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, +   * QueueDispatcher} but other dispatchers can be configured., +   */, +  public Dispatcher getDispatcher() {, +    return dispatcher;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +   * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, +   * QueueDispatcher} but other dispatchers can be configured., +   */, +  public Dispatcher getDispatcher() {, +    return dispatcher;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +   * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, +   * QueueDispatcher} but other dispatchers can be configured., +   */, +  public Dispatcher getDispatcher() {, +    return dispatcher;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +   * Returns the dispatcher used to respond to HTTP requests. The default dispatcher is a {@link, +   * QueueDispatcher} but other dispatchers can be configured., +   */, +  public Dispatcher getDispatcher() {, +    return dispatcher;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>]
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      server.useHttps(sslClient.socketFactory, false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      server.useHttps(sslClient.socketFactory, false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.internal.tls.SslClient;, +          SslClient sslClient = SslClient.localhost();, +          SSLEngine engine = sslClient.sslContext.createSSLEngine();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      server.useHttps(sslClient.socketFactory, false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.internal.tls.SslClient;, +          SslClient sslClient = SslClient.localhost();, +          SSLEngine engine = sslClient.sslContext.createSSLEngine();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      SSLSocketFactory socketFactory = sslClient.socketFactory;, +          .sslSocketFactory(socketFactory, sslClient.trustManager), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      server.useHttps(sslClient.socketFactory, false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.internal.tls.SslClient;, +          SslClient sslClient = SslClient.localhost();, +          SSLEngine engine = sslClient.sslContext.createSSLEngine();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      SSLSocketFactory socketFactory = sslClient.socketFactory;, +          .sslSocketFactory(socketFactory, sslClient.trustManager), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      SSLSocketFactory socketFactory = sslClient.socketFactory;, +          .sslSocketFactory(socketFactory, sslClient.trustManager), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      server.useHttps(sslClient.socketFactory, false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.internal.tls.SslClient;, +          SslClient sslClient = SslClient.localhost();, +          SSLEngine engine = sslClient.sslContext.createSSLEngine();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      SSLSocketFactory socketFactory = sslClient.socketFactory;, +          .sslSocketFactory(socketFactory, sslClient.trustManager), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      SSLSocketFactory socketFactory = sslClient.socketFactory;, +          .sslSocketFactory(socketFactory, sslClient.trustManager), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      SSLSocketFactory socketFactory = sslClient.socketFactory;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      server.useHttps(sslClient.socketFactory, false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.internal.tls.SslClient;, +          SslClient sslClient = SslClient.localhost();]
[+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +import static org.junit.Assert.assertEquals;, +, +public final class FakeDns implements Dns {, +  private List<String> requestedHosts = new ArrayList<>();, +  private List<InetAddress> addresses = Collections.emptyList();, +, +  /** Sets the addresses to be returned by this fake DNS service. */, +  public FakeDns addresses(List<InetAddress> addresses) {, +    this.addresses = new ArrayList<>(addresses);, +    return this;, +  }, +, +  /** Sets the service to throw when a hostname is requested. */, +  public FakeDns unknownHost() {, +    this.addresses = Collections.emptyList();, +    return this;, +  }, +, +  public InetAddress address(int index) {, +    return addresses.get(index);, +  }, +, +  @Override public List<InetAddress> lookup(String hostname) throws UnknownHostException {, +    requestedHosts.add(hostname);, +    if (addresses.isEmpty()) throw new UnknownHostException();, +    return addresses;, +  }, +, +  public void assertRequests(String... expectedHosts) {, +    assertEquals(Arrays.asList(expectedHosts), requestedHosts);, +    requestedHosts.clear();, +  }, +}, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.RecordingHostnameVerifier;, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +import static org.junit.Assert.assertEquals;, +, +public final class FakeDns implements Dns {]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +  @Override public Socket createSocket() throws IOException {, +  @Override public Socket createSocket(String host, int port) throws IOException {, +  @Override public Socket createSocket(String host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +  @Override public Socket createSocket() throws IOException {, +  @Override public Socket createSocket(String host, int port) throws IOException {, +  @Override public Socket createSocket(String host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/FallbackTestClientSocketFactory.java, +      List<String> enabledCipherSuites = new ArrayList<>(suites.length);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +  @Override public Socket createSocket() throws IOException {, +  @Override public Socket createSocket(String host, int port) throws IOException {, +  @Override public Socket createSocket(String host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/FallbackTestClientSocketFactory.java, +      List<String> enabledCipherSuites = new ArrayList<>(suites.length);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    final List<URI> proxySelectionRequests = new ArrayList<>();, +    private final List<String> calls = new ArrayList<>();, +      List<String> result = new ArrayList<>();, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +  @Override public Socket createSocket() throws IOException {, +  @Override public Socket createSocket(String host, int port) throws IOException {, +  @Override public Socket createSocket(String host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/FallbackTestClientSocketFactory.java, +      List<String> enabledCipherSuites = new ArrayList<>(suites.length);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    final List<URI> proxySelectionRequests = new ArrayList<>();, +    private final List<String> calls = new ArrayList<>();, +      List<String> result = new ArrayList<>();, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/PipeTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.io;, +]
[+++ b/benchmarks/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/pom.xml, +  <version>2.0.0-RC1</version>, +    <tag>parent-2.0.0-RC1</tag>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/pom.xml, +  <version>2.0.0-RC1</version>, +    <tag>parent-2.0.0-RC1</tag>, +++ b/samples/crawler/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC1</version>]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/PipeDuplexRequestBody.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.duplex;, +, +import java.io.IOException;, +import javax.annotation.Nullable;, +import okhttp3.MediaType;, +import okhttp3.RequestBody;, +import okio.BufferedSink;, +import okio.Okio;, +import okio.Pipe;, +, +/**, + * A duplex request body that provides early writes via a pipe., + */, +public final class PipeDuplexRequestBody extends RequestBody implements DuplexRequestBody {, +  private final Pipe pipe;, +  private final @Nullable MediaType contentType;, +, +  public PipeDuplexRequestBody(@Nullable MediaType contentType, long pipeMaxBufferSize) {, +    this.pipe = new Pipe(pipeMaxBufferSize);, +    this.contentType = contentType;, +  }, +, +  public BufferedSink createSink() {, +    return Okio.buffer(pipe.sink());, +  }, +, +  @Override public @Nullable MediaType contentType() {, +    return contentType;, +  }, +, +  @Override public void writeTo(BufferedSink sink) throws IOException {, +    pipe.fold(sink);, +  }, +}, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/PipeDuplexRequestBody.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.duplex;, +, +import java.io.IOException;, +import javax.annotation.Nullable;, +import okhttp3.MediaType;, +import okhttp3.RequestBody;, +import okio.BufferedSink;, +import okio.Okio;, +import okio.Pipe;, +, +/**, + * A duplex request body that provides early writes via a pipe., + */, +public final class PipeDuplexRequestBody extends RequestBody implements DuplexRequestBody {, +  private final Pipe pipe;, +  private final @Nullable MediaType contentType;, +, +  public PipeDuplexRequestBody(@Nullable MediaType contentType, long pipeMaxBufferSize) {, +    this.pipe = new Pipe(pipeMaxBufferSize);, +    this.contentType = contentType;, +  }, +, +  public BufferedSink createSink() {, +    return Okio.buffer(pipe.sink());, +  }, +, +  @Override public @Nullable MediaType contentType() {, +    return contentType;, +  }, +, +  @Override public void writeTo(BufferedSink sink) throws IOException {, +    pipe.fold(sink);, +  }, +}]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = Objects.hashCode(id);, +    result = 31 * result + Objects.hashCode(type);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = Objects.hashCode(id);, +    result = 31 * result + Objects.hashCode(type);, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    try (Response response = client.newCall(request).execute()) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = Objects.hashCode(id);, +    result = 31 * result + Objects.hashCode(type);, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    try (Response response = client.newCall(request).execute()) {, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static org.junit.Assert.assertNotEquals;, +    assertTrue(cookie.secure());, +    assertTrue(cookie.httpOnly());, +          assertNotEquals(cookieA.hashCode(), cookieB.hashCode());, +          assertNotEquals(cookieA, cookieB);, +      assertNotEquals(null, cookieA);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {]
[+++ b/benchmarks/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-ws-tests/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.6.0-SNAPSHOT</version>]
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import org.junit.rules.TestRule;, +import org.junit.runner.Description;, +import org.junit.runners.model.Statement;, +public final class MockWebServer implements TestRule {, +  private boolean started;, +, +  private synchronized void maybeStart() {, +    if (started) return;, +    try {, +      start();, +    } catch (IOException e) {, +      throw new RuntimeException(e);, +    }, +  }, +, +  @Override public Statement apply(final Statement base, Description description) {, +    return new Statement() {, +      @Override public void evaluate() throws Throwable {, +        maybeStart();, +        try {, +          base.evaluate();, +        } finally {, +          try {, +            shutdown();, +          } catch (IOException e) {, +            logger.log(Level.WARNING, "MockWebServer shutdown failed", e);, +          }, +        }, +      }, +    };, +    maybeStart();, +    maybeStart();, +    maybeStart();, +  public void setServerSocketFactory(ServerSocketFactory serverSocketFactory) {, +    this.serverSocketFactory = serverSocketFactory;, +  }, +, +    return url(path).url();, +        .build(), +        .resolve(path);, +  private synchronized void start(InetSocketAddress inetSocketAddress) throws IOException {, +    if (started) throw new IllegalStateException("start() already called");, +    started = true;, +, +  public synchronized void shutdown() throws IOException {, +    if (!started) return;, +            : Header.TARGET_AUTHORITY, url(pushPromise.getPath()).host()));, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import org.junit.rules.TestRule;, +import org.junit.runner.Description;, +import org.junit.runners.model.Statement;, +public final class MockWebServer implements TestRule {, +  private boolean started;, +, +  private synchronized void maybeStart() {, +    if (started) return;, +    try {, +      start();, +    } catch (IOException e) {, +      throw new RuntimeException(e);, +    }, +  }, +, +  @Override public Statement apply(final Statement base, Description description) {, +    return new Statement() {, +      @Override public void evaluate() throws Throwable {, +        maybeStart();, +        try {, +          base.evaluate();, +        } finally {, +          try {, +            shutdown();, +          } catch (IOException e) {, +            logger.log(Level.WARNING, "MockWebServer shutdown failed", e);, +          }, +        }, +      }, +    };, +    maybeStart();, +    maybeStart();, +    maybeStart();, +  public void setServerSocketFactory(ServerSocketFactory serverSocketFactory) {, +    this.serverSocketFactory = serverSocketFactory;, +  }, +, +    return url(path).url();, +        .build(), +        .resolve(path);, +  private synchronized void start(InetSocketAddress inetSocketAddress) throws IOException {, +    if (started) throw new IllegalStateException("start() already called");, +    started = true;, +, +  public synchronized void shutdown() throws IOException {, +    if (!started) return;, +            : Header.TARGET_AUTHORITY, url(pushPromise.getPath()).host()));, +++ /dev/null]
[+++ b/pom.xml, +    <junit.version>4.12</junit.version>]
[+++ b/pom.xml, +, +        <plugin>, +          <groupId>org.apache.maven.plugins</groupId>, +          <artifactId>maven-release-plugin</artifactId>, +          <version>2.3.2</version>, +          <configuration>, +            <autoVersionSubmodules>true</autoVersionSubmodules>, +          </configuration>, +        </plugin>]
[+++ b/okhttp-dnsoverhttps/README.md, +OkHttp DNS over HTTPS Implementation, +====================================, +, +This module is an experimental implementation of DNS over HTTPS using OkHttp., +API is not considered stable and may change at any time., +++ b/okhttp-dnsoverhttps/README.md, +OkHttp DNS over HTTPS Implementation, +====================================, +, +This module is an experimental implementation of DNS over HTTPS using OkHttp., +API is not considered stable and may change at any time., +++ b/okhttp-dnsoverhttps/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3</groupId>, +    <artifactId>parent</artifactId>, +    <version>3.11.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-dnsoverhttps</artifactId>, +  <name>OkHttp DNS over HTTPS</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.conscrypt</groupId>, +      <artifactId>conscrypt-openjdk-uber</artifactId>, +      <version>1.1.0</version>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <version>3.0.2</version>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.dnsoverhttps</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/okhttp-dnsoverhttps/README.md, +OkHttp DNS over HTTPS Implementation, +====================================, +, +This module is an experimental implementation of DNS over HTTPS using OkHttp., +API is not considered stable and may change at any time., +++ b/okhttp-dnsoverhttps/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3</groupId>, +    <artifactId>parent</artifactId>, +    <version>3.11.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-dnsoverhttps</artifactId>, +  <name>OkHttp DNS over HTTPS</name>]
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.Call;, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.Call;, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +    callback.await(server.url("/a")), +    callback.await(server.url("/0")), +    callback.await(server.url("/0")).assertFailure("Too many follow-up requests: 21");, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.Call;, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +    callback.await(server.url("/a")), +    callback.await(server.url("/0")), +    callback.await(server.url("/0")).assertFailure("Too many follow-up requests: 21");, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingCallback.java, +  @Override public synchronized void onFailure(Call call, IOException e) {, +    responses.add(new RecordedResponse(call.request(), null, null, null, e));, +  @Override public synchronized void onResponse(Call call, Response response) throws IOException {, +    responses.add(new RecordedResponse(call.request(), response, null, body, null));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.Call;, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +    callback.await(server.url("/a")), +    callback.await(server.url("/0")), +    callback.await(server.url("/0")).assertFailure("Too many follow-up requests: 21");, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingCallback.java, +  @Override public synchronized void onFailure(Call call, IOException e) {, +    responses.add(new RecordedResponse(call.request(), null, null, null, e));, +  @Override public synchronized void onResponse(Call call, Response response) throws IOException {, +    responses.add(new RecordedResponse(call.request(), response, null, body, null));, +++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, +      @Override public void onResponse(Call call, Response response) throws IOException {, +      @Override public void onFailure(Call call, IOException e) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.Call;, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +    callback.await(server.url("/a")), +    callback.await(server.url("/0")), +    callback.await(server.url("/0")).assertFailure("Too many follow-up requests: 21");, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingCallback.java, +  @Override public synchronized void onFailure(Call call, IOException e) {, +    responses.add(new RecordedResponse(call.request(), null, null, null, e));, +  @Override public synchronized void onResponse(Call call, Response response) throws IOException {, +    responses.add(new RecordedResponse(call.request(), response, null, body, null));, +++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, +      @Override public void onResponse(Call call, Response response) throws IOException {, +      @Override public void onFailure(Call call, IOException e) {, +++ b/okhttp/src/main/java/okhttp3/Callback.java, +  void onFailure(Call call, IOException e);, +  void onResponse(Call call, Response response) throws IOException;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.Call;, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      @Override public void onFailure(Call call, IOException e) {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +      @Override public void onFailure(Call call, IOException e) {]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.EXPECT_CONTINUE;, +    boolean readBody = true;, +          && lowercaseHeader.substring(7).trim().equalsIgnoreCase("100-continue")) {, +        readBody = false;, +    if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +      readBody = true;, +    if (!readBody) {, +      // Don't read the body unless we've invited the client to send it., +    } else if (contentLength != -1) {, +      boolean readBody = true;, +        if (name.utf8().equals("expect") && value.equalsIgnoreCase("100-continue")) {, +          // Don't read the body unless we've invited the client to send it., +          readBody = false;, +        }, +      }, +, +      if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +        stream.sendResponseHeaders(Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue"))), true);, +        stream.getConnection().flush();, +        readBody = true;, +      if (readBody) {, +      }, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.EXPECT_CONTINUE;, +    boolean readBody = true;, +          && lowercaseHeader.substring(7).trim().equalsIgnoreCase("100-continue")) {, +        readBody = false;, +    if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +      readBody = true;, +    if (!readBody) {, +      // Don't read the body unless we've invited the client to send it., +    } else if (contentLength != -1) {, +      boolean readBody = true;, +        if (name.utf8().equals("expect") && value.equalsIgnoreCase("100-continue")) {, +          // Don't read the body unless we've invited the client to send it., +          readBody = false;, +        }, +      }, +, +      if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +        stream.sendResponseHeaders(Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue"))), true);, +        stream.getConnection().flush();, +        readBody = true;, +      if (readBody) {, +      }, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +  RESET_STREAM_AT_START,, +, +  /**, +   * Transmit a {@code HTTP/1.1 100 Continue} response before reading the HTTP request body., +   * Typically this response is sent when a client makes a request with the header {@code, +   * Expect: 100-continue}., +   */, +  EXPECT_CONTINUE, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.EXPECT_CONTINUE;, +    boolean readBody = true;, +          && lowercaseHeader.substring(7).trim().equalsIgnoreCase("100-continue")) {, +        readBody = false;, +    if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +      readBody = true;, +    if (!readBody) {, +      // Don't read the body unless we've invited the client to send it., +    } else if (contentLength != -1) {, +      boolean readBody = true;, +        if (name.utf8().equals("expect") && value.equalsIgnoreCase("100-continue")) {, +          // Don't read the body unless we've invited the client to send it., +          readBody = false;, +        }, +      }, +, +      if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +        stream.sendResponseHeaders(Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue"))), true);, +        stream.getConnection().flush();, +        readBody = true;, +      if (readBody) {, +      }, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void getClientRequestTimeoutWithBackPressure() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(408), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "1"), +        .setBody("You took too long!"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +, +    assertEquals("You took too long!", response.body().string());, +  }, +, +  @Test public void maxUnavailableTimeoutRetries() throws IOException {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(503), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "0"), +        .setBody("You took too long!"));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(503), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "0"), +        .setBody("You took too long!"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +, +    assertEquals(503, response.code());, +    assertEquals("You took too long!", response.body().string());, +, +    assertEquals(2, server.getRequestCount());, +  }, +, +  @Test public void retryOnUnavailableWith0RetryAfter() throws IOException {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(503), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "0"), +        .setBody("You took too long!"));, +    server.enqueue(new MockResponse().setBody("Body"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +, +    assertEquals("Body", response.body().string());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void getClientRequestTimeoutWithBackPressure() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(408), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "1"), +        .setBody("You took too long!"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +, +    assertEquals("You took too long!", response.body().string());, +  }, +, +  @Test public void maxUnavailableTimeoutRetries() throws IOException {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(503), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "0"), +        .setBody("You took too long!"));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(503), +        .setHeader("Connection", "Close"), +        .setHeader("Retry-After", "0"), +        .setBody("You took too long!"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Response response = client.newCall(request).execute();, +, +    assertEquals(503, response.code());, +    assertEquals("You took too long!", response.body().string());, +, +    assertEquals(2, server.getRequestCount());, +  }]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    CountDownLatch responseDequeuedLatch = new CountDownLatch(1);, +    CountDownLatch requestCanceledLatch = new CountDownLatch(1);, +, +    QueueDispatcher dispatcher = new QueueDispatcher() {, +      @Override, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +        // This guarantees a deterministic sequence when handling the canceled request:, +        // 1. Server reads request and dequeues first response, +        // 2. Client cancels request, +        // 3. Server tries to send response on the canceled stream, +        // Otherwise, there is no guarantee for the sequence. For example, the server may use the, +        // first mocked response to respond to the second request., +        MockResponse response = super.dispatch(request);, +        responseDequeuedLatch.countDown();, +        requestCanceledLatch.await();, +        return response;, +      }, +    };, +    server.setDispatcher(dispatcher);, +, +    dispatcher.enqueueResponse(new MockResponse(), +    dispatcher.enqueueResponse(new MockResponse(), +    callAndCancel(0, responseDequeuedLatch, requestCanceledLatch);, +    callAndCancel(0, new CountDownLatch(0), new CountDownLatch(0));, +    callAndCancel(1, new CountDownLatch(0), new CountDownLatch(0));, +  private void callAndCancel(int expectedSequenceNumber, CountDownLatch responseDequeuedLatch,, +      CountDownLatch requestCanceledLatch) throws Exception {, +    responseDequeuedLatch.await();, +    requestCanceledLatch.countDown();, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    CountDownLatch responseDequeuedLatch = new CountDownLatch(1);, +    CountDownLatch requestCanceledLatch = new CountDownLatch(1);, +, +    QueueDispatcher dispatcher = new QueueDispatcher() {, +      @Override, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +        // This guarantees a deterministic sequence when handling the canceled request:, +        // 1. Server reads request and dequeues first response, +        // 2. Client cancels request, +        // 3. Server tries to send response on the canceled stream, +        // Otherwise, there is no guarantee for the sequence. For example, the server may use the, +        // first mocked response to respond to the second request., +        MockResponse response = super.dispatch(request);, +        responseDequeuedLatch.countDown();, +        requestCanceledLatch.await();, +        return response;, +      }, +    };, +    server.setDispatcher(dispatcher);, +, +    dispatcher.enqueueResponse(new MockResponse(), +    dispatcher.enqueueResponse(new MockResponse(), +    callAndCancel(0, responseDequeuedLatch, requestCanceledLatch);, +    callAndCancel(0, new CountDownLatch(0), new CountDownLatch(0));, +    callAndCancel(1, new CountDownLatch(0), new CountDownLatch(0));, +  private void callAndCancel(int expectedSequenceNumber, CountDownLatch responseDequeuedLatch,, +      CountDownLatch requestCanceledLatch) throws Exception {, +    responseDequeuedLatch.await();, +    requestCanceledLatch.countDown();, +++ b/pom.xml, +            <version>8.15</version>]
[+++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "cipherSuite=TLS_.* ", +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "cipherSuite=TLS_.* ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestingRule;, +  @Rule public final OkHttpClientTestingRule clientTestingRule = new OkHttpClientTestingRule();, +  private OkHttpClient client = clientTestingRule.client;, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "cipherSuite=TLS_.* ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestingRule;, +  @Rule public final OkHttpClientTestingRule clientTestingRule = new OkHttpClientTestingRule();, +  private OkHttpClient client = clientTestingRule.client;, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestingRule.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import org.junit.rules.TestRule;, +import org.junit.runner.Description;, +import org.junit.runners.model.Statement;, +, +import static okhttp3.TestUtil.defaultClient;, +, +public class OkHttpClientTestingRule implements TestRule {, +  public OkHttpClient client = defaultClient();, +, +  @Override, +  public Statement apply(Statement base, Description description) {, +    return statement(base);, +  }, +, +  private Statement statement(final Statement base) {, +    return new Statement() {, +      public void evaluate() throws Throwable {, +        try {, +          base.evaluate();, +        } finally {, +          TestUtil.ensureAllConnectionsReleased(client);, +        }, +      }, +    };, +  }, +}, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "cipherSuite=TLS_.* ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import okhttp3.OkHttpClientTestingRule;, +  @Rule public final OkHttpClientTestingRule clientTestingRule = new OkHttpClientTestingRule();, +  private OkHttpClient client = clientTestingRule.client;, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestingRule.java, +/*, + * Copyright (C) 2019 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import org.junit.rules.TestRule;, +import org.junit.runner.Description;, +import org.junit.runners.model.Statement;, +, +import static okhttp3.TestUtil.defaultClient;, +, +public class OkHttpClientTestingRule implements TestRule {, +  public OkHttpClient client = defaultClient();, +, +  @Override, +  public Statement apply(Statement base, Description description) {, +    return statement(base);, +  }, +, +  private Statement statement(final Statement base) {, +    return new Statement() {, +      public void evaluate() throws Throwable {, +        try {]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(null, cipherSuite,, +          nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(null, cipherSuite,, +          nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +    Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(null, cipherSuite,, +          nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +    Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.getProtocol() : Protocol.HTTP_1_1;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(null, cipherSuite,, +          nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +    Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.getProtocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  /** Exercise the cache format in OkHttp 2.7 and all earlier releases. */, +  @Test public void testGoldenCacheHttpsResponseOkHttp27() throws Exception {, +    HttpUrl url = server.url("/");, +    String urlKey = Util.md5Hex(url.toString());, +    String entryMetadata = "", +        + "" + url + "\n", +        + "GET\n", +        + "0\n", +        + "HTTP/1.1 200 OK\n", +        + "4\n", +        + "Content-Length: 3\n", +        + "OkHttp-Received-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Sent-Millis: " + System.currentTimeMillis() + "\n", +        + "Cache-Control: max-age=60\n", +        + "\n", +        + "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n", +        + "1\n", +        + "MIIBnDCCAQWgAwIBAgIBATANBgkqhkiG9w0BAQsFADAUMRIwEAYDVQQDEwlsb2NhbGhvc3QwHhcNMTUxMjIyMDEx", +        + "MTQwWhcNMTUxMjIzMDExMTQwWjAUMRIwEAYDVQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ", +        + "AoGBAJTn2Dh8xYmegvpOSmsKb2Os6Cxf1L4fYbnHr/turInUD5r1P7ZAuxurY880q3GT5bUDoirS3IfucddrT1Ac", +        + "AmUzEmk/FDjggiP8DlxFkY/XwXBlhRDVIp/mRuASPMGInckc0ZaixOkRFyrxADj+r1eaSmXCIvV5yTY6IaIokLj1", +        + "AgMBAAEwDQYJKoZIhvcNAQELBQADgYEAFblnedqtfRqI9j2WDyPPoG0NTZf9xwjeUu+ju+Ktty8u9k7Lgrrd/DH2", +        + "mQEtBD1Ctvp91MJfAClNg3faZzwClUyu5pd0QXRZEUwSwZQNen2QWDHRlVsItclBJ4t+AJLqTbwofWi4m4K8REOl", +        + "593hD55E4+lY22JZiVQyjsQhe6I=\n", +        + "0\n";, +    String entryBody = "abc";, +    String journalBody = "", +        + "libcore.io.DiskLruCache\n", +        + "1\n", +        + "201105\n", +        + "2\n", +        + "\n", +        + "DIRTY " + urlKey + "\n", +        + "CLEAN " + urlKey + " " + entryMetadata.length() + " " + entryBody.length() + "\n";, +    writeFile(cache.getDirectory(), urlKey + ".0", entryMetadata);, +    writeFile(cache.getDirectory(), urlKey + ".1", entryBody);, +    writeFile(cache.getDirectory(), "journal", journalBody);, +    cache.close();, +    cache = new Cache(cache.getDirectory(), Integer.MAX_VALUE, fileSystem);, +    client.setCache(cache);, +, +    Response response = get(url);, +    assertEquals(entryBody, response.body().string());, +    assertEquals("3", response.header("Content-Length"));, +  }, +, +  /** The TLS version is present in OkHttp 3.0 and beyond. */, +  @Test public void testGoldenCacheHttpsResponseOkHttp30() throws Exception {, +    HttpUrl url = server.url("/");, +    String urlKey = Util.md5Hex(url.toString());, +    String entryMetadata = "", +        + "" + url + "\n", +        + "GET\n", +        + "0\n", +        + "HTTP/1.1 200 OK\n", +        + "4\n", +        + "Content-Length: 3\n", +        + "OkHttp-Received-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Sent-Millis: " + System.currentTimeMillis() + "\n", +        + "Cache-Control: max-age=60\n", +        + "\n", +        + "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n", +        + "1\n", +        + "MIIBnDCCAQWgAwIBAgIBATANBgkqhkiG9w0BAQsFADAUMRIwEAYDVQQDEwlsb2NhbGhvc3QwHhcNMTUxMjIyMDEx", +        + "MTQwWhcNMTUxMjIzMDExMTQwWjAUMRIwEAYDVQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ", +        + "AoGBAJTn2Dh8xYmegvpOSmsKb2Os6Cxf1L4fYbnHr/turInUD5r1P7ZAuxurY880q3GT5bUDoirS3IfucddrT1Ac", +        + "AmUzEmk/FDjggiP8DlxFkY/XwXBlhRDVIp/mRuASPMGInckc0ZaixOkRFyrxADj+r1eaSmXCIvV5yTY6IaIokLj1", +        + "AgMBAAEwDQYJKoZIhvcNAQELBQADgYEAFblnedqtfRqI9j2WDyPPoG0NTZf9xwjeUu+ju+Ktty8u9k7Lgrrd/DH2", +        + "mQEtBD1Ctvp91MJfAClNg3faZzwClUyu5pd0QXRZEUwSwZQNen2QWDHRlVsItclBJ4t+AJLqTbwofWi4m4K8REOl", +        + "593hD55E4+lY22JZiVQyjsQhe6I=\n"]
[+++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +                  webSocket.message(response);, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +                  webSocket.message(response);, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +    client.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, +    client.message(RequestBody.create(BINARY, "Hello!"));, +      client.message(null);, +      client.message(RequestBody.create(null, "Hey!"));, +      client.message(RequestBody.create(MediaType.parse("text/plain"), "Hey!"));, +    client.ping(ByteString.encodeUtf8("Hello, WebSockets!"));, +      client.ping(null);, +    server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, +    server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, +    client.ping(ByteString.EMPTY);, +    client.ping(ByteString.encodeUtf8("WebSockets are fun!"));, +    webSocket.message(RequestBody.create(TEXT, "abc"));, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +                  webSocket.message(response);, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +    client.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, +    client.message(RequestBody.create(BINARY, "Hello!"));, +      client.message(null);, +      client.message(RequestBody.create(null, "Hey!"));, +      client.message(RequestBody.create(MediaType.parse("text/plain"), "Hey!"));, +    client.ping(ByteString.encodeUtf8("Hello, WebSockets!"));, +      client.ping(null);, +    server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, +    server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, +    client.ping(ByteString.EMPTY);, +    client.ping(ByteString.encodeUtf8("WebSockets are fun!"));, +    webSocket.message(RequestBody.create(TEXT, "abc"));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +    client.message(message);, +        client.ping(ByteString.encodeUtf8("Pong?"));, +    client.message(message);, +    client.ping(ByteString.encodeUtf8("Hello!"));, +      client.ping(ByteString.encodeUtf8("Pong?"));, +      client.message(RequestBody.create(TEXT, "Hello!"));, +      client.ping(ByteString.encodeUtf8("Ping!"));, +      client.message(RequestBody.create(TEXT, "Hello!"));, +      client.ping(ByteString.encodeUtf8("Ping!"));, +      client.message(RequestBody.create(TEXT, "Hello!"));, +      client.message(RequestBody.create(TEXT, "Hello!"));, +      client.ping(ByteString.encodeUtf8("Ping!"));, +      client.ping(ByteString.encodeUtf8("Pong?"));, +      client.message(RequestBody.create(TEXT, "Hi!"));, +    client.message(message);, +    server.message(RequestBody.create(TEXT, "Hello!"));, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +                  webSocket.message(response);, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +    client.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, +    client.message(RequestBody.create(BINARY, "Hello!"));, +      client.message(null);, +      client.message(RequestBody.create(null, "Hey!"));, +      client.message(RequestBody.create(MediaType.parse("text/plain"), "Hey!"));, +    client.ping(ByteString.encodeUtf8("Hello, WebSockets!"));, +      client.ping(null);, +    server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, +    server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, +    client.ping(ByteString.EMPTY);, +    client.ping(ByteString.encodeUtf8("WebSockets are fun!"));, +    webSocket.message(RequestBody.create(TEXT, "abc"));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +    client.message(message);, +        client.ping(ByteString.encodeUtf8("Pong?"));, +    client.message(message);, +    client.ping(ByteString.encodeUtf8("Hello!"));, +      client.ping(ByteString.encodeUtf8("Pong?"));, +      client.message(RequestBody.create(TEXT, "Hello!"));, +      client.ping(ByteString.encodeUtf8("Ping!"));, +      client.message(RequestBody.create(TEXT, "Hello!"));, +      client.ping(ByteString.encodeUtf8("Ping!"));, +      client.message(RequestBody.create(TEXT, "Hello!"));, +      client.message(RequestBody.create(TEXT, "Hello!"));, +      client.ping(ByteString.encodeUtf8("Ping!"));, +      client.ping(ByteString.encodeUtf8("Pong?"));, +      client.message(RequestBody.create(TEXT, "Hi!"));, +    client.message(message);, +    server.message(RequestBody.create(TEXT, "Hello!"));, +++ b/okhttp/src/main/java/okhttp3/WebSocket.java, +  void message(RequestBody message) throws IOException;, +  void ping(ByteString payload) throws IOException;, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +                  webSocket.message(response);, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +    client.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, +    client.message(RequestBody.create(BINARY, "Hello!"));, +      client.message(null);, +      client.message(RequestBody.create(null, "Hey!"));, +      client.message(RequestBody.create(MediaType.parse("text/plain"), "Hey!"));, +    client.ping(ByteString.encodeUtf8("Hello, WebSockets!"));, +      client.ping(null);, +    server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, +    server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));, +    client.ping(ByteString.EMPTY);, +    client.ping(ByteString.encodeUtf8("WebSockets are fun!"));, +    webSocket.message(RequestBody.create(TEXT, "abc"));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +      ByteArrayOutputStream bodyOut = new ByteArrayOutputStream();, +      byte[] buffer = new byte[8192];, +      int count;, +      while ((count = bodyIn.read(buffer)) != -1) {, +        bodyOut.write(buffer, 0, count);, +      }, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.size(),, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +      ByteArrayOutputStream bodyOut = new ByteArrayOutputStream();, +      byte[] buffer = new byte[8192];, +      int count;, +      while ((count = bodyIn.read(buffer)) != -1) {, +        bodyOut.write(buffer, 0, count);, +      }, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.size(),, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import org.junit.After;, +import org.junit.Test;, +import static org.junit.Assert.assertEquals;, +public class CustomDispatcherTest {, +  @After public void tearDown() throws Exception {, +  @Test public void simpleDispatch() throws Exception {, +  @Test public void outOfOrderResponses() throws Exception {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +      ByteArrayOutputStream bodyOut = new ByteArrayOutputStream();, +      byte[] buffer = new byte[8192];, +      int count;, +      while ((count = bodyIn.read(buffer)) != -1) {, +        bodyOut.write(buffer, 0, count);, +      }, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.size(),, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import org.junit.After;, +import org.junit.Test;, +import static org.junit.Assert.assertEquals;, +public class CustomDispatcherTest {, +  @After public void tearDown() throws Exception {, +  @Test public void simpleDispatch() throws Exception {, +  @Test public void outOfOrderResponses() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +        .assertSuccessful(), +  @Test public void getReturns500() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(500));, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    executeSynchronously(request), +        .assertCode(500), +        .assertNotSuccessful();, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +      ByteArrayOutputStream bodyOut = new ByteArrayOutputStream();, +      byte[] buffer = new byte[8192];, +      int count;, +      while ((count = bodyIn.read(buffer)) != -1) {, +        bodyOut.write(buffer, 0, count);, +      }, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.size(),, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import org.junit.After;, +import org.junit.Test;, +import static org.junit.Assert.assertEquals;, +public class CustomDispatcherTest {, +  @After public void tearDown() throws Exception {, +  @Test public void simpleDispatch() throws Exception {, +  @Test public void outOfOrderResponses() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +        .assertSuccessful(), +  @Test public void getReturns500() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(500));, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    executeSynchronously(request), +        .assertCode(500), +        .assertNotSuccessful();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +  public RecordedResponse assertSuccessful() {, +    assertTrue(response.isSuccessful());, +    return this;]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.mockwebserver.internal.tls.HeldCertificate;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import static org.junit.Assert.assertNotNull;, +  /**, +   * We had a bug where we were passing a null route to the authenticator., +   * https://github.com/square/okhttp/issues/3809, +   */, +  @Test public void authenticateWithNoConnection() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Connection: close"), +        .setResponseCode(401), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END));, +, +    RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(null);, +, +    client = client.newBuilder(), +        .authenticator(authenticator), +        .build();, +, +    executeSynchronously("/"), +        .assertCode(401);, +, +    assertNotNull(authenticator.onlyRoute());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.mockwebserver.internal.tls.HeldCertificate;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import static org.junit.Assert.assertNotNull;, +  /**, +   * We had a bug where we were passing a null route to the authenticator., +   * https://github.com/square/okhttp/issues/3809, +   */, +  @Test public void authenticateWithNoConnection() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Connection: close"), +        .setResponseCode(401), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END));, +, +    RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(null);, +, +    client = client.newBuilder(), +        .authenticator(authenticator), +        .build();, +, +    executeSynchronously("/"), +        .assertCode(401);, +, +    assertNotNull(authenticator.onlyRoute());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +    assertEquals(Proxy.NO_PROXY, authenticator.onlyRoute().proxy());, +  @Test public void authenticateNoConnection() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Connection: close"), +        .setResponseCode(401), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END));, +, +    Authenticator.setDefault(new RecordingAuthenticator(null));, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .authenticator(new JavaNetAuthenticator()), +        .build());, +    connection = urlFactory.open(server.url("/").url());, +    assertEquals(401, connection.getResponseCode());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.mockwebserver.internal.tls.HeldCertificate;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import static org.junit.Assert.assertNotNull;, +  /**, +   * We had a bug where we were passing a null route to the authenticator., +   * https://github.com/square/okhttp/issues/3809, +   */, +  @Test public void authenticateWithNoConnection() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Connection: close"), +        .setResponseCode(401), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END));, +, +    RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(null);, +, +    client = client.newBuilder(), +        .authenticator(authenticator), +        .build();, +, +    executeSynchronously("/"), +        .assertCode(401);, +, +    assertNotNull(authenticator.onlyRoute());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +    assertEquals(Proxy.NO_PROXY, authenticator.onlyRoute().proxy());, +  @Test public void authenticateNoConnection() throws Exception {, +    server.enqueue(new MockResponse()]
[+++ b/pom.xml, +    <!-- ALPN Versions targeted for each Java 8 minor release -->, +    <!-- Check versions with this page: -->, +    <!-- http://www.eclipse.org/jetty/documentation/current/alpn-chapter.html#alpn-chapterchapterversions -->, +        <profile>, +      <id>alpn-when-jdk8_05</id>, +      <activation>, +        <jdk>1.8.0_05</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.0.v20141016</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_11</id>, +      <activation>, +        <jdk>1.8.0_11</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.0.v20141016</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_20</id>, +      <activation>, +        <jdk>1.8.0_20</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.0.v20141016</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_25</id>, +      <activation>, +        <jdk>1.8.0_25</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.2.v20141202</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_31</id>, +      <activation>, +        <jdk>1.8.0_31</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.3.v20150130</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_40</id>, +      <activation>, +        <jdk>1.8.0_40</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.3.v20150130</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_45</id>, +      <activation>, +        <jdk>1.8.0_45</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.3.v20150130</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_51</id>, +      <activation>, +        <jdk>1.8.0_51</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.4.v20150727</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_60</id>, +      <activation>, +        <jdk>1.8.0_60</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.5.v20150921</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_65</id>, +      <activation>, +        <jdk>1.8.0_65</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.6.v20151105</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_66</id>, +      <activation>, +        <jdk>1.8.0_66</jdk>, +      </activation>, +      <properties>]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/README.md, +  URL baseUrl = server.getUrl("/v1/chat/");, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/README.md, +  URL baseUrl = server.getUrl("/v1/chat/");, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/README.md, +  URL baseUrl = server.getUrl("/v1/chat/");, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/README.md, +  URL baseUrl = server.getUrl("/v1/chat/");, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/README.md, +  URL baseUrl = server.getUrl("/v1/chat/");, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.4.0</version>, +compile 'com.squareup.okhttp:okhttp:2.4.0', +  <version>2.4.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.4.0', +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/README.md, +  URL baseUrl = server.getUrl("/v1/chat/");, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml]
[+++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  @Override public void setFixedLengthStreamingMode(long contentLength) {, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  @Override public void setFixedLengthStreamingMode(long contentLength) {, +++ b/samples/guide/pom.xml, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +    </dependency>, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  @Override public void setFixedLengthStreamingMode(long contentLength) {, +++ b/samples/guide/pom.xml, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +    </dependency>, +++ b/samples/guide/src/main/java/com/squareup/okhttp/guide/Recipes.java, +import com.google.gson.Gson;, +import com.squareup.okhttp.Cache;, +import java.io.File;, +import java.util.Map;, +  public void parseResponseWithGson() throws Exception {, +    OkHttpClient client = new OkHttpClient();, +    Gson gson = new Gson();, +, +    Request request = new Request.Builder(), +        .url("https://api.github.com/gists/c2a7c39532239ff261be"), +        .build();, +    Response response = client.newCall(request).execute();, +    Gist gist = gson.fromJson(response.body().charStream(), Gist.class);, +    for (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {, +      System.out.println(entry.getKey());, +      System.out.println(entry.getValue().content);, +    }, +  }, +, +  static class Gist {, +    Map<String, GistFile> files;, +  }, +, +  static class GistFile {, +    String content;, +  }, +, +  public void cacheResponse() throws Exception {, +    File cacheDirectory = new File(getClass().getName() + ".cacheResponse.tmp");, +    int cacheSize = 10 * 1024 * 1024; // 10 MiB, +    Cache cache = new Cache(cacheDirectory, cacheSize);, +, +    OkHttpClient client = new OkHttpClient();, +    client.setCache(cache);, +, +    Request request = new Request.Builder(), +        .url("http://publicobject.com/helloworld.txt"), +        .build();, +, +    Response response1 = client.newCall(request).execute();, +    if (response1.code() < 200 || response1.code() >= 300) {, +      throw new IOException("Unexpected code " + response1);, +    }, +    String response1Body = response1.body().string();, +    System.out.println("Response 1 response:          " + response1);, +    System.out.println("Response 1 cache response:    " + response1.cacheResponse());, +    System.out.println("Response 1 network response:  " + response1.networkResponse());, +, +    Response response2 = client.newCall(request).execute();, +    if (response2.code() < 200 || response2.code() >= 300) {, +      throw new IOException("Unexpected code " + response2);, +    }, +    String response2Body = response2.body().string();, +    System.out.println("Response 2 response:          " + response2);, +    System.out.println("Response 2 cache response:    " + response2.cacheResponse());, +    System.out.println("Response 2 network response:  " + response2.networkResponse());, +, +    System.out.println("Response 2 equals Response 1? " + response1Body.equals(response2Body));, +  }, +, +    recipes.parseResponseWithGson();, +    recipes.cacheResponse();]
[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.text.ParseException;, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import okhttp3.internal.Util;, +import org.junit.Ignore;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +, +public class CookieTest {, +  HttpUrl url = HttpUrl.parse("http://example.com/");, +, +  @Test public void test() throws Exception {, +    Cookie cookie = Cookie.parse(url, "SID=31d4d96e407aad42");, +    assertEquals("SID=31d4d96e407aad42", cookie.toString());, +  }, +, +  @Test public void noEqualsSign() throws Exception {, +    assertNull(Cookie.parse(url, "foo"));, +    assertNull(Cookie.parse(url, "foo; Path=/"));, +  }, +, +  @Test public void emptyName() throws Exception {, +    assertNull(Cookie.parse(url, "=b"));, +    assertNull(Cookie.parse(url, " =b"));, +    assertNull(Cookie.parse(url, "\r\t \n=b"));, +  }, +, +  @Test public void trimLeadingAndTrailingWhitespaceFromName() throws Exception {, +    assertEquals("a", Cookie.parse(url, " a=b").name());, +    assertEquals("a", Cookie.parse(url, "a =b").name());, +    assertEquals("a", Cookie.parse(url, "\r\t \na\n\t \n=b").name());, +  }, +, +  @Test public void emptyValue() throws Exception {, +    assertEquals("", Cookie.parse(url, "a=").value());, +    assertEquals("", Cookie.parse(url, "a= ").value());, +    assertEquals("", Cookie.parse(url, "a=\r\t \n").value());, +  }, +, +  @Test public void trimLeadingAndTrailingWhitespaceFromValue() throws Exception {, +    assertEquals("", Cookie.parse(url, "a= ").value());, +    assertEquals("b", Cookie.parse(url, "a= b").value());, +    assertEquals("b", Cookie.parse(url, "a=b ").value());, +    assertEquals("b", Cookie.parse(url, "a=\r\t \nb\n\t \n").value());, +  }, +, +  @Test public void maxAge() throws Exception {, +    assertEquals(51000L,, +        Cookie.parse(50000L, url, "a=b; Max-Age=1").expiresAt());, +    assertEquals(9223372036854774000L,, +        Cookie.parse(50000L, url, "a=b; Max-Age=9223372036854724").expiresAt());, +    assertEquals(9223372036854775000L,, +        Cookie.parse(50000L, url, "a=b; Max-Age=9223372036854725").expiresAt());, +    assertEquals(Long.MAX_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=9223372036854726").expiresAt());, +    assertEquals(9223372036854774807L,, +        Cookie.parse(9223372036854773807L, url, "a=b; Max-Age=1").expiresAt());, +    assertEquals(Long.MAX_VALUE,, +        Cookie.parse(9223372036854773807L, url, "a=b; Max-Age=2").expiresAt());, +    assertEquals(Long.MAX_VALUE,, +        Cookie.parse(9223372036854773807L, url, "a=b; Max-Age=3").expiresAt());, +    assertEquals(Long.MAX_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=10000000000000000000").expiresAt());, +  }, +, +  @Test public void maxAgeNonPositive() throws Exception {, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=-1").expiresAt());, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=0").expiresAt());, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=-9223372036854775808").expiresAt());, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=-9223372036854775809").expiresAt());, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=-10000000000000000000").expiresAt());, +  }, +]
[+++ b/CHANGELOG.md, +## Version 3.4.1, +, +_2016-07-10_, +, + *  **Fix an major bug in encoding HTTP headers.** In 3.4.0 and 3.4.0-RC1 OkHttp, +    had an off-by-one bug in our HPACK encoder. This bug could have caused the, +    wrong headers to be emitted after a sequence of HTTP/2 requests! Everyone, +    who is using OkHttp 3.4.0 or 3.4.0-RC1 should upgrade for this bug fix., +, +, +++ b/CHANGELOG.md, +## Version 3.4.1, +, +_2016-07-10_, +, + *  **Fix an major bug in encoding HTTP headers.** In 3.4.0 and 3.4.0-RC1 OkHttp, +    had an off-by-one bug in our HPACK encoder. This bug could have caused the, +    wrong headers to be emitted after a sequence of HTTP/2 requests! Everyone, +    who is using OkHttp 3.4.0 or 3.4.0-RC1 should upgrade for this bug fix., +, +, +++ b/README.md, +  <version>3.4.1</version>, +compile 'com.squareup.okhttp3:okhttp:3.4.1', +  <version>3.4.1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.4.1', +++ b/CHANGELOG.md, +## Version 3.4.1, +, +_2016-07-10_, +, + *  **Fix an major bug in encoding HTTP headers.** In 3.4.0 and 3.4.0-RC1 OkHttp, +    had an off-by-one bug in our HPACK encoder. This bug could have caused the, +    wrong headers to be emitted after a sequence of HTTP/2 requests! Everyone, +    who is using OkHttp 3.4.0 or 3.4.0-RC1 should upgrade for this bug fix., +, +, +++ b/README.md, +  <version>3.4.1</version>, +compile 'com.squareup.okhttp3:okhttp:3.4.1', +  <version>3.4.1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.4.1', +++ b/okhttp-hpacktests/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +## Version 3.4.1, +, +_2016-07-10_, +, + *  **Fix an major bug in encoding HTTP headers.** In 3.4.0 and 3.4.0-RC1 OkHttp, +    had an off-by-one bug in our HPACK encoder. This bug could have caused the, +    wrong headers to be emitted after a sequence of HTTP/2 requests! Everyone, +    who is using OkHttp 3.4.0 or 3.4.0-RC1 should upgrade for this bug fix., +, +, +++ b/README.md, +  <version>3.4.1</version>, +compile 'com.squareup.okhttp3:okhttp:3.4.1', +  <version>3.4.1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.4.1', +++ b/okhttp-hpacktests/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +import okhttp3.internal.framed.Header;, +import okhttp3.internal.framed.Hpack;, +++ b/CHANGELOG.md, +## Version 3.4.1, +, +_2016-07-10_, +, + *  **Fix an major bug in encoding HTTP headers.** In 3.4.0 and 3.4.0-RC1 OkHttp, +    had an off-by-one bug in our HPACK encoder. This bug could have caused the, +    wrong headers to be emitted after a sequence of HTTP/2 requests! Everyone, +    who is using OkHttp 3.4.0 or 3.4.0-RC1 should upgrade for this bug fix., +, +, +++ b/README.md, +  <version>3.4.1</version>, +compile 'com.squareup.okhttp3:okhttp:3.4.1', +  <version>3.4.1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.4.1', +++ b/okhttp-hpacktests/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +import okhttp3.internal.framed.Header;, +import okhttp3.internal.framed.Hpack;, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +import okhttp3.internal.framed.Hpack;, +++ b/CHANGELOG.md, +## Version 3.4.1, +, +_2016-07-10_, +, + *  **Fix an major bug in encoding HTTP headers.** In 3.4.0 and 3.4.0-RC1 OkHttp, +    had an off-by-one bug in our HPACK encoder. This bug could have caused the, +    wrong headers to be emitted after a sequence of HTTP/2 requests! Everyone, +    who is using OkHttp 3.4.0 or 3.4.0-RC1 should upgrade for this bug fix., +, +]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +    private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, +    private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +    private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, +    private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +    private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, +    private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, + * The sockets and streams of an HTTP, HTTPS, or HTTPS+SPDY connection. May be, + * used for multiple HTTP request/response exchanges. Connections may be direct, + * to the origin server or via a proxy., +    if (spdyConnection != null) throw new IllegalStateException("spdyConnection != null");, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +    private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, +    private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, + * The sockets and streams of an HTTP, HTTPS, or HTTPS+SPDY connection. May be, + * used for multiple HTTP request/response exchanges. Connections may be direct, + * to the origin server or via a proxy., +    if (spdyConnection != null) throw new IllegalStateException("spdyConnection != null");, +++ b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +    private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, +    private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, + * The sockets and streams of an HTTP, HTTPS, or HTTPS+SPDY connection. May be, + * used for multiple HTTP request/response exchanges. Connections may be direct, + * to the origin server or via a proxy., +    if (spdyConnection != null) throw new IllegalStateException("spdyConnection != null");, +++ b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java, +/*, + *  Licensed to the Apache Software Foundation (ASF) under one or more, + *  contributor license agreements.  See the NOTICE file distributed with, + *  this work for additional information regarding copyright ownership., + *  The ASF licenses this file to You under the Apache License, Version 2.0, + *  (the "License"); you may not use this file except in compliance with, + *  the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + *  Unless required by applicable law or agreed to in writing, software, + *  distributed under the License is distributed on an "AS IS" BASIS,, + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *  See the License for the specific language governing permissions and, + *  limitations under the License., + */, +, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.internal.Util;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Set;, +import java.util.TreeSet;, +, +/**, + * The header fields of a single HTTP message. Values are uninterpreted strings;, + * use {@code Request} and {@code Response} for interpreted headers. This class, + * maintains the order of the header fields within the HTTP message., + *, + * <p>This class tracks header values line-by-line. A field with multiple comma-, + * separated values on the same line will be treated as a field with a single, + * value by this class. It is the caller's responsibility to detect and split, + * on commas if their field permits multiple values. This simplifies use of, + * single-valued fields whose values routinely contain commas, such as cookies, + * or dates., + *, + * <p>This class trims whitespace from values. It never returns values with, + * leading or trailing whitespace., + *, + * <p>Instances of this class are immutable. Use {@link Builder} to create, + * instances., + */, +public final class Headers {, +  private final List<String> namesAndValues;, +, +  private Headers(Builder builder) {, +    this.namesAndValues = Util.immutableList(builder.namesAndValues);, +  }]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    // Limit the size of the request body that the server holds in memory to an arbitrary, +    // 3.5 MBytes so this test can pass on devices with little memory., +    server.setBodyLimit(7 * 512 * 1024);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    // Limit the size of the request body that the server holds in memory to an arbitrary, +    // 3.5 MBytes so this test can pass on devices with little memory., +    server.setBodyLimit(7 * 512 * 1024);, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java, +            ? InetAddress.getLoopbackAddress()]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, +    RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, +    RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, +    RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, +    RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private WebSocket newWebSocket(String path, WebSocketListener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new WebSocketListener() {, +      @Override public void onOpen(WebSocket webSocket, Response response) {, +      @Override public void onMessage(final WebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final WebSocket webSocket, final String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new WebSocketListener() {, +      @Override public void onMessage(WebSocket webSocket, String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new WebSocketListener() {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, +    RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, +    RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private WebSocket newWebSocket(String path, WebSocketListener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new WebSocketListener() {, +      @Override public void onOpen(WebSocket webSocket, Response response) {, +      @Override public void onMessage(final WebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final WebSocket webSocket, final String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new WebSocketListener() {, +      @Override public void onMessage(WebSocket webSocket, String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new WebSocketListener() {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public final WebSocket webSocket;, +  public RecordedResponse(Request request, Response response, WebSocket webSocket, String body,, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, +    RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, +    RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private WebSocket newWebSocket(String path, WebSocketListener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new WebSocketListener() {, +      @Override public void onOpen(WebSocket webSocket, Response response) {, +      @Override public void onMessage(final WebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final WebSocket webSocket, final String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new WebSocketListener() {, +      @Override public void onMessage(WebSocket webSocket, String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new WebSocketListener() {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public final WebSocket webSocket;, +  public RecordedResponse(Request request, Response response, WebSocket webSocket, String body,, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketHttpTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +import okhttp3.internal.ws.RealWebSocket;, +  private final WebSocketRecorder clientListener = new WebSocketRecorder("client");, +  private final WebSocketRecorder serverListener = new WebSocketRecorder("server");, +    WebSocket client = enqueueClientWebSocket();, +    RealWebSocket client = enqueueClientWebSocket();, +    RealWebSocket client = enqueueClientWebSocket();]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/Platform.java, +import android.util.Log;, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +import java.util.logging.Level;, +import javax.net.ssl.SSLParameters;, +import static okhttp3.internal.Internal.logger;, +, +    // Attempt to find Android 2.3+ APIs., +    try {, +      Class<?> sslParametersClass;, +      try {, +        sslParametersClass = Class.forName("com.android.org.conscrypt.SSLParametersImpl");, +      } catch (ClassNotFoundException e) {, +        // Older platform before being unbundled., +        sslParametersClass = Class.forName(, +            "org.apache.harmony.xnet.provider.jsse.SSLParametersImpl");, +      OptionalMethod<Socket> setUseSessionTickets = new OptionalMethod<>(, +          null, "setUseSessionTickets", boolean.class);, +      OptionalMethod<Socket> setHostname = new OptionalMethod<>(, +          null, "setHostname", String.class);, +      OptionalMethod<Socket> getAlpnSelectedProtocol = null;, +      OptionalMethod<Socket> setAlpnProtocols = null;, +      // Attempt to find Android 5.0+ APIs., +      try {, +        Class.forName("android.net.Network"); // Arbitrary class added in Android 5.0., +        getAlpnSelectedProtocol = new OptionalMethod<>(byte[].class, "getAlpnSelectedProtocol");, +        setAlpnProtocols = new OptionalMethod<>(null, "setAlpnProtocols", byte[].class);, +      } catch (ClassNotFoundException ignored) {, +      return new Android(sslParametersClass, setUseSessionTickets, setHostname,, +          getAlpnSelectedProtocol, setAlpnProtocols);, +    } catch (ClassNotFoundException ignored) {, +      // This isn't an Android runtime., +    }, +, +    // Find JDK 9 new methods, +    try {, +      Method setProtocolMethod =, +          SSLParameters.class.getMethod("setApplicationProtocols", String[].class);, +      Method getProtocolMethod = SSLSocket.class.getMethod("getApplicationProtocol");, +, +      return new Jdk9Platform(setProtocolMethod, getProtocolMethod);, +    } catch (NoSuchMethodException ignored) {, +      // pre JDK 9, +    }, +, +    // Find Jetty's ALPN extension for OpenJDK., +    try {, +      String negoClassName = "org.eclipse.jetty.alpn.ALPN";, +      Class<?> negoClass = Class.forName(negoClassName);, +      Class<?> providerClass = Class.forName(negoClassName + "$Provider");, +      Class<?> clientProviderClass = Class.forName(negoClassName + "$ClientProvider");, +      Class<?> serverProviderClass = Class.forName(negoClassName + "$ServerProvider");, +      Method putMethod = negoClass.getMethod("put", SSLSocket.class, providerClass);, +      Method getMethod = negoClass.getMethod("get", SSLSocket.class);, +      Method removeMethod = negoClass.getMethod("remove", SSLSocket.class);, +      return new JdkWithJettyBootPlatform(, +          putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass);, +    } catch (ClassNotFoundException | NoSuchMethodException ignored) {, +  /** Android 2.3 or better. */, +  private static class Android extends Platform {, +    private static final int MAX_LOG_LENGTH = 4000;, +, +    private final Class<?> sslParametersClass;, +    private final OptionalMethod<Socket> setUseSessionTickets;, +    private final OptionalMethod<Socket> setHostname;, +, +    // Non-null on Android 5.0+., +    private final OptionalMethod<Socket> getAlpnSelectedProtocol;, +    private final OptionalMethod<Socket> setAlpnProtocols;, +]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +import okhttp3.internal.Util;, +  Headers headers = Util.EMPTY_HEADERS;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +import okhttp3.internal.Util;, +  Headers headers = Util.EMPTY_HEADERS;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      return Util.EMPTY_HEADERS;, +      varyHeaders = Util.EMPTY_HEADERS;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +import okhttp3.internal.Util;, +  Headers headers = Util.EMPTY_HEADERS;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      return Util.EMPTY_HEADERS;, +      varyHeaders = Util.EMPTY_HEADERS;, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, +    assertEquals(0L, Util.EMPTY_HEADERS.byteCount());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +import okhttp3.internal.Util;, +  Headers headers = Util.EMPTY_HEADERS;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      return Util.EMPTY_HEADERS;, +      varyHeaders = Util.EMPTY_HEADERS;, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, +    assertEquals(0L, Util.EMPTY_HEADERS.byteCount());, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +, +  @Test public void nonAsciiFilename() throws Exception {, +    String expected = "", +        + "--AaB03x\r\n", +        + "Content-Disposition: form-data; name=\"attachment\"; filename=\"resumé.pdf\"\r\n", +        + "Content-Type: application/pdf; charset=utf-8\r\n", +        + "Content-Length: 17\r\n", +        + "\r\n", +        + "Jesse’s Resumé\r\n", +        + "--AaB03x--\r\n";, +, +    MultipartBody body = new MultipartBody.Builder("AaB03x"), +        .setType(MultipartBody.FORM), +        .addFormDataPart("attachment", "resumé.pdf",, +            RequestBody.create(MediaType.parse("application/pdf"), "Jesse’s Resumé")), +        .build();, +, +    Buffer buffer = new Buffer();, +    body.writeTo(buffer);, +    assertEquals(expected, buffer.readUtf8());, +  }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +import okhttp3.internal.Util;, +  Headers headers = Util.EMPTY_HEADERS;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      return Util.EMPTY_HEADERS;, +      varyHeaders = Util.EMPTY_HEADERS;, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, +    assertEquals(0L, Util.EMPTY_HEADERS.byteCount());, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +, +  @Test public void nonAsciiFilename() throws Exception {, +    String expected = "", +        + "--AaB03x\r\n", +        + "Content-Disposition: form-data; name=\"attachment\"; filename=\"resumé.pdf\"\r\n", +        + "Content-Type: application/pdf; charset=utf-8\r\n", +        + "Content-Length: 17\r\n", +        + "\r\n", +        + "Jesse’s Resumé\r\n", +        + "--AaB03x--\r\n";, +, +    MultipartBody body = new MultipartBody.Builder("AaB03x"), +        .setType(MultipartBody.FORM), +        .addFormDataPart("attachment", "resumé.pdf",, +            RequestBody.create(MediaType.parse("application/pdf"), "Jesse’s Resumé")), +        .build();, +, +    Buffer buffer = new Buffer();, +    body.writeTo(buffer);, +    assertEquals(expected, buffer.readUtf8());, +  }, +++ b/okhttp/src/main/java/okhttp3/MultipartBody.java, +      Headers headers = new Headers.Builder(), +          .addUnsafeNonAscii("Content-Disposition", disposition.toString()), +          .build();, +, +      return create(headers, body);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +import okhttp3.internal.Util;, +  Headers headers = Util.EMPTY_HEADERS;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      return Util.EMPTY_HEADERS;, +      varyHeaders = Util.EMPTY_HEADERS;, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, +    assertEquals(0L, Util.EMPTY_HEADERS.byteCount());, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +, +  @Test public void nonAsciiFilename() throws Exception {, +    String expected = "", +        + "--AaB03x\r\n"]
[+++ b/benchmarks/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.7.0-SNAPSHOT</version>]
[+++ b/README.md, +Download [the latest JAR][1] or grab via Maven:, +    <groupId>com.squareup.okhttp</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses, +[Jetty-NPN][3] which requires OpenJDK 7+., +, +, +Test on a USB-attached Android using [Vogar][4]. Unfortunately `dx` requires that you build with, +Java 6, otherwise the test class will be silently omitted from the `.dex` file., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [3]: http://wiki.eclipse.org/Jetty/Feature/NPN, + [4]: https://code.google.com/p/vogar/, +++ b/README.md, +Download [the latest JAR][1] or grab via Maven:, +    <groupId>com.squareup.okhttp</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses, +[Jetty-NPN][3] which requires OpenJDK 7+., +, +, +Test on a USB-attached Android using [Vogar][4]. Unfortunately `dx` requires that you build with, +Java 6, otherwise the test class will be silently omitted from the `.dex` file., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [3]: http://wiki.eclipse.org/Jetty/Feature/NPN, + [4]: https://code.google.com/p/vogar/, +++ b/okhttp-apache/README.md, +OkHttp Apache HttpClient Implementation, +=======================================, +, +This module is an implementation of the Apache `HttpClient` interface that is backed by OkHttp., +, +**Warning**: Many core features of Apache HTTP client are not implemented by this API. This includes, +the keep-alive strategy, cookie store, credentials provider, route planner and others., +++ b/README.md, +Download [the latest JAR][1] or grab via Maven:, +    <groupId>com.squareup.okhttp</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor, +the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by, +specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with, +HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets, +were broken, and so HTTPS tests will time out when run on such devices., +, +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses, +[Jetty-NPN][3] which requires OpenJDK 7+., +, +, +Test on a USB-attached Android using [Vogar][4]. Unfortunately `dx` requires that you build with, +Java 6, otherwise the test class will be silently omitted from the `.dex` file., +, +, + [1]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [3]: http://wiki.eclipse.org/Jetty/Feature/NPN, + [4]: https://code.google.com/p/vogar/, +++ b/okhttp-apache/README.md, +OkHttp Apache HttpClient Implementation, +=======================================, +, +This module is an implementation of the Apache `HttpClient` interface that is backed by OkHttp., +, +**Warning**: Many core features of Apache HTTP client are not implemented by this API. This includes, +the keep-alive strategy, cookie store, credentials provider, route planner and others., +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +import com.squareup.okhttp.internal.Util;, +import java.util.List;, +  final List<String> transports;, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy,, +      List<String> transports) throws UnknownHostException {, +    if (transports == null) throw new IllegalArgumentException("transports == null");, +    this.transports = Util.immutableList(transports);, +   * Returns the client's transports. This method always returns a non-null list, +   * that contains "http/1.1", possibly among other transports., +   */, +  public List<String> getTransports() {, +    return transports;, +  }, +, +  /**, +          && equal(this.authenticator, that.authenticator), +          && equal(this.transports, that.transports);, +    result = 31 * result + transports.hashCode();, +++ b/README.md, +Download [the latest JAR][1] or grab via Maven:]
[+++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +   * Sets whether ALPN is used on incoming HTTPS connections to, +   * Indicates the protocols supported by ALPN on incoming HTTPS, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +   * Sets whether ALPN is used on incoming HTTPS connections to, +   * Indicates the protocols supported by ALPN on incoming HTTPS, +++ b/okcurl/pom.xml, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +   * Sets whether ALPN is used on incoming HTTPS connections to, +   * Indicates the protocols supported by ALPN on incoming HTTPS, +++ b/okcurl/pom.xml, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() {, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +   * Sets whether ALPN is used on incoming HTTPS connections to, +   * Indicates the protocols supported by ALPN on incoming HTTPS, +++ b/okcurl/pom.xml, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +      @Override public long contentLength() {, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +   * Sets whether ALPN is used on incoming HTTPS connections to, +   * Indicates the protocols supported by ALPN on incoming HTTPS, +++ b/okcurl/pom.xml, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +      @Override public long contentLength() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +    assertEquals(53, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +    assertEquals(112, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +        + "Content-Length: 337\r\n", +    assertEquals(568, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +++ b/benchmarks/pom.xml, +      <id>alpn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <version>${alpn.jdk7.version}</version>, +          <version>${alpn.jdk8.version}</version>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** Which ALPN protocols are in use. Only useful with TLS. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java]
[+++ b/benchmarks/pom.xml, +    <version>3.11.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.11.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.11.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.11.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.11.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.11.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.11.0</version>]
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +import java.util.Arrays.asList, +      return bootstrapDnsHosts(asList(*bootstrapDnsHosts)), +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +import java.util.Arrays.asList, +      return bootstrapDnsHosts(asList(*bootstrapDnsHosts)), +++ b/okhttp/build.gradle, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +import java.util.Arrays.asList, +      return bootstrapDnsHosts(asList(*bootstrapDnsHosts)), +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/Address.kt, +    return other is Address, +        && equalsNonHost(other), +    return this.dns == that.dns, +        && this.url().port() == that.url().port(), +    return "Address{" +, +        "${url.host()}:${url.port()}, " +, +        (if (proxy != null) "proxy=$proxy" else "proxySelector=$proxySelector") +, +        "}", +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +import java.util.Arrays.asList, +      return bootstrapDnsHosts(asList(*bootstrapDnsHosts)), +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/Address.kt, +    return other is Address, +        && equalsNonHost(other), +    return this.dns == that.dns, +        && this.url().port() == that.url().port(), +    return "Address{" +, +        "${url.host()}:${url.port()}, " +, +        (if (proxy != null) "proxy=$proxy" else "proxySelector=$proxySelector") +, +        "}", +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.security.cert.Certificate;, +import java.security.cert.X509Certificate;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Objects;, +import java.util.Set;, +import javax.annotation.Nullable;, +import javax.net.ssl.SSLPeerUnverifiedException;, +import okhttp3.internal.tls.CertificateChainCleaner;, +import okio.ByteString;, +, +import static java.util.Arrays.asList;, +, +/**, + * Constrains which certificates are trusted. Pinning certificates defends against attacks on, + * certificate authorities. It also prevents connections through man-in-the-middle certificate, + * authorities either known or unknown to the application's user., + *, + * <p>This class currently pins a certificate's Subject Public Key Info as described on <a, + * href="http://goo.gl/AIx3e5">Adam Langley's Weblog</a>. Pins are either base64 SHA-256 hashes as, + * in <a href="http://tools.ietf.org/html/rfc7469">HTTP Public Key Pinning (HPKP)</a> or SHA-1, + * base64 hashes as in Chromium's <a href="http://goo.gl/XDh6je">static certificates</a>., + *, + * <h3>Setting up Certificate Pinning</h3>, + *, + * <p>The easiest way to pin a host is turn on pinning with a broken configuration and read the, + * expected configuration when the connection fails. Be sure to do this on a trusted network, and, + * without man-in-the-middle tools like <a href="http://charlesproxy.com">Charles</a> or <a, + * href="http://fiddlertool.com">Fiddler</a>., + *, + * <p>For example, to pin {@code https://publicobject.com}, start with a broken, + * configuration: <pre>   {@code, + *, + *     String hostname = "publicobject.com";, + *     CertificatePinner certificatePinner = new CertificatePinner.Builder(), + *         .add(hostname, "sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="), + *         .build();, + *     OkHttpClient client = OkHttpClient.Builder(), + *         .certificatePinner(certificatePinner), + *         .build();, + *, + *     Request request = new Request.Builder(), + *         .url("https://" + hostname), + *         .build();, + *     client.newCall(request).execute();, + * }</pre>, + *]
[+++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.7.0-SNAPSHOT</version>]
[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, +    Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, +    Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropBadTest.java, +  private static final String[] BAD_INTEROP_TESTS = {, +      "hyper-hpack",, +      "node-http2-protocol",, +      "raw-data",, +      "twitter-hpack", +  };, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, +    Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropBadTest.java, +  private static final String[] BAD_INTEROP_TESTS = {, +      "hyper-hpack",, +      "node-http2-protocol",, +      "raw-data",, +      "twitter-hpack", +  };, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropGoodTest.java, +  // TODO: Filter on the json key for draft, which explains some of the failures., +  private static final String[] GOOD_INTEROP_TESTS = {, +      "go-hpack",, +      "haskell-http2-linear",, +      "haskell-http2-linear-huffman",, +      "haskell-http2-naive",, +      "haskell-http2-naive-huffman",, +      "haskell-http2-static",, +      "haskell-http2-static-huffman",, +      "nghttp2",, +      "nghttp2-16384-4096",, +      "nghttp2-change-table-size",, +      "node-http2-hpack",, +  };, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, +    Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropBadTest.java, +  private static final String[] BAD_INTEROP_TESTS = {, +      "hyper-hpack",, +      "node-http2-protocol",, +      "raw-data",, +      "twitter-hpack", +  };, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropGoodTest.java, +  // TODO: Filter on the json key for draft, which explains some of the failures., +  private static final String[] GOOD_INTEROP_TESTS = {, +      "go-hpack",, +      "haskell-http2-linear",, +      "haskell-http2-linear-huffman",, +      "haskell-http2-naive",, +      "haskell-http2-naive-huffman",, +      "haskell-http2-static",, +      "haskell-http2-static-huffman",, +      "nghttp2",, +      "nghttp2-16384-4096",, +      "nghttp2-change-table-size",, +      "node-http2-hpack",, +  };, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +import okio.Buffer;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +  private final HpackDraft09.Reader hpackReader = new HpackDraft09.Reader(4096, bytesIn);, +          hpackReader.getAndResetHeaderList());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, +    Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropBadTest.java, +  private static final String[] BAD_INTEROP_TESTS = {, +      "hyper-hpack",, +      "node-http2-protocol",, +      "raw-data",, +      "twitter-hpack", +  };, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropGoodTest.java, +  // TODO: Filter on the json key for draft, which explains some of the failures., +  private static final String[] GOOD_INTEROP_TESTS = {, +      "go-hpack",, +      "haskell-http2-linear",, +      "haskell-http2-linear-huffman",, +      "haskell-http2-naive",, +      "haskell-http2-naive-huffman",, +      "haskell-http2-static",, +      "haskell-http2-static-huffman",, +      "nghttp2",, +      "nghttp2-16384-4096",, +      "nghttp2-change-table-size",, +      "node-http2-hpack",, +  };, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +import okio.Buffer;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.parse("text/plain"), bodyText);, +        return MediaType.parse("text/plain; charset=utf-8");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.parse("text/plain"), bodyText);, +        return MediaType.parse("text/plain; charset=utf-8");, +++ b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.parse("application/octet-stream");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.parse("text/plain"), bodyText);, +        return MediaType.parse("text/plain; charset=utf-8");, +++ b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.parse("application/octet-stream");, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +  public static final MediaType DNS_MESSAGE = MediaType.parse("application/dns-message");, +  public static final MediaType UDPWIREFORMAT = MediaType.parse("application/dns-udpwireformat");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.parse("text/plain"), bodyText);, +        return MediaType.parse("text/plain; charset=utf-8");, +++ b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.parse("application/octet-stream");, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +  public static final MediaType DNS_MESSAGE = MediaType.parse("application/dns-message");, +  public static final MediaType UDPWIREFORMAT = MediaType.parse("application/dns-udpwireformat");, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  private static final MediaType PLAIN = MediaType.parse("text/plain; charset=utf-8");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +      } catch (InterruptedException ignored) {, +          throw new AssertionError();, +          throw new InterruptedIOException();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.parse("text/plain"), bodyText);, +        return MediaType.parse("text/plain; charset=utf-8");, +++ b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.parse("application/octet-stream");, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +  public static final MediaType DNS_MESSAGE = MediaType.parse("application/dns-message");, +  public static final MediaType UDPWIREFORMAT = MediaType.parse("application/dns-udpwireformat");]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.kt, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.connection, +, +import java.io.IOException;, +, +/**, + * An exception thrown to indicate a problem connecting via a single Route. Multiple attempts may, + * have been made with alternative protocols, none of which were successful., + */, +class RouteException internal constructor(val firstConnectException: IOException) :, +    RuntimeException(firstConnectException) {, +  var lastConnectException: IOException = firstConnectException, +, +  fun addConnectException(e: IOException) {, +    firstConnectException.addSuppressed(e), +    lastConnectException = e, +  }, +}, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.kt, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.connection, +, +import java.io.IOException;, +, +/**, + * An exception thrown to indicate a problem connecting via a single Route. Multiple attempts may, + * have been made with alternative protocols, none of which were successful., + */, +class RouteException internal constructor(val firstConnectException: IOException) :, +    RuntimeException(firstConnectException) {, +  var lastConnectException: IOException = firstConnectException, +, +  fun addConnectException(e: IOException) {, +    firstConnectException.addSuppressed(e), +    lastConnectException = e, +  }, +}, +++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.kt, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.connection, +, +import java.io.IOException;, +, +/**, + * An exception thrown to indicate a problem connecting via a single Route. Multiple attempts may, + * have been made with alternative protocols, none of which were successful., + */, +class RouteException internal constructor(val firstConnectException: IOException) :, +    RuntimeException(firstConnectException) {, +  var lastConnectException: IOException = firstConnectException, +, +  fun addConnectException(e: IOException) {]
[+++ b/.travis.yml, +#  - openjdk11, +++ b/.travis.yml, +#  - openjdk11, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import javax.net.ssl.SSLException;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +            SSLException.class, // JDK 11 response to the FAIL_HANDSHAKE, +    } catch (SSLException expected) {, +      // JDK 11 response to the FAIL_HANDSHAKE, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +++ b/.travis.yml, +#  - openjdk11, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import javax.net.ssl.SSLException;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +            SSLException.class, // JDK 11 response to the FAIL_HANDSHAKE, +    } catch (SSLException expected) {, +      // JDK 11 response to the FAIL_HANDSHAKE, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    } catch (SSLException expected) {, +      // JDK 1.9 response to the FAIL_HANDSHAKE, +      // javax.net.ssl.SSLException: Unexpected handshake message: client_hello, +++ b/.travis.yml, +#  - openjdk11, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import javax.net.ssl.SSLException;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +            SSLException.class, // JDK 11 response to the FAIL_HANDSHAKE, +    } catch (SSLException expected) {, +      // JDK 11 response to the FAIL_HANDSHAKE, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    } catch (SSLException expected) {, +      // JDK 1.9 response to the FAIL_HANDSHAKE, +      // javax.net.ssl.SSLException: Unexpected handshake message: client_hello, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +import javax.net.ssl.SSLException;, +import static org.junit.Assert.assertTrue;, +    } catch (SSLException expected) {, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +    } catch (SSLException expected) {, +      // javax.net.ssl.SSLException: readRecord, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +++ b/.travis.yml, +#  - openjdk11, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import javax.net.ssl.SSLException;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +            SSLException.class, // JDK 11 response to the FAIL_HANDSHAKE, +    } catch (SSLException expected) {, +      // JDK 11 response to the FAIL_HANDSHAKE, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    } catch (SSLException expected) {, +      // JDK 1.9 response to the FAIL_HANDSHAKE, +      // javax.net.ssl.SSLException: Unexpected handshake message: client_hello, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +import javax.net.ssl.SSLException;, +import static org.junit.Assert.assertTrue;, +    } catch (SSLException expected) {, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +    } catch (SSLException expected) {, +      // javax.net.ssl.SSLException: readRecord, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectionSpecSelector.java, +import javax.net.ssl.SSLException;, +    return (e instanceof SSLHandshakeException, +        || e instanceof SSLProtocolException, +        || e instanceof SSLException);]
[+++ b/fuzzing/fuzzingserver-config.json, +{, +  "url": "ws://127.0.0.1:9099",, +  "outdir": "./target/fuzzingserver-report",, +  "cases": ["*"],, +  "exclude-cases": [, +    "6.1.1",, +    "6.1.2",, +    "6.1.3",, +    "6.2.1",, +    "6.2.2",, +    "6.2.3",, +    "6.2.4",, +    "6.3.1",, +    "6.3.2",, +    "6.4.1",, +    "6.4.2",, +    "6.4.3",, +    "6.4.4",, +    "6.5.1",, +    "6.5.2",, +    "6.5.3",, +    "6.5.4",, +    "6.5.5",, +    "6.6.1",, +    "6.6.2",, +    "6.6.3",, +    "6.6.4",, +    "6.6.5",, +    "6.6.6",, +    "6.6.7",, +    "6.6.8",, +    "6.6.9",, +    "6.6.10",, +    "6.6.11",, +    "6.7.1",, +    "6.7.2",, +    "6.7.3",, +    "6.7.4",, +    "6.8.1",, +    "6.8.2",, +    "6.9.1",, +    "6.9.2",, +    "6.9.3",, +    "6.9.4",, +    "6.10.1",, +    "6.10.2",, +    "6.10.3",, +    "6.11.1",, +    "6.11.2",, +    "6.11.3",, +    "6.11.4",, +    "6.11.5",, +    "6.12.1",, +    "6.12.2",, +    "6.12.3",, +    "6.12.4",, +    "6.12.5",, +    "6.12.6",, +    "6.12.7",, +    "6.12.8",, +    "6.13.1",, +    "6.13.2",, +    "6.13.3",, +    "6.13.4",, +    "6.13.5",, +    "6.14.1",, +    "6.14.2",, +    "6.14.3",, +    "6.14.4",, +    "6.14.5",, +    "6.14.6",, +    "6.14.7",, +    "6.14.8",, +    "6.14.9",, +    "6.14.10",, +    "6.15.1",, +    "6.16.1",, +    "6.16.2",, +    "6.16.3",, +    "6.17.1",, +    "6.17.2",, +    "6.17.3",, +    "6.17.4",, +    "6.17.5",, +    "6.18.1",, +    "6.18.2",, +    "6.18.3",, +    "6.18.4",, +    "6.18.5",, +    "6.19.1",, +    "6.19.2",, +    "6.19.3",, +    "6.19.4",, +    "6.19.5",, +    "6.20.1",, +    "6.20.2",, +    "6.20.3",, +    "6.20.4",, +    "6.20.5",]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.QueueDispatcher;, +  /**, +   * We don't know if the connection will support HTTP/2 until after we've connected. When multiple, +   * connections are requested concurrently OkHttp will pessimistically connect multiple times, then, +   * close any unnecessary connections. This test confirms that behavior works as intended., +   *, +   * <p>This test uses proxy tunnels to get a hook while a connection is being established., +   */, +  @Test public void concurrentHttp2ConnectionsDeduplicated() throws Exception {, +    server.useHttps(sslClient.socketFactory, true);, +, +    // Force a fresh connection pool for the test., +    client.connectionPool().evictAll();, +, +    final QueueDispatcher queueDispatcher = new QueueDispatcher();, +    queueDispatcher.enqueueResponse(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    queueDispatcher.enqueueResponse(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    queueDispatcher.enqueueResponse(new MockResponse(), +        .setBody("call2 response"));, +    queueDispatcher.enqueueResponse(new MockResponse(), +        .setBody("call1 response"));, +, +    // We use a re-entrant dispatcher to initiate one HTTPS connection while the other is in flight., +    server.setDispatcher(new Dispatcher() {, +      int requestCount;, +, +      @Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +        MockResponse result = queueDispatcher.dispatch(request);, +, +        requestCount++;, +        if (requestCount == 1) {, +          // Before handling call1's CONNECT we do all of call2. This part re-entrant!, +          try {, +            Call call2 = client.newCall(new Request.Builder(), +                .url("https://android.com/call2"), +                .build());, +            Response response2 = call2.execute();, +            assertEquals("call2 response", response2.body().string());, +          } catch (IOException e) {, +            throw new RuntimeException(e);, +          }, +        }, +, +        return result;, +      }, +, +      @Override public MockResponse peek() {, +        return queueDispatcher.peek();, +      }, +, +      @Override public void shutdown() {, +        queueDispatcher.shutdown();, +      }, +    });, +, +    client = client.newBuilder(), +        .proxy(server.toProxyAddress()), +        .build();, +, +    Call call1 = client.newCall(new Request.Builder(), +        .url("https://android.com/call1"), +        .build());, +    Response response2 = call1.execute();, +    assertEquals("call1 response", response2.body().string());, +, +    RecordedRequest call1Connect = server.takeRequest();, +    assertEquals("CONNECT", call1Connect.getMethod());, +    assertEquals(0, call1Connect.getSequenceNumber());, +, +    RecordedRequest call2Connect = server.takeRequest();, +    assertEquals("CONNECT", call2Connect.getMethod());, +    assertEquals(0, call2Connect.getSequenceNumber());, +, +    RecordedRequest call2Get = server.takeRequest();, +    assertEquals("GET", call2Get.getMethod());, +    assertEquals("/call2", call2Get.getPath());, +    assertEquals(0, call2Get.getSequenceNumber());, +, +    RecordedRequest call1Get = server.takeRequest();, +    assertEquals("GET", call1Get.getMethod());, +    assertEquals("/call1", call1Get.getPath());, +    assertEquals(1, call1Get.getSequenceNumber());, +, +    assertEquals(1, client.connectionPool().connectionCount());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.QueueDispatcher;, +  /**, +   * We don't know if the connection will support HTTP/2 until after we've connected. When multiple, +   * connections are requested concurrently OkHttp will pessimistically connect multiple times, then, +   * close any unnecessary connections. This test confirms that behavior works as intended., +   *]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;, +      HttpsURLConnectionImpl.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnectionImpl.setDefaultSSLSocketFactory(socketFactory);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;, +      HttpsURLConnectionImpl.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnectionImpl.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports"/>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;, +      HttpsURLConnectionImpl.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnectionImpl.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports"/>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp.internal.http;, +, +import com.squareup.okhttp.ConnectionPool;, +import com.squareup.okhttp.HttpResponseCache;, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.OkResponseCache;, +import com.squareup.okhttp.Request;, +import com.squareup.okhttp.Response;, +import com.squareup.okhttp.ResponseSource;, +import com.squareup.okhttp.internal.SslContextBuilder;, +import com.squareup.okhttp.internal.Util;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import java.io.BufferedReader;, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +import java.io.OutputStream;, +import java.net.CacheRequest;, +import java.net.CookieHandler;, +import java.net.CookieManager;, +import java.net.HttpCookie;, +import java.net.HttpURLConnection;, +import java.net.ResponseCache;, +import java.net.URISyntaxException;, +import java.net.URL;, +import java.net.URLConnection;, +import java.security.Principal;, +import java.security.cert.Certificate;, +import java.text.DateFormat;, +import java.text.SimpleDateFormat;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Date;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Locale;, +import java.util.TimeZone;, +import java.util.UUID;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReference;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSession;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.GzipSink;, +import okio.Okio;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AT_END;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +/*, + * Copyright (C) 2010 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.internal.Base64;, +import com.squareup.okhttp.internal.DiskLruCache;, +import com.squareup.okhttp.internal.StrictLineReader;, +import com.squareup.okhttp.internal.Util;, +import com.squareup.okhttp.internal.http.HttpEngine;, +import com.squareup.okhttp.internal.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;, +import com.squareup.okhttp.internal.http.RawHeaders;, +import com.squareup.okhttp.internal.http.ResponseHeaders;, +import java.io.BufferedWriter;, +import java.io.ByteArrayInputStream;, +import java.io.File;, +import java.io.FilterInputStream;, +import java.io.FilterOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.io.OutputStreamWriter;, +import java.io.UnsupportedEncodingException;, +import java.io.Writer;, +import java.net.CacheRequest;, +import java.net.CacheResponse;, +import java.net.HttpURLConnection;, +import java.net.ResponseCache;, +import java.net.SecureCacheResponse;, +import java.net.URI;, +import java.net.URLConnection;, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +import java.security.Principal;, +import java.security.cert.Certificate;, +import java.security.cert.CertificateEncodingException;, +import java.security.cert.CertificateException;, +import java.security.cert.CertificateFactory;, +import java.security.cert.X509Certificate;, +import java.util.Arrays;, +import java.util.List;, +import java.util.Map;, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLPeerUnverifiedException;, +, +import static com.squareup.okhttp.internal.Util.US_ASCII;, +import static com.squareup.okhttp.internal.Util.UTF_8;, +, +/**, + * Cache responses in a directory on the file system. Most clients should use, + * {@code android.net.HttpResponseCache}, the stable, documented front end for, + * this., + */, +public final class HttpResponseCache extends ResponseCache {, +  private static final char[] DIGITS =, +      { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };, +, +  // TODO: add APIs to iterate the cache?, +  private static final int VERSION = 201105;, +  private static final int ENTRY_METADATA = 0;, +  private static final int ENTRY_BODY = 1;, +  private static final int ENTRY_COUNT = 2;, +, +  private final DiskLruCache cache;, +, +  /* read and write statistics, all guarded by 'this' */, +  private int writeSuccessCount;, +  private int writeAbortCount;, +  private int networkCount;, +  private int hitCount;, +  private int requestCount;, +, +  public HttpResponseCache(File directory, long maxSize) throws IOException {, +    cache = DiskLruCache.open(directory, VERSION, ENTRY_COUNT, maxSize);, +  }, +, +  private String uriToKey(URI uri) {, +    try {, +      MessageDigest messageDigest = MessageDigest.getInstance("MD5");, +      byte[] md5bytes = messageDigest.digest(uri.toString().getBytes("UTF-8"));, +      return bytesToHexString(md5bytes);, +    } catch (NoSuchAlgorithmException e) {, +      throw new AssertionError(e);, +    } catch (UnsupportedEncodingException e) {, +      throw new AssertionError(e);]
[+++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons. It uses a local, + * connection to a MockWebServer to measure how many identical requests per second can be carried, + * over a fixed number of threads., +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons. It uses a local, + * connection to a MockWebServer to measure how many identical requests per second can be carried, + * over a fixed number of threads., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java, +, +, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons. It uses a local, + * connection to a MockWebServer to measure how many identical requests per second can be carried, + * over a fixed number of threads., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java, +, +, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons. It uses a local, + * connection to a MockWebServer to measure how many identical requests per second can be carried, + * over a fixed number of threads., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java, +, +, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.Call;]
[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Base64.java, +/*, + *  Licensed to the Apache Software Foundation (ASF) under one or more, + *  contributor license agreements.  See the NOTICE file distributed with, + *  this work for additional information regarding copyright ownership., + *  The ASF licenses this file to You under the Apache License, Version 2.0, + *  (the "License"); you may not use this file except in compliance with, + *  the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + *  Unless required by applicable law or agreed to in writing, software, + *  distributed under the License is distributed on an "AS IS" BASIS,, + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *  See the License for the specific language governing permissions and, + *  limitations under the License., + */, +, +/**, + * @author Alexander Y. Kleymenov, + */, +, +package com.squareup.okhttp.internal;, +, +import java.io.UnsupportedEncodingException;, +, +import static com.squareup.okhttp.internal.Util.EMPTY_BYTE_ARRAY;, +, +/**, + * <a href="http://www.ietf.org/rfc/rfc2045.txt">Base64</a> encoder/decoder., + * In violation of the RFC, this encoder doesn't wrap lines at 76 columns., + */, +public final class Base64 {, +  private Base64() {, +  }, +, +  public static byte[] decode(byte[] in) {, +    return decode(in, in.length);, +  }, +, +  public static byte[] decode(byte[] in, int len) {, +    // approximate output length, +    int length = len / 4 * 3;, +    // return an empty array on empty or short input without padding, +    if (length == 0) {, +      return EMPTY_BYTE_ARRAY;, +    }, +    // temporary array, +    byte[] out = new byte[length];, +    // number of padding characters ('='), +    int pad = 0;, +    byte chr;, +    // compute the number of the padding characters, +    // and adjust the length of the input, +    for (; ; len--) {, +      chr = in[len - 1];, +      // skip the neutral characters, +      if ((chr == '\n') || (chr == '\r') || (chr == ' ') || (chr == '\t')) {, +        continue;, +      }, +      if (chr == '=') {, +        pad++;, +      } else {, +        break;, +      }, +    }, +    // index in the output array, +    int outIndex = 0;, +    // index in the input array, +    int inIndex = 0;, +    // holds the value of the input character, +    int bits = 0;, +    // holds the value of the input quantum, +    int quantum = 0;, +    for (int i = 0; i < len; i++) {, +      chr = in[i];, +      // skip the neutral characters, +      if ((chr == '\n') || (chr == '\r') || (chr == ' ') || (chr == '\t')) {, +        continue;, +      }, +      if ((chr >= 'A') && (chr <= 'Z')) {, +        // char ASCII value, +        //  A    65    0, +        //  Z    90    25 (ASCII - 65), +        bits = chr - 65;, +      } else if ((chr >= 'a') && (chr <= 'z')) {, +        // char ASCII value, +        //  a    97    26, +        //  z    122   51 (ASCII - 71), +        bits = chr - 71;, +      } else if ((chr >= '0') && (chr <= '9')) {, +        // char ASCII value, +        //  0    48    52, +        //  9    57    61 (ASCII + 4), +        bits = chr + 4;, +      } else if (chr == '+') {, +        bits = 62;, +      } else if (chr == '/') {, +        bits = 63;, +      } else {]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;, +, +  public static ThreadFactory daemonThreadFactory(final String name) {, +    return new ThreadFactory() {, +      @Override public Thread newThread(Runnable runnable) {, +        Thread result = new Thread(runnable, name);, +        result.setDaemon(true);, +        return result;, +      }, +    };, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;, +, +  public static ThreadFactory daemonThreadFactory(final String name) {, +    return new ThreadFactory() {, +      @Override public Thread newThread(Runnable runnable) {, +        Thread result = new Thread(runnable, name);, +        result.setDaemon(true);, +        return result;, +      }, +    };, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  private static final ExecutorService executor = new ThreadPoolExecutor(0,, +      Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp SpdyConnection"));, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s ping %d", hostName, streamId) {, +      executor.submit(new NamedRunnable("OkHttp SPDY Callback %s stream %d", hostName, streamId) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;, +, +  public static ThreadFactory daemonThreadFactory(final String name) {, +    return new ThreadFactory() {, +      @Override public Thread newThread(Runnable runnable) {, +        Thread result = new Thread(runnable, name);, +        result.setDaemon(true);, +        return result;, +      }, +    };, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  private static final ExecutorService executor = new ThreadPoolExecutor(0,, +      Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp SpdyConnection"));, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s ping %d", hostName, streamId) {, +      executor.submit(new NamedRunnable("OkHttp SPDY Callback %s stream %d", hostName, streamId) {, +++ b/pom.xml, +    <mockwebserver.version>20130122</mockwebserver.version>]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ /dev/null, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import javax.net.ssl.HttpsURLConnection;, +      hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import javax.net.ssl.HttpsURLConnection;, +      hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/HttpResponseCacheTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]
[+++ b/.circleci/config.yml, +++ b/.circleci/config.yml, +++ b/build.gradle, +      'conscrypt': '2.1.0',, +++ b/.circleci/config.yml, +++ b/build.gradle, +      'conscrypt': '2.1.0',, +++ b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +    data.write(ByteString.decodeHex("0a00")); // Empty ping., +    data.write(ByteString.decodeHex("9a00")); // Empty ping, flag 1 set., +    data.write(ByteString.decodeHex("aa00")); // Empty ping, flag 2 set., +    data.write(ByteString.decodeHex("ca00")); // Empty ping, flag 3 set.]
[+++ /dev/null, +++ /dev/null, +++ b/benchmarks/pom.xml, +      <groupId>com.google.caliper</groupId>, +      <artifactId>caliper</artifactId>, +      <version>1.0-beta-1</version>, +    </dependency>, +    <dependency>, +    <!-- Netty needs this if gzip is enabled. -->, +    <dependency>, +      <groupId>com.jcraft</groupId>, +      <artifactId>jzlib</artifactId>, +      <version>1.1.2</version>, +    </dependency>, +++ /dev/null, +++ b/benchmarks/pom.xml, +      <groupId>com.google.caliper</groupId>, +      <artifactId>caliper</artifactId>, +      <version>1.0-beta-1</version>, +    </dependency>, +    <dependency>, +    <!-- Netty needs this if gzip is enabled. -->, +    <dependency>, +      <groupId>com.jcraft</groupId>, +      <artifactId>jzlib</artifactId>, +      <version>1.1.2</version>, +    </dependency>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +        long total = readAllAndClose(in);, +++ /dev/null, +++ b/benchmarks/pom.xml, +      <groupId>com.google.caliper</groupId>, +      <artifactId>caliper</artifactId>, +      <version>1.0-beta-1</version>, +    </dependency>, +    <dependency>, +    <!-- Netty needs this if gzip is enabled. -->, +    <dependency>, +      <groupId>com.jcraft</groupId>, +      <artifactId>jzlib</artifactId>, +      <version>1.1.2</version>, +    </dependency>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +        long total = readAllAndClose(in);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import com.google.caliper.Param;, +import com.google.caliper.model.ArbitraryMeasurement;, +import com.google.caliper.runner.CaliperMain;, +public class Benchmark extends com.google.caliper.Benchmark {, +  private static final boolean VERBOSE = false;, +, +  @Param, +  Client client;, +  @Param({ "1", "10" }), +  int concurrencyLevel;, +  @Param, +  boolean tls;, +  @Param, +  boolean gzip;, +  @Param, +  boolean chunked;, +  @Param({ "128", "1048576" }), +  int bodyByteCount;, +  @Param({ "0", "20" }), +  int headerCount;, +  public static void main(String[] args) {, +    List<String> allArgs = new ArrayList<String>();, +    allArgs.add("--instrument");, +    allArgs.add("arbitrary");, +    allArgs.addAll(Arrays.asList(args));, +, +    CaliperMain.main(Benchmark.class, allArgs.toArray(new String[allArgs.size()]));, +  @ArbitraryMeasurement(description = "requests per second"), +  public double run() throws Exception {, +    if (VERBOSE) System.out.println(toString());, +    HttpClient httpClient = client.create();, +    double best = 0.0;, +        if (VERBOSE) {, +        }, +        best = Math.max(best, requestsPerSecond);, +, +    return best;, +    return String.format("%s %s\nbodyByteCount=%s headerCount=%s concurrencyLevel=%s",, +        client, modifiers, bodyByteCount, headerCount, concurrencyLevel);, +++ /dev/null, +++ b/benchmarks/pom.xml, +      <groupId>com.google.caliper</groupId>, +      <artifactId>caliper</artifactId>, +      <version>1.0-beta-1</version>, +    </dependency>, +    <dependency>, +    <!-- Netty needs this if gzip is enabled. -->, +    <dependency>, +      <groupId>com.jcraft</groupId>, +      <artifactId>jzlib</artifactId>, +      <version>1.1.2</version>, +    </dependency>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +        long total = readAllAndClose(in);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +  @Test public void isClosed_uninitializedCache() throws Exception {, +    // Create an uninitialized cache., +    cache = new DiskLruCache(cacheDir, appVersion, 2, Integer.MAX_VALUE, executor);, +    toClose.add(cache);, +, +    assertFalse(cache.isClosed());, +    cache.close();, +    assertTrue(cache.isClosed());, +  }, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +  @Test public void isClosed_uninitializedCache() throws Exception {, +    // Create an uninitialized cache., +    cache = new DiskLruCache(cacheDir, appVersion, 2, Integer.MAX_VALUE, executor);, +    toClose.add(cache);, +, +    assertFalse(cache.isClosed());, +    cache.close();, +    assertTrue(cache.isClosed());, +  }, +, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/OkUrlFactory.java, +import com.squareup.okhttp.internal.InternalCache;, +import com.squareup.okhttp.internal.huc.CacheAdapter;, +import java.net.ResponseCache;, +  /** Sets the response cache to be used to read and write cached responses. */, +  OkUrlFactory setResponseCache(ResponseCache responseCache) {, +    client.setInternalCache(responseCache != null ? new CacheAdapter(responseCache) : null);, +    return this;, +  }, +, +  ResponseCache getResponseCache() {, +    InternalCache cache = client.internalCache();, +    return cache instanceof CacheAdapter ? ((CacheAdapter) cache).getDelegate() : null;, +  }, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +  @Test public void isClosed_uninitializedCache() throws Exception {, +    // Create an uninitialized cache.]
[+++ b/README.md, +Building, +--------, +, +### On the Desktop, +Run OkHttp tests on the desktop with Maven., +```, +mvn clean test, +```, +SPDY support uses a Deflater API that wasn't available in Java 6. For this reason SPDY tests will fail with this error: `Cannot SPDY; no SYNC_FLUSH available`. All other tests should run fine., +, +### On the Desktop with NPN, +Using NPN on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +```, +mvn clean test -Pspdy-tls, +```, +, +### On a Device, +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., +```, +mvn clean, +mvn package -DskipTests, +vogar \, +    --classpath ~/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.47/bcprov-jdk15on-1.47.jar \, +    --classpath ~/.m2/repository/com/google/mockwebserver/mockwebserver/20121111/mockwebserver-20121111.jar \, +    --classpath target/okhttp-0.8-SNAPSHOT.jar \, +    ./src/test/java/libcore/net/http/URLConnectionTest.java, +```, +Because the OkHttp uses `jarjar` to repackage classes in `libcore`, OkHttp tests that use those classes directly cannot be run on a device., +, +, +++ b/README.md, +Building, +--------, +, +### On the Desktop, +Run OkHttp tests on the desktop with Maven., +```, +mvn clean test, +```, +SPDY support uses a Deflater API that wasn't available in Java 6. For this reason SPDY tests will fail with this error: `Cannot SPDY; no SYNC_FLUSH available`. All other tests should run fine., +, +### On the Desktop with NPN, +Using NPN on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +```, +mvn clean test -Pspdy-tls, +```, +, +### On a Device, +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., +```, +mvn clean, +mvn package -DskipTests, +vogar \, +    --classpath ~/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.47/bcprov-jdk15on-1.47.jar \, +    --classpath ~/.m2/repository/com/google/mockwebserver/mockwebserver/20121111/mockwebserver-20121111.jar \, +    --classpath target/okhttp-0.8-SNAPSHOT.jar \, +    ./src/test/java/libcore/net/http/URLConnectionTest.java, +```, +Because the OkHttp uses `jarjar` to repackage classes in `libcore`, OkHttp tests that use those classes directly cannot be run on a device., +, +, +++ b/pom.xml, +            <optional>true</optional>, +, +    <profiles>, +    <profile>, +        <id>spdy-tls</id>, +        <build>, +            <plugins>, +                <plugin>, +                    <groupId>org.apache.maven.plugins</groupId>, +                    <artifactId>maven-surefire-plugin</artifactId>, +                    <version>2.9</version>, +                    <configuration>, +                        <argLine>-Xbootclasspath/p:${settings.localRepository}/org/mortbay/jetty/npn/npn-boot/${npn.version}/npn-boot-${npn.version}.jar</argLine>, +                    </configuration>, +                </plugin>, +            </plugins>, +        </build>, +    </profile>, +    </profiles>, +++ b/README.md, +Building, +--------, +, +### On the Desktop, +Run OkHttp tests on the desktop with Maven., +```, +mvn clean test, +```, +SPDY support uses a Deflater API that wasn't available in Java 6. For this reason SPDY tests will fail with this error: `Cannot SPDY; no SYNC_FLUSH available`. All other tests should run fine., +, +### On the Desktop with NPN, +Using NPN on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +```, +mvn clean test -Pspdy-tls, +```, +, +### On a Device]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, +    byte[] bytes = new byte[bodyByteCount];, +    random.nextBytes(bytes);, +    Buffer body = new Buffer().write(bytes);, +      Buffer gzipBody = new Buffer();, +      GzipSink gzipSink = new GzipSink(gzipBody);, +      gzipSink.write(body, body.size());, +      gzipSink.close();, +      body = gzipBody;, +      result.setChunkedBody(body, 1024);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, +    byte[] bytes = new byte[bodyByteCount];, +    random.nextBytes(bytes);, +    Buffer body = new Buffer().write(bytes);, +      Buffer gzipBody = new Buffer();, +      GzipSink gzipSink = new GzipSink(gzipBody);, +      gzipSink.write(body, body.size());, +      gzipSink.close();, +      body = gzipBody;, +      result.setChunkedBody(body, 1024);, +++ b/mockwebserver/pom.xml, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, +    byte[] bytes = new byte[bodyByteCount];, +    random.nextBytes(bytes);, +    Buffer body = new Buffer().write(bytes);, +      Buffer gzipBody = new Buffer();, +      GzipSink gzipSink = new GzipSink(gzipBody);, +      gzipSink.write(body, body.size());, +      gzipSink.close();, +      body = gzipBody;, +      result.setChunkedBody(body, 1024);, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +, +  /** @deprecated replaced with {@link #peek}. */, +  protected final SocketPolicy peekSocketPolicy() {, +    throw new UnsupportedOperationException("This API is obsolete. Override peek() instead!");, +  }, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, +    byte[] bytes = new byte[bodyByteCount];, +    random.nextBytes(bytes);, +    Buffer body = new Buffer().write(bytes);, +      Buffer gzipBody = new Buffer();, +      GzipSink gzipSink = new GzipSink(gzipBody);, +      gzipSink.write(body, body.size());, +      gzipSink.close();, +      body = gzipBody;, +      result.setChunkedBody(body, 1024);, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +, +  /** @deprecated replaced with {@link #peek}. */, +  protected final SocketPolicy peekSocketPolicy() {, +    throw new UnsupportedOperationException("This API is obsolete. Override peek() instead!");, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +    setHeader("Content-Length", 0);, +  /** Returns a copy of the raw HTTP payload. */, +    return body != null ? body.clone() : null;, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, +    byte[] bytes = new byte[bodyByteCount];, +    random.nextBytes(bytes);, +    Buffer body = new Buffer().write(bytes);, +      Buffer gzipBody = new Buffer();, +      GzipSink gzipSink = new GzipSink(gzipBody);, +      gzipSink.write(body, body.size());, +      gzipSink.close();, +      body = gzipBody;, +      result.setChunkedBody(body, 1024);, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +, +  /** @deprecated replaced with {@link #peek}. */, +  protected final SocketPolicy peekSocketPolicy() {, +    throw new UnsupportedOperationException("This API is obsolete. Override peek() instead!");, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +    setHeader("Content-Length", 0);, +  /** Returns a copy of the raw HTTP payload. */, +    return body != null ? body.clone() : null;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    Buffer body = response.getBody();, +    if (body == null) return;, +    throttledTransfer(response, socket, body, sink, Long.MAX_VALUE);, +, +      boolean closeStreamAfterHeaders = body != null || !response.getPushPromises().isEmpty();, +      if (body != null) {, +        boolean hasBody = pushPromise.getResponse().getBody() != null;, +            stream.getConnection().pushStream(stream.getId(), pushedHeaders, hasBody);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import okio.GzipSink;, +    byte[] bytes = new byte[bodyByteCount];, +    random.nextBytes(bytes);, +    Buffer body = new Buffer().write(bytes);, +      Buffer gzipBody = new Buffer();]
[+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, +      @Override public Transmitter transmitter(Call call) {, +        return ((RealCall) call).transmitter();, +      @Override public void initDeferredTrailers(, +          Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, +        responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, +      @Override public Transmitter transmitter(Call call) {, +        return ((RealCall) call).transmitter();, +      @Override public void initDeferredTrailers(, +          Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, +        responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.Transmitter;, +   * There is a cycle between the {@link Call} and {@link Transmitter} that makes this awkward., +   * This is set after immediately after creating the call instance., +  private Transmitter transmitter;, +    call.transmitter = new Transmitter(client, call);, +    transmitter.callStart();, +      transmitter.callFailed(e);, +    transmitter.setCallStackTrace(, +        Platform.get().getStackTraceForCloseable("response.body().close()"));, +    transmitter.callStart();, +    transmitter.cancel();, +    return transmitter.isCanceled();, +  Transmitter transmitter() {, +    return transmitter;, +        transmitter.callFailed(ioException);, +        if (transmitter.isCanceled()) {, +          transmitter.callFailed(e);, +    interceptors.add(new RetryAndFollowUpInterceptor(client));, +    Interceptor.Chain chain = new RealInterceptorChain(interceptors, transmitter, null, 0,, +        originalRequest, this, client.connectTimeoutMillis(),, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, +      @Override public Transmitter transmitter(Call call) {, +        return ((RealCall) call).transmitter();, +      @Override public void initDeferredTrailers(, +          Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, +        responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.Transmitter;, +   * There is a cycle between the {@link Call} and {@link Transmitter} that makes this awkward., +   * This is set after immediately after creating the call instance., +  private Transmitter transmitter;, +    call.transmitter = new Transmitter(client, call);, +    transmitter.callStart();, +      transmitter.callFailed(e);, +    transmitter.setCallStackTrace(, +        Platform.get().getStackTraceForCloseable("response.body().close()"));, +    transmitter.callStart();, +    transmitter.cancel();, +    return transmitter.isCanceled();, +  Transmitter transmitter() {, +    return transmitter;, +        transmitter.callFailed(ioException);, +        if (transmitter.isCanceled()) {, +          transmitter.callFailed(e);, +    interceptors.add(new RetryAndFollowUpInterceptor(client));, +    Interceptor.Chain chain = new RealInterceptorChain(interceptors, transmitter, null, 0,, +        originalRequest, this, client.connectTimeoutMillis(),, +++ b/okhttp/src/main/java/okhttp3/Response.java, +import okhttp3.internal.DeferredTrailers;, +  final @Nullable DeferredTrailers deferredTrailers;, +    this.deferredTrailers = builder.deferredTrailers;, +    return deferredTrailers.trailers();, +    @Nullable DeferredTrailers deferredTrailers;, +      this.deferredTrailers = response.deferredTrailers;, +    void initDeferredTrailers(DeferredTrailers deferredTrailers) {, +      this.deferredTrailers = deferredTrailers;, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, +      @Override public Transmitter transmitter(Call call) {, +        return ((RealCall) call).transmitter();, +      @Override public void initDeferredTrailers(, +          Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, +        responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.Transmitter;, +   * There is a cycle between the {@link Call} and {@link Transmitter} that makes this awkward., +   * This is set after immediately after creating the call instance., +  private Transmitter transmitter;, +    call.transmitter = new Transmitter(client, call);, +    transmitter.callStart();, +      transmitter.callFailed(e);, +    transmitter.setCallStackTrace(, +        Platform.get().getStackTraceForCloseable("response.body().close()"));, +    transmitter.callStart();, +    transmitter.cancel();, +    return transmitter.isCanceled();, +  Transmitter transmitter() {, +    return transmitter;, +        transmitter.callFailed(ioException);, +        if (transmitter.isCanceled()) {]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2C) && protocols.size() > 1) {, +      // when using h2c prior knowledge, no other protocol should be supported., +      throw new IllegalArgumentException("protocols containing h2c cannot use other protocols: ", +              + protocols);, +    } else if (!protocols.contains(Protocol.H2C) && !protocols.contains(Protocol.HTTP_1_1)) {, +  public List<Protocol> protocols() {, +    return protocols;, +  }, +, +        } else if (protocols.contains(Protocol.H2C)) {, +          socket = raw;, +          protocol = Protocol.H2C;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2C) && protocols.size() > 1) {, +      // when using h2c prior knowledge, no other protocol should be supported., +      throw new IllegalArgumentException("protocols containing h2c cannot use other protocols: ", +              + protocols);, +    } else if (!protocols.contains(Protocol.H2C) && !protocols.contains(Protocol.HTTP_1_1)) {, +  public List<Protocol> protocols() {, +    return protocols;, +  }, +, +        } else if (protocols.contains(Protocol.H2C)) {, +          socket = raw;, +          protocol = Protocol.H2C;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.Protocol;, +, +  @Test public void testH2CServerFallback() {, +    try {, +      server.setProtocols(Arrays.asList(Protocol.H2C, Protocol.HTTP_1_1));, +      fail("When H2C is specified, no other protocol can be specified");, +    } catch (IllegalArgumentException expected) {, +      assertEquals("protocols containing h2c cannot use other protocols: [h2c, http/1.1]", expected.getMessage());, +    }, +  }, +, +  @Test public void testH2CServerDuplicates() {, +    try {, +      // Treating this use case as user error, +      server.setProtocols(Arrays.asList(Protocol.H2C, Protocol.H2C));, +      fail("When H2C is specified, no other protocol can be specified");, +    } catch (IllegalArgumentException expected) {, +      assertEquals("protocols containing h2c cannot use other protocols: [h2c, h2c]", expected.getMessage());, +    }, +  }, +, +  @Test public void testMockWebServerH2CProtocol() {, +    server.setProtocols(Arrays.asList(Protocol.H2C));, +, +    assertEquals(1, server.protocols().size());, +    assertEquals(Protocol.H2C, server.protocols().get(0));, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2C) && protocols.size() > 1) {, +      // when using h2c prior knowledge, no other protocol should be supported., +      throw new IllegalArgumentException("protocols containing h2c cannot use other protocols: ", +              + protocols);, +    } else if (!protocols.contains(Protocol.H2C) && !protocols.contains(Protocol.HTTP_1_1)) {, +  public List<Protocol> protocols() {, +    return protocols;, +  }, +, +        } else if (protocols.contains(Protocol.H2C)) {, +          socket = raw;, +          protocol = Protocol.H2C;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.Protocol;, +, +  @Test public void testH2CServerFallback() {, +    try {, +      server.setProtocols(Arrays.asList(Protocol.H2C, Protocol.HTTP_1_1));, +      fail("When H2C is specified, no other protocol can be specified");, +    } catch (IllegalArgumentException expected) {, +      assertEquals("protocols containing h2c cannot use other protocols: [h2c, http/1.1]", expected.getMessage());, +    }, +  }, +, +  @Test public void testH2CServerDuplicates() {, +    try {, +      // Treating this use case as user error, +      server.setProtocols(Arrays.asList(Protocol.H2C, Protocol.H2C));, +      fail("When H2C is specified, no other protocol can be specified");, +    } catch (IllegalArgumentException expected) {, +      assertEquals("protocols containing h2c cannot use other protocols: [h2c, h2c]", expected.getMessage());, +    }, +  }, +, +  @Test public void testMockWebServerH2CProtocol() {, +    server.setProtocols(Arrays.asList(Protocol.H2C));, +, +    assertEquals(1, server.protocols().size());, +    assertEquals(Protocol.H2C, server.protocols().get(0));]
[+++ b/benchmarks/pom.xml, +    <version>3.1.2</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.2</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.2</version>, +++ b/okcurl/pom.xml, +    <version>3.1.2</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.2</version>, +++ b/okcurl/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.2</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.2</version>, +++ b/okcurl/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.2</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.2</version>, +++ b/okcurl/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.2</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.2</version>, +++ b/okcurl/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.2</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.2</version>, +++ b/okcurl/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.1.2</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.2</version>, +++ b/okcurl/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.1.2</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.2</version>, +++ b/okcurl/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.2</version>]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/README.md, +```, +```, +```, +```, +```, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/README.md, +```, +```, +```, +```, +```, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    serverSocket = new ServerSocket(port, 50, inetAddress);, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/README.md, +```, +```, +```, +```, +```, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    serverSocket = new ServerSocket(port, 50, inetAddress);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/README.md, +```, +```, +```, +```, +```, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    serverSocket = new ServerSocket(port, 50, inetAddress);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, +    Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/CHANGELOG.md]
[+++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/deploy_website.sh, +  curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/deploy_website.sh, +  curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>]
[+++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.1.0-SNAPSHOT</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, +      // TODO(jwilson): test that we're interrupted once Okio retains interrupted state., +      //     https://github.com/square/okhttp/issues/3107, +      if (false) assertTrue(Thread.interrupted());, +      // TODO(jwilson): test that we're interrupted once Okio retains interrupted state., +      //     https://github.com/square/okhttp/issues/3107, +      if (false) assertTrue(Thread.interrupted());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, +      // TODO(jwilson): test that we're interrupted once Okio retains interrupted state., +      //     https://github.com/square/okhttp/issues/3107, +      if (false) assertTrue(Thread.interrupted());, +      // TODO(jwilson): test that we're interrupted once Okio retains interrupted state., +      //     https://github.com/square/okhttp/issues/3107, +      if (false) assertTrue(Thread.interrupted());, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, +      // TODO(jwilson): test that we're interrupted once Okio retains interrupted state., +      //     https://github.com/square/okhttp/issues/3107, +      if (false) assertTrue(Thread.interrupted());, +      // TODO(jwilson): test that we're interrupted once Okio retains interrupted state., +      //     https://github.com/square/okhttp/issues/3107, +      if (false) assertTrue(Thread.interrupted());, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +++ b/pom.xml, +    <bouncycastle.version>1.60</bouncycastle.version>, +    <okio.version>1.14.0</okio.version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +        streamAllocation.streamFinished(true, streamAllocation.codec(), -1L, null);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +        streamAllocation.streamFinished(true, streamAllocation.codec(), -1L, null);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +  public void streamFinished(boolean noNewStreams, HttpCodec codec, long bytesRead, IOException e) {, +    eventListener.responseBodyEnd(call, bytesRead);, +, +    boolean callEnd;, +      callEnd = this.released;, +, +    if (e != null) {, +      eventListener.callFailed(call, e);, +    } else if (callEnd) {, +      eventListener.callEnd(call);, +    }, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +        streamAllocation.streamFinished(true, streamAllocation.codec(), -1L, null);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +  public void streamFinished(boolean noNewStreams, HttpCodec codec, long bytesRead, IOException e) {, +    eventListener.responseBodyEnd(call, bytesRead);, +, +    boolean callEnd;, +      callEnd = this.released;, +, +    if (e != null) {, +      eventListener.callFailed(call, e);, +    } else if (callEnd) {, +      eventListener.callEnd(call);, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java, +        streamAllocation.streamFinished(!reuseConnection, Http1Codec.this, bytesRead, e);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +        streamAllocation.streamFinished(true, streamAllocation.codec(), -1L, null);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +  public void streamFinished(boolean noNewStreams, HttpCodec codec, long bytesRead, IOException e) {, +    eventListener.responseBodyEnd(call, bytesRead);, +, +    boolean callEnd;, +      callEnd = this.released;, +, +    if (e != null) {, +      eventListener.callFailed(call, e);, +    } else if (callEnd) {, +      eventListener.callEnd(call);, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java, +        streamAllocation.streamFinished(!reuseConnection, Http1Codec.this, bytesRead, e);, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java, +      streamAllocation.streamFinished(false, Http2Codec.this, bytesRead, e);]
[+++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_171</id>, +      <activation>, +        <jdk>1.8.0_171</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.12.v20180117</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_172</id>, +      <activation>, +        <jdk>1.8.0_172</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.12.v20180117</alpn.jdk8.version>, +      </properties>]
[+++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = Objects.hashCode(id);, +    result = 31 * result + Objects.hashCode(type);, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = Objects.hashCode(id);, +    result = 31 * result + Objects.hashCode(type);, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    Response response = call.execute();, +, +    Response response = call.execute();, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = Objects.hashCode(id);, +    result = 31 * result + Objects.hashCode(type);, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    Response response = call.execute();, +, +    Response response = call.execute();, +++ b/okhttp/src/main/java/okhttp3/Address.java, +    result = 31 * result + Objects.hashCode(proxy);, +    result = 31 * result + Objects.hashCode(sslSocketFactory);, +    result = 31 * result + Objects.hashCode(hostnameVerifier);, +    result = 31 * result + Objects.hashCode(certificatePinner);, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = Objects.hashCode(id);, +    result = 31 * result + Objects.hashCode(type);, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    Response response = call.execute();, +, +    Response response = call.execute();, +++ b/okhttp/src/main/java/okhttp3/Address.java, +    result = 31 * result + Objects.hashCode(proxy);, +    result = 31 * result + Objects.hashCode(sslSocketFactory);, +    result = 31 * result + Objects.hashCode(hostnameVerifier);, +    result = 31 * result + Objects.hashCode(certificatePinner);, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +    int result = Objects.hashCode(certificateChainCleaner);, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = Objects.hashCode(id);, +    result = 31 * result + Objects.hashCode(type);, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    Response response = call.execute();, +, +    Response response = call.execute();, +++ b/okhttp/src/main/java/okhttp3/Address.java, +    result = 31 * result + Objects.hashCode(proxy);, +    result = 31 * result + Objects.hashCode(sslSocketFactory);, +    result = 31 * result + Objects.hashCode(hostnameVerifier);, +    result = 31 * result + Objects.hashCode(certificatePinner);, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +    int result = Objects.hashCode(certificateChainCleaner);, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import java.util.Objects;, +        + "cipherSuites=" + Objects.toString(cipherSuites(), "[all enabled]"), +        + ", tlsVersions=" + Objects.toString(tlsVersions(), "[all enabled]")]
[+++ /dev/null, +++ /dev/null, +++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/Authenticate.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.recipes;, +, +import com.squareup.okhttp.Authenticator;, +import com.squareup.okhttp.Credentials;, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.Request;, +import com.squareup.okhttp.Response;, +import java.io.IOException;, +import java.net.Proxy;, +, +public final class Authenticate {, +  private final OkHttpClient client = new OkHttpClient();, +, +  public void run() throws Exception {, +    client.setAuthenticator(new Authenticator() {, +      @Override public Request authenticate(Proxy proxy, Response response) {, +        System.out.println("Authenticating for response: " + response);, +        System.out.println("Challenges: " + response.challenges());, +        String credential = Credentials.basic("jesse", "password1");, +        return response.request().newBuilder(), +            .header("Authorization", credential), +            .build();, +      }, +, +      @Override public Request authenticateProxy(Proxy proxy, Response response) {, +        return null; // Null indicates no attempt to authenticate., +      }, +    });, +, +    Request request = new Request.Builder(), +        .url("http://publicobject.com/secrets/hellosecret.txt"), +        .build();, +, +    Response response = client.newCall(request).execute();, +    if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);, +, +    System.out.println(response.body().string());, +  }, +, +  public static void main(String... args) throws Exception {, +    new Authenticate().run();, +  }, +}, +++ /dev/null, +++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/Authenticate.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.recipes;, +, +import com.squareup.okhttp.Authenticator;, +import com.squareup.okhttp.Credentials;, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.Request;, +import com.squareup.okhttp.Response;, +import java.io.IOException;, +import java.net.Proxy;, +, +public final class Authenticate {, +  private final OkHttpClient client = new OkHttpClient();, +, +  public void run() throws Exception {, +    client.setAuthenticator(new Authenticator() {, +      @Override public Request authenticate(Proxy proxy, Response response) {, +        System.out.println("Authenticating for response: " + response);, +        System.out.println("Challenges: " + response.challenges());, +        String credential = Credentials.basic("jesse", "password1");, +        return response.request().newBuilder(), +            .header("Authorization", credential), +            .build();]
[+++ b/benchmarks/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>benchmarks</artifactId>, +  <name>Benchmarks</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>org.bouncycastle</groupId>, +      <artifactId>bcprov-jdk15on</artifactId>, +    </dependency>, +    <dependency>, +      <groupId>org.mortbay.jetty.npn</groupId>, +      <artifactId>npn-boot</artifactId>, +      <scope>provided</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/benchmarks/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>benchmarks</artifactId>, +  <name>Benchmarks</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>org.bouncycastle</groupId>, +      <artifactId>bcprov-jdk15on</artifactId>, +    </dependency>, +    <dependency>, +      <groupId>org.mortbay.jetty.npn</groupId>, +      <artifactId>npn-boot</artifactId>, +      <scope>provided</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.benchmarks;, +, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.internal.SslContextBuilder;, +import com.squareup.okhttp.mockwebserver.Dispatcher;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import java.io.ByteArrayOutputStream;]
[+++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java, +import okhttp3.internal.http2.Header;, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java, +import okhttp3.internal.http2.Header;, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import static okhttp3.internal.Util.indexOf;, +    if (isFallback && indexOf(sslSocket.getSupportedCipherSuites(), "TLS_FALLBACK_SCSV") != -1) {, +      if (indexOf(b, toFind) != -1) {, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java, +import okhttp3.internal.http2.Header;, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import static okhttp3.internal.Util.indexOf;, +    if (isFallback && indexOf(sslSocket.getSupportedCipherSuites(), "TLS_FALLBACK_SCSV") != -1) {, +      if (indexOf(b, toFind) != -1) {, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +  public static <T> int indexOf(T[] array, T value) {, +    for (int i = 0, size = array.length; i < size; i++) {, +      if (equal(array[i], value)) return i;, +    }, +    return -1;, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java, +import okhttp3.internal.http2.Header;, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import static okhttp3.internal.Util.indexOf;, +    if (isFallback && indexOf(sslSocket.getSupportedCipherSuites(), "TLS_FALLBACK_SCSV") != -1) {, +      if (indexOf(b, toFind) != -1) {, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +  public static <T> int indexOf(T[] array, T value) {, +    for (int i = 0, size = array.length; i < size; i++) {, +      if (equal(array[i], value)) return i;, +    }, +    return -1;, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java, +import okhttp3.internal.Util;, +        Arrays.fill(dynamicTable, nextHeaderIndex + 1, nextHeaderIndex + 1 + entriesToEvict, null);, +          int dynamicIndex = Util.indexOf(dynamicTable, header);, +          if (dynamicIndex != -1) {, +            writeInt(dynamicIndex - nextHeaderIndex + STATIC_HEADER_TABLE.length, PREFIX_7_BITS,]
[+++ b/CHANGELOG.md, +    charset for the remaining bytes. Most applications should not not need a byte order mark., + *  New: Update HTTP/2 support to to `h2-16` and `hpack-10`., +++ b/CHANGELOG.md, +    charset for the remaining bytes. Most applications should not not need a byte order mark., + *  New: Update HTTP/2 support to to `h2-16` and `hpack-10`., +++ b/README.md, +  <version>3.6.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.6.0', +  <version>3.6.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.6.0', +-dontwarn okhttp3.**, +++ b/CHANGELOG.md, +    charset for the remaining bytes. Most applications should not not need a byte order mark., + *  New: Update HTTP/2 support to to `h2-16` and `hpack-10`., +++ b/README.md, +  <version>3.6.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.6.0', +  <version>3.6.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.6.0', +-dontwarn okhttp3.**, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +    charset for the remaining bytes. Most applications should not not need a byte order mark., + *  New: Update HTTP/2 support to to `h2-16` and `hpack-10`., +++ b/README.md, +  <version>3.6.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.6.0', +  <version>3.6.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.6.0', +-dontwarn okhttp3.**, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +    charset for the remaining bytes. Most applications should not not need a byte order mark., + *  New: Update HTTP/2 support to to `h2-16` and `hpack-10`., +++ b/README.md, +  <version>3.6.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.6.0', +  <version>3.6.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.6.0', +-dontwarn okhttp3.**, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +++ b/CHANGELOG.md, +    charset for the remaining bytes. Most applications should not not need a byte order mark., + *  New: Update HTTP/2 support to to `h2-16` and `hpack-10`., +++ b/README.md, +  <version>3.6.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.6.0', +  <version>3.6.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.6.0', +-dontwarn okhttp3.**, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/CHANGELOG.md, +    charset for the remaining bytes. Most applications should not not need a byte order mark., + *  New: Update HTTP/2 support to to `h2-16` and `hpack-10`., +++ b/README.md, +  <version>3.6.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.6.0', +  <version>3.6.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.6.0', +-dontwarn okhttp3.**, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okcurl/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +    charset for the remaining bytes. Most applications should not not need a byte order mark., + *  New: Update HTTP/2 support to to `h2-16` and `hpack-10`., +++ b/README.md, +  <version>3.6.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.6.0', +  <version>3.6.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.6.0', +-dontwarn okhttp3.**, +++ b/benchmarks/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okcurl/pom.xml, +    <version>3.7.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +import okhttp3.internal.platform.Platform;, +    private SSLContext sslContext;, +    public Builder sslContext(SSLContext sslContext) {, +      this.sslContext = sslContext;, +      return this;, +    }, +, +        SSLContext activeSslContext =, +            this.sslContext != null ? this.sslContext : Platform.get().getSSLContext();, +        activeSslContext.init(keyManagerFactory.getKeyManagers(), trustManagers,, +            new SecureRandom());, +        return new SslClient(activeSslContext, (X509TrustManager) trustManagers[0]);, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +import okhttp3.internal.platform.Platform;, +    private SSLContext sslContext;, +    public Builder sslContext(SSLContext sslContext) {, +      this.sslContext = sslContext;, +      return this;, +    }, +, +        SSLContext activeSslContext =, +            this.sslContext != null ? this.sslContext : Platform.get().getSSLContext();, +        activeSslContext.init(keyManagerFactory.getKeyManagers(), trustManagers,, +            new SecureRandom());, +        return new SslClient(activeSslContext, (X509TrustManager) trustManagers[0]);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.platform.Platform;, +      SSLContext context = Platform.get().getSSLContext();, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +import okhttp3.internal.platform.Platform;, +    private SSLContext sslContext;, +    public Builder sslContext(SSLContext sslContext) {, +      this.sslContext = sslContext;, +      return this;, +    }, +, +        SSLContext activeSslContext =, +            this.sslContext != null ? this.sslContext : Platform.get().getSSLContext();, +        activeSslContext.init(keyManagerFactory.getKeyManagers(), trustManagers,, +            new SecureRandom());, +        return new SslClient(activeSslContext, (X509TrustManager) trustManagers[0]);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.platform.Platform;, +      SSLContext context = Platform.get().getSSLContext();, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import java.net.SocketException;, +import okhttp3.internal.platform.Platform;, +    SSLContext sslContext2 = Platform.get().getSSLContext();, +    SSLContext sslContext = Platform.get().getSSLContext();, +    } catch (SocketException expected) {, +      // Conscrypt's response to the FAIL_HANDSHAKE, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +import okhttp3.internal.platform.Platform;, +    private SSLContext sslContext;, +    public Builder sslContext(SSLContext sslContext) {, +      this.sslContext = sslContext;, +      return this;, +    }, +, +        SSLContext activeSslContext =, +            this.sslContext != null ? this.sslContext : Platform.get().getSSLContext();, +        activeSslContext.init(keyManagerFactory.getKeyManagers(), trustManagers,, +            new SecureRandom());, +        return new SslClient(activeSslContext, (X509TrustManager) trustManagers[0]);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.platform.Platform;, +      SSLContext context = Platform.get().getSSLContext();, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import java.net.SocketException;, +import okhttp3.internal.platform.Platform;, +    SSLContext sslContext2 = Platform.get().getSSLContext();, +    SSLContext sslContext = Platform.get().getSSLContext();, +    } catch (SocketException expected) {, +      // Conscrypt's response to the FAIL_HANDSHAKE, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +import java.security.NoSuchAlgorithmException;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLException;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +import static org.junit.Assert.assertTrue;, +      assertTrue(getPlatform().equals("jdk9"));, +      assertTrue(getPlatform().equals("jdk9"));, +    // The test uses JDK default SSL Context instead of the Platform provided one, +    // as Conscrypt seems to have some differences, we only want to test client side here., +        .sslContext(getSslContext()), +, +  private SSLContext getSslContext() {, +    try {, +      return SSLContext.getInstance("TLS");, +    } catch (NoSuchAlgorithmException e) {, +      throw new IllegalStateException("unable to build JDK default SSLContext");, +    }, +  }, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +import okhttp3.internal.platform.Platform;, +    private SSLContext sslContext;, +    public Builder sslContext(SSLContext sslContext) {, +      this.sslContext = sslContext;, +      return this;]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +    bytesOut.writeUtf8("0\r\n"); // Last chunk. Trailers follow!, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +    bytesOut.writeUtf8("0\r\n"); // Last chunk. Trailers follow!, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    writeHeaders(sink, response.getHeaders());, +, +    Buffer body = response.getBody();, +    if (body == null) return;, +    sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +    throttledTransfer(response, socket, body, sink, body.size(), false);, +, +    if ("chunked".equalsIgnoreCase(response.getHeaders().get("Transfer-Encoding"))) {, +      writeHeaders(sink, response.getTrailers());, +    }, +  }, +, +  private void writeHeaders(BufferedSink sink, Headers headers) throws IOException {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +    bytesOut.writeUtf8("0\r\n"); // Last chunk. Trailers follow!, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    writeHeaders(sink, response.getHeaders());, +, +    Buffer body = response.getBody();, +    if (body == null) return;, +    sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +    throttledTransfer(response, socket, body, sink, body.size(), false);, +, +    if ("chunked".equalsIgnoreCase(response.getHeaders().get("Transfer-Encoding"))) {, +      writeHeaders(sink, response.getTrailers());, +    }, +  }, +, +  private void writeHeaders(BufferedSink sink, Headers headers) throws IOException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okio.BufferedSource;, +    BufferedSource bodySource = Okio.buffer(Okio.source(, +        openConnection(server.url("/").url()).getInputStream()));, +    assertEquals("ABCDE\n", bodySource.readUtf8(6));, +      bodySource.readUtf8(21);, +      bodySource.close();, +    CHUNKED {, +    FIXED_LENGTH {, +    END_OF_STREAM {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +    bytesOut.writeUtf8("0\r\n"); // Last chunk. Trailers follow!, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    writeHeaders(sink, response.getHeaders());, +, +    Buffer body = response.getBody();, +    if (body == null) return;, +    sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +    throttledTransfer(response, socket, body, sink, body.size(), false);, +, +    if ("chunked".equalsIgnoreCase(response.getHeaders().get("Transfer-Encoding"))) {, +      writeHeaders(sink, response.getTrailers());, +    }, +  }, +, +  private void writeHeaders(BufferedSink sink, Headers headers) throws IOException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okio.BufferedSource;, +    BufferedSource bodySource = Okio.buffer(Okio.source(, +        openConnection(server.url("/").url()).getInputStream()));, +    assertEquals("ABCDE\n", bodySource.readUtf8(6));, +      bodySource.readUtf8(21);, +      bodySource.close();, +    CHUNKED {, +    FIXED_LENGTH {, +    END_OF_STREAM {, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +      bodySource.readUtf8(21);, +    CHUNKED {, +      @Override void setBody(MockResponse response, Buffer content, int chunkSize) {, +    FIXED_LENGTH {, +    END_OF_STREAM {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +    bytesOut.writeUtf8("0\r\n"); // Last chunk. Trailers follow!, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    writeHeaders(sink, response.getHeaders());, +, +    Buffer body = response.getBody();, +    if (body == null) return;, +    sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +    throttledTransfer(response, socket, body, sink, body.size(), false);, +, +    if ("chunked".equalsIgnoreCase(response.getHeaders().get("Transfer-Encoding"))) {, +      writeHeaders(sink, response.getTrailers());, +    }, +  }, +, +  private void writeHeaders(BufferedSink sink, Headers headers) throws IOException {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okio.BufferedSource;, +    BufferedSource bodySource = Okio.buffer(Okio.source(, +        openConnection(server.url("/").url()).getInputStream()));, +    assertEquals("ABCDE\n", bodySource.readUtf8(6));, +      bodySource.readUtf8(21);, +      bodySource.close();, +    CHUNKED {]
[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static org.junit.Assert.assertNotNull;, +  /**, +   * These public suffixes were selected by inspecting the publicsuffix.org list. It's possible they, +   * may change in the future. If this test begins to fail, please double check they are still, +   * present in the public suffix list., +   */, +  @Test public void domainIsPublicSuffix() {, +    HttpUrl ascii = HttpUrl.parse("https://foo1.foo.bar.elb.amazonaws.com");, +    assertNotNull(Cookie.parse(ascii, "a=b; domain=foo.bar.elb.amazonaws.com"));, +    assertNull(Cookie.parse(ascii, "a=b; domain=bar.elb.amazonaws.com"));, +    assertNull(Cookie.parse(ascii, "a=b; domain=com"));, +, +    HttpUrl unicode = HttpUrl.parse("https://長.長.長崎.jp");, +    assertNotNull(Cookie.parse(unicode, "a=b; domain=長.長崎.jp"));, +    assertNull(Cookie.parse(unicode, "a=b; domain=長崎.jp"));, +, +    HttpUrl punycode = HttpUrl.parse("https://xn--ue5a.xn--ue5a.xn--8ltr62k.jp");, +    assertNotNull(Cookie.parse(punycode, "a=b; domain=xn--ue5a.xn--8ltr62k.jp"));, +    assertNull(Cookie.parse(punycode, "a=b; domain=xn--8ltr62k.jp"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static org.junit.Assert.assertNotNull;, +  /**, +   * These public suffixes were selected by inspecting the publicsuffix.org list. It's possible they, +   * may change in the future. If this test begins to fail, please double check they are still, +   * present in the public suffix list., +   */, +  @Test public void domainIsPublicSuffix() {, +    HttpUrl ascii = HttpUrl.parse("https://foo1.foo.bar.elb.amazonaws.com");, +    assertNotNull(Cookie.parse(ascii, "a=b; domain=foo.bar.elb.amazonaws.com"));, +    assertNull(Cookie.parse(ascii, "a=b; domain=bar.elb.amazonaws.com"));, +    assertNull(Cookie.parse(ascii, "a=b; domain=com"));, +, +    HttpUrl unicode = HttpUrl.parse("https://長.長.長崎.jp");, +    assertNotNull(Cookie.parse(unicode, "a=b; domain=長.長崎.jp"));, +    assertNull(Cookie.parse(unicode, "a=b; domain=長崎.jp"));, +, +    HttpUrl punycode = HttpUrl.parse("https://xn--ue5a.xn--ue5a.xn--8ltr62k.jp");, +    assertNotNull(Cookie.parse(punycode, "a=b; domain=xn--ue5a.xn--8ltr62k.jp"));, +    assertNull(Cookie.parse(punycode, "a=b; domain=xn--8ltr62k.jp"));, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Cookie.java, +import okhttp3.internal.publicsuffix.PublicSuffixDatabase;, +        : domainMatch(url.host(), domain);, +  private static boolean domainMatch(String urlHost, String domain) {, +    String urlHost = url.host();, +      domain = urlHost;, +    } else if (!domainMatch(urlHost, domain)) {, +    // If the domain is a suffix of the url host, it must not be a public suffix., +    if (urlHost.length() != domain.length(), +        && PublicSuffixDatabase.get().getEffectiveTldPlusOne(domain) == null) {, +      return null;, +    }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static org.junit.Assert.assertNotNull;, +  /**, +   * These public suffixes were selected by inspecting the publicsuffix.org list. It's possible they, +   * may change in the future. If this test begins to fail, please double check they are still, +   * present in the public suffix list., +   */, +  @Test public void domainIsPublicSuffix() {, +    HttpUrl ascii = HttpUrl.parse("https://foo1.foo.bar.elb.amazonaws.com");, +    assertNotNull(Cookie.parse(ascii, "a=b; domain=foo.bar.elb.amazonaws.com"));, +    assertNull(Cookie.parse(ascii, "a=b; domain=bar.elb.amazonaws.com"));, +    assertNull(Cookie.parse(ascii, "a=b; domain=com"));, +, +    HttpUrl unicode = HttpUrl.parse("https://長.長.長崎.jp");, +    assertNotNull(Cookie.parse(unicode, "a=b; domain=長.長崎.jp"));, +    assertNull(Cookie.parse(unicode, "a=b; domain=長崎.jp"));, +, +    HttpUrl punycode = HttpUrl.parse("https://xn--ue5a.xn--ue5a.xn--8ltr62k.jp");, +    assertNotNull(Cookie.parse(punycode, "a=b; domain=xn--ue5a.xn--8ltr62k.jp"));, +    assertNull(Cookie.parse(punycode, "a=b; domain=xn--8ltr62k.jp"));, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Cookie.java, +import okhttp3.internal.publicsuffix.PublicSuffixDatabase;, +        : domainMatch(url.host(), domain);, +  private static boolean domainMatch(String urlHost, String domain) {, +    String urlHost = url.host();, +      domain = urlHost;, +    } else if (!domainMatch(urlHost, domain)) {, +    // If the domain is a suffix of the url host, it must not be a public suffix., +    if (urlHost.length() != domain.length(), +        && PublicSuffixDatabase.get().getEffectiveTldPlusOne(domain) == null) {, +      return null;, +    }, +, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +  private static final PublicSuffixDatabase instance = new PublicSuffixDatabase();, +, +  public static PublicSuffixDatabase get() {, +    return instance;, +  }, +]
[+++ b/benchmarks/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0-RC1</version>]
[+++ b/benchmarks/pom.xml, +    <version>3.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.6.0</version>, +++ b/okcurl/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.6.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.6.0</version>]
[+++ b/okhttp/pom.xml, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <excludePackageNames>com.squareup.okhttp.internal:com.squareup.okhttp.internal.*</excludePackageNames>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/okhttp/pom.xml, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <excludePackageNames>com.squareup.okhttp.internal:com.squareup.okhttp.internal.*</excludePackageNames>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/pom.xml, +          <artifactId>maven-javadoc-plugin</artifactId>, +          <version>2.9</version>, +        </plugin>, +, +        <plugin>, +          <groupId>org.apache.maven.plugins</groupId>]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +  private final Map<String, List<InetAddress>> hostAddresses = new LinkedHashMap<>();, +  private final List<String> requestedHosts = new ArrayList<>();, +  private int nextAddress = 100;, +  /** Sets the results for {@code hostname}. */, +  public FakeDns set(String hostname, List<InetAddress> addresses) {, +    hostAddresses.put(hostname, addresses);, +  /** Clears the results for {@code hostname}. */, +  public FakeDns clear(String hostname) {, +    hostAddresses.remove(hostname);, +  public InetAddress lookup(String hostname, int index) throws UnknownHostException {, +    return hostAddresses.get(hostname).get(index);, +, +    List<InetAddress> result = hostAddresses.get(hostname);, +    if (result != null) return result;, +, +    throw new UnknownHostException();, +, +  /** Allocates and returns {@code count} fake addresses like [255.0.0.100, 255.0.0.101]. */, +  public List<InetAddress> allocate(int count) {, +    try {, +      List<InetAddress> result = new ArrayList<>();, +      for (int i = 0; i < count; i++) {, +        if (nextAddress > 255) {, +          throw new AssertionError("too many addresses allocated");, +        }, +        result.add(InetAddress.getByAddress(, +            new byte[] {(byte) 255, (byte) 0, (byte) 0, (byte) nextAddress++}));, +      }, +      return result;, +    } catch (UnknownHostException e) {, +      throw new AssertionError();, +    }, +  }, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +  private final Map<String, List<InetAddress>> hostAddresses = new LinkedHashMap<>();, +  private final List<String> requestedHosts = new ArrayList<>();, +  private int nextAddress = 100;, +  /** Sets the results for {@code hostname}. */, +  public FakeDns set(String hostname, List<InetAddress> addresses) {, +    hostAddresses.put(hostname, addresses);, +  /** Clears the results for {@code hostname}. */, +  public FakeDns clear(String hostname) {, +    hostAddresses.remove(hostname);, +  public InetAddress lookup(String hostname, int index) throws UnknownHostException {, +    return hostAddresses.get(hostname).get(index);, +, +    List<InetAddress> result = hostAddresses.get(hostname);, +    if (result != null) return result;, +, +    throw new UnknownHostException();, +, +  /** Allocates and returns {@code count} fake addresses like [255.0.0.100, 255.0.0.101]. */, +  public List<InetAddress> allocate(int count) {, +    try {, +      List<InetAddress> result = new ArrayList<>();, +      for (int i = 0; i < count; i++) {, +        if (nextAddress > 255) {, +          throw new AssertionError("too many addresses allocated");, +        }, +        result.add(InetAddress.getByAddress(, +            new byte[] {(byte) 255, (byte) 0, (byte) 0, (byte) nextAddress++}));, +      }, +      return result;, +    } catch (UnknownHostException e) {, +      throw new AssertionError();, +    }, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        .dns(new FakeDns()), +    // Configure a DNS that returns our local MockWebServer for android.com., +    dns.set("android.com", Dns.SYSTEM.lookup(server.url("/").host()));, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +  private final Map<String, List<InetAddress>> hostAddresses = new LinkedHashMap<>();, +  private final List<String> requestedHosts = new ArrayList<>();, +  private int nextAddress = 100;, +  /** Sets the results for {@code hostname}. */, +  public FakeDns set(String hostname, List<InetAddress> addresses) {, +    hostAddresses.put(hostname, addresses);, +  /** Clears the results for {@code hostname}. */, +  public FakeDns clear(String hostname) {, +    hostAddresses.remove(hostname);, +  public InetAddress lookup(String hostname, int index) throws UnknownHostException {, +    return hostAddresses.get(hostname).get(index);, +, +    List<InetAddress> result = hostAddresses.get(hostname);, +    if (result != null) return result;, +, +    throw new UnknownHostException();, +, +  /** Allocates and returns {@code count} fake addresses like [255.0.0.100, 255.0.0.101]. */, +  public List<InetAddress> allocate(int count) {, +    try {, +      List<InetAddress> result = new ArrayList<>();]
[+++ b/okhttp-protocols/pom.xml, +    <dependency>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <version>1.10</version>, +      <optional>true</optional>, +    </dependency>, +++ b/okhttp-protocols/pom.xml, +    <dependency>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <version>1.10</version>, +      <optional>true</optional>, +    </dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, +  void emitCompleteSegments(Deadline deadline) throws IOException {, +++ b/okhttp-protocols/pom.xml, +    <dependency>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <version>1.10</version>, +      <optional>true</optional>, +    </dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, +  void emitCompleteSegments(Deadline deadline) throws IOException {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/DeflaterSink.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.bytes;, +, +import java.io.IOException;, +import java.util.zip.Deflater;, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;, +, +import static com.squareup.okhttp.internal.Util.checkOffsetAndCount;, +, +/**, + * A sink that uses <a href="http://tools.ietf.org/html/rfc1951">DEFLATE</a> to, + * compress data written to another source., + *, + * <h3>Sync flush</h3>, + * Aggressive flushing of this stream may result in reduced compression. Each, + * call to {@link #flush} immediately compresses all currently-buffered data;, + * this early compression may be less effective than compression performed, + * without flushing., + *, + * <p>This is equivalent to using {@link Deflater} with the sync flush option., + * This class does not offer any partial flush mechanism. For best performance,, + * only call {@link #flush} when application behavior requires it., + */, +public final class DeflaterSink implements Sink {, +  private final BufferedSink sink;, +  private final Deflater deflater;, +, +  public DeflaterSink(Sink sink, Deflater deflater) {, +    this.sink = new BufferedSink(sink);, +    this.deflater = deflater;, +  }, +, +  @Override public void write(OkBuffer source, long byteCount, Deadline deadline), +      throws IOException {, +    checkOffsetAndCount(source.byteCount, 0, byteCount);, +    while (byteCount > 0) {, +      // Share bytes from the head segment of 'source' with the deflater., +      Segment head = source.head;, +      int toDeflate = (int) Math.min(byteCount, head.limit - head.pos);, +      deflater.setInput(head.data, head.pos, toDeflate);, +, +      // Deflate those bytes into sink., +      deflate(deadline, false);, +, +      // Mark those bytes as read., +      source.byteCount -= toDeflate;, +      head.pos += toDeflate;, +      if (head.pos == head.limit) {, +        source.head = head.pop();, +        SegmentPool.INSTANCE.recycle(head);, +      }, +, +      byteCount -= toDeflate;, +    }, +  }, +, +  @IgnoreJRERequirement, +  private void deflate(Deadline deadline, boolean syncFlush) throws IOException {, +    while (true) {, +      Segment s = sink.buffer.writableSegment(1);]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;, +, +  public static ThreadFactory daemonThreadFactory(final String name) {, +    return new ThreadFactory() {, +      @Override public Thread newThread(Runnable runnable) {, +        Thread result = new Thread(runnable, name);, +        result.setDaemon(true);, +        return result;, +      }, +    };, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;, +, +  public static ThreadFactory daemonThreadFactory(final String name) {, +    return new ThreadFactory() {, +      @Override public Thread newThread(Runnable runnable) {, +        Thread result = new Thread(runnable, name);, +        result.setDaemon(true);, +        return result;, +      }, +    };, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  private static final ExecutorService executor = new ThreadPoolExecutor(0,, +      Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp SpdyConnection"));, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s ping %d", hostName, streamId) {, +      executor.submit(new NamedRunnable("OkHttp SPDY Callback %s stream %d", hostName, streamId) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;, +, +  public static ThreadFactory daemonThreadFactory(final String name) {, +    return new ThreadFactory() {, +      @Override public Thread newThread(Runnable runnable) {, +        Thread result = new Thread(runnable, name);, +        result.setDaemon(true);, +        return result;, +      }, +    };, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  private static final ExecutorService executor = new ThreadPoolExecutor(0,, +      Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp SpdyConnection"));, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s ping %d", hostName, streamId) {, +      executor.submit(new NamedRunnable("OkHttp SPDY Callback %s stream %d", hostName, streamId) {, +++ b/pom.xml, +    <mockwebserver.version>20130505</mockwebserver.version>, +    <bouncycastle.version>1.48</bouncycastle.version>, +    <gson.version>2.2.3</gson.version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +  private final Address addressC = newAddress("c");, +  private final Route routeC1 = newRoute(addressC);, +    ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, +    RealConnection c1 = newConnection(routeA1, 50L);, +    ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, +    RealConnection c1 = newConnection(routeA1, 50L);, +    ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, +    RealConnection c1 = newConnection(routeA1, 75L);, +    RealConnection c2 = newConnection(routeB1, 50L);, +  @Test public void oldestConnectionsEvictedIfIdleLimitExceeded() throws Exception {, +    ConnectionPool pool = new ConnectionPool(2, 100L, TimeUnit.NANOSECONDS);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +, +    RealConnection c1 = newConnection(routeA1, 50L);, +    pool.put(c1);, +, +    RealConnection c2 = newConnection(routeB1, 75L);, +    pool.put(c2);, +, +    // With 2 connections, there's no need to evict until the connections time out., +    assertEquals(50L, pool.cleanup(100L));, +    assertEquals(2, pool.getConnectionCount());, +    assertFalse(c1.socket.isClosed());, +    assertFalse(c2.socket.isClosed());, +, +    // Add a third connection, +    RealConnection c3 = newConnection(routeC1, 75L);, +    pool.put(c3);, +, +    // The third connection bounces the first., +    assertEquals(0L, pool.cleanup(100L));, +    assertEquals(2, pool.getConnectionCount());, +    assertTrue(c1.socket.isClosed());, +    assertFalse(c2.socket.isClosed());, +    assertFalse(c3.socket.isClosed());, +  }, +, +  private RealConnection newConnection(Route route, long idleAtNanos) {, +    RealConnection connection = new RealConnection(route);, +    connection.idleAtNanos = idleAtNanos;, +    connection.socket = new Socket();, +    return connection;, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +  private final Address addressC = newAddress("c");, +  private final Route routeC1 = newRoute(addressC);, +    ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, +    RealConnection c1 = newConnection(routeA1, 50L);, +    ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, +    RealConnection c1 = newConnection(routeA1, 50L);, +    ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, +    RealConnection c1 = newConnection(routeA1, 75L);, +    RealConnection c2 = newConnection(routeB1, 50L);, +  @Test public void oldestConnectionsEvictedIfIdleLimitExceeded() throws Exception {, +    ConnectionPool pool = new ConnectionPool(2, 100L, TimeUnit.NANOSECONDS);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +, +    RealConnection c1 = newConnection(routeA1, 50L);, +    pool.put(c1);, +, +    RealConnection c2 = newConnection(routeB1, 75L);, +    pool.put(c2);, +, +    // With 2 connections, there's no need to evict until the connections time out., +    assertEquals(50L, pool.cleanup(100L));, +    assertEquals(2, pool.getConnectionCount());, +    assertFalse(c1.socket.isClosed());, +    assertFalse(c2.socket.isClosed());, +, +    // Add a third connection, +    RealConnection c3 = newConnection(routeC1, 75L);, +    pool.put(c3);, +, +    // The third connection bounces the first., +    assertEquals(0L, pool.cleanup(100L));, +    assertEquals(2, pool.getConnectionCount());, +    assertTrue(c1.socket.isClosed());, +    assertFalse(c2.socket.isClosed());, +    assertFalse(c3.socket.isClosed());, +  }, +, +  private RealConnection newConnection(Route route, long idleAtNanos) {, +    RealConnection connection = new RealConnection(route);, +    connection.idleAtNanos = idleAtNanos;, +    connection.socket = new Socket();, +    return connection;, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionReuseTest.java]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/cache2/FileOperatorTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.cache2;, +, +import java.io.File;, +import java.io.IOException;, +import java.io.RandomAccessFile;, +import java.util.Random;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.ByteString;, +import okio.Okio;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public final class FileOperatorTest {, +  @Rule public final TemporaryFolder tempDir = new TemporaryFolder();, +, +  private File file;, +  private RandomAccessFile randomAccessFile;, +, +  @Before public void setUp() throws Exception {, +    file = tempDir.newFile();, +    randomAccessFile = new RandomAccessFile(file, "rw");, +  }, +, +  @After public void tearDown() throws Exception {, +    randomAccessFile.close();, +  }, +, +  @Test public void read() throws Exception {, +    write(ByteString.encodeUtf8("Hello, World"));, +, +    FileOperator operator = new FileOperator(randomAccessFile.getChannel());, +, +    Buffer buffer = new Buffer();, +    operator.read(0, buffer, 5);, +    assertEquals("Hello", buffer.readUtf8());, +, +    operator.read(4, buffer, 5);, +    assertEquals("o, Wo", buffer.readUtf8());, +  }, +, +  @Test public void write() throws Exception {, +    FileOperator operator = new FileOperator(randomAccessFile.getChannel());, +, +    Buffer buffer1 = new Buffer().writeUtf8("Hello, World");, +    operator.write(0, buffer1, 5);, +    assertEquals(", World", buffer1.readUtf8());, +, +    Buffer buffer2 = new Buffer().writeUtf8("icopter!");, +    operator.write(3, buffer2, 7);, +    assertEquals("!", buffer2.readUtf8());, +, +    assertEquals(ByteString.encodeUtf8("Helicopter"), snapshot());, +  }, +, +  @Test public void readAndWrite() throws Exception {, +    FileOperator operator = new FileOperator(randomAccessFile.getChannel());, +, +    write(ByteString.encodeUtf8("woman god creates dinosaurs destroys. "));, +    Buffer buffer = new Buffer();, +    operator.read(6, buffer, 21);, +    operator.read(36, buffer, 1);, +    operator.read(5, buffer, 5);, +    operator.read(28, buffer, 8);, +    operator.read(17, buffer, 10);, +    operator.read(36, buffer, 2);, +    operator.read(2, buffer, 4);, +    operator.write(0, buffer, buffer.size());, +    operator.read(0, buffer, 12);, +    operator.read(47, buffer, 3);, +    operator.read(45, buffer, 2);, +    operator.read(47, buffer, 3);, +    operator.read(26, buffer, 10);, +    operator.read(23, buffer, 3);, +    operator.write(47, buffer, buffer.size());, +    operator.read(62, buffer, 6);, +    operator.read(4, buffer, 19);]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import java.net.Inet6Address;, +import java.net.InetAddress;, +      String path = requestLine.substring(methodEnd + 1, pathEnd);, +      if (!path.startsWith("/")) {, +        path = "/";, +      }, +      this.path = path;, +      InetAddress inetAddress = socket.getInetAddress();, +, +      String hostname = inetAddress.getHostName();, +      if (inetAddress instanceof Inet6Address) {, +        hostname = "[" + hostname + "]";, +      }, +, +      // Allow null in failure case to allow for testing bad requests, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import java.net.Inet6Address;, +import java.net.InetAddress;, +      String path = requestLine.substring(methodEnd + 1, pathEnd);, +      if (!path.startsWith("/")) {, +        path = "/";, +      }, +      this.path = path;, +      InetAddress inetAddress = socket.getInetAddress();, +, +      String hostname = inetAddress.getHostName();, +      if (inetAddress instanceof Inet6Address) {, +        hostname = "[" + hostname + "]";, +      }, +, +      // Allow null in failure case to allow for testing bad requests, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +package okhttp3.mockwebserver;, +, +import java.net.InetAddress;, +import java.net.Socket;, +import java.net.UnknownHostException;, +import java.util.Collections;, +import okhttp3.Headers;, +import okhttp3.HttpUrl;, +import okio.Buffer;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class RecordedRequestTest {, +  Headers headers = new Headers.Builder().build();, +, +  private class FakeSocket extends Socket {, +    private InetAddress inetAddress;, +    private int port;, +, +    private FakeSocket(InetAddress inetAddress, int port) {, +      this.inetAddress = inetAddress;, +      this.port = port;, +    }, +, +    @Override public InetAddress getInetAddress() {, +      return inetAddress;, +    }, +, +    @Override public int getLocalPort() {, +      return port;, +    }, +  }, +, +  @Test public void testIPv4() throws UnknownHostException {, +    Socket socket =, +        new FakeSocket(InetAddress.getByAddress("127.0.0.1", new byte[] { 127, 0, 0, 1 }), 80);, +, +    RecordedRequest request =, +        new RecordedRequest("GET / HTTP/1.1", headers, Collections.<Integer>emptyList(), 0,, +            new Buffer(), 0, socket);, +, +    assertEquals("http://127.0.0.1/", request.getRequestUrl().toString());, +  }, +, +  @Test public void testIPv6() throws UnknownHostException {, +    Socket socket = new FakeSocket(InetAddress.getByAddress("::1",, +        new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }), 80);, +, +    RecordedRequest request =, +        new RecordedRequest("GET / HTTP/1.1", headers, Collections.<Integer>emptyList(), 0,, +            new Buffer(), 0, socket);, +, +    assertEquals("http://[::1]/", request.getRequestUrl().toString());, +  }, +}]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Shutdown {@link MockWebServer} after writing response., +   */, +  SHUTDOWN_SERVER_AFTER_RESPONSE,, +, +  /**, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Shutdown {@link MockWebServer} after writing response., +   */, +  SHUTDOWN_SERVER_AFTER_RESPONSE,, +, +  /**, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void shutdownServerAfterRequest() throws Exception {, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE));, +, +    URL url = server.url("/").url();, +, +    HttpURLConnection connection = (HttpURLConnection) url.openConnection();, +    assertEquals(HttpURLConnection.HTTP_OK, connection.getResponseCode());, +, +    HttpURLConnection refusedConnection = (HttpURLConnection) url.openConnection();, +, +    try {, +      refusedConnection.getResponseCode();, +      fail("Second connection should be refused");, +    } catch (ConnectException e ) {, +      assertTrue(e.getMessage().contains("refused"));, +    }, +  }, +]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.3.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.0', +  <version>3.3.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.3.0', +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.3.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.0', +  <version>3.3.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.3.0', +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.3.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.0', +  <version>3.3.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.3.0', +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +      server.useHttps(sslContext.getSocketFactory(), false);, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.3.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.0', +  <version>3.3.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.3.0', +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +      server.useHttps(sslContext.getSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +          SSLContext sslContext = SslContextBuilder.localhost();, +          SSLEngine engine = sslContext.createSSLEngine();, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.3.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.0', +  <version>3.3.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.3.0', +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +      server.useHttps(sslContext.getSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +          SSLContext sslContext = SslContextBuilder.localhost();, +          SSLEngine engine = sslContext.createSSLEngine();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +      SSLSocketFactory socketFactory = sslContext.getSocketFactory();, +          .sslSocketFactory(socketFactory), +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.3.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.3.0', +  <version>3.3.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.3.0', +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import javax.net.ssl.SSLContext;, +import okhttp3.internal.SslContextBuilder;, +      SSLContext sslContext = SslContextBuilder.localhost();, +      server.useHttps(sslContext.getSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import javax.net.ssl.SSLContext;]
[+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertEquals("B", readAscii(openConnection(url)));, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertEquals("B", readAscii(openConnection(url)));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  /**, +   * When the server returns a full response body we will store it and return it regardless of what, +   * its Last-Modified date is. This behavior was different prior to OkHttp 3.5 when we would prefer, +   * the response with the later Last-Modified date., +   *, +   * https://github.com/square/okhttp/issues/2886, +   */, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +    assertEquals("B", get(url).body().string());, +    assertEquals("B", get(url).body().string());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertEquals("B", readAscii(openConnection(url)));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  /**, +   * When the server returns a full response body we will store it and return it regardless of what, +   * its Last-Modified date is. This behavior was different prior to OkHttp 3.5 when we would prefer, +   * the response with the later Last-Modified date., +   *, +   * https://github.com/square/okhttp/issues/2886, +   */, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +    assertEquals("B", get(url).body().string());, +    assertEquals("B", get(url).body().string());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +            .addProxy(server2.toProxyAddress())), +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertEquals("B", readAscii(openConnection(url)));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  /**, +   * When the server returns a full response body we will store it and return it regardless of what, +   * its Last-Modified date is. This behavior was different prior to OkHttp 3.5 when we would prefer, +   * the response with the later Last-Modified date., +   *, +   * https://github.com/square/okhttp/issues/2886, +   */, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +    assertEquals("B", get(url).body().string());, +    assertEquals("B", get(url).body().string());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +            .addProxy(server2.toProxyAddress())), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +            .addProxy(server2.toProxyAddress())), +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertEquals("B", readAscii(openConnection(url)));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  /**, +   * When the server returns a full response body we will store it and return it regardless of what, +   * its Last-Modified date is. This behavior was different prior to OkHttp 3.5 when we would prefer, +   * the response with the later Last-Modified date., +   *, +   * https://github.com/square/okhttp/issues/2886, +   */, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +    assertEquals("B", get(url).body().string());, +    assertEquals("B", get(url).body().string());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +            .addProxy(server2.toProxyAddress())), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +            .addProxy(server2.toProxyAddress())), +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java, +    // Finally try the only IP address of the origin server., +    assertTrue(routeSelector.hasNext());, +    dns.addresses(makeFakeAddresses(253, 1));, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.address(0), uriPort);, +    dns.assertRequests(uriHost);, +, +    assertTrue(routeSelector.hasNext());, +    dns.addresses(makeFakeAddresses(254, 1));, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.address(0), uriPort);, +    dns.assertRequests(uriHost);, +, +    // Origin, +    dns.addresses(makeFakeAddresses(253, 2));, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.address(0), uriPort);, +    dns.assertRequests(uriHost);, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.address(1), uriPort);, +, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertEquals("B", readAscii(openConnection(url)));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  /**, +   * When the server returns a full response body we will store it and return it regardless of what, +   * its Last-Modified date is. This behavior was different prior to OkHttp 3.5 when we would prefer, +   * the response with the later Last-Modified date., +   *, +   * https://github.com/square/okhttp/issues/2886, +   */, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +    assertEquals("B", get(url).body().string());, +    assertEquals("B", get(url).body().string());]
[+++ b/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/mockwebserver/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +++ b/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/mockwebserver/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +++ b/okhttp-logging-interceptor/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +++ b/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/mockwebserver/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +++ b/okhttp-logging-interceptor/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +++ b/okhttp-urlconnection/pom.xml, +          <excludePackageNames>okhttp3.internal:okhttp3.internal.*</excludePackageNames>, +++ b/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/mockwebserver/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +++ b/okhttp-logging-interceptor/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +++ b/okhttp-urlconnection/pom.xml, +          <excludePackageNames>okhttp3.internal:okhttp3.internal.*</excludePackageNames>, +++ b/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java, +  private final OkHttpClient client;, +, +  public Authenticate() {, +    client = new OkHttpClient.Builder(), +  }, +++ b/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +  <groupId>com.squareup.okhttp3</groupId>, +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=mockwebserver&v=LATEST, +++ b/mockwebserver/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +++ b/okhttp-logging-interceptor/README.md, +  <groupId>com.squareup.okhttp3</groupId>, +++ b/okhttp-urlconnection/pom.xml, +          <excludePackageNames>okhttp3.internal:okhttp3.internal.*</excludePackageNames>, +++ b/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java, +  private final OkHttpClient client;, +, +  public Authenticate() {, +    client = new OkHttpClient.Builder(), +  }, +++ b/website/index.html, +    <meta name="description" content="An HTTP &amp; HTTP/2 client for Android and Java applications">, +            <h2>An <strong>HTTP &amp; HTTP/2</strong> client for Android and Java applications</h2>, +                <li>HTTP/2 support allows all requests to the same host to share a socket.</li>, +                <li>Connection pooling reduces request latency (if HTTP/2 isn’t available).</li>, +            <p>Using OkHttp is easy. Its request/response API is designed with fluent builders and, +            <p><a href="https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST" class="dl version-href">&darr; <span class="version-tag">Latest</span> JAR</a></p>, +  &lt;groupId>com.squareup.okhttp3&lt;/groupId>, +            <pre class="prettyprint">compile 'com.squareup.okhttp3:okhttp:<span class="version pln"><em>(insert latest version)</em></span>'</pre>, +            <pre>Copyright 2016 Square, Inc.]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/ConscryptTest.java, +        .tlsVersions(TlsVersion.TLS_1_2) // and modern TLS, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/ConscryptTest.java, +        .tlsVersions(TlsVersion.TLS_1_2) // and modern TLS, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +  @Test public void idleCallbackInvokedWhenIdle() throws Exception {, +    @Override public boolean awaitTermination(long timeout, TimeUnit unit) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/ConscryptTest.java, +        .tlsVersions(TlsVersion.TLS_1_2) // and modern TLS, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +  @Test public void idleCallbackInvokedWhenIdle() throws Exception {, +    @Override public boolean awaitTermination(long timeout, TimeUnit unit) {, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +  @Test public void headersAddAll() {, +    Headers sourceHeaders = new Headers.Builder(), +        .add("A", "aa"), +        .add("a", "aa"), +        .add("B", "bb"), +        .build();, +    Headers headers = new Headers.Builder(), +        .add("A", "a"), +        .addAll(sourceHeaders), +        .add("C", "c"), +        .build();, +    assertEquals("A: a\nA: aa\na: aa\nB: bb\nC: c\n", headers.toString());, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/ConscryptTest.java, +        .tlsVersions(TlsVersion.TLS_1_2) // and modern TLS, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +  @Test public void idleCallbackInvokedWhenIdle() throws Exception {, +    @Override public boolean awaitTermination(long timeout, TimeUnit unit) {, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +  @Test public void headersAddAll() {, +    Headers sourceHeaders = new Headers.Builder(), +        .add("A", "aa"), +        .add("a", "aa"), +        .add("B", "bb"), +        .build();, +    Headers headers = new Headers.Builder(), +        .add("A", "a"), +        .addAll(sourceHeaders), +        .add("C", "c")]
[+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +import java.net.SocketTimeoutException;, +  @Test public void chainWithReadTimeout() throws Exception {, +    Interceptor interceptor1 = new Interceptor() {, +      @Override public Response intercept(Chain chainA) throws IOException {, +        assertEquals(5000, chainA.readTimeoutMillis());, +, +        Chain chainB = chainA.withReadTimeout(100, TimeUnit.MILLISECONDS);, +        assertEquals(100, chainB.readTimeoutMillis());, +, +        return chainB.proceed(chainA.request());, +      }, +    };, +, +    Interceptor interceptor2 = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        assertEquals(100, chain.readTimeoutMillis());, +        return chain.proceed(chain.request());, +      }, +    };, +, +    client = client.newBuilder(), +        .readTimeout(5, TimeUnit.SECONDS), +        .addInterceptor(interceptor1), +        .addInterceptor(interceptor2), +        .build();, +, +    server.enqueue(new MockResponse(), +        .setBody("abc"), +        .throttleBody(1, 1, TimeUnit.SECONDS));, +, +    Request request1 = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Call call = client.newCall(request1);, +    Response response = call.execute();, +    ResponseBody body = response.body();, +    try {, +      body.string();, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +import java.net.SocketTimeoutException;, +  @Test public void chainWithReadTimeout() throws Exception {, +    Interceptor interceptor1 = new Interceptor() {, +      @Override public Response intercept(Chain chainA) throws IOException {, +        assertEquals(5000, chainA.readTimeoutMillis());, +, +        Chain chainB = chainA.withReadTimeout(100, TimeUnit.MILLISECONDS);, +        assertEquals(100, chainB.readTimeoutMillis());, +, +        return chainB.proceed(chainA.request());, +      }, +    };, +, +    Interceptor interceptor2 = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        assertEquals(100, chain.readTimeoutMillis());, +        return chain.proceed(chain.request());, +      }, +    };, +, +    client = client.newBuilder(), +        .readTimeout(5, TimeUnit.SECONDS), +        .addInterceptor(interceptor1), +        .addInterceptor(interceptor2), +        .build();, +, +    server.enqueue(new MockResponse(), +        .setBody("abc"), +        .throttleBody(1, 1, TimeUnit.SECONDS));, +, +    Request request1 = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Call call = client.newCall(request1);, +    Response response = call.execute();, +    ResponseBody body = response.body();, +    try {, +      body.string();, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Interceptor.java, +import java.util.concurrent.TimeUnit;, +, +    int readTimeoutMillis();, +, +    Chain withReadTimeout(int timeout, TimeUnit unit);, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +import java.net.SocketTimeoutException;, +  @Test public void chainWithReadTimeout() throws Exception {, +    Interceptor interceptor1 = new Interceptor() {, +      @Override public Response intercept(Chain chainA) throws IOException {, +        assertEquals(5000, chainA.readTimeoutMillis());]
[+++ b/pom.xml, +    <mockwebserver.version>20130505</mockwebserver.version>]
[+++ b/benchmarks/pom.xml, +    <version>2.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>2.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.7.0</version>, +++ b/okcurl/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.7.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.7.0</version>]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml]
[+++ b/mockwebserver/README.md, +  HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/README.md, +  HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void close() throws IOException {, +    replyExecutor.shutdown();, +++ b/mockwebserver/README.md, +  HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void close() throws IOException {, +    replyExecutor.shutdown();, +++ b/okhttp-logging-interceptor/README.md, +Logging Interceptor, +===================, +, +An [OkHttp interceptor][1] which logs HTTP request and response data., +, +```java, +OkHttpClient client = new OkHttpClient();, +HttpLoggingInterceptor logging = new HttpLoggingInterceptor();, +logging.setLevel(Level.BASIC);, +client.interceptors().add(logging);, +```, +, +You can change the log level at any time by calling `setLevel`., +, +To log to a custom location, pass a `Logger` instance to the constructor., +```java, +HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new Logger() {, +  @Override public void log(String message) {, +    Timber.tag("OkHttp").d(message);, +  }, +});, +```, +, +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels has, +the potential to leak sensitive information such as "Authorization" or "Cookie" headers and the, +contents of request and response bodies. This data should only be logged in a controlled way or in, +a non-production environment., +, +, +Download, +--------, +, +Get via Maven:, +```xml, +<dependency>, +  <groupId>com.squareup.okhttp</groupId>, +  <artifactId>logging-interceptor</artifactId>, +  <version>(insert latest version)</version>, +</dependency>, +```, +, +or via Gradle , +```groovy, +compile 'com.squareup.okhttp:logging-interceptor:(insert latest version)', +```, +, +, +, + [1]: https://github.com/square/okhttp/wiki/Interceptors, +++ b/mockwebserver/README.md, +  HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void close() throws IOException {, +    replyExecutor.shutdown();, +++ b/okhttp-logging-interceptor/README.md, +Logging Interceptor, +===================, +, +An [OkHttp interceptor][1] which logs HTTP request and response data., +, +```java, +OkHttpClient client = new OkHttpClient();, +HttpLoggingInterceptor logging = new HttpLoggingInterceptor();, +logging.setLevel(Level.BASIC);, +client.interceptors().add(logging);, +```, +, +You can change the log level at any time by calling `setLevel`., +, +To log to a custom location, pass a `Logger` instance to the constructor., +```java, +HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new Logger() {, +  @Override public void log(String message) {, +    Timber.tag("OkHttp").d(message);, +  }, +});, +```, +, +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels has, +the potential to leak sensitive information such as "Authorization" or "Cookie" headers and the, +contents of request and response bodies. This data should only be logged in a controlled way or in, +a non-production environment., +, +, +Download, +--------, +]
[+++ b/benchmarks/pom.xml, +    <version>2.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0</version>, +++ b/pom.xml, +  <version>2.0.0</version>, +    <tag>parent-2.0.0</tag>, +++ b/benchmarks/pom.xml, +    <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0</version>, +++ b/pom.xml, +  <version>2.0.0</version>, +    <tag>parent-2.0.0</tag>, +++ b/samples/crawler/pom.xml, +    <version>2.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0</version>]
[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    for (int i = 302; i <= 308; ++i) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    for (int i = 302; i <= 308; ++i) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void userAgentIsOmittedByDefault() throws Exception {, +    assertNull(recordedRequest.getHeader("User-Agent"));, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    for (int i = 302; i <= 308; ++i) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void userAgentIsOmittedByDefault() throws Exception {, +    assertNull(recordedRequest.getHeader("User-Agent"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    test307Redirect("GET");, +    test307Redirect("HEAD");, +    test307Redirect("OPTIONS");, +    test307Redirect("POST");, +  private void test307Redirect(String method) throws Exception {, +        .setResponseCode(HTTP_TEMP_REDIRECT), +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    for (int i = 302; i <= 308; ++i) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void userAgentIsOmittedByDefault() throws Exception {, +    assertNull(recordedRequest.getHeader("User-Agent"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    test307Redirect("GET");, +    test307Redirect("HEAD");, +    test307Redirect("OPTIONS");, +    test307Redirect("POST");, +  private void test307Redirect(String method) throws Exception {, +        .setResponseCode(HTTP_TEMP_REDIRECT), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +import java.text.DateFormat;, +import java.text.SimpleDateFormat;, +import java.util.Locale;, +import java.util.TimeZone;, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    for (int i = 302; i <= 308; ++i) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void userAgentIsOmittedByDefault() throws Exception {, +    assertNull(recordedRequest.getHeader("User-Agent"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    test307Redirect("GET");, +    test307Redirect("HEAD");, +    test307Redirect("OPTIONS");, +    test307Redirect("POST");, +  private void test307Redirect(String method) throws Exception {, +        .setResponseCode(HTTP_TEMP_REDIRECT), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +import java.text.DateFormat;, +import java.text.SimpleDateFormat;, +import java.util.Locale;, +import java.util.TimeZone;, +++ b/okhttp/pom.xml, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    for (int i = 302; i <= 308; ++i) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void userAgentIsOmittedByDefault() throws Exception {, +    assertNull(recordedRequest.getHeader("User-Agent"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    test307Redirect("GET");, +    test307Redirect("HEAD");, +    test307Redirect("OPTIONS");, +    test307Redirect("POST");, +  private void test307Redirect(String method) throws Exception {, +        .setResponseCode(HTTP_TEMP_REDIRECT), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +import java.text.DateFormat;, +import java.text.SimpleDateFormat;, +import java.util.Locale;, +import java.util.TimeZone;, +++ b/okhttp/pom.xml, +++ /dev/null, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java]
[+++ b/benchmarks/pom.xml, +    <!-- caliper needs to be updated to be compatible with guava 16 -->, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <version>14.0.1</version>, +    </dependency>, +++ b/benchmarks/pom.xml, +    <!-- caliper needs to be updated to be compatible with guava 16 -->, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <version>14.0.1</version>, +    </dependency>, +++ b/okhttp-protocols/pom.xml, +++ b/benchmarks/pom.xml, +    <!-- caliper needs to be updated to be compatible with guava 16 -->, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <version>14.0.1</version>, +    </dependency>, +++ b/okhttp-protocols/pom.xml, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, +  private void emitCompleteSegments(Deadline deadline) throws IOException {, +++ b/benchmarks/pom.xml, +    <!-- caliper needs to be updated to be compatible with guava 16 -->, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <version>14.0.1</version>, +    </dependency>, +++ b/okhttp-protocols/pom.xml, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, +  private void emitCompleteSegments(Deadline deadline) throws IOException {, +++ /dev/null, +++ b/benchmarks/pom.xml, +    <!-- caliper needs to be updated to be compatible with guava 16 -->, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <version>14.0.1</version>, +    </dependency>, +++ b/okhttp-protocols/pom.xml, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, +  private void emitCompleteSegments(Deadline deadline) throws IOException {, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/InflaterSource.java, +/** A source that inflates another source. */, +++ b/benchmarks/pom.xml, +    <!-- caliper needs to be updated to be compatible with guava 16 -->, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <version>14.0.1</version>, +    </dependency>, +++ b/okhttp-protocols/pom.xml, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, +  private void emitCompleteSegments(Deadline deadline) throws IOException {, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/InflaterSource.java, +/** A source that inflates another source. */, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +, +    // Flow control was designed more for servers, or proxies than edge clients., +    // If we are a client, set the flow control window to 16MiB.  This avoids, +    // thrashing window updates every 64KiB, yet small enough to avoid blowing, +    // up the heap., +    if (builder.client) {, +      okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, 16 * 1024 * 1024);, +    }, +, +++ b/benchmarks/pom.xml, +    <!-- caliper needs to be updated to be compatible with guava 16 -->, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +      <version>14.0.1</version>, +    </dependency>, +++ b/okhttp-protocols/pom.xml, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, +  private void emitCompleteSegments(Deadline deadline) throws IOException {, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/InflaterSource.java, +/** A source that inflates another source. */, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +, +    // Flow control was designed more for servers, or proxies than edge clients., +    // If we are a client, set the flow control window to 16MiB.  This avoids, +    // thrashing window updates every 64KiB, yet small enough to avoid blowing, +    // up the heap., +    if (builder.client) {, +      okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, 16 * 1024 * 1024);, +    }, +, +++ /dev/null, +++ b/benchmarks/pom.xml, +    <!-- caliper needs to be updated to be compatible with guava 16 -->, +    <dependency>, +      <groupId>com.google.guava</groupId>]
[+++ b/CHANGELOG.md, +## Version 3.6.0, +, +_2017-01-29_, +, + *  Fix: Don't crash with a "cache is closed" error when there is an error initializing the cache., + *  Fix: Calling `disconnect()` on a connecting `HttpUrlConnection` could cause it to retry in an, +    infinite loop! This regression was introduced in OkHttp 2.7.0., + *  Fix: Drop cookies that contain ASCII NULL and other bad characters. Previously such cookies, +    would cause OkHttp to crash when they were included in a request., + *  Fix: Release duplicated multiplexed connections. If we concurrently establish connections to an, +    HTTP/2 server, close all but the first connection., + *  Fix: Fail the HTTP/2 connection if first frame isn't `SETTINGS`., + *  Fix: Forbid spaces in header names., + *  Fix: Don't offer to do gzip if the request is partial., + *  Fix: MockWebServer is now usable with JUnit 5. That update [broke the rules][junit_5_rules]., + *  New: Support `Expect: 100-continue` as a request header. Callers can use this header to, +    pessimistically hold off on transmitting a request body until a server gives the go-ahead., + *  New: Permit network interceptors to rewrite the host header for HTTP/2. This makes it possible, +    to do domain fronting., + *  New: charset support for `Credentials.basic()`., +, +, + [junit_5_rules]: http://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-rulesupport, +++ b/CHANGELOG.md, +## Version 3.6.0, +, +_2017-01-29_, +, + *  Fix: Don't crash with a "cache is closed" error when there is an error initializing the cache., + *  Fix: Calling `disconnect()` on a connecting `HttpUrlConnection` could cause it to retry in an, +    infinite loop! This regression was introduced in OkHttp 2.7.0., + *  Fix: Drop cookies that contain ASCII NULL and other bad characters. Previously such cookies, +    would cause OkHttp to crash when they were included in a request., + *  Fix: Release duplicated multiplexed connections. If we concurrently establish connections to an, +    HTTP/2 server, close all but the first connection., + *  Fix: Fail the HTTP/2 connection if first frame isn't `SETTINGS`., + *  Fix: Forbid spaces in header names., + *  Fix: Don't offer to do gzip if the request is partial., + *  Fix: MockWebServer is now usable with JUnit 5. That update [broke the rules][junit_5_rules]., + *  New: Support `Expect: 100-continue` as a request header. Callers can use this header to, +    pessimistically hold off on transmitting a request body until a server gives the go-ahead., + *  New: Permit network interceptors to rewrite the host header for HTTP/2. This makes it possible, +    to do domain fronting., + *  New: charset support for `Credentials.basic()`., +, +, + [junit_5_rules]: http://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-rulesupport, +++ b/README.md, +  <version>3.6.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.6.0', +  <version>3.6.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.6.0', +++ b/CHANGELOG.md, +## Version 3.6.0, +, +_2017-01-29_, +, + *  Fix: Don't crash with a "cache is closed" error when there is an error initializing the cache., + *  Fix: Calling `disconnect()` on a connecting `HttpUrlConnection` could cause it to retry in an, +    infinite loop! This regression was introduced in OkHttp 2.7.0., + *  Fix: Drop cookies that contain ASCII NULL and other bad characters. Previously such cookies, +    would cause OkHttp to crash when they were included in a request., + *  Fix: Release duplicated multiplexed connections. If we concurrently establish connections to an, +    HTTP/2 server, close all but the first connection., + *  Fix: Fail the HTTP/2 connection if first frame isn't `SETTINGS`., + *  Fix: Forbid spaces in header names., + *  Fix: Don't offer to do gzip if the request is partial., + *  Fix: MockWebServer is now usable with JUnit 5. That update [broke the rules][junit_5_rules]., + *  New: Support `Expect: 100-continue` as a request header. Callers can use this header to, +    pessimistically hold off on transmitting a request body until a server gives the go-ahead., + *  New: Permit network interceptors to rewrite the host header for HTTP/2. This makes it possible, +    to do domain fronting., + *  New: charset support for `Credentials.basic()`., +, +, + [junit_5_rules]: http://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-rulesupport, +++ b/README.md, +  <version>3.6.0</version>, +compile 'com.squareup.okhttp3:okhttp:3.6.0', +  <version>3.6.0</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.6.0', +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/CHANGELOG.md, +## Version 3.6.0, +, +_2017-01-29_, +, + *  Fix: Don't crash with a "cache is closed" error when there is an error initializing the cache., + *  Fix: Calling `disconnect()` on a connecting `HttpUrlConnection` could cause it to retry in an, +    infinite loop! This regression was introduced in OkHttp 2.7.0., + *  Fix: Drop cookies that contain ASCII NULL and other bad characters. Previously such cookies, +    would cause OkHttp to crash when they were included in a request., + *  Fix: Release duplicated multiplexed connections. If we concurrently establish connections to an, +    HTTP/2 server, close all but the first connection.]
[+++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import com.squareup.okhttp.ws.WebSocket;, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import com.squareup.okhttp.ws.WebSocket;, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import com.squareup.okhttp.ws.WebSocket;, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import com.squareup.okhttp.ws.WebSocket;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import com.squareup.okhttp.ws.WebSocket;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  private static Logger frameLogger;, +    frameLogger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +    frameLogger.setLevel(Level.FINE);, +    frameLogger.addHandler(handler);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  private static Logger frameLogger;, +    frameLogger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +    frameLogger.setLevel(Level.FINE);, +    frameLogger.addHandler(handler);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.SocketTimeoutException;, +   * Make a request with two routes. The first route will time out because it's connecting to a, +   * special address that never connects. The automatic retry will succeed., +    InetSocketAddress unreachableAddress = new InetSocketAddress("10.255.255.1", 8080);, +, +    RecordingProxySelector proxySelector = new RecordingProxySelector();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, unreachableAddress));, +    proxySelector.proxies.add(server.toProxyAddress());, +, +    server.enqueue(new MockResponse(), +        .setBody("success!"));, +, +    client = client.newBuilder(), +        .proxySelector(proxySelector), +        .readTimeout(100, TimeUnit.MILLISECONDS), +        .connectTimeout(100, TimeUnit.MILLISECONDS), +        .build();, +, +    Request request = new Request.Builder().url("http://android.com/").build();, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("success!");, +  }, +, +  /**, +   * Make a request with two routes. The first route will fail because the null server connects but, +   * never responds. The manual retry will succeed., +   */, +  @Test public void readTimeoutFails() throws Exception {, +        .assertFailure(SocketTimeoutException.class);, +    executeSynchronously(request), +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  private static Logger frameLogger;, +    frameLogger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +    frameLogger.setLevel(Level.FINE);, +    frameLogger.addHandler(handler);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.SocketTimeoutException;, +   * Make a request with two routes. The first route will time out because it's connecting to a, +   * special address that never connects. The automatic retry will succeed., +    InetSocketAddress unreachableAddress = new InetSocketAddress("10.255.255.1", 8080);, +, +    RecordingProxySelector proxySelector = new RecordingProxySelector();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, unreachableAddress));, +    proxySelector.proxies.add(server.toProxyAddress());, +, +    server.enqueue(new MockResponse(), +        .setBody("success!"));, +, +    client = client.newBuilder(), +        .proxySelector(proxySelector), +        .readTimeout(100, TimeUnit.MILLISECONDS), +        .connectTimeout(100, TimeUnit.MILLISECONDS), +        .build();, +, +    Request request = new Request.Builder().url("http://android.com/").build();, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("success!");, +  }, +, +  /**, +   * Make a request with two routes. The first route will fail because the null server connects but, +   * never responds. The manual retry will succeed., +   */, +  @Test public void readTimeoutFails() throws Exception {, +        .assertFailure(SocketTimeoutException.class);, +    executeSynchronously(request), +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +      HttpEngine retryEngine = httpEngine.recover(e.getLastConnectException(), true);, +      HttpEngine retryEngine = httpEngine.recover(e, false);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  private static Logger frameLogger;, +    frameLogger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +    frameLogger.setLevel(Level.FINE);, +    frameLogger.addHandler(handler);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.SocketTimeoutException;, +   * Make a request with two routes. The first route will time out because it's connecting to a, +   * special address that never connects. The automatic retry will succeed., +    InetSocketAddress unreachableAddress = new InetSocketAddress("10.255.255.1", 8080);, +, +    RecordingProxySelector proxySelector = new RecordingProxySelector();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, unreachableAddress));, +    proxySelector.proxies.add(server.toProxyAddress());, +, +    server.enqueue(new MockResponse(), +        .setBody("success!"));, +]
[+++ b/okhttp/build.gradle, +  classExcludes = [, +      // Package-private in 3.x, internal in 4.0.0:, +      'okhttp3.Cache$CacheResponseBody$1',, +  ], +      'okhttp3.Cache#delete()',, +      'okhttp3.Cache#directory()',, +      'okhttp3.Cache#evictAll()',, +      'okhttp3.Cache#hitCount()',, +      'okhttp3.Cache#initialize()',, +      'okhttp3.Cache#isClosed()',, +      'okhttp3.Cache#maxSize()',, +      'okhttp3.Cache#networkCount()',, +      'okhttp3.Cache#requestCount()',, +      'okhttp3.Cache#size()',, +      'okhttp3.Cache#urls()',, +      'okhttp3.Cache#writeAbortCount()',, +      'okhttp3.Cache#writeSuccessCount()',, +++ b/okhttp/build.gradle, +  classExcludes = [, +      // Package-private in 3.x, internal in 4.0.0:, +      'okhttp3.Cache$CacheResponseBody$1',, +  ], +      'okhttp3.Cache#delete()',, +      'okhttp3.Cache#directory()',, +      'okhttp3.Cache#evictAll()',, +      'okhttp3.Cache#hitCount()',, +      'okhttp3.Cache#initialize()',, +      'okhttp3.Cache#isClosed()',, +      'okhttp3.Cache#maxSize()',, +      'okhttp3.Cache#networkCount()',, +      'okhttp3.Cache#requestCount()',, +      'okhttp3.Cache#size()',, +      'okhttp3.Cache#urls()',, +      'okhttp3.Cache#writeAbortCount()',, +      'okhttp3.Cache#writeSuccessCount()',, +++ /dev/null, +++ b/okhttp/build.gradle, +  classExcludes = [, +      // Package-private in 3.x, internal in 4.0.0:, +      'okhttp3.Cache$CacheResponseBody$1',, +  ], +      'okhttp3.Cache#delete()',, +      'okhttp3.Cache#directory()',, +      'okhttp3.Cache#evictAll()',, +      'okhttp3.Cache#hitCount()',, +      'okhttp3.Cache#initialize()',, +      'okhttp3.Cache#isClosed()',, +      'okhttp3.Cache#maxSize()',, +      'okhttp3.Cache#networkCount()',, +      'okhttp3.Cache#requestCount()',, +      'okhttp3.Cache#size()',, +      'okhttp3.Cache#urls()',, +      'okhttp3.Cache#writeAbortCount()',, +      'okhttp3.Cache#writeSuccessCount()',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/Cache.kt, +/*, + * Copyright (C) 2010 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import okhttp3.internal.Util.closeQuietly, +import okhttp3.internal.addHeaderLenient, +import okhttp3.internal.cache.CacheRequest, +import okhttp3.internal.cache.CacheStrategy, +import okhttp3.internal.cache.DiskLruCache, +import okhttp3.internal.cache.InternalCache, +import okhttp3.internal.http.HttpHeaders, +import okhttp3.internal.http.HttpMethod, +import okhttp3.internal.http.StatusLine, +import okhttp3.internal.io.FileSystem, +import okhttp3.internal.platform.Platform, +import okio.Buffer, +import okio.BufferedSink, +import okio.BufferedSource, +import okio.ByteString, +import okio.ForwardingSink, +import okio.ForwardingSource, +import okio.Okio, +import okio.Sink, +import okio.Source, +import java.io.Closeable, +import java.io.File, +import java.io.Flushable, +import java.io.IOException, +import java.security.cert.Certificate, +import java.security.cert.CertificateEncodingException]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void setFollowRedirectsFalse() throws Exception {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import static org.junit.Assert.fail;, +, +  @Test public void setProtocolsRejectsHttp10() throws Exception {, +    OkHttpClient client = new OkHttpClient();, +    try {, +      client.setProtocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import static org.junit.Assert.fail;, +, +  @Test public void setProtocolsRejectsHttp10() throws Exception {, +    OkHttpClient client = new OkHttpClient();, +    try {, +      client.setProtocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import static org.junit.Assert.fail;, +, +  @Test public void setProtocolsRejectsHttp10() throws Exception {, +    OkHttpClient client = new OkHttpClient();, +    try {, +      client.setProtocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.Network;, +        .setConnectionPool(ConnectionPool.getDefault());, +    Internal.instance.setNetwork(client, dns);, +, +  private static class FakeDns implements Network {, +    @Override public InetAddress[] resolveInetAddresses(String host) throws UnknownHostException {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import static org.junit.Assert.fail;, +, +  @Test public void setProtocolsRejectsHttp10() throws Exception {, +    OkHttpClient client = new OkHttpClient();, +    try {, +      client.setProtocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.Network;, +        .setConnectionPool(ConnectionPool.getDefault());, +    Internal.instance.setNetwork(client, dns);, +, +  private static class FakeDns implements Network {, +    @Override public InetAddress[] resolveInetAddresses(String host) throws UnknownHostException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/CacheControl.java, +      boolean onlyIfCached) {, +        mustRevalidate, maxStaleSeconds, minFreshSeconds, onlyIfCached);, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import static org.junit.Assert.fail;, +, +  @Test public void setProtocolsRejectsHttp10() throws Exception {, +    OkHttpClient client = new OkHttpClient();, +    try {, +      client.setProtocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +  @Override public Socket createSocket() throws IOException {, +  @Override public Socket createSocket(String host, int port) throws IOException {, +  @Override public Socket createSocket(String host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +  @Override public Socket createSocket() throws IOException {, +  @Override public Socket createSocket(String host, int port) throws IOException {, +  @Override public Socket createSocket(String host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/FallbackTestClientSocketFactory.java, +      List<String> enabledCipherSuites = new ArrayList<>(suites.length);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +  @Override public Socket createSocket() throws IOException {, +  @Override public Socket createSocket(String host, int port) throws IOException {, +  @Override public Socket createSocket(String host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/FallbackTestClientSocketFactory.java, +      List<String> enabledCipherSuites = new ArrayList<>(suites.length);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    final List<URI> proxySelectionRequests = new ArrayList<>();, +    private final List<String> calls = new ArrayList<>();, +      List<String> result = new ArrayList<>();, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +  @Override public Socket createSocket() throws IOException {, +  @Override public Socket createSocket(String host, int port) throws IOException {, +  @Override public Socket createSocket(String host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override public Socket createSocket(InetAddress host, int port, InetAddress localAddress,, +      int localPort) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/FallbackTestClientSocketFactory.java, +      List<String> enabledCipherSuites = new ArrayList<>(suites.length);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    final List<URI> proxySelectionRequests = new ArrayList<>();, +    private final List<String> calls = new ArrayList<>();, +      List<String> result = new ArrayList<>();, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/OptionalMethodTest.java, +      new OptionalMethod<>(null, "stringMethod");, +      new OptionalMethod<>(String.class, "stringMethod");, +      new OptionalMethod<>(Integer.TYPE, "stringMethod");, +      new OptionalMethod<>(null, "voidMethod");, +      new OptionalMethod<>(Void.TYPE, "voidMethod");, +      new OptionalMethod<>(null, "subclassMethod");, +      new OptionalMethod<>(String.class, "subclassMethod");, +      new OptionalMethod<>(Integer.TYPE, "subclassMethod");, +      new OptionalMethod<>(null, "methodWithArgs", Integer.class);, +      new OptionalMethod<>(null, "methodWithArgs", String.class);, +      new OptionalMethod<>(null, "throwsException");, +      new OptionalMethod<>(null, "throwsRuntimeException");, +      new OptionalMethod<>(null, "nonPublic");, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +  /**, +   * Enqueued on shutdown to release threads waiting on {@link #dispatch}. Note that this response, +   * isn't transmitted because the connection is closed before this response is returned., +   */, +  private static final MockResponse DEAD_LETTER = new MockResponse(), +      .setStatus("HTTP/1.1 " + 503 + " shutting down");, +, +    MockResponse result = responseQueue.take();, +, +    // If take() returned because we're shutting down, then enqueue another dead letter so that any, +    // other threads waiting on take() will also return., +    if (result == DEAD_LETTER) responseQueue.add(DEAD_LETTER);, +, +    return result;, +  @Override public void shutdown() {, +    responseQueue.add(DEAD_LETTER);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +  /**, +   * Enqueued on shutdown to release threads waiting on {@link #dispatch}. Note that this response, +   * isn't transmitted because the connection is closed before this response is returned., +   */, +  private static final MockResponse DEAD_LETTER = new MockResponse(), +      .setStatus("HTTP/1.1 " + 503 + " shutting down");, +, +    MockResponse result = responseQueue.take();, +, +    // If take() returned because we're shutting down, then enqueue another dead letter so that any, +    // other threads waiting on take() will also return., +    if (result == DEAD_LETTER) responseQueue.add(DEAD_LETTER);, +, +    return result;, +  @Override public void shutdown() {, +    responseQueue.add(DEAD_LETTER);, +  }, +]
[+++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/CacheAdapterTest.java, +import com.squareup.okhttp.testing.RecordingHostnameVerifier;, +import okio.Buffer;, +  private SSLContext sslContext = SslContextBuilder.localhost();, +  private HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, +    client.setHostnameVerifier(hostnameVerifier);, +    client.setHostnameVerifier(hostnameVerifier);, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/CacheAdapterTest.java, +import com.squareup.okhttp.testing.RecordingHostnameVerifier;, +import okio.Buffer;, +  private SSLContext sslContext = SslContextBuilder.localhost();, +  private HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, +    client.setHostnameVerifier(hostnameVerifier);, +    client.setHostnameVerifier(hostnameVerifier);, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +import com.squareup.okhttp.testing.RecordingHostnameVerifier;, +  private HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, +  private SSLContext sslContext = SslContextBuilder.localhost();, +    c1.setHostnameVerifier(hostnameVerifier);, +    c2.setHostnameVerifier(hostnameVerifier);, +    client.setHostnameVerifier(hostnameVerifier);, +    client.setHostnameVerifier(hostnameVerifier);, +    client.setHostnameVerifier(hostnameVerifier);, +    connection1.setHostnameVerifier(hostnameVerifier);, +    connection2.setHostnameVerifier(hostnameVerifier);, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/CacheAdapterTest.java, +import com.squareup.okhttp.testing.RecordingHostnameVerifier;, +import okio.Buffer;, +  private SSLContext sslContext = SslContextBuilder.localhost();, +  private HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, +    client.setHostnameVerifier(hostnameVerifier);, +    client.setHostnameVerifier(hostnameVerifier);, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +import com.squareup.okhttp.testing.RecordingHostnameVerifier;, +  private HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, +  private SSLContext sslContext = SslContextBuilder.localhost();, +    c1.setHostnameVerifier(hostnameVerifier);, +    c2.setHostnameVerifier(hostnameVerifier);, +    client.setHostnameVerifier(hostnameVerifier);, +    client.setHostnameVerifier(hostnameVerifier);, +    client.setHostnameVerifier(hostnameVerifier);, +    connection1.setHostnameVerifier(hostnameVerifier);, +    connection2.setHostnameVerifier(hostnameVerifier);, +++ b/okhttp-testing-support/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/CacheAdapterTest.java, +import com.squareup.okhttp.testing.RecordingHostnameVerifier;, +import okio.Buffer;, +  private SSLContext sslContext = SslContextBuilder.localhost();, +  private HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, +    client.setHostnameVerifier(hostnameVerifier);, +    client.setHostnameVerifier(hostnameVerifier);, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +import com.squareup.okhttp.testing.RecordingHostnameVerifier;, +  private HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, +  private SSLContext sslContext = SslContextBuilder.localhost();, +    c1.setHostnameVerifier(hostnameVerifier);, +    c2.setHostnameVerifier(hostnameVerifier);, +    client.setHostnameVerifier(hostnameVerifier);, +    client.setHostnameVerifier(hostnameVerifier);, +    client.setHostnameVerifier(hostnameVerifier);, +    connection1.setHostnameVerifier(hostnameVerifier);, +    connection2.setHostnameVerifier(hostnameVerifier);, +++ b/okhttp-testing-support/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/okhttp-testing-support/src/main/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.io;, +, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.Map;, +import okio.Buffer;, +import okio.Sink;, +import okio.Source;]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  /** We forbid non-ASCII characters in outgoing request headers, but accept UTF-8. */, +  @Test public void responseHeaderParsingIsLenient() throws Exception {, +    Headers headers = new Headers.Builder(), +        .add("Content-Length", "0"), +        .addLenient("a\tb: c\u007fd"), +        .addLenient(": ef"), +        .addLenient("\ud83c\udf69: \u2615\ufe0f"), +        .build();, +    server.enqueue(new MockResponse().setHeaders(headers));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertHeader("a\tb", "c\u007fd"), +        .assertHeader("\ud83c\udf69", "\u2615\ufe0f"), +        .assertHeader("", "ef");, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  /** We forbid non-ASCII characters in outgoing request headers, but accept UTF-8. */, +  @Test public void responseHeaderParsingIsLenient() throws Exception {, +    Headers headers = new Headers.Builder(), +        .add("Content-Length", "0"), +        .addLenient("a\tb: c\u007fd"), +        .addLenient(": ef"), +        .addLenient("\ud83c\udf69: \u2615\ufe0f"), +        .build();, +    server.enqueue(new MockResponse().setHeaders(headers));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertHeader("a\tb", "c\u007fd"), +        .assertHeader("\ud83c\udf69", "\u2615\ufe0f"), +        .assertHeader("", "ef");, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals(HttpUrl.parse("http://host/"), HttpUrl.parse("http://host:/"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  /** We forbid non-ASCII characters in outgoing request headers, but accept UTF-8. */, +  @Test public void responseHeaderParsingIsLenient() throws Exception {, +    Headers headers = new Headers.Builder(), +        .add("Content-Length", "0"), +        .addLenient("a\tb: c\u007fd"), +        .addLenient(": ef"), +        .addLenient("\ud83c\udf69: \u2615\ufe0f"), +        .build();, +    server.enqueue(new MockResponse().setHeaders(headers));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertHeader("a\tb", "c\u007fd"), +        .assertHeader("\ud83c\udf69", "\u2615\ufe0f"), +        .assertHeader("", "ef");, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals(HttpUrl.parse("http://host/"), HttpUrl.parse("http://host:/"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +import static org.junit.Assert.fail;, +    Request builtRequestWithCache = requestWithCache.newBuilder().url(, +        "http://localhost/api/foo").build();, +  @Test public void headerAcceptsPermittedCharacters() throws Exception {, +    Request.Builder builder = new Request.Builder();, +    builder.header("AZab09 ~", "AZab09 ~");, +    builder.addHeader("AZab09 ~", "AZab09 ~");, +  }, +, +  @Test public void emptyNameForbidden() throws Exception {, +    Request.Builder builder = new Request.Builder();, +    try {, +      builder.header("", "Value");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +    try {, +      builder.addHeader("", "Value");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void headerForbidsControlCharacters() throws Exception {, +    assertForbiddenHeader(null);, +    assertForbiddenHeader("\u0000");, +    assertForbiddenHeader("\r");, +    assertForbiddenHeader("\n");, +    assertForbiddenHeader("\t");, +    assertForbiddenHeader("\u001f");, +    assertForbiddenHeader("\u007f");, +    assertForbiddenHeader("\u0080");]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.EXPECT_CONTINUE;, +    boolean readBody = true;, +          && lowercaseHeader.substring(7).trim().equalsIgnoreCase("100-continue")) {, +        readBody = false;, +    if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +      readBody = true;, +    if (!readBody) {, +      // Don't read the body unless we've invited the client to send it., +    } else if (contentLength != -1) {, +      boolean readBody = true;, +        if (name.utf8().equals("expect") && value.equalsIgnoreCase("100-continue")) {, +          // Don't read the body unless we've invited the client to send it., +          readBody = false;, +        }, +      }, +, +      if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +        stream.sendResponseHeaders(Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue"))), true);, +        stream.getConnection().flush();, +        readBody = true;, +      if (readBody) {, +      }, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.EXPECT_CONTINUE;, +    boolean readBody = true;, +          && lowercaseHeader.substring(7).trim().equalsIgnoreCase("100-continue")) {, +        readBody = false;, +    if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +      readBody = true;, +    if (!readBody) {, +      // Don't read the body unless we've invited the client to send it., +    } else if (contentLength != -1) {, +      boolean readBody = true;, +        if (name.utf8().equals("expect") && value.equalsIgnoreCase("100-continue")) {, +          // Don't read the body unless we've invited the client to send it., +          readBody = false;, +        }, +      }, +, +      if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +        stream.sendResponseHeaders(Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue"))), true);, +        stream.getConnection().flush();, +        readBody = true;, +      if (readBody) {, +      }, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +  RESET_STREAM_AT_START,, +, +  /**, +   * Transmit a {@code HTTP/1.1 100 Continue} response before reading the HTTP request body., +   * Typically this response is sent when a client makes a request with the header {@code, +   * Expect: 100-continue}., +   */, +  EXPECT_CONTINUE, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.EXPECT_CONTINUE;, +    boolean readBody = true;, +          && lowercaseHeader.substring(7).trim().equalsIgnoreCase("100-continue")) {, +        readBody = false;, +    if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +      readBody = true;, +    if (!readBody) {, +      // Don't read the body unless we've invited the client to send it., +    } else if (contentLength != -1) {, +      boolean readBody = true;, +        if (name.utf8().equals("expect") && value.equalsIgnoreCase("100-continue")) {, +          // Don't read the body unless we've invited the client to send it., +          readBody = false;, +        }, +      }, +, +      if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +        stream.sendResponseHeaders(Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue"))), true);, +        stream.getConnection().flush();, +        readBody = true;, +      if (readBody) {, +      }, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);]
[+++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +import java.security.cert.TrustAnchor;, +import okhttp3.internal.tls.BasicTrustRootIndex;, +import okhttp3.internal.tls.TrustRootIndex;, +  @Override, +  public TrustRootIndex buildTrustRootIndex(X509TrustManager trustManager) {, +, +    try {, +      // From org.conscrypt.TrustManagerImpl, we want the method with this signature:, +      // private TrustAnchor findTrustAnchorByIssuerAndSignature(X509Certificate lastCert);, +      Method method = trustManager.getClass().getDeclaredMethod(, +              "findTrustAnchorByIssuerAndSignature", X509Certificate.class);, +      method.setAccessible(true);, +      return new AndroidTrustRootIndex(trustManager, method);, +    } catch (NoSuchMethodException e) {, +      return super.buildTrustRootIndex(trustManager);, +    }, +  }, +, +, +  /**, +   * An index of trusted root certificates that exploits knowledge of Android implementation, +   * details. This class is potentially much faster to initialize than {@link BasicTrustRootIndex}, +   * because it doesn't need to load and index trusted CA certificates., +   *, +   * <p>This class uses APIs added to Android in API 14 (Android 4.0, released October 2011). This, +   * class shouldn't be used in Android API 17 or better because those releases are better served by, +   * {@link AndroidPlatform.AndroidCertificateChainCleaner}., +   */, +  static final class AndroidTrustRootIndex implements TrustRootIndex {, +    private final X509TrustManager trustManager;, +    private final Method findByIssuerAndSignatureMethod;, +, +    AndroidTrustRootIndex(X509TrustManager trustManager, Method findByIssuerAndSignatureMethod) {, +      this.findByIssuerAndSignatureMethod = findByIssuerAndSignatureMethod;, +      this.trustManager = trustManager;, +    }, +, +    @Override public X509Certificate findByIssuerAndSignature(X509Certificate cert) {, +      try {, +        TrustAnchor trustAnchor = (TrustAnchor) findByIssuerAndSignatureMethod.invoke(, +                trustManager, cert);, +        return trustAnchor != null, +                ? trustAnchor.getTrustedCert(), +                : null;, +      } catch (IllegalAccessException e) {, +        throw new AssertionError();, +      } catch (InvocationTargetException e) {, +        return null;, +      }, +    }, +, +    @Override, +    public boolean equals(Object obj) {, +      if (obj == this) {, +        return true;, +      }, +      if (!(obj instanceof AndroidTrustRootIndex)) {, +        return false;, +      }, +      AndroidTrustRootIndex that = (AndroidTrustRootIndex) obj;, +      return trustManager.equals(that.trustManager), +              && findByIssuerAndSignatureMethod.equals(that.findByIssuerAndSignatureMethod);, +    }, +, +    @Override, +    public int hashCode() {, +      return trustManager.hashCode() + 31 * findByIssuerAndSignatureMethod.hashCode();, +    }, +  }, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +import java.security.cert.TrustAnchor;, +import okhttp3.internal.tls.BasicTrustRootIndex;, +import okhttp3.internal.tls.TrustRootIndex;, +  @Override, +  public TrustRootIndex buildTrustRootIndex(X509TrustManager trustManager) {, +, +    try {, +      // From org.conscrypt.TrustManagerImpl, we want the method with this signature:, +      // private TrustAnchor findTrustAnchorByIssuerAndSignature(X509Certificate lastCert);, +      Method method = trustManager.getClass().getDeclaredMethod(, +              "findTrustAnchorByIssuerAndSignature", X509Certificate.class);, +      method.setAccessible(true);, +      return new AndroidTrustRootIndex(trustManager, method);, +    } catch (NoSuchMethodException e) {, +      return super.buildTrustRootIndex(trustManager);, +    }, +  }, +, +, +  /**, +   * An index of trusted root certificates that exploits knowledge of Android implementation, +   * details. This class is potentially much faster to initialize than {@link BasicTrustRootIndex}, +   * because it doesn't need to load and index trusted CA certificates., +   *, +   * <p>This class uses APIs added to Android in API 14 (Android 4.0, released October 2011). This, +   * class shouldn't be used in Android API 17 or better because those releases are better served by, +   * {@link AndroidPlatform.AndroidCertificateChainCleaner}., +   */, +  static final class AndroidTrustRootIndex implements TrustRootIndex {]
[+++ b/.travis.yml, +  - oraclejdk8, +++ b/.travis.yml, +  - oraclejdk8, +++ b/README.md, +Run OkHttp tests on the desktop with Maven. Running HTTP/2 and SPDY tests on the desktop uses, +[Jetty-NPN][3] when running OpenJDK 7 or [Jetty-ALPN][4] when OpenJDK 8., +Test on a USB-attached Android using [Vogar][5]. Unfortunately `dx` requires that you build with, +Download [the latest JAR][6] or grab via Maven:, + [4]: https://github.com/jetty-project/jetty-alpn, + [5]: https://code.google.com/p/vogar/, + [6]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/.travis.yml, +  - oraclejdk8, +++ b/README.md, +Run OkHttp tests on the desktop with Maven. Running HTTP/2 and SPDY tests on the desktop uses, +[Jetty-NPN][3] when running OpenJDK 7 or [Jetty-ALPN][4] when OpenJDK 8., +Test on a USB-attached Android using [Vogar][5]. Unfortunately `dx` requires that you build with, +Download [the latest JAR][6] or grab via Maven:, + [4]: https://github.com/jetty-project/jetty-alpn, + [5]: https://code.google.com/p/vogar/, + [6]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +            <commandlineArgs>-Xbootclasspath/p:${bootclasspath}</commandlineArgs>, +  <profiles>, +    <profile>, +      <id>npn-when-jdk7</id>, +      <activation>, +        <jdk>1.7</jdk>, +      </activation>, +      <dependencies>, +        <dependency>, +          <groupId>org.mortbay.jetty.npn</groupId>, +          <artifactId>npn-boot</artifactId>, +          <scope>provided</scope>, +        </dependency>, +      </dependencies>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8</id>, +      <activation>, +        <jdk>1.8</jdk>, +      </activation>, +      <dependencies>, +        <dependency>, +          <groupId>org.mortbay.jetty.alpn</groupId>, +          <artifactId>alpn-boot</artifactId>, +          <scope>provided</scope>, +        </dependency>, +      </dependencies>, +      <build>, +        <plugins>, +          <plugin>, +            <!-- Fails on caliper's ASM on OpenJDK 8. -->, +            <groupId>org.codehaus.mojo</groupId>, +            <artifactId>animal-sniffer-maven-plugin</artifactId>, +            <executions>, +              <execution>, +                <phase>none</phase>, +              </execution>, +            </executions>, +          </plugin>, +        </plugins>, +      </build>, +    </profile>, +  </profiles>, +++ b/.travis.yml, +  - oraclejdk8, +++ b/README.md, +Run OkHttp tests on the desktop with Maven. Running HTTP/2 and SPDY tests on the desktop uses, +[Jetty-NPN][3] when running OpenJDK 7 or [Jetty-ALPN][4] when OpenJDK 8., +Test on a USB-attached Android using [Vogar][5]. Unfortunately `dx` requires that you build with, +Download [the latest JAR][6] or grab via Maven:, + [4]: https://github.com/jetty-project/jetty-alpn, + [5]: https://code.google.com/p/vogar/, + [6]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +            <commandlineArgs>-Xbootclasspath/p:${bootclasspath}</commandlineArgs>, +  <profiles>, +    <profile>, +      <id>npn-when-jdk7</id>, +      <activation>, +        <jdk>1.7</jdk>, +      </activation>, +      <dependencies>, +        <dependency>, +          <groupId>org.mortbay.jetty.npn</groupId>, +          <artifactId>npn-boot</artifactId>, +          <scope>provided</scope>, +        </dependency>, +      </dependencies>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8</id>, +      <activation>, +        <jdk>1.8</jdk>, +      </activation>, +      <dependencies>, +        <dependency>, +          <groupId>org.mortbay.jetty.alpn</groupId>]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) throws EOFException {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) throws EOFException {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +import java.net.UnknownHostException;, +, +  @Override, +  public Socket createSocket() throws IOException {, +  @Override, +  public Socket createSocket(String host, int port) throws IOException, UnknownHostException {, +  @Override, +  public Socket createSocket(String host, int port, InetAddress localAddress, int localPort), +      throws IOException, UnknownHostException {, +  @Override, +  public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override, +  public Socket createSocket(InetAddress host, int port, InetAddress localAddress, int localPort), +      throws IOException {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) throws EOFException {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +import java.net.UnknownHostException;, +, +  @Override, +  public Socket createSocket() throws IOException {, +  @Override, +  public Socket createSocket(String host, int port) throws IOException, UnknownHostException {, +  @Override, +  public Socket createSocket(String host, int port, InetAddress localAddress, int localPort), +      throws IOException, UnknownHostException {, +  @Override, +  public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override, +  public Socket createSocket(InetAddress host, int port, InetAddress localAddress, int localPort), +      throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/FallbackTestClientSocketFactory.java, +      List<String> enabledCipherSuites = new ArrayList<String>(suites.length);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) throws EOFException {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +import java.net.UnknownHostException;, +, +  @Override, +  public Socket createSocket() throws IOException {, +  @Override, +  public Socket createSocket(String host, int port) throws IOException, UnknownHostException {, +  @Override, +  public Socket createSocket(String host, int port, InetAddress localAddress, int localPort), +      throws IOException, UnknownHostException {, +  @Override, +  public Socket createSocket(InetAddress host, int port) throws IOException {, +  @Override, +  public Socket createSocket(InetAddress host, int port, InetAddress localAddress, int localPort), +      throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/FallbackTestClientSocketFactory.java, +      List<String> enabledCipherSuites = new ArrayList<String>(suites.length);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    final List<URI> proxySelectionRequests = new ArrayList<URI>();, +    private final List<String> calls = new ArrayList<String>();, +      List<String> result = new ArrayList<String>();, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +  @Override public void update(Response cached, Response network) throws IOException {, +++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +  static boolean isPlaintext(Buffer buffer) throws EOFException {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java, +import java.net.UnknownHostException;, +, +  @Override, +  public Socket createSocket() throws IOException {, +  @Override, +  public Socket createSocket(String host, int port) throws IOException, UnknownHostException {, +  @Override, +  public Socket createSocket(String host, int port, InetAddress localAddress, int localPort), +      throws IOException, UnknownHostException {, +  @Override]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct]
[+++ b/pom.xml, +      <plugin>, +        <groupId>org.codehaus.mojo</groupId>, +        <artifactId>animal-sniffer-maven-plugin</artifactId>, +        <version>1.9</version>, +        <executions>, +          <execution>, +            <phase>test</phase>, +            <goals>, +              <goal>check</goal>, +            </goals>, +          </execution>, +        </executions>, +        <configuration>, +          <signature>, +            <groupId>org.codehaus.mojo.signature</groupId>, +            <artifactId>java15</artifactId>, +            <version>1.0</version>, +          </signature>, +        </configuration>, +      </plugin>]
[+++ b/src/main/java/com/squareup/okhttp/ExtendedResponseCache.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp;, +, +import java.io.IOException;, +import java.net.CacheResponse;, +import java.net.HttpURLConnection;, +, +/**, + * A response cache that supports statistics tracking and updating stored, + * responses. Implementations of {@link java.net.ResponseCache} should implement this, + * interface to receive additional support from the HTTP engine., + */, +public interface ExtendedResponseCache {, +, +    /**, +     * Track an HTTP response being satisfied by {@code source}., +     */, +    void trackResponse(ResponseSource source);, +, +    /**, +     * Track an conditional GET that was satisfied by this cache., +     */, +    void trackConditionalCacheHit();, +, +    /**, +     * Updates stored HTTP headers using a hit on a conditional GET., +     */, +    void update(CacheResponse conditionalCacheHit, HttpURLConnection httpConnection), +            throws IOException;, +}, +++ b/src/main/java/com/squareup/okhttp/ExtendedResponseCache.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp;, +, +import java.io.IOException;, +import java.net.CacheResponse;, +import java.net.HttpURLConnection;, +, +/**, + * A response cache that supports statistics tracking and updating stored, + * responses. Implementations of {@link java.net.ResponseCache} should implement this, + * interface to receive additional support from the HTTP engine., + */, +public interface ExtendedResponseCache {, +, +    /**, +     * Track an HTTP response being satisfied by {@code source}., +     */, +    void trackResponse(ResponseSource source);, +, +    /**, +     * Track an conditional GET that was satisfied by this cache., +     */, +    void trackConditionalCacheHit();, +, +    /**, +     * Updates stored HTTP headers using a hit on a conditional GET., +     */, +    void update(CacheResponse conditionalCacheHit, HttpURLConnection httpConnection), +            throws IOException;, +}, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import java.net.CookieHandler;, +import java.net.ProxySelector;, +import java.net.ResponseCache;, +    private ProxySelector proxySelector;, +    private CookieHandler cookieHandler;, +    private ResponseCache responseCache;, +    /**]
[+++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9099";, +        webSocket.close(1000, null);, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9099";, +        webSocket.close(1000, null);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.validateCloseCode;, +  private static final long MAX_QUEUE_SIZE = 16 * 1024 * 1024; // 16 MiB., +    validateCloseCode(code);, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9099";, +        webSocket.close(1000, null);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.validateCloseCode;, +  private static final long MAX_QUEUE_SIZE = 16 * 1024 * 1024; // 16 MiB., +    validateCloseCode(code);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +  static String closeCodeExceptionMessage(int code) {, +      return "Code must be in range [1000,5000): " + code;, +      return "Code " + code + " is reserved and may not be used.";, +    } else {, +      return null;, +, +  static void validateCloseCode(int code) {, +    String message = closeCodeExceptionMessage(code);, +    if (message != null) throw new IllegalArgumentException(message);, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9099";, +        webSocket.close(1000, null);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.validateCloseCode;, +  private static final long MAX_QUEUE_SIZE = 16 * 1024 * 1024; // 16 MiB., +    validateCloseCode(code);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +  static String closeCodeExceptionMessage(int code) {, +      return "Code must be in range [1000,5000): " + code;, +      return "Code " + code + " is reserved and may not be used.";, +    } else {, +      return null;, +, +  static void validateCloseCode(int code) {, +    String message = closeCodeExceptionMessage(code);, +    if (message != null) throw new IllegalArgumentException(message);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java, +          String codeExceptionMessage = WebSocketProtocol.closeCodeExceptionMessage(code);, +          if (codeExceptionMessage != null) throw new ProtocolException(codeExceptionMessage);, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9099";, +        webSocket.close(1000, null);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.validateCloseCode;, +  private static final long MAX_QUEUE_SIZE = 16 * 1024 * 1024; // 16 MiB., +    validateCloseCode(code);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +  static String closeCodeExceptionMessage(int code) {, +      return "Code must be in range [1000,5000): " + code;, +      return "Code " + code + " is reserved and may not be used.";, +    } else {, +      return null;, +, +  static void validateCloseCode(int code) {]
[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +  @Test public void domainMatchesIpv6Address() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://[::1]/"), "a=b; domain=::1");, +    assertEquals("::1", cookie.domain());, +    assertTrue(cookie.matches(HttpUrl.parse("http://[::1]/")));, +  }, +, +  @Test public void domainMatchesIpv6AddressWithCompression() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://[0001:0000::]/"), "a=b; domain=0001:0000::");, +    assertEquals("1::", cookie.domain());, +    assertTrue(cookie.matches(HttpUrl.parse("http://[1::]/")));, +  }, +, +  @Test public void domainMatchesIpv6AddressWithIpv4Suffix() throws Exception {, +    Cookie cookie = Cookie.parse(, +        HttpUrl.parse("http://[::1:ffff:ffff]/"), "a=b; domain=::1:255.255.255.255");, +    assertEquals("::1:ffff:ffff", cookie.domain());, +    assertTrue(cookie.matches(HttpUrl.parse("http://[::1:ffff:ffff]/")));, +  }, +, +  @Test public void ipv6AddressDoesntMatch() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://[::1]/"), "a=b; domain=::2");, +    assertNull(cookie);, +  }, +, +  @Test public void ipv6AddressMalformed() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://[::1]/"), "a=b; domain=::2::2");, +    assertEquals("::1", cookie.domain());, +  }, +, +  @Test public void builderIpv6() throws Exception {, +    Cookie cookie = new Cookie.Builder(), +        .name("a"), +        .value("b"), +        .domain("0:0:0:0:0:0:0:1"), +        .build();, +    assertEquals("::1", cookie.domain());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +  @Test public void domainMatchesIpv6Address() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://[::1]/"), "a=b; domain=::1");, +    assertEquals("::1", cookie.domain());, +    assertTrue(cookie.matches(HttpUrl.parse("http://[::1]/")));, +  }, +, +  @Test public void domainMatchesIpv6AddressWithCompression() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://[0001:0000::]/"), "a=b; domain=0001:0000::");, +    assertEquals("1::", cookie.domain());, +    assertTrue(cookie.matches(HttpUrl.parse("http://[1::]/")));, +  }, +, +  @Test public void domainMatchesIpv6AddressWithIpv4Suffix() throws Exception {, +    Cookie cookie = Cookie.parse(, +        HttpUrl.parse("http://[::1:ffff:ffff]/"), "a=b; domain=::1:255.255.255.255");, +    assertEquals("::1:ffff:ffff", cookie.domain());, +    assertTrue(cookie.matches(HttpUrl.parse("http://[::1:ffff:ffff]/")));, +  }, +, +  @Test public void ipv6AddressDoesntMatch() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://[::1]/"), "a=b; domain=::2");, +    assertNull(cookie);, +  }, +, +  @Test public void ipv6AddressMalformed() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://[::1]/"), "a=b; domain=::2::2");, +    assertEquals("::1", cookie.domain());, +  }, +, +  @Test public void builderIpv6() throws Exception {, +    Cookie cookie = new Cookie.Builder(), +        .name("a"), +        .value("b"), +        .domain("0:0:0:0:0:0:0:1"), +        .build();, +    assertEquals("::1", cookie.domain());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +    String canonicalDomain = Util.canonicalizeHost(domain);, +      assertEquals(Util.canonicalizeHost(registrablePart), result);, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +  @Test public void domainMatchesIpv6Address() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://[::1]/"), "a=b; domain=::1");, +    assertEquals("::1", cookie.domain());, +    assertTrue(cookie.matches(HttpUrl.parse("http://[::1]/")));, +  }, +, +  @Test public void domainMatchesIpv6AddressWithCompression() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://[0001:0000::]/"), "a=b; domain=0001:0000::");, +    assertEquals("1::", cookie.domain());, +    assertTrue(cookie.matches(HttpUrl.parse("http://[1::]/")));, +  }, +, +  @Test public void domainMatchesIpv6AddressWithIpv4Suffix() throws Exception {, +    Cookie cookie = Cookie.parse(, +        HttpUrl.parse("http://[::1:ffff:ffff]/"), "a=b; domain=::1:255.255.255.255");, +    assertEquals("::1:ffff:ffff", cookie.domain());, +    assertTrue(cookie.matches(HttpUrl.parse("http://[::1:ffff:ffff]/")));, +  }]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled");, +    callback.await(server.url("/")).assertFailure("Canceled");, +    client.dispatcher().setMaxRequests(1); // Force requests to be executed serially., +    callback.await(requestB.url()).assertFailure("Canceled");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled");, +    callback.await(server.url("/")).assertFailure("Canceled");, +    client.dispatcher().setMaxRequests(1); // Force requests to be executed serially., +    callback.await(requestB.url()).assertFailure("Canceled");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, +  public static <T> Set<T> setOf(T... elements) {, +    return setOf(Arrays.asList(elements));, +  }, +, +  public static <T> Set<T> setOf(Collection<T> elements) {, +    return new LinkedHashSet<>(elements);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled");, +    callback.await(server.url("/")).assertFailure("Canceled");, +    client.dispatcher().setMaxRequests(1); // Force requests to be executed serially., +    callback.await(requestB.url()).assertFailure("Canceled");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, +  public static <T> Set<T> setOf(T... elements) {, +    return setOf(Arrays.asList(elements));, +  }, +, +  public static <T> Set<T> setOf(Collection<T> elements) {, +    return new LinkedHashSet<>(elements);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import static okhttp3.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;, +  /** Confirm that runtime exceptions thrown inside of OkHttp propagate to the caller. */, +  @Test public void unexpectedExceptionSync() throws Exception {, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new Dns() {, +          @Override public List<InetAddress> lookup(String hostname) {, +            throw new RuntimeException("boom!");, +          }, +        }), +        .build());, +, +    server.enqueue(new MockResponse());, +, +    HttpURLConnection connection = urlFactory.open(server.url("/").url());, +    try {, +      connection.getResponseCode(); // Use the synchronous implementation., +      fail();, +    } catch (RuntimeException expected) {, +      assertEquals("boom!", expected.getMessage());, +    }, +  }, +, +  /** Confirm that runtime exceptions thrown inside of OkHttp propagate to the caller. */, +  @Test public void unexpectedExceptionAsync() throws Exception {, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new Dns() {, +          @Override public List<InetAddress> lookup(String hostname) {, +            throw new RuntimeException("boom!");, +          }, +        }), +        .build());, +, +    server.enqueue(new MockResponse());, +, +    HttpURLConnection connection = urlFactory.open(server.url("/").url());, +    try {, +      connection.connect(); // Force the async implementation., +      fail();, +    } catch (RuntimeException expected) {, +      assertEquals("boom!", expected.getMessage());, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled");, +    callback.await(server.url("/")).assertFailure("Canceled");, +    client.dispatcher().setMaxRequests(1); // Force requests to be executed serially., +    callback.await(requestB.url()).assertFailure("Canceled");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, +  public static <T> Set<T> setOf(T... elements) {, +    return setOf(Arrays.asList(elements));, +  }, +, +  public static <T> Set<T> setOf(Collection<T> elements) {, +    return new LinkedHashSet<>(elements);, +  }, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +public final class UtilTest {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +public final class UtilTest {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.platform;, +, +import org.junit.Test;, +, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assume.assumeTrue;, +, +public class Jdk8WithJettyBootPlatformTest {, +  @Test, +  public void testBuildsWithJettyBoot() {, +    assumeTrue(getPlatform().equals("jdk-with-jetty-boot"));, +, +    assertNotNull(Jdk8WithJettyBootPlatform.buildIfSupported());, +  }, +}, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +public final class UtilTest {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.platform;, +, +import org.junit.Test;, +, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assume.assumeTrue;, +, +public class Jdk8WithJettyBootPlatformTest {, +  @Test, +  public void testBuildsWithJettyBoot() {, +    assumeTrue(getPlatform().equals("jdk-with-jetty-boot"));, +, +    assertNotNull(Jdk8WithJettyBootPlatform.buildIfSupported());, +  }, +}, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/UtilTest.java, +public final class UtilTest {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatformTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.platform;, +, +import org.junit.Test;, +, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assume.assumeTrue;, +, +public class Jdk8WithJettyBootPlatformTest {, +  @Test, +  public void testBuildsWithJettyBoot() {]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +      @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +      @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java, +  @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +  @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java, +      @Override, +++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java, +  @Override, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +    @Override]
[+++ b/CHANGELOG.md, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC2 where, +++ b/CHANGELOG.md, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC2 where, +++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/AccessHeaders.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.recipes;, +, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.Request;, +import com.squareup.okhttp.Response;, +import java.io.IOException;, +, +public final class AccessHeaders {, +  private final OkHttpClient client = new OkHttpClient();, +, +  public void run() throws Exception {, +    Request request = new Request.Builder(), +        .url("https://api.github.com/repos/square/okhttp/issues"), +        .header("User-Agent", "OkHttp Headers.java"), +        .addHeader("Accept", "application/json; q=0.5"), +        .addHeader("Accept", "application/vnd.github.v3+json"), +        .build();, +, +    Response response = client.newCall(request).execute();, +    if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);, +, +    System.out.println("Server: " + response.header("Server"));, +    System.out.println("Date: " + response.header("Date"));, +    System.out.println("Vary: " + response.headers("Vary"));, +  }, +, +  public static void main(String... args) throws Exception {, +    new AccessHeaders().run();, +  }, +}, +++ b/CHANGELOG.md, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC2 where, +++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/AccessHeaders.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.recipes;, +, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.Request;, +import com.squareup.okhttp.Response;, +import java.io.IOException;, +, +public final class AccessHeaders {, +  private final OkHttpClient client = new OkHttpClient();, +, +  public void run() throws Exception {, +    Request request = new Request.Builder(), +        .url("https://api.github.com/repos/square/okhttp/issues"), +        .header("User-Agent", "OkHttp Headers.java"), +        .addHeader("Accept", "application/json; q=0.5"), +        .addHeader("Accept", "application/vnd.github.v3+json"), +        .build();, +, +    Response response = client.newCall(request).execute();, +    if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);, +, +    System.out.println("Server: " + response.header("Server"));, +    System.out.println("Date: " + response.header("Date"));, +    System.out.println("Vary: " + response.headers("Vary"));, +  }, +, +  public static void main(String... args) throws Exception {, +    new AccessHeaders().run();, +  }, +}, +++ /dev/null, +++ b/CHANGELOG.md]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the]
[+++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-ws-tests/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.4.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.4.0-SNAPSHOT</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/NewWebSocketTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.net.ProtocolException;, +import java.util.Random;, +import java.util.logging.Logger;, +import okhttp3.internal.tls.SslClient;, +import okhttp3.internal.ws.NewWebSocketRecorder;, +import okhttp3.internal.ws.RealNewWebSocket;, +import okhttp3.internal.ws.WebSocketRecorder;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okio.ByteString;, +import org.junit.After;, +import org.junit.Ignore;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static okhttp3.TestUtil.defaultClient;, +import static okhttp3.WebSocket.TEXT;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.fail;, +, +public final class NewWebSocketTest {, +  @Rule public final MockWebServer webServer = new MockWebServer();, +, +  private final SslClient sslClient = SslClient.localhost();, +  private final NewWebSocketRecorder clientListener = new NewWebSocketRecorder("client");, +  private final WebSocketRecorder serverListener = new WebSocketRecorder("server");, +  private final Random random = new Random(0);, +  private OkHttpClient client = defaultClient().newBuilder(), +      .addInterceptor(new Interceptor() {, +        @Override public Response intercept(Chain chain) throws IOException {, +          Response response = chain.proceed(chain.request());, +          assertNotNull(response.body()); // Ensure application interceptors never see a null body., +          return response;, +        }, +      }), +      .build();, +, +  @After public void tearDown() {, +    clientListener.assertExhausted();, +  }, +, +  @Test public void textMessage() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    NewWebSocket client = enqueueClientWebSocket();, +, +    clientListener.assertOpen();, +    serverListener.assertOpen();, +, +    client.send("Hello, WebSockets!");, +    serverListener.assertTextMessage("Hello, WebSockets!");, +  }, +, +  @Test public void binaryMessage() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    RealNewWebSocket client = enqueueClientWebSocket();, +, +    clientListener.assertOpen();, +    serverListener.assertOpen();, +, +    client.send(ByteString.encodeUtf8("Hello!"));, +    serverListener.assertBinaryMessage(new byte[] {'H', 'e', 'l', 'l', 'o', '!'});, +  }, +, +  @Test public void nullStringThrows() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    RealNewWebSocket client = enqueueClientWebSocket();, +, +    clientListener.assertOpen();, +    try {, +      client.send((String) null);, +      fail();, +    } catch (NullPointerException e) {, +      assertEquals("text == null", e.getMessage());, +    }, +  }, +, +  @Test public void nullByteStringThrows() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    RealNewWebSocket client = enqueueClientWebSocket();, +]
[+++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java, +  static DnsOverHttps buildCloudflareIp(OkHttpClient bootstrapClient) {, +        .url(parseUrl("https://1.1.1.1/dns-query")), +        .includeIPv6(false), +        .build();, +  }, +, +  static DnsOverHttps buildCloudflare(OkHttpClient bootstrapClient) {, +    return new DnsOverHttps.Builder().client(bootstrapClient), +        .url(parseUrl("https://cloudflare-dns.com/dns-query")), +        .bootstrapDnsHosts(getByIp("1.1.1.1")), +        .url(parseUrl("https://cloudflare-dns.com/dns-query?ct=application/dns-udpwireformat")), +        .bootstrapDnsHosts(getByIp("104.16.111.25"), getByIp("104.16.112.25"),, +            getByIp("2400:cb00:2048:1:0:0:6810:7019"), getByIp("2400:cb00:2048:1:0:0:6810:6f19")), +    result.add(buildCloudflareIp(client));]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.SynchronousQueue;, +  @Test public void getWithRequestBody() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    try {, +      new Request.Builder().method("GET", RequestBody.create(MediaType.parse("text/plain"), "abc"));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void asyncResponseCanBeConsumedLater() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .header("User-Agent", "SyncApiTest"), +        .build();, +, +    final BlockingQueue<Response> responseRef = new SynchronousQueue<Response>();, +    client.newCall(request).enqueue(new Callback() {, +      @Override public void onFailure(Request request, Throwable throwable) {, +        throw new AssertionError();, +      }, +, +      @Override public void onResponse(Response response) throws IOException {, +        try {, +          responseRef.put(response);, +        } catch (InterruptedException e) {, +          throw new AssertionError();, +        }, +      }, +    });, +, +    Response response = responseRef.take();, +    assertEquals(200, response.code());, +    assertEquals("abc", response.body().string());, +, +    // Make another request just to confirm that that connection can be reused..., +    executeSynchronously(new Request.Builder().url(server.getUrl("/")).build()).assertBody("def");, +    assertEquals(0, server.takeRequest().getSequenceNumber()); // New connection., +    assertEquals(1, server.takeRequest().getSequenceNumber()); // Connection reused., +, +    // ... even before we close the response body!, +    response.body().close();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.SynchronousQueue;, +  @Test public void getWithRequestBody() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    try {, +      new Request.Builder().method("GET", RequestBody.create(MediaType.parse("text/plain"), "abc"));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void asyncResponseCanBeConsumedLater() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .header("User-Agent", "SyncApiTest"), +        .build();, +, +    final BlockingQueue<Response> responseRef = new SynchronousQueue<Response>();, +    client.newCall(request).enqueue(new Callback() {, +      @Override public void onFailure(Request request, Throwable throwable) {, +        throw new AssertionError();, +      }, +, +      @Override public void onResponse(Response response) throws IOException {, +        try {, +          responseRef.put(response);, +        } catch (InterruptedException e) {, +          throw new AssertionError();, +        }, +      }, +    });, +, +    Response response = responseRef.take();, +    assertEquals(200, response.code());, +    assertEquals("abc", response.body().string());, +, +    // Make another request just to confirm that that connection can be reused..., +    executeSynchronously(new Request.Builder().url(server.getUrl("/")).build()).assertBody("def");, +    assertEquals(0, server.takeRequest().getSequenceNumber()); // New connection., +    assertEquals(1, server.takeRequest().getSequenceNumber()); // Connection reused., +]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java, +  @Override public boolean exists(File file) {, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java, +  @Override public boolean exists(File file) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java, +  private void assertGarbageFilesAllDeleted() {, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java, +  @Override public boolean exists(File file) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java, +  private void assertGarbageFilesAllDeleted() {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/FaultyFileSystem.java, +  @Override public boolean exists(File file) {, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java, +  @Override public boolean exists(File file) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java, +  private void assertGarbageFilesAllDeleted() {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/FaultyFileSystem.java, +  @Override public boolean exists(File file) {, +++ b/okhttp/src/main/java/okhttp3/internal/io/FileSystem.java, +    @Override public boolean exists(File file) {, +  boolean exists(File file);]
[+++ b/.gitignore, +local.properties, +++ b/.gitignore, +local.properties, +++ b/okhttp/build.gradle, +      'okhttp3.Challenge#scheme()',, +      'okhttp3.Challenge#authParams()',, +      'okhttp3.Challenge#realm()',, +      'okhttp3.Challenge#charset()',, +      'okhttp3.Challenge#withCharset(java.nio.charset.Charset)',, +      'okhttp3.Address#certificatePinner()',, +      'okhttp3.Address#connectionSpecs()',, +      'okhttp3.Address#dns()',, +      'okhttp3.Address#hostnameVerifier()',, +      'okhttp3.Address#protocols()',, +      'okhttp3.Address#proxy()',, +      'okhttp3.Address#proxyAuthenticator()',, +      'okhttp3.Address#proxySelector()',, +      'okhttp3.Address#sslSocketFactory()',, +      'okhttp3.Address#url()',, +      'okhttp3.Address#socketFactory()',, +      'okhttp3.Handshake#cipherSuite()',, +      'okhttp3.Handshake#localCertificates()',, +      'okhttp3.Handshake#localPrincipal()',, +      'okhttp3.Handshake#peerCertificates()',, +      'okhttp3.Handshake#tlsVersion()',, +      'okhttp3.Handshake#peerPrincipal()',, +++ b/.gitignore, +local.properties, +++ b/okhttp/build.gradle, +      'okhttp3.Challenge#scheme()',, +      'okhttp3.Challenge#authParams()',, +      'okhttp3.Challenge#realm()',, +      'okhttp3.Challenge#charset()',, +      'okhttp3.Challenge#withCharset(java.nio.charset.Charset)',, +      'okhttp3.Address#certificatePinner()',, +      'okhttp3.Address#connectionSpecs()',, +      'okhttp3.Address#dns()',, +      'okhttp3.Address#hostnameVerifier()',, +      'okhttp3.Address#protocols()',, +      'okhttp3.Address#proxy()',, +      'okhttp3.Address#proxyAuthenticator()',, +      'okhttp3.Address#proxySelector()',, +      'okhttp3.Address#sslSocketFactory()',, +      'okhttp3.Address#url()',, +      'okhttp3.Address#socketFactory()',, +      'okhttp3.Handshake#cipherSuite()',, +      'okhttp3.Handshake#localCertificates()',, +      'okhttp3.Handshake#localPrincipal()',, +      'okhttp3.Handshake#peerCertificates()',, +      'okhttp3.Handshake#tlsVersion()',, +      'okhttp3.Handshake#peerPrincipal()',, +++ /dev/null, +++ b/.gitignore, +local.properties, +++ b/okhttp/build.gradle, +      'okhttp3.Challenge#scheme()',, +      'okhttp3.Challenge#authParams()',, +      'okhttp3.Challenge#realm()',, +      'okhttp3.Challenge#charset()',, +      'okhttp3.Challenge#withCharset(java.nio.charset.Charset)',, +      'okhttp3.Address#certificatePinner()',, +      'okhttp3.Address#connectionSpecs()',, +      'okhttp3.Address#dns()',, +      'okhttp3.Address#hostnameVerifier()',, +      'okhttp3.Address#protocols()',, +      'okhttp3.Address#proxy()',, +      'okhttp3.Address#proxyAuthenticator()',, +      'okhttp3.Address#proxySelector()',, +      'okhttp3.Address#sslSocketFactory()',, +      'okhttp3.Address#url()',, +      'okhttp3.Address#socketFactory()',, +      'okhttp3.Handshake#cipherSuite()',, +      'okhttp3.Handshake#localCertificates()',, +      'okhttp3.Handshake#localPrincipal()',, +      'okhttp3.Handshake#peerCertificates()',, +      'okhttp3.Handshake#tlsVersion()',, +      'okhttp3.Handshake#peerPrincipal()',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/Address.kt, +/*, + * Copyright (C) 2019 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import java.net.Proxy, +import java.net.ProxySelector, +import java.util.Objects]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/pom.xml, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +  @Test public void idleCallbackInvokedWhenIdle() throws Exception {, +    @Override public boolean awaitTermination(long timeout, TimeUnit unit) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +  @Test public void idleCallbackInvokedWhenIdle() throws Exception {, +    @Override public boolean awaitTermination(long timeout, TimeUnit unit) {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +  @Test public void idleCallbackInvokedWhenIdle() throws Exception {, +    @Override public boolean awaitTermination(long timeout, TimeUnit unit) {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +    public Exception takeException() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +  @Test public void idleCallbackInvokedWhenIdle() throws Exception {, +    @Override public boolean awaitTermination(long timeout, TimeUnit unit) {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +    public Exception takeException() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +    return ResponseBody.create(mediaType, ByteString.decodeHex(hex).toByteArray());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test, +  public void cancelWhileRequestHeadersAreSent() throws Exception {, +    server.enqueue(new MockResponse().setBody("A"));, +, +    EventListener listener =, +        new EventListener() {, +          @Override, +          public void requestHeadersStart(Call call) {, +            try {, +              // Cancel call from another thread to avoid reentrance., +              cancelLater(call, 0).join();, +            } catch (InterruptedException e) {, +              throw new AssertionError();, +            }, +          }, +        };, +    client = client.newBuilder().eventListener(listener).build();, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/a")).build());, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +  @Ignore(, +      "Canceling an HTTP/2 request while request headers are sent has no effect. The request completes successfully and the response can be read."), +  @Test, +  public void cancelWhileRequestHeadersAreSent_HTTP_2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    cancelWhileRequestHeadersAreSent();, +  }, +, +  private Thread cancelLater(final Call call, final long delay) {, +    Thread thread = new Thread("canceler") {, +    };, +    thread.start();, +    return thread;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test, +  public void cancelWhileRequestHeadersAreSent() throws Exception {, +    server.enqueue(new MockResponse().setBody("A"));, +, +    EventListener listener =, +        new EventListener() {, +          @Override, +          public void requestHeadersStart(Call call) {, +            try {, +              // Cancel call from another thread to avoid reentrance., +              cancelLater(call, 0).join();, +            } catch (InterruptedException e) {, +              throw new AssertionError();, +            }, +          }, +        };, +    client = client.newBuilder().eventListener(listener).build();, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/a")).build());, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +  @Ignore(, +      "Canceling an HTTP/2 request while request headers are sent has no effect. The request completes successfully and the response can be read."), +  @Test, +  public void cancelWhileRequestHeadersAreSent_HTTP_2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    cancelWhileRequestHeadersAreSent();, +  }, +, +  private Thread cancelLater(final Call call, final long delay) {, +    Thread thread = new Thread("canceler") {, +    };, +    thread.start();, +    return thread;, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +  @Test public void hostIPv6Builder() throws Exception {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test, +  public void cancelWhileRequestHeadersAreSent() throws Exception {, +    server.enqueue(new MockResponse().setBody("A"));, +, +    EventListener listener =, +        new EventListener() {, +          @Override, +          public void requestHeadersStart(Call call) {, +            try {]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/okhttp/build.gradle, +++ b/.gitignore, +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/Address.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.net.Proxy;, +import java.net.ProxySelector;, +import java.util.List;, +import java.util.Objects;, +import javax.annotation.Nullable;, +import javax.net.SocketFactory;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSocketFactory;, +import okhttp3.internal.Util;, +, +/**, + * A specification for a connection to an origin server. For simple connections, this is the, + * server's hostname and port. If an explicit proxy is requested (or {@linkplain Proxy#NO_PROXY no, + * proxy} is explicitly requested), this also includes that proxy information. For secure, + * connections the address also includes the SSL socket factory, hostname verifier, and certificate, + * pinner., + *, + * <p>HTTP requests that share the same {@code Address} may also share the same {@link Connection}., + */, +public final class Address {, +  final HttpUrl url;, +  final Dns dns;, +  final SocketFactory socketFactory;, +  final Authenticator proxyAuthenticator;, +  final List<Protocol> protocols;, +  final List<ConnectionSpec> connectionSpecs;, +  final ProxySelector proxySelector;, +  final @Nullable Proxy proxy;, +  final @Nullable SSLSocketFactory sslSocketFactory;, +  final @Nullable HostnameVerifier hostnameVerifier;, +  final @Nullable CertificatePinner certificatePinner;, +, +  public Address(String uriHost, int uriPort, Dns dns, SocketFactory socketFactory,, +      @Nullable SSLSocketFactory sslSocketFactory, @Nullable HostnameVerifier hostnameVerifier,, +      @Nullable CertificatePinner certificatePinner, Authenticator proxyAuthenticator,, +      @Nullable Proxy proxy, List<Protocol> protocols, List<ConnectionSpec> connectionSpecs,, +      ProxySelector proxySelector) {, +    this.url = new HttpUrl.Builder(), +        .scheme(sslSocketFactory != null ? "https" : "http"), +        .host(uriHost), +        .port(uriPort), +        .build();, +, +    if (dns == null) throw new NullPointerException("dns == null");, +    this.dns = dns;, +, +    if (socketFactory == null) throw new NullPointerException("socketFactory == null");, +    this.socketFactory = socketFactory;, +, +    if (proxyAuthenticator == null) {, +      throw new NullPointerException("proxyAuthenticator == null");, +    }, +    this.proxyAuthenticator = proxyAuthenticator;, +, +    if (protocols == null) throw new NullPointerException("protocols == null");, +    this.protocols = Util.immutableList(protocols);, +, +    if (connectionSpecs == null) throw new NullPointerException("connectionSpecs == null");, +    this.connectionSpecs = Util.immutableList(connectionSpecs);, +, +    if (proxySelector == null) throw new NullPointerException("proxySelector == null");, +    this.proxySelector = proxySelector;, +, +    this.proxy = proxy;, +    this.sslSocketFactory = sslSocketFactory;, +    this.hostnameVerifier = hostnameVerifier;, +    this.certificatePinner = certificatePinner;, +  }, +, +  /**, +   * Returns a URL with the hostname and port of the origin server. The path, query, and fragment of, +   * this URL are always empty, since they are not significant for planning a route., +   */, +  public HttpUrl url() {, +    return url;, +  }, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +  @Test public void pingsTransmitted() throws Exception {, +    // Ping every 500 ms, starting at 500 ms., +    client = client.newBuilder(), +        .pingInterval(500, TimeUnit.MILLISECONDS), +        .build();, +, +    // Delay the response to give 1 ping enough time to be sent and replied to., +    server.enqueue(new MockResponse(), +        .setBodyDelay(750, TimeUnit.MILLISECONDS), +        .setBody("ABC"));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals("ABC", response.body().string());, +, +    assertEquals(Protocol.HTTP_2, response.protocol());, +, +    // Confirm a single ping was sent and received, and its reply was sent and received., +    List<String> logs = http2Handler.takeAll();, +    assertEquals(1, countFrames(logs, "FINE: >> 0x00000000     8 PING          "));, +    assertEquals(1, countFrames(logs, "FINE: << 0x00000000     8 PING          "));, +    assertEquals(1, countFrames(logs, "FINE: >> 0x00000000     8 PING          ACK"));, +    assertEquals(1, countFrames(logs, "FINE: << 0x00000000     8 PING          ACK"));, +  }, +, +    for (String log: logs) {, +      if (log.contains(type)) {, +        return log;, +  private int countFrames(List<String> logs, String message) {, +    int result = 0;, +    for (String log: logs) {, +      if (log.equals(message)) {, +        result++;, +      }, +    }, +    return result;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +  @Test public void pingsTransmitted() throws Exception {, +    // Ping every 500 ms, starting at 500 ms., +    client = client.newBuilder(), +        .pingInterval(500, TimeUnit.MILLISECONDS), +        .build();, +, +    // Delay the response to give 1 ping enough time to be sent and replied to., +    server.enqueue(new MockResponse(), +        .setBodyDelay(750, TimeUnit.MILLISECONDS), +        .setBody("ABC"));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals("ABC", response.body().string());, +, +    assertEquals(Protocol.HTTP_2, response.protocol());, +, +    // Confirm a single ping was sent and received, and its reply was sent and received., +    List<String> logs = http2Handler.takeAll();, +    assertEquals(1, countFrames(logs, "FINE: >> 0x00000000     8 PING          "));, +    assertEquals(1, countFrames(logs, "FINE: << 0x00000000     8 PING          "));, +    assertEquals(1, countFrames(logs, "FINE: >> 0x00000000     8 PING          ACK"));, +    assertEquals(1, countFrames(logs, "FINE: << 0x00000000     8 PING          ACK"));, +  }, +, +    for (String log: logs) {, +      if (log.contains(type)) {, +        return log;, +  private int countFrames(List<String> logs, String message) {, +    int result = 0;, +    for (String log: logs) {, +      if (log.equals(message)) {, +        result++;, +      }, +    }, +    return result;, +  }, +, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +     * Sets the interval between HTTP/2 and web socket pings initiated by this client. Use this to, +     * automatically send ping frames until either the connection fails or it is closed. This keeps, +     * the connection alive and may detect connectivity failures., +     * client will assume that connectivity has been lost. When this happens on a web socket the, +     * connection is canceled and its listener is {@linkplain WebSocketListener#onFailure notified, +     * of the failure}. When it happens on an HTTP/2 connection the connection is closed and any, +     * calls it is carrying {@linkplain java.io.IOException will fail with an IOException}., +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +  @Test public void pingsTransmitted() throws Exception {, +    // Ping every 500 ms, starting at 500 ms., +    client = client.newBuilder()]
[+++ b/pom.xml, +    <okio.version>1.0.0</okio.version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. seed the cache (potentially), +    // 2. expect a cache hit or miss, +    // 1. seed the cache, +    // 2. invalidate it, +    // 3. expect a cache miss, +    // 1. seed the cache, +    // 2. invalidate it with uncacheable response, +    // 3. expect a cache miss, +    // 1. request a range, +    // 2. request a full document, expecting a cache miss, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. seed the cache (potentially), +    // 2. expect a cache hit or miss, +    // 1. seed the cache, +    // 2. invalidate it, +    // 3. expect a cache miss, +    // 1. seed the cache, +    // 2. invalidate it with uncacheable response, +    // 3. expect a cache miss, +    // 1. request a range, +    // 2. request a full document, expecting a cache miss, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +    server.listener.assertFailure(EOFException.class);, +    client.listener.assertFailure(EOFException.class);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. seed the cache (potentially), +    // 2. expect a cache hit or miss, +    // 1. seed the cache, +    // 2. invalidate it, +    // 3. expect a cache miss, +    // 1. seed the cache, +    // 2. invalidate it with uncacheable response, +    // 3. expect a cache miss, +    // 1. request a range, +    // 2. request a full document, expecting a cache miss, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +    server.listener.assertFailure(EOFException.class);, +    client.listener.assertFailure(EOFException.class);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +import java.io.EOFException;, +    serverListener.assertFailure(EOFException.class);, +    clientListener.assertFailure(SocketTimeoutException.class, "timeout", "Read timed out");, +    clientListener.assertFailure(SocketTimeoutException.class, "timeout", "Read timed out");, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. seed the cache (potentially), +    // 2. expect a cache hit or miss, +    // 1. seed the cache, +    // 2. invalidate it, +    // 3. expect a cache miss, +    // 1. seed the cache, +    // 2. invalidate it with uncacheable response, +    // 3. expect a cache miss, +    // 1. request a range, +    // 2. request a full document, expecting a cache miss, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +    server.listener.assertFailure(EOFException.class);, +    client.listener.assertFailure(EOFException.class);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +import java.io.EOFException;, +    serverListener.assertFailure(EOFException.class);, +    clientListener.assertFailure(SocketTimeoutException.class, "timeout", "Read timed out");, +    clientListener.assertFailure(SocketTimeoutException.class, "timeout", "Read timed out");, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java, +import java.util.Arrays;, +  public void assertFailure(Class<? extends IOException> cls, String... messages) {, +    if (messages.length > 0) {, +      assertTrue(failure.t.getMessage(), Arrays.asList(messages).contains(failure.t.getMessage()));, +    }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. seed the cache (potentially), +    // 2. expect a cache hit or miss, +    // 1. seed the cache, +    // 2. invalidate it, +    // 3. expect a cache miss, +    // 1. seed the cache, +    // 2. invalidate it with uncacheable response, +    // 3. expect a cache miss, +    // 1. request a range, +    // 2. request a full document, expecting a cache miss, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +    server.listener.assertFailure(EOFException.class);, +    client.listener.assertFailure(EOFException.class);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +import java.io.EOFException;, +    serverListener.assertFailure(EOFException.class);, +    clientListener.assertFailure(SocketTimeoutException.class, "timeout", "Read timed out");, +    clientListener.assertFailure(SocketTimeoutException.class, "timeout", "Read timed out");, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java, +import java.util.Arrays;, +  public void assertFailure(Class<? extends IOException> cls, String... messages) {, +    if (messages.length > 0) {, +      assertTrue(failure.t.getMessage(), Arrays.asList(messages).contains(failure.t.getMessage()));, +    }, +++ b/okhttp/src/main/java/okhttp3/CookieJar.java, + * accept and which to reject. A reasonable policy is to reject all cookies, though that may be, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. seed the cache (potentially), +    // 2. expect a cache hit or miss, +    // 1. seed the cache]
[+++ b/checkstyle.xml, +        <!--<module name="NeedBraces"/>-->]
[+++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.0"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.0"), +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.0"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.0"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.0"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.0"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.0"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.0"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.buffer();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.0"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.0"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.buffer();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.buffer().getByte(0)) {, +      byte nextByte = source.buffer().getByte(key.size());, +        && source.buffer().getByte(0) == '\n') {, +    if (source.buffer().getByte(0) == ':') {, +      if (source.buffer().getByte(0) == ' ') {, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.0"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.0"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.buffer();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java]
[+++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.spdy;, +, +import com.squareup.okhttp.internal.Util;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.Okio;, +import okio.Source;, +import org.junit.After;, +import org.junit.Test;, +, +import static com.squareup.okhttp.internal.Util.headerEntries;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.CANCEL;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.PROTOCOL_ERROR;, +import static com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE;, +import static com.squareup.okhttp.internal.spdy.Settings.PERSIST_VALUE;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_DATA;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_PING;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_RST_STREAM;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_SETTINGS;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_WINDOW_UPDATE;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class Http2ConnectionTest {, +  private static final Variant HTTP_2 = new Http20Draft12();, +  private final MockSpdyPeer peer = new MockSpdyPeer();, +, +  @After public void tearDown() throws Exception {, +    peer.close();, +  }, +, +  @Test public void serverPingsClientHttp2() throws Exception {, +    peer.setVariantAndClient(HTTP_2, false);, +, +    // write the mocking script, +    peer.sendFrame().ping(false, 2, 3);, +    peer.acceptFrame(); // PING, +    peer.play();, +, +    // play it back, +    connection(peer, HTTP_2);, +, +    // verify the peer received what was expected, +    MockSpdyPeer.InFrame ping = peer.takeFrame();, +    assertEquals(TYPE_PING, ping.type);, +    assertEquals(0, ping.streamId);, +    assertEquals(2, ping.payload1);, +    assertEquals(3, ping.payload2);, +    assertTrue(ping.ack);, +  }, +, +  @Test public void clientPingsServerHttp2() throws Exception {, +    peer.setVariantAndClient(HTTP_2, false);, +, +    // write the mocking script, +    peer.acceptFrame(); // PING, +    peer.sendFrame().ping(true, 1, 5);, +    peer.play();, +, +    // play it back, +    SpdyConnection connection = connection(peer, HTTP_2);, +    Ping ping = connection.ping();, +    assertTrue(ping.roundTripTime() > 0);, +    assertTrue(ping.roundTripTime() < TimeUnit.SECONDS.toNanos(1));, +, +    // verify the peer received what was expected, +    MockSpdyPeer.InFrame pingFrame = peer.takeFrame();, +    assertEquals(0, pingFrame.streamId);, +    assertEquals(1, pingFrame.payload1);, +    assertEquals(0x4f4b6f6b, pingFrame.payload2); // connection.ping() sets this., +    assertFalse(pingFrame.ack);, +  }, +, +  @Test public void peerHttp2ServerLowersInitialWindowSize() throws Exception {, +    peer.setVariantAndClient(HTTP_2, false);]
[+++ b/okhttp-apache/README.md, +OkHttp Apache HttpClient Implementation, +=======================================, +, +This module is an implementation of the Apache `HttpClient` interface that is backed by OkHttp., +, +**Warning**: Many core features of Apache HTTP client are not implemented by this API. This includes, +the keep-alive strategy, cookie store, credentials provider, route planner and others., +++ b/okhttp-apache/README.md, +OkHttp Apache HttpClient Implementation, +=======================================, +, +This module is an implementation of the Apache `HttpClient` interface that is backed by OkHttp., +, +**Warning**: Many core features of Apache HTTP client are not implemented by this API. This includes, +the keep-alive strategy, cookie store, credentials provider, route planner and others., +++ b/okhttp-apache/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3</groupId>, +    <artifactId>parent</artifactId>, +    <version>3.14.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-apache</artifactId>, +  <name>OkHttp Apache HttpClient</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.apache.httpcomponents</groupId>, +      <artifactId>httpclient</artifactId>, +      <scope>provided</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <version>3.0.1</version>, +        <configuration>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +            <link>http://hc.apache.org/httpcomponents-client-4.3.x/httpclient/apidocs/</link>, +            <link>https://hc.apache.org/httpcomponents-core-4.3.x/httpcore/apidocs/</link>, +          </links>, +        </configuration>, +      </plugin>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <version>3.1.1</version>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.apache</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/okhttp-apache/README.md, +OkHttp Apache HttpClient Implementation, +=======================================, +, +This module is an implementation of the Apache `HttpClient` interface that is backed by OkHttp., +, +**Warning**: Many core features of Apache HTTP client are not implemented by this API. This includes, +the keep-alive strategy, cookie store, credentials provider, route planner and others., +++ b/okhttp-apache/pom.xml]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  /**, +   * Webservers may set the initial window size to zero, which is a special case because it means, +   * that we have to flush headers immediately before any request body can be sent., +   * https://github.com/square/okhttp/issues/2543, +   */, +  @Test public void peerSetsZeroFlowControl() throws Exception {, +    peer.setVariantAndClient(HTTP_2, true);, +, +    // Write the mocking script., +    peer.sendFrame().settings(new Settings().set(INITIAL_WINDOW_SIZE, 0, 0));, +    peer.sendFrame().windowUpdate(0, 10); // Increase the connection window size., +    peer.acceptFrame(); // PING or SETTINGS ACK, +    peer.acceptFrame(); // PING or SETTINGS ACK, +    peer.sendFrame().ping(true, 1, 0);, +    peer.acceptFrame(); // HEADERS STREAM 3, +    peer.sendFrame().windowUpdate(3, 5);, +    peer.acceptFrame(); // DATA STREAM 3 "abcde", +    peer.sendFrame().windowUpdate(3, 5);, +    peer.acceptFrame(); // DATA STREAM 3 "fghi", +    peer.play();, +, +    // Play it back., +    FramedConnection connection = connection(peer, HTTP_2);, +    connection.ping().roundTripTime(); // Ensure the SETTINGS have been received., +    FramedStream stream = connection.newStream(headerEntries("a", "android"), true, true);, +    BufferedSink sink = Okio.buffer(stream.getSink());, +    sink.writeUtf8("abcdefghi");, +    sink.flush();, +, +    // Verify the peer received what was expected., +    peer.takeFrame(); // PING or SETTINGS ACK, +    peer.takeFrame(); // PING or SETTINGS ACK, +    MockSpdyPeer.InFrame headers = peer.takeFrame();, +    assertEquals(TYPE_HEADERS, headers.type);, +    MockSpdyPeer.InFrame data1 = peer.takeFrame();, +    assertEquals(TYPE_DATA, data1.type);, +    assertEquals(3, data1.streamId);, +    assertTrue(Arrays.equals("abcde".getBytes("UTF-8"), data1.data));, +    MockSpdyPeer.InFrame data2 = peer.takeFrame();, +    assertEquals(TYPE_DATA, data2.type);, +    assertEquals(3, data2.streamId);, +    assertTrue(Arrays.equals("fghi".getBytes("UTF-8"), data2.data));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  /**, +   * Webservers may set the initial window size to zero, which is a special case because it means, +   * that we have to flush headers immediately before any request body can be sent., +   * https://github.com/square/okhttp/issues/2543, +   */, +  @Test public void peerSetsZeroFlowControl() throws Exception {, +    peer.setVariantAndClient(HTTP_2, true);, +, +    // Write the mocking script., +    peer.sendFrame().settings(new Settings().set(INITIAL_WINDOW_SIZE, 0, 0));, +    peer.sendFrame().windowUpdate(0, 10); // Increase the connection window size., +    peer.acceptFrame(); // PING or SETTINGS ACK, +    peer.acceptFrame(); // PING or SETTINGS ACK, +    peer.sendFrame().ping(true, 1, 0);, +    peer.acceptFrame(); // HEADERS STREAM 3, +    peer.sendFrame().windowUpdate(3, 5);, +    peer.acceptFrame(); // DATA STREAM 3 "abcde", +    peer.sendFrame().windowUpdate(3, 5);, +    peer.acceptFrame(); // DATA STREAM 3 "fghi", +    peer.play();, +, +    // Play it back., +    FramedConnection connection = connection(peer, HTTP_2);, +    connection.ping().roundTripTime(); // Ensure the SETTINGS have been received., +    FramedStream stream = connection.newStream(headerEntries("a", "android"), true, true);, +    BufferedSink sink = Okio.buffer(stream.getSink());, +    sink.writeUtf8("abcdefghi");, +    sink.flush();, +, +    // Verify the peer received what was expected., +    peer.takeFrame(); // PING or SETTINGS ACK, +    peer.takeFrame(); // PING or SETTINGS ACK, +    MockSpdyPeer.InFrame headers = peer.takeFrame();, +    assertEquals(TYPE_HEADERS, headers.type);, +    MockSpdyPeer.InFrame data1 = peer.takeFrame();, +    assertEquals(TYPE_DATA, data1.type);, +    assertEquals(3, data1.streamId);, +    assertTrue(Arrays.equals("abcde".getBytes("UTF-8"), data1.data));, +    MockSpdyPeer.InFrame data2 = peer.takeFrame();, +    assertEquals(TYPE_DATA, data2.type);, +    assertEquals(3, data2.streamId);, +    assertTrue(Arrays.equals("fghi".getBytes("UTF-8"), data2.data));, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Call.java, +   * avoid leaking resources callers must {@linkplain ResponseBody close the response body}., +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  /**, +   * Webservers may set the initial window size to zero, which is a special case because it means, +   * that we have to flush headers immediately before any request body can be sent., +   * https://github.com/square/okhttp/issues/2543, +   */, +  @Test public void peerSetsZeroFlowControl() throws Exception {, +    peer.setVariantAndClient(HTTP_2, true);]
[+++ b/okcurl/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.0.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okcurl</artifactId>, +  <name>OkCurl</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>org.bouncycastle</groupId>, +      <artifactId>bcprov-jdk15on</artifactId>, +    </dependency>, +    <dependency>, +      <groupId>org.mortbay.jetty.npn</groupId>, +      <artifactId>npn-boot</artifactId>, +    </dependency>, +    <dependency>, +      <groupId>io.airlift</groupId>, +      <artifactId>airline</artifactId>, +    </dependency>, +    <dependency>, +      <groupId>com.google.guava</groupId>, +      <artifactId>guava</artifactId>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <resources>, +      <resource>, +        <directory>src/main/resources</directory>, +        <filtering>true</filtering>, +      </resource>, +    </resources>, +, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-assembly-plugin</artifactId>, +        <configuration>, +          <descriptorRefs>, +            <descriptorRef>jar-with-dependencies</descriptorRef>, +          </descriptorRefs>, +          <archive>, +            <manifest>, +              <mainClass>com.squareup.okhttp.curl.Main</mainClass>, +            </manifest>, +          </archive>, +        </configuration>, +        <executions>, +          <execution>, +            <phase>package</phase>, +            <goals>, +              <goal>single</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +      <plugin>, +        <groupId>org.skife.maven</groupId>, +        <artifactId>really-executable-jar-maven-plugin</artifactId>, +        <version>1.1.0</version>, +        <executions>, +          <execution>, +            <phase>package</phase>, +            <goals>, +              <goal>really-executable-jar</goal>, +            </goals>, +          </execution>, +        </executions>, +        <configuration>, +          <flags>-Xbootclasspath/p:$0</flags>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/okcurl/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +    logger.setLevel(Level.FINE);, +    logger.addHandler(handler);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +    logger.setLevel(Level.FINE);, +    logger.addHandler(handler);, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +      <groupId>com.squareup.moshi</groupId>, +      <artifactId>moshi</artifactId>, +    </dependency>, +    <dependency>, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +    logger.setLevel(Level.FINE);, +    logger.addHandler(handler);, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +      <groupId>com.squareup.moshi</groupId>, +      <artifactId>moshi</artifactId>, +    </dependency>, +    <dependency>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/framed/HpackDecodeInteropTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.framed;, +, +import java.util.Collection;, +import okhttp3.internal.framed.hpackjson.Story;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +, +import static okhttp3.internal.framed.hpackjson.HpackJsonUtil.storiesForCurrentDraft;, +, +@RunWith(Parameterized.class), +public class HpackDecodeInteropTest extends HpackDecodeTestBase {, +, +  public HpackDecodeInteropTest(Story story) {, +    super(story);, +  }, +, +  @Parameterized.Parameters(name = "{0}"), +  public static Collection<Story[]> createStories() throws Exception {, +    return createStories(storiesForCurrentDraft());, +  }, +, +  @Test, +  public void testGoodDecoderInterop() throws Exception {, +    testDecoder();, +  }, +}, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +    logger.setLevel(Level.FINE);, +    logger.addHandler(handler);, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +      <groupId>com.squareup.moshi</groupId>, +      <artifactId>moshi</artifactId>, +    </dependency>, +    <dependency>, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/framed/HpackDecodeInteropTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.framed;, +, +import java.util.Collection;, +import okhttp3.internal.framed.hpackjson.Story;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;]
[+++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.1.2-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +import java.security.cert.TrustAnchor;, +import okhttp3.internal.tls.BasicTrustRootIndex;, +import okhttp3.internal.tls.TrustRootIndex;, +  private final Class<?> sslSocketClass;, +  AndroidPlatform(Class<?> sslParametersClass, Class<?> sslSocketClass, Method setUseSessionTickets,, +      Method setHostname, Method getAlpnSelectedProtocol, Method setAlpnProtocols) {, +    this.sslSocketClass = sslSocketClass;, +    if (!sslSocketClass.isInstance(sslSocket)) {, +      return; // No TLS extensions if the socket class is custom., +    }, +    if (!sslSocketClass.isInstance(socket)) {, +      return null; // No TLS extensions if the socket class is custom., +    }, +      return super.buildCertificateChainCleaner(trustManager);, +        return new AndroidPlatform(sslParametersClass, sslSocketClass, setUseSessionTickets,, +            setHostname, getAlpnSelectedProtocol, setAlpnProtocols);, +  @Override public TrustRootIndex buildTrustRootIndex(X509TrustManager trustManager) {, +    try {, +      // From org.conscrypt.TrustManagerImpl, we want the method with this signature:, +      // private TrustAnchor findTrustAnchorByIssuerAndSignature(X509Certificate lastCert);, +      Method method = trustManager.getClass().getDeclaredMethod(, +          "findTrustAnchorByIssuerAndSignature", X509Certificate.class);, +      method.setAccessible(true);, +      return new CustomTrustRootIndex(trustManager, method);, +    } catch (NoSuchMethodException e) {, +      return super.buildTrustRootIndex(trustManager);, +    }, +  }, +, +  /**, +   * A trust manager for Android applications that customize the trust manager., +   *, +   * <p>This class exploits knowledge of Android implementation details. This class is potentially, +   * much faster to initialize than {@link BasicTrustRootIndex} because it doesn't need to load and, +   * index trusted CA certificates., +   */, +  static final class CustomTrustRootIndex implements TrustRootIndex {, +    private final X509TrustManager trustManager;, +    private final Method findByIssuerAndSignatureMethod;, +, +    CustomTrustRootIndex(X509TrustManager trustManager, Method findByIssuerAndSignatureMethod) {, +      this.findByIssuerAndSignatureMethod = findByIssuerAndSignatureMethod;, +      this.trustManager = trustManager;, +    }, +, +    @Override public X509Certificate findByIssuerAndSignature(X509Certificate cert) {, +      try {, +        TrustAnchor trustAnchor = (TrustAnchor) findByIssuerAndSignatureMethod.invoke(, +            trustManager, cert);, +        return trustAnchor != null, +            ? trustAnchor.getTrustedCert(), +            : null;, +      } catch (IllegalAccessException e) {, +        throw new AssertionError("unable to get issues and signature", e);, +      } catch (InvocationTargetException e) {, +        return null;, +      }, +    }, +, +    @Override public boolean equals(Object obj) {, +      if (obj == this) {, +        return true;, +      }, +      if (!(obj instanceof CustomTrustRootIndex)) {, +        return false;, +      }, +      CustomTrustRootIndex that = (CustomTrustRootIndex) obj;, +      return trustManager.equals(that.trustManager), +          && findByIssuerAndSignatureMethod.equals(that.findByIssuerAndSignatureMethod);, +    }, +, +    @Override public int hashCode() {, +      return trustManager.hashCode() + 31 * findByIssuerAndSignatureMethod.hashCode();, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +import java.security.cert.TrustAnchor;, +import okhttp3.internal.tls.BasicTrustRootIndex;, +import okhttp3.internal.tls.TrustRootIndex;, +  private final Class<?> sslSocketClass;, +  AndroidPlatform(Class<?> sslParametersClass, Class<?> sslSocketClass, Method setUseSessionTickets,, +      Method setHostname, Method getAlpnSelectedProtocol, Method setAlpnProtocols) {, +    this.sslSocketClass = sslSocketClass;, +    if (!sslSocketClass.isInstance(sslSocket)) {, +      return; // No TLS extensions if the socket class is custom., +    }, +    if (!sslSocketClass.isInstance(socket)) {, +      return null; // No TLS extensions if the socket class is custom., +    }, +      return super.buildCertificateChainCleaner(trustManager);, +        return new AndroidPlatform(sslParametersClass, sslSocketClass, setUseSessionTickets,, +            setHostname, getAlpnSelectedProtocol, setAlpnProtocols);, +  @Override public TrustRootIndex buildTrustRootIndex(X509TrustManager trustManager) {, +    try {, +      // From org.conscrypt.TrustManagerImpl, we want the method with this signature:, +      // private TrustAnchor findTrustAnchorByIssuerAndSignature(X509Certificate lastCert);, +      Method method = trustManager.getClass().getDeclaredMethod(, +          "findTrustAnchorByIssuerAndSignature", X509Certificate.class);]
[+++ b/mockwebserver/pom.xml, +    <version>1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2</version>, +++ b/okhttp/pom.xml, +    <version>1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2</version>, +++ b/okhttp/pom.xml, +    <version>1.2</version>, +++ b/pom.xml, +  <version>1.2</version>, +    <tag>parent-1.2</tag>, +++ b/mockwebserver/pom.xml, +    <version>1.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2</version>, +++ b/okhttp/pom.xml, +    <version>1.2</version>, +++ b/pom.xml, +  <version>1.2</version>, +    <tag>parent-1.2</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2</version>, +++ b/okhttp/pom.xml, +    <version>1.2</version>, +++ b/pom.xml, +  <version>1.2</version>, +    <tag>parent-1.2</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2</version>, +++ b/samples/pom.xml, +    <version>1.2</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2</version>, +++ b/okhttp/pom.xml, +    <version>1.2</version>, +++ b/pom.xml, +  <version>1.2</version>, +    <tag>parent-1.2</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2</version>, +++ b/samples/pom.xml, +    <version>1.2</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.2</version>]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/testing/InstallUncaughtExceptionHandlerListener.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +import org.junit.internal.Throwables;, +  private final Map<Throwable, String> exceptions = new LinkedHashMap<>();, +  @Override public void testRunStarted(Description description) {, +, +        synchronized (exceptions) {, +          exceptions.put(throwable, lastTestStarted.getDisplayName());, +        }, +  @Override public void testStarted(Description description) {, +, +    synchronized (exceptions) {, +      if (!exceptions.isEmpty()) {, +        throw Throwables.rethrowAsException(exceptions.keySet().iterator().next());, +      }, +    }]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, +        try {, +        } catch (InterruptedIOException e) {, +          throw new SocketTimeoutException(e.getMessage());, +        }, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, +        try {, +        } catch (InterruptedIOException e) {, +          throw new SocketTimeoutException(e.getMessage());, +        }, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/StreamedRequestBody.java, +import okio.Pipe;, +    initOutputStream(Okio.buffer(pipe.sink()), expectedContentLength);, +    while (pipe.source().read(buffer, 8192) != -1L) {, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, +        try {, +        } catch (InterruptedIOException e) {, +          throw new SocketTimeoutException(e.getMessage());, +        }, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/StreamedRequestBody.java, +import okio.Pipe;, +    initOutputStream(Okio.buffer(pipe.sink()), expectedContentLength);, +    while (pipe.source().read(buffer, 8192) != -1L) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java, +import java.io.InterruptedIOException;, +import java.net.SocketTimeoutException;, +        try {, +        } catch (InterruptedIOException e) {, +          throw new SocketTimeoutException(e.getMessage());, +        }, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/StreamedRequestBody.java, +import okio.Pipe;, +    initOutputStream(Okio.buffer(pipe.sink()), expectedContentLength);, +    while (pipe.source().read(buffer, 8192) != -1L) {, +++ /dev/null, +++ b/pom.xml, +    <okio.version>1.9.0</okio.version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +  /**, +   * Enqueued on shutdown to release threads waiting on {@link #dispatch}. Note that this response, +   * isn't transmitted because the connection is closed before this response is returned., +   */, +  private static final MockResponse DEAD_LETTER = new MockResponse(), +      .setStatus("HTTP/1.1 " + 503 + " shutting down");, +, +    MockResponse result = responseQueue.take();, +, +    // If take() returned because we're shutting down, then enqueue another dead letter so that any, +    // other threads waiting on take() will also return., +    if (result == DEAD_LETTER) responseQueue.add(DEAD_LETTER);, +, +    return result;, +  @Override public void shutdown() {, +    responseQueue.add(DEAD_LETTER);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +  /**, +   * Enqueued on shutdown to release threads waiting on {@link #dispatch}. Note that this response, +   * isn't transmitted because the connection is closed before this response is returned., +   */, +  private static final MockResponse DEAD_LETTER = new MockResponse(), +      .setStatus("HTTP/1.1 " + 503 + " shutting down");, +, +    MockResponse result = responseQueue.take();, +, +    // If take() returned because we're shutting down, then enqueue another dead letter so that any, +    // other threads waiting on take() will also return., +    if (result == DEAD_LETTER) responseQueue.add(DEAD_LETTER);, +, +    return result;, +  @Override public void shutdown() {, +    responseQueue.add(DEAD_LETTER);, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +, +  @Test public void shutdownWhileBlockedDispatching() throws Exception {, +    // Enqueue a request that'll cause MockWebServer to hang on QueueDispatcher.dispatch()., +    HttpURLConnection connection = (HttpURLConnection) server.url("/").url().openConnection();, +    connection.setReadTimeout(500);, +    try {, +      connection.getResponseCode();, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +, +    // Shutting down the server should unblock the dispatcher., +    server.shutdown();, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their]
[+++ b/build.gradle, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/okhttp-logging-interceptor/build.gradle, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/okhttp-logging-interceptor/build.gradle, +++ b/okhttp-logging-interceptor/gradle.properties, +POM_ARTIFACT_ID=okhttp-logging-interceptor, +POM_NAME=okhttp-logging-interceptor, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/okhttp-logging-interceptor/build.gradle, +++ b/okhttp-logging-interceptor/gradle.properties, +POM_ARTIFACT_ID=okhttp-logging-interceptor, +POM_NAME=okhttp-logging-interceptor, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import org.junit.Rule;, +  @Rule public final MockWebServer server = new MockWebServer();, +, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/okhttp-logging-interceptor/build.gradle, +++ b/okhttp-logging-interceptor/gradle.properties, +POM_ARTIFACT_ID=okhttp-logging-interceptor, +POM_NAME=okhttp-logging-interceptor, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import org.junit.Rule;, +  @Rule public final MockWebServer server = new MockWebServer();, +, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java, +import org.junit.Rule;, +  @Rule public final MockWebServer server = new MockWebServer();, +, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/okhttp-logging-interceptor/build.gradle, +++ b/okhttp-logging-interceptor/gradle.properties, +POM_ARTIFACT_ID=okhttp-logging-interceptor, +POM_NAME=okhttp-logging-interceptor, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import org.junit.Rule;, +  @Rule public final MockWebServer server = new MockWebServer();, +, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java, +import org.junit.Rule;, +  @Rule public final MockWebServer server = new MockWebServer();, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    closeWebSockets(webSocket, serverListener.assertOpen());, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/okhttp-logging-interceptor/build.gradle, +++ b/okhttp-logging-interceptor/gradle.properties, +POM_ARTIFACT_ID=okhttp-logging-interceptor, +POM_NAME=okhttp-logging-interceptor, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import org.junit.Rule;, +  @Rule public final MockWebServer server = new MockWebServer();, +, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java, +import org.junit.Rule;, +  @Rule public final MockWebServer server = new MockWebServer();, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    closeWebSockets(webSocket, serverListener.assertOpen());, +++ b/okhttp-tls/build.gradle, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/okhttp-logging-interceptor/build.gradle, +++ b/okhttp-logging-interceptor/gradle.properties, +POM_ARTIFACT_ID=okhttp-logging-interceptor, +POM_NAME=okhttp-logging-interceptor, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import org.junit.Rule;, +  @Rule public final MockWebServer server = new MockWebServer();, +, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java, +import org.junit.Rule;, +  @Rule public final MockWebServer server = new MockWebServer();, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    closeWebSockets(webSocket, serverListener.assertOpen());, +++ b/okhttp-tls/build.gradle, +++ b/okhttp-urlconnection/build.gradle, +++ b/build.gradle, +++ b/mockwebserver/build.gradle, +++ b/okhttp-logging-interceptor/build.gradle, +++ b/okhttp-logging-interceptor/gradle.properties, +POM_ARTIFACT_ID=okhttp-logging-interceptor, +POM_NAME=okhttp-logging-interceptor, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import org.junit.Rule;, +  @Rule public final MockWebServer server = new MockWebServer();, +, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java, +import org.junit.Rule;, +  @Rule public final MockWebServer server = new MockWebServer();]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the]
[+++ b/pom.xml, +    <okio.version>1.11.0</okio.version>]
[+++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +    assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, +    assertEquals(-1, in.read());, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +    assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, +    assertEquals(-1, in.read());, +++ /dev/null, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +    assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, +    assertEquals(-1, in.read());, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +    assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, +    assertEquals(-1, in.read());, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +    assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, +    assertEquals(-1, in.read());, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +    assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, +    assertEquals(-1, in.read());, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingSSLSocketFactory.java, +    configureSocket(sslSocket);, +    return sslSocket;, +    configureSocket(sslSocket);, +    return sslSocket;, +    configureSocket(sslSocket);, +    return sslSocket;, +    configureSocket(sslSocket);, +    return sslSocket;, +    configureSocket(sslSocket);, +    return sslSocket;, +    configureSocket(sslSocket);, +    return sslSocket;, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +    assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, +    assertEquals(-1, in.read());, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingSSLSocketFactory.java, +    configureSocket(sslSocket);, +    return sslSocket;]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      result.setChunkedBody(body, 1024);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      result.setChunkedBody(body, 1024);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Util;, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +  private byte[] body;, +    setBody(new byte[0]);, +  public byte[] getBody() {, +    return body;, +    return bodyStream != null ? bodyStream : new ByteArrayInputStream(body);, +    setHeader("Content-Length", body.length);, +    this.body = body;, +    try {, +      return setBody(body.getBytes("UTF-8"));, +    } catch (UnsupportedEncodingException e) {, +      throw new AssertionError();, +    }, +  public MockResponse setChunkedBody(byte[] body, int maxChunkSize) {, +    try {, +      ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, +      int pos = 0;, +      while (pos < body.length) {, +        int chunkSize = Math.min(body.length - pos, maxChunkSize);, +        bytesOut.write(Integer.toHexString(chunkSize).getBytes(Util.US_ASCII));, +        bytesOut.write("\r\n".getBytes(Util.US_ASCII));, +        bytesOut.write(body, pos, chunkSize);, +        bytesOut.write("\r\n".getBytes(Util.US_ASCII));, +        pos += chunkSize;, +      bytesOut.write("0\r\n\r\n".getBytes(Util.US_ASCII)); // Last chunk + empty trailer + crlf., +      this.body = bytesOut.toByteArray();, +    } catch (IOException e) {, +      throw new AssertionError(); // In-memory I/O doesn't throw IOExceptions., +    }, +    try {, +      return setChunkedBody(body.getBytes("UTF-8"), maxChunkSize);, +    } catch (UnsupportedEncodingException e) {, +      throw new AssertionError();, +    }, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      result.setChunkedBody(body, 1024);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Util;, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +  private byte[] body;, +    setBody(new byte[0]);, +  public byte[] getBody() {, +    return body;, +    return bodyStream != null ? bodyStream : new ByteArrayInputStream(body);, +    setHeader("Content-Length", body.length);, +    this.body = body;, +    try {, +      return setBody(body.getBytes("UTF-8"));, +    } catch (UnsupportedEncodingException e) {, +      throw new AssertionError();, +    }, +  public MockResponse setChunkedBody(byte[] body, int maxChunkSize) {, +    try {, +      ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, +      int pos = 0;, +      while (pos < body.length) {, +        int chunkSize = Math.min(body.length - pos, maxChunkSize);, +        bytesOut.write(Integer.toHexString(chunkSize).getBytes(Util.US_ASCII));, +        bytesOut.write("\r\n".getBytes(Util.US_ASCII));, +        bytesOut.write(body, pos, chunkSize);, +        bytesOut.write("\r\n".getBytes(Util.US_ASCII));, +        pos += chunkSize;, +      bytesOut.write("0\r\n\r\n".getBytes(Util.US_ASCII)); // Last chunk + empty trailer + crlf., +      this.body = bytesOut.toByteArray();, +    } catch (IOException e) {, +      throw new AssertionError(); // In-memory I/O doesn't throw IOExceptions., +    }, +    try {, +      return setChunkedBody(body.getBytes("UTF-8"), maxChunkSize);, +    } catch (UnsupportedEncodingException e) {, +      throw new AssertionError();, +    }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      Buffer body = new Buffer();, +      if (response.getBody() != null) {, +        body.write(response.getBody());, +      }, +        byte[] pushedBody = pushPromise.getResponse().getBody();, +            stream.getConnection().pushStream(stream.getId(), pushedHeaders, pushedBody.length > 0);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      result.setChunkedBody(body, 1024);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Util;, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +  private byte[] body;]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft10Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.http;, +, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.PushPromise;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import java.util.Arrays;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class HttpOverHttp20Draft10Test extends HttpOverSpdyTest {, +, +  public HttpOverHttp20Draft10Test() {, +    super(Protocol.HTTP_2);, +    this.hostHeader = ":authority";, +  }, +, +  @Test public void serverSendsPushPromise_GET() throws Exception {, +    MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet"), +        .withPush(new PushPromise("GET", "/foo/bar", Arrays.asList("foo: bar"),, +            new MockResponse().setBody("bar").setStatus("HTTP/1.1 200 Sweet")));, +    server.enqueue(response);, +    server.play();, +, +    connection = client.open(server.getUrl("/foo"));, +    assertContent("ABCDE", connection, Integer.MAX_VALUE);, +    assertEquals(200, connection.getResponseCode());, +    assertEquals("Sweet", connection.getResponseMessage());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /foo HTTP/1.1", request.getRequestLine());, +    assertContains(request.getHeaders(), ":scheme: https");, +    assertContains(request.getHeaders(), hostHeader + ": " + hostName + ":" + server.getPort());, +, +    RecordedRequest pushedRequest = server.takeRequest();, +    assertEquals("GET /foo/bar HTTP/1.1", pushedRequest.getRequestLine());, +    assertEquals(Arrays.asList("foo: bar"), pushedRequest.getHeaders());, +  }, +, +  @Test public void serverSendsPushPromise_HEAD() throws Exception {, +    MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet"), +        .withPush(new PushPromise("HEAD", "/foo/bar", Arrays.asList("foo: bar"),, +            new MockResponse().setStatus("HTTP/1.1 204 Sweet")));, +    server.enqueue(response);, +    server.play();, +, +    connection = client.open(server.getUrl("/foo"));, +    assertContent("ABCDE", connection, Integer.MAX_VALUE);, +    assertEquals(200, connection.getResponseCode());, +    assertEquals("Sweet", connection.getResponseMessage());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /foo HTTP/1.1", request.getRequestLine());, +    assertContains(request.getHeaders(), ":scheme: https");, +    assertContains(request.getHeaders(), hostHeader + ": " + hostName + ":" + server.getPort());, +, +    RecordedRequest pushedRequest = server.takeRequest();, +    assertEquals("HEAD /foo/bar HTTP/1.1", pushedRequest.getRequestLine());, +    assertEquals(Arrays.asList("foo: bar"), pushedRequest.getHeaders());, +  }, +}, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft10Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.http;, +, +import com.squareup.okhttp.Protocol;]
[+++ b/benchmarks/pom.xml, +    <version>3.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.0</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import okhttp3.HttpUrl;, +  private final HttpUrl requestUrl;, +, +      String scheme = socket instanceof SSLSocket ? "https" : "http";, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +      this.requestUrl = null;, +  public HttpUrl getRequestUrl() {, +    return requestUrl;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import okhttp3.HttpUrl;, +  private final HttpUrl requestUrl;, +, +      String scheme = socket instanceof SSLSocket ? "https" : "http";, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +      this.requestUrl = null;, +  public HttpUrl getRequestUrl() {, +    return requestUrl;, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.HttpUrl;, +, +  @Test public void requestUrlReconstructed() throws Exception {, +    server.enqueue(new MockResponse().setBody("hello world"));, +, +    URL url = server.url("/a/deep/path?key=foo%20bar").url();, +    HttpURLConnection connection = (HttpURLConnection) url.openConnection();, +    InputStream in = connection.getInputStream();, +    BufferedReader reader = new BufferedReader(new InputStreamReader(in));, +    assertEquals(HttpURLConnection.HTTP_OK, connection.getResponseCode());, +    assertEquals("hello world", reader.readLine());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /a/deep/path?key=foo%20bar HTTP/1.1", request.getRequestLine());, +, +    HttpUrl requestUrl = request.getRequestUrl();, +    assertEquals("http", requestUrl.scheme());, +    assertEquals(server.getHostName(), requestUrl.host());, +    assertEquals(server.getPort(), requestUrl.port());, +    assertEquals("/a/deep/path", requestUrl.encodedPath());, +    assertEquals("foo bar", requestUrl.queryParameter("key"));, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import okhttp3.HttpUrl;, +  private final HttpUrl requestUrl;, +, +      String scheme = socket instanceof SSLSocket ? "https" : "http";, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +      this.requestUrl = null;, +  public HttpUrl getRequestUrl() {, +    return requestUrl;, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.HttpUrl;, +, +  @Test public void requestUrlReconstructed() throws Exception {, +    server.enqueue(new MockResponse().setBody("hello world"));, +, +    URL url = server.url("/a/deep/path?key=foo%20bar").url();, +    HttpURLConnection connection = (HttpURLConnection) url.openConnection();, +    InputStream in = connection.getInputStream();, +    BufferedReader reader = new BufferedReader(new InputStreamReader(in));, +    assertEquals(HttpURLConnection.HTTP_OK, connection.getResponseCode());, +    assertEquals("hello world", reader.readLine());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /a/deep/path?key=foo%20bar HTTP/1.1", request.getRequestLine());, +, +    HttpUrl requestUrl = request.getRequestUrl();, +    assertEquals("http", requestUrl.scheme());, +    assertEquals(server.getHostName(), requestUrl.host());, +    assertEquals(server.getPort(), requestUrl.port());, +    assertEquals("/a/deep/path", requestUrl.encodedPath());, +    assertEquals("foo bar", requestUrl.queryParameter("key"));, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertTrue(message.contains("WARNING: A connection to " + server.url("/") + " was leaked.", +      assertTrue(message.contains("WARNING: A connection to " + server.url("/") + " was leaked."]
[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-apache/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-apache/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.parse("application/octet-stream");, +  HttpEntityBody(HttpEntity entity, String contentTypeHeader) {, +    if (contentTypeHeader != null) {, +      mediaType = MediaType.parse(contentTypeHeader);, +    } else if (entity.getContentType() != null) {, +      mediaType = MediaType.parse(entity.getContentType().getValue());, +    } else {, +      mediaType = DEFAULT_MEDIA_TYPE;, +    }, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-apache/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.parse("application/octet-stream");, +  HttpEntityBody(HttpEntity entity, String contentTypeHeader) {, +    if (contentTypeHeader != null) {, +      mediaType = MediaType.parse(contentTypeHeader);, +    } else if (entity.getContentType() != null) {, +      mediaType = MediaType.parse(entity.getContentType().getValue());, +    } else {, +      mediaType = DEFAULT_MEDIA_TYPE;, +    }, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    String contentType = null;, +      String name = header.getName();, +      if ("Content-Type".equals(name)) {, +        contentType = header.getValue();, +      } else {, +        builder.header(name, header.getValue());, +      }, +        body = new HttpEntityBody(entity, contentType);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", -1);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okhttp-apache/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.parse("application/octet-stream");, +  HttpEntityBody(HttpEntity entity, String contentTypeHeader) {, +    if (contentTypeHeader != null) {, +      mediaType = MediaType.parse(contentTypeHeader);, +    } else if (entity.getContentType() != null) {, +      mediaType = MediaType.parse(entity.getContentType().getValue());, +    } else {, +      mediaType = DEFAULT_MEDIA_TYPE;, +    }, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    String contentType = null;, +      String name = header.getName();, +      if ("Content-Type".equals(name)) {, +        contentType = header.getValue();, +      } else {, +        builder.header(name, header.getValue());, +      }, +        body = new HttpEntityBody(entity, contentType);, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import org.apache.http.entity.StringEntity;, +  @Test public void postOverrideContentType() throws Exception {, +    server.enqueue(new MockResponse());, +, +    HttpPost httpPost = new HttpPost();, +    httpPost.setURI(server.getUrl("/").toURI());]
[+++ b/benchmarks/pom.xml, +      <artifactId>okhttp-tls</artifactId>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +++ b/benchmarks/pom.xml, +      <artifactId>okhttp-tls</artifactId>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/pom.xml, +      <artifactId>okhttp-tls</artifactId>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/pom.xml, +      <artifactId>okhttp-tls</artifactId>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/pom.xml, +      <artifactId>okhttp-tls</artifactId>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/pom.xml, +      <artifactId>okhttp-tls</artifactId>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/pom.xml, +      <artifactId>okhttp-tls</artifactId>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +import okhttp3.tls.TlsNode;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +++ b/benchmarks/pom.xml, +      <artifactId>okhttp-tls</artifactId>]
[+++ b/benchmarks/pom.xml, +      <groupId>com.google.caliper</groupId>, +      <artifactId>caliper</artifactId>, +      <version>1.0-beta-1</version>, +    </dependency>, +    <dependency>, +    <!-- Netty needs this if gzip is enabled. -->, +    <dependency>, +      <groupId>com.jcraft</groupId>, +      <artifactId>jzlib</artifactId>, +      <version>1.1.2</version>, +    </dependency>, +++ b/benchmarks/pom.xml, +      <groupId>com.google.caliper</groupId>, +      <artifactId>caliper</artifactId>, +      <version>1.0-beta-1</version>, +    </dependency>, +    <dependency>, +    <!-- Netty needs this if gzip is enabled. -->, +    <dependency>, +      <groupId>com.jcraft</groupId>, +      <artifactId>jzlib</artifactId>, +      <version>1.1.2</version>, +    </dependency>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +        long total = readAllAndClose(in);, +++ b/benchmarks/pom.xml, +      <groupId>com.google.caliper</groupId>, +      <artifactId>caliper</artifactId>, +      <version>1.0-beta-1</version>, +    </dependency>, +    <dependency>, +    <!-- Netty needs this if gzip is enabled. -->, +    <dependency>, +      <groupId>com.jcraft</groupId>, +      <artifactId>jzlib</artifactId>, +      <version>1.1.2</version>, +    </dependency>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +        long total = readAllAndClose(in);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import com.google.caliper.Param;, +import com.google.caliper.model.ArbitraryMeasurement;, +import com.google.caliper.runner.CaliperMain;, +public class Benchmark extends com.google.caliper.Benchmark {, +  private static final boolean VERBOSE = false;, +, +  @Param, +  Client client;, +  @Param({ "1", "10" }), +  int concurrencyLevel;, +  @Param, +  boolean tls;, +  @Param, +  boolean gzip;, +  @Param, +  boolean chunked;, +  @Param({ "128", "1048576" }), +  int bodyByteCount;, +  @Param({ "0", "20" }), +  int headerCount;, +  public static void main(String[] args) {, +    List<String> allArgs = new ArrayList<String>();, +    allArgs.add("--instrument");, +    allArgs.add("arbitrary");, +    allArgs.addAll(Arrays.asList(args));, +, +    CaliperMain.main(Benchmark.class, allArgs.toArray(new String[allArgs.size()]));, +  @ArbitraryMeasurement(description = "requests per second"), +  public double run() throws Exception {, +    if (VERBOSE) System.out.println(toString());, +    HttpClient httpClient = client.create();, +    double best = 0.0;, +        if (VERBOSE) {, +        }, +        best = Math.max(best, requestsPerSecond);, +, +    return best;, +    return String.format("%s %s\nbodyByteCount=%s headerCount=%s concurrencyLevel=%s",, +        client, modifiers, bodyByteCount, headerCount, concurrencyLevel);, +++ b/benchmarks/pom.xml, +      <groupId>com.google.caliper</groupId>, +      <artifactId>caliper</artifactId>, +      <version>1.0-beta-1</version>, +    </dependency>, +    <dependency>, +    <!-- Netty needs this if gzip is enabled. -->, +    <dependency>, +      <groupId>com.jcraft</groupId>, +      <artifactId>jzlib</artifactId>, +      <version>1.1.2</version>, +    </dependency>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +        long total = readAllAndClose(in);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import com.google.caliper.Param;, +import com.google.caliper.model.ArbitraryMeasurement;, +import com.google.caliper.runner.CaliperMain;, +public class Benchmark extends com.google.caliper.Benchmark {, +  private static final boolean VERBOSE = false;]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, +      Buffer buffer = new Buffer();, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, +      Buffer buffer = new Buffer();, +++ b/okhttp-tests/pom.xml, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, +      Buffer buffer = new Buffer();, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpAddress = new Address(httpServer.getHostName(), httpServer.getPort(), null, null,, +        HttpAuthenticator.SYSTEM_DEFAULT, null, Protocol.SPDY3_AND_HTTP11);, +    spdyAddress = new Address(spdyServer.getHostName(), spdyServer.getPort(),, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, +      Buffer buffer = new Buffer();, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpAddress = new Address(httpServer.getHostName(), httpServer.getPort(), null, null,, +        HttpAuthenticator.SYSTEM_DEFAULT, null, Protocol.SPDY3_AND_HTTP11);, +    spdyAddress = new Address(spdyServer.getHostName(), spdyServer.getPort(),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MediaTypeTest.java, +    assertInvalid("text/plain;");, +    assertInvalid("text/plain; ");, +    assertInvalid("text/plain; a=1;");, +    assertInvalid("text/plain; a=1; ");, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, +      Buffer buffer = new Buffer();, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpAddress = new Address(httpServer.getHostName(), httpServer.getPort(), null, null,, +        HttpAuthenticator.SYSTEM_DEFAULT, null, Protocol.SPDY3_AND_HTTP11);, +    spdyAddress = new Address(spdyServer.getHostName(), spdyServer.getPort(),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MediaTypeTest.java, +    assertInvalid("text/plain;");, +    assertInvalid("text/plain; ");, +    assertInvalid("text/plain; a=1;");, +    assertInvalid("text/plain; a=1; ");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +import okio.Buffer;, +    Buffer buffer = new Buffer();, +++ b/CHANGELOG.md, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Buffer;, +      Buffer body = new Buffer();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.Buffer;, +      Buffer buffer = new Buffer();, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpAddress = new Address(httpServer.getHostName(), httpServer.getPort(), null, null,, +        HttpAuthenticator.SYSTEM_DEFAULT, null, Protocol.SPDY3_AND_HTTP11);, +    spdyAddress = new Address(spdyServer.getHostName(), spdyServer.getPort(),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MediaTypeTest.java, +    assertInvalid("text/plain;");, +    assertInvalid("text/plain; ");, +    assertInvalid("text/plain; a=1;");, +    assertInvalid("text/plain; a=1; ");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +import okio.Buffer;, +    Buffer buffer = new Buffer();]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +        .assertSuccessful(), +  @Test public void getReturns500() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(500));, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    executeSynchronously(request), +        .assertCode(500), +        .assertNotSuccessful();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +        .assertSuccessful(), +  @Test public void getReturns500() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(500));, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    executeSynchronously(request), +        .assertCode(500), +        .assertNotSuccessful();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +  public RecordedResponse assertSuccessful() {, +    assertTrue(response.isSuccessful());, +    return this;, +  }, +, +  public RecordedResponse assertNotSuccessful() {, +    assertFalse(response.isSuccessful());, +    return this;, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +        .assertSuccessful(), +  @Test public void getReturns500() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(500));, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    executeSynchronously(request), +        .assertCode(500), +        .assertNotSuccessful();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +  public RecordedResponse assertSuccessful() {, +    assertTrue(response.isSuccessful());, +    return this;, +  }, +, +  public RecordedResponse assertNotSuccessful() {, +    assertFalse(response.isSuccessful());, +    return this;, +  }, +, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  // @Override Don't override: this overload method doesn't exist prior to Java 1.7., +  public void setFixedLengthStreamingMode(long contentLength) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +        .assertSuccessful(), +  @Test public void getReturns500() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(500));, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    executeSynchronously(request), +        .assertCode(500), +        .assertNotSuccessful();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +  public RecordedResponse assertSuccessful() {, +    assertTrue(response.isSuccessful());, +    return this;, +  }, +, +  public RecordedResponse assertNotSuccessful() {, +    assertFalse(response.isSuccessful());, +    return this;]
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +      unknownHostException.addSuppressed(failures.get(i));, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +      unknownHostException.addSuppressed(failures.get(i));, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +      unknownHostException.addSuppressed(failures.get(i));, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.java, +    firstException.addSuppressed(e);]
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, +, +  @Test public void basicChallenge() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\""), +        .build();, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area")),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +, +  @Test public void basicChallengeWithCharset() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\", charset=\"UTF-8\""), +        .build();, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area").withCharset(Util.UTF_8)),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +, +  @Test public void basicChallengeWithUnexpectedCharset() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\", charset=\"US-ASCII\""), +        .build();, +    assertEquals(Collections.emptyList(), HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, +, +  @Test public void basicChallenge() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\""), +        .build();, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area")),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +, +  @Test public void basicChallengeWithCharset() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\", charset=\"UTF-8\""), +        .build();, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area").withCharset(Util.UTF_8)),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +, +  @Test public void basicChallengeWithUnexpectedCharset() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\", charset=\"US-ASCII\""), +        .build();, +    assertEquals(Collections.emptyList(), HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import java.net.PasswordAuthentication;, +  @Test public void authenticateWithCharset() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(401), +        .addHeader("WWW-Authenticate: Basic realm=\"protected area\", charset=\"UTF-8\""), +        .setBody("Please authenticate with UTF-8."));, +    server.enqueue(new MockResponse().setResponseCode(401), +        .addHeader("WWW-Authenticate: Basic realm=\"protected area\""), +        .setBody("Please authenticate with ISO-8859-1."));, +    server.enqueue(new MockResponse(), +        .setBody("Successful auth!"));, +, +    Authenticator.setDefault(new RecordingAuthenticator(, +        new PasswordAuthentication("username", "mötorhead".toCharArray())));, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .authenticator(new JavaNetAuthenticator()), +        .build());, +    connection = urlFactory.open(server.url("/").url());, +    assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));, +, +    // No authorization header for the first request..., +    RecordedRequest request1 = server.takeRequest();, +    assertNull(request1.getHeader("Authorization"));, +, +    // UTF-8 encoding for the first credential., +    RecordedRequest request2 = server.takeRequest();, +    assertEquals("Basic dXNlcm5hbWU6bcO2dG9yaGVhZA==", request2.getHeader("Authorization"));, +, +    // ISO-8859-1 encoding for the second credential., +    RecordedRequest request3 = server.takeRequest();, +    assertEquals("Basic dXNlcm5hbWU6bfZ0b3JoZWFk", request3.getHeader("Authorization"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, +, +  @Test public void basicChallenge() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\""), +        .build();, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area")),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +, +  @Test public void basicChallengeWithCharset() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\", charset=\"UTF-8\""), +        .build();, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area").withCharset(Util.UTF_8)),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.Network;, +        .setConnectionPool(ConnectionPool.getDefault());, +    Internal.instance.setNetwork(client, dns);, +, +  private static class FakeDns implements Network {, +    @Override public InetAddress[] resolveInetAddresses(String host) throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.Network;, +        .setConnectionPool(ConnectionPool.getDefault());, +    Internal.instance.setNetwork(client, dns);, +, +  private static class FakeDns implements Network {, +    @Override public InetAddress[] resolveInetAddresses(String host) throws UnknownHostException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.Network;, +        .setConnectionPool(ConnectionPool.getDefault());, +    Internal.instance.setNetwork(client, dns);, +, +  private static class FakeDns implements Network {, +    @Override public InetAddress[] resolveInetAddresses(String host) throws UnknownHostException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.Network;, +        .setConnectionPool(ConnectionPool.getDefault());, +    Internal.instance.setNetwork(client, dns);, +, +  private static class FakeDns implements Network {, +    @Override public InetAddress[] resolveInetAddresses(String host) throws UnknownHostException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.Network;, +      @Override public Network network(OkHttpClient client) {, +        return client.network;, +      }, +, +      @Override public void setNetwork(OkHttpClient client, Network network) {, +        client.network = network;, +      }, +, +  private Network network;, +    if (result.network == null) {, +      result.network = Network.DEFAULT;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.Network;, +        .setConnectionPool(ConnectionPool.getDefault());, +    Internal.instance.setNetwork(client, dns);, +, +  private static class FakeDns implements Network {, +    @Override public InetAddress[] resolveInetAddresses(String host) throws UnknownHostException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.Network;, +      @Override public Network network(OkHttpClient client) {, +        return client.network;, +      }, +, +      @Override public void setNetwork(OkHttpClient client, Network network) {, +        client.network = network;, +      }, +, +  private Network network;, +    if (result.network == null) {, +      result.network = Network.DEFAULT;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Internal.java, +  public abstract Network network(OkHttpClient client);, +, +  public abstract void setNetwork(OkHttpClient client, Network network);, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.internal.Network;, +        .setConnectionPool(ConnectionPool.getDefault());, +    Internal.instance.setNetwork(client, dns);, +, +  private static class FakeDns implements Network {, +    @Override public InetAddress[] resolveInetAddresses(String host) throws UnknownHostException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.Network;, +      @Override public Network network(OkHttpClient client) {, +        return client.network;, +      }, +, +      @Override public void setNetwork(OkHttpClient client, Network network) {, +        client.network = network;, +      }, +, +  private Network network;, +    if (result.network == null) {, +      result.network = Network.DEFAULT;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Internal.java, +  public abstract Network network(OkHttpClient client);, +, +  public abstract void setNetwork(OkHttpClient client, Network network);, +]
[+++ b/bom/pom.xml, +        <artifactId>okhttp-logging-interceptor</artifactId>, +++ b/bom/pom.xml, +        <artifactId>okhttp-logging-interceptor</artifactId>, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +++ b/bom/pom.xml, +        <artifactId>okhttp-logging-interceptor</artifactId>, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +        StreamAllocation streamAllocation = Internal.instance.streamAllocation(call);, +, +          streamAllocation.streamFailed(e);]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import javax.annotation.Nullable;, +import okhttp3.RecordingEventListener.RequestHeadersEnd;, +import okhttp3.RecordingEventListener.ResponseHeadersEnd;, +import org.hamcrest.BaseMatcher;, +import org.hamcrest.CoreMatchers;, +import org.hamcrest.Description;, +import org.hamcrest.Matcher;, +import static org.hamcrest.CoreMatchers.any;, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assume.assumeThat;, +  public static final Matcher<Response> anyResponse = CoreMatchers.any(Response.class);, +  private void assertSuccessfulEventOrder(Matcher<Response> responseMatcher) throws IOException {, +    assumeThat(response, responseMatcher);, +, +  private void assertBytesReadWritten(RecordingEventListener listener,, +      @Nullable Matcher<Long> requestHeaderLength, @Nullable Matcher<Long> requestBodyBytes,, +      @Nullable Matcher<Long> responseHeaderLength, @Nullable Matcher<Long> responseBodyBytes) {, +, +    if (requestHeaderLength != null) {, +      RequestHeadersEnd responseHeadersEnd = listener.removeUpToEvent(RequestHeadersEnd.class);, +      assertThat("request header length", responseHeadersEnd.headerLength, requestHeaderLength);, +    } else {, +      assertFalse("Found RequestHeadersEnd", listener.recordedEventTypes().contains("RequestHeadersEnd"));, +    }, +, +    if (requestBodyBytes != null) {, +      RequestBodyEnd responseBodyEnd = listener.removeUpToEvent(RequestBodyEnd.class);, +      assertThat("request body bytes", responseBodyEnd.bytesWritten, requestBodyBytes);, +    } else {, +      assertFalse("Found RequestBodyEnd", listener.recordedEventTypes().contains("RequestBodyEnd"));, +    }, +, +    if (responseHeaderLength != null) {, +      ResponseHeadersEnd responseHeadersEnd = listener.removeUpToEvent(ResponseHeadersEnd.class);, +      assertThat("response header length", responseHeadersEnd.headerLength, responseHeaderLength);, +    } else {, +      assertFalse("Found ResponseHeadersEnd", listener.recordedEventTypes().contains("ResponseHeadersEnd"));, +    }, +, +    if (responseBodyBytes != null) {, +      ResponseBodyEnd responseBodyEnd = listener.removeUpToEvent(ResponseBodyEnd.class);, +      assertThat("response body bytes", responseBodyEnd.bytesRead, responseBodyBytes);, +    } else {, +      assertFalse("Found ResponseBodyEnd", listener.recordedEventTypes().contains("ResponseBodyEnd"));, +    }, +  }, +, +  private Matcher<Long> greaterThan(final long value) {, +    return new BaseMatcher<Long>() {, +      @Override public void describeTo(Description description) {, +        description.appendText("> " + value);, +      }, +, +      @Override public boolean matches(Object o) {, +        return ((Long)o) > value;, +      }, +    };, +  }, +, +  private Matcher<Long> lessThan(final long value) {, +    return new BaseMatcher<Long>() {, +      @Override public void describeTo(Description description) {, +        description.appendText("< " + value);, +      }, +, +      @Override public boolean matches(Object o) {, +        return ((Long)o) < value;, +      }, +    };, +  }, +, +  private Matcher<Response> matchesProtocol(final Protocol protocol) {, +    return new BaseMatcher<Response>() {, +      @Override public void describeTo(Description description) {, +        description.appendText("is HTTP/2");, +      }, +, +      @Override public boolean matches(Object o) {, +        return ((Response)o).protocol == protocol;, +      }, +    };, +  }, +, +    assertSuccessfulEventOrder(matchesProtocol(Protocol.HTTP_2));, +, +    assertBytesReadWritten(listener, any(Long.class), null, greaterThan(0L),, +        equalTo(0L));, +    assertSuccessfulEventOrder(anyResponse);, +, +    assertBytesReadWritten(listener, any(Long.class), null, greaterThan(0L),, +        equalTo(3L));, +    assertSuccessfulEventOrder(anyResponse);, +, +    assertBytesReadWritten(listener, any(Long.class), null, greaterThan(0L),, +        equalTo(6L));, +    assertSuccessfulEventOrder(matchesProtocol(Protocol.HTTP_2));, +, +    assertBytesReadWritten(listener, any(Long.class), null, equalTo(0L),]
[+++ /dev/null, +++ /dev/null, +++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the, +      Work or Derivative Works thereof in any medium, with or without, +      modifications, and in Source or Object form, provided that You, +      meet the following conditions:, +, +      (a) You must give any other recipients of the Work or, +          Derivative Works a copy of this License; and, +]
[+++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(String.format("MockWebServer %s WebSocket", request.getPath()),, +                true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            listener, request.getPath()) {, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(String.format("MockWebServer %s WebSocket", request.getPath()),, +                true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            listener, request.getPath()) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(String.format("MockWebServer %s WebSocket", request.getPath()),, +                true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            listener, request.getPath()) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-ws</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.ws.WebSocketListener;, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +, +    ThreadPoolExecutor replyExecutor =]
[+++ b/.gitignore, +++ b/.gitignore, +++ b/okhttp/build.gradle, +      'okhttp3.RealCall#getResponseWithInterceptorChain()',, +      'okhttp3.RealCall#redactedUrl()',, +      'okhttp3.RealCall#toLoggableString()',, +      'okhttp3.RealCall$AsyncCall#callsPerHost()',, +      'okhttp3.RealCall$AsyncCall#executeOn(java.util.concurrent.ExecutorService)',, +      'okhttp3.RealCall$AsyncCall#get()',, +      'okhttp3.RealCall$AsyncCall#host()',, +      'okhttp3.RealCall$AsyncCall#request()',, +      'okhttp3.RealCall$AsyncCall#reuseCallsPerHostFrom(okhttp3.RealCall$AsyncCall)',, +++ b/.gitignore, +++ b/okhttp/build.gradle, +      'okhttp3.RealCall#getResponseWithInterceptorChain()',, +      'okhttp3.RealCall#redactedUrl()',, +      'okhttp3.RealCall#toLoggableString()',, +      'okhttp3.RealCall$AsyncCall#callsPerHost()',, +      'okhttp3.RealCall$AsyncCall#executeOn(java.util.concurrent.ExecutorService)',, +      'okhttp3.RealCall$AsyncCall#get()',, +      'okhttp3.RealCall$AsyncCall#host()',, +      'okhttp3.RealCall$AsyncCall#request()',, +      'okhttp3.RealCall$AsyncCall#reuseCallsPerHostFrom(okhttp3.RealCall$AsyncCall)',, +++ /dev/null, +++ b/.gitignore, +++ b/okhttp/build.gradle, +      'okhttp3.RealCall#getResponseWithInterceptorChain()',, +      'okhttp3.RealCall#redactedUrl()',, +      'okhttp3.RealCall#toLoggableString()',, +      'okhttp3.RealCall$AsyncCall#callsPerHost()',, +      'okhttp3.RealCall$AsyncCall#executeOn(java.util.concurrent.ExecutorService)',, +      'okhttp3.RealCall$AsyncCall#get()',, +      'okhttp3.RealCall$AsyncCall#host()',, +      'okhttp3.RealCall$AsyncCall#request()',, +      'okhttp3.RealCall$AsyncCall#reuseCallsPerHostFrom(okhttp3.RealCall$AsyncCall)',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/RealCall.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import okhttp3.internal.NamedRunnable, +import okhttp3.internal.Util.closeQuietly, +import okhttp3.internal.cache.CacheInterceptor, +import okhttp3.internal.connection.ConnectInterceptor, +import okhttp3.internal.connection.Transmitter, +import okhttp3.internal.http.BridgeInterceptor, +import okhttp3.internal.http.CallServerInterceptor, +import okhttp3.internal.http.RealInterceptorChain, +import okhttp3.internal.http.RetryAndFollowUpInterceptor, +import okhttp3.internal.platform.Platform, +import okhttp3.internal.platform.Platform.Companion.INFO, +import okio.Timeout, +import java.io.IOException, +import java.io.InterruptedIOException, +import java.util.ArrayList, +import java.util.concurrent.ExecutorService, +import java.util.concurrent.RejectedExecutionException, +import java.util.concurrent.atomic.AtomicInteger, +, +internal class RealCall private constructor(, +  val client: OkHttpClient,, +  /** The application's original request unadulterated by redirects or auth headers.  */, +  val originalRequest: Request,, +  // TODO(egorand): Remove @JvmField once Dispatcher.java is converted to Kotlin, +  @JvmField val forWebSocket: Boolean, +) : Call {, +  /**, +   * There is a cycle between the [Call] and [Transmitter] that makes this awkward., +   * This is set after immediately after creating the call instance., +   */, +  private lateinit var transmitter: Transmitter, +, +  // Guarded by this., +  @get:Synchronized override var isExecuted: Boolean = false, +, +  override val isCanceled: Boolean, +    get() = transmitter.isCanceled, +, +  override fun request(): Request = originalRequest, +, +  override fun execute(): Response {, +    synchronized(this) {, +      check(!isExecuted) { "Already Executed" }, +      isExecuted = true, +    }, +    transmitter.timeoutEnter()]
[+++ b/build.gradle, +  id 'me.champeau.gradle.japicmp' version '0.2.6', +, +/**, + * Returns a .jar file for the golden version of this project., + * https://github.com/Visistema/Groovy1/blob/ba5eb9b2f19ca0cc8927359ce414c4e1974b7016/gradle/binarycompatibility.gradle#L48, + */, +ext.baselineJar = { project, version ->, +  def group = project.property("GROUP"), +  def artifactId = project.property("POM_ARTIFACT_ID"), +  try {, +    String jarFile = "$artifactId-${version}.jar", +    project.group = 'virtual_group_for_japicmp' // Prevent it from resolving the current version., +    def dependency = project.dependencies.create("$group:$artifactId:$version@jar"), +    return project.configurations.detachedConfiguration(dependency).files, +        .find { (it.name == jarFile) }, +  } finally {, +    project.group = group, +  }, +}, +ext.baselineVersion = "3.14.0", +++ b/build.gradle, +  id 'me.champeau.gradle.japicmp' version '0.2.6', +, +/**, + * Returns a .jar file for the golden version of this project., + * https://github.com/Visistema/Groovy1/blob/ba5eb9b2f19ca0cc8927359ce414c4e1974b7016/gradle/binarycompatibility.gradle#L48, + */, +ext.baselineJar = { project, version ->, +  def group = project.property("GROUP"), +  def artifactId = project.property("POM_ARTIFACT_ID"), +  try {, +    String jarFile = "$artifactId-${version}.jar", +    project.group = 'virtual_group_for_japicmp' // Prevent it from resolving the current version., +    def dependency = project.dependencies.create("$group:$artifactId:$version@jar"), +    return project.configurations.detachedConfiguration(dependency).files, +        .find { (it.name == jarFile) }, +  } finally {, +    project.group = group, +  }, +}, +ext.baselineVersion = "3.14.0", +++ b/mockwebserver/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, +  oldClasspath = files(baselineJar(project, baselineVersion)), +  newClasspath = files(jar.archivePath), +  onlyBinaryIncompatibleModified = true, +  failOnModification = true, +  txtOutputFile = file("$buildDir/reports/japi.txt"), +  ignoreMissingClasses = true, +  includeSynthetic = true, +}, +check.dependsOn(japicmp), +++ b/build.gradle, +  id 'me.champeau.gradle.japicmp' version '0.2.6', +, +/**, + * Returns a .jar file for the golden version of this project., + * https://github.com/Visistema/Groovy1/blob/ba5eb9b2f19ca0cc8927359ce414c4e1974b7016/gradle/binarycompatibility.gradle#L48, + */, +ext.baselineJar = { project, version ->, +  def group = project.property("GROUP"), +  def artifactId = project.property("POM_ARTIFACT_ID"), +  try {, +    String jarFile = "$artifactId-${version}.jar", +    project.group = 'virtual_group_for_japicmp' // Prevent it from resolving the current version., +    def dependency = project.dependencies.create("$group:$artifactId:$version@jar"), +    return project.configurations.detachedConfiguration(dependency).files, +        .find { (it.name == jarFile) }, +  } finally {, +    project.group = group, +  }, +}, +ext.baselineVersion = "3.14.0", +++ b/mockwebserver/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, +  oldClasspath = files(baselineJar(project, baselineVersion)), +  newClasspath = files(jar.archivePath), +  onlyBinaryIncompatibleModified = true, +  failOnModification = true, +  txtOutputFile = file("$buildDir/reports/japi.txt"), +  ignoreMissingClasses = true, +  includeSynthetic = true, +}, +check.dependsOn(japicmp), +++ b/okhttp-logging-interceptor/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, +  oldClasspath = files(baselineJar(project, baselineVersion)), +  newClasspath = files(jar.archivePath), +  onlyBinaryIncompatibleModified = true, +  failOnModification = true, +  txtOutputFile = file("$buildDir/reports/japi.txt"), +  ignoreMissingClasses = true, +  includeSynthetic = true]
[+++ b/mockwebserver/README.md, +  HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/README.md, +  HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name. Unlike {@link #addHeader(String, Object)} this, +   * does not validate the name and value., +   */, +  public MockResponse addHeaderLenient(String name, Object value) {, +    Internal.instance.addLenient(headers, name, String.valueOf(value));, +    return this;, +  }, +, +  /**, +++ b/mockwebserver/README.md, +  HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name. Unlike {@link #addHeader(String, Object)} this, +   * does not validate the name and value., +   */, +  public MockResponse addHeaderLenient(String name, Object value) {, +    Internal.instance.addLenient(headers, name, String.valueOf(value));, +    return this;, +  }, +, +  /**, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void close() throws IOException {, +    replyExecutor.shutdown();, +++ b/mockwebserver/README.md, +  HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name. Unlike {@link #addHeader(String, Object)} this, +   * does not validate the name and value., +   */, +  public MockResponse addHeaderLenient(String name, Object value) {, +    Internal.instance.addLenient(headers, name, String.valueOf(value));, +    return this;, +  }, +, +  /**, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void close() throws IOException {, +    replyExecutor.shutdown();, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import java.net.ProtocolException;, +    assertEquals(2, connection.getContentLength());, +    try {, +      int byteRead = in.read();, +      // OpenJDK behavior: end of stream., +      assertEquals(-1, byteRead);, +    } catch (ProtocolException e) {, +      // On Android, HttpURLConnection is implemented by OkHttp v2. OkHttp, +      // treats an incomplete response body as a ProtocolException., +    }, +++ b/mockwebserver/README.md, +  HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name. Unlike {@link #addHeader(String, Object)} this, +   * does not validate the name and value., +   */, +  public MockResponse addHeaderLenient(String name, Object value) {, +    Internal.instance.addLenient(headers, name, String.valueOf(value));, +    return this;, +  }, +, +  /**, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void close() throws IOException {, +    replyExecutor.shutdown();, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import java.net.ProtocolException;, +    assertEquals(2, connection.getContentLength());, +    try {, +      int byteRead = in.read();, +      // OpenJDK behavior: end of stream., +      assertEquals(-1, byteRead);, +    } catch (ProtocolException e) {, +      // On Android, HttpURLConnection is implemented by OkHttp v2. OkHttp, +      // treats an incomplete response body as a ProtocolException., +    }, +++ b/okhttp-logging-interceptor/README.md, +Logging Interceptor, +===================, +, +An [OkHttp interceptor][1] which logs HTTP request and response data., +, +```java, +OkHttpClient client = new OkHttpClient();, +HttpLoggingInterceptor logging = new HttpLoggingInterceptor();, +logging.setLevel(Level.BASIC);, +client.interceptors().add(logging);]
[+++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.SSLSocket;, +    String key = uriToKey(uri);, +    if (requestMethod.equals("POST") || requestMethod.equals("PUT") || requestMethod.equals(, +        "DELETE")) {, +      try {, +        cache.remove(key);, +      } catch (IOException ignored) {, +        // The cache cannot be written., +      return null;, +    } else if (!requestMethod.equals("GET")) {, +      editor = cache.edit(key);, +      SSLSocket sslSocket = getSslSocket(httpConnection);, +      if (sslSocket != null) {, +        cipherSuite = sslSocket.getSession().getCipherSuite();, +          peerCertificatesNonFinal = sslSocket.getSession().getPeerCertificates();, +        localCertificates = sslSocket.getSession().getLocalCertificates();, +    /**, +     * Returns the SSL socket used by {@code httpConnection} for HTTPS, nor null, +     * if the connection isn't using HTTPS. Since we permit redirects across, +     * protocols (HTTP to HTTPS or vice versa), the implementation type of the, +     * connection doesn't necessarily match the implementation type of its HTTP, +     * engine., +     */, +    private SSLSocket getSslSocket(HttpURLConnection httpConnection) {, +      HttpEngine engine = httpConnection instanceof HttpsURLConnectionImpl, +          ? ((HttpsURLConnectionImpl) httpConnection).getHttpEngine(), +          : ((HttpURLConnectionImpl) httpConnection).getHttpEngine();, +      return engine instanceof HttpsURLConnectionImpl.HttpsEngine, +          ? ((HttpsURLConnectionImpl.HttpsEngine) engine).getSslSocket(), +          : null;, +    }, +, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.SSLSocket;, +    String key = uriToKey(uri);, +    if (requestMethod.equals("POST") || requestMethod.equals("PUT") || requestMethod.equals(, +        "DELETE")) {, +      try {, +        cache.remove(key);, +      } catch (IOException ignored) {, +        // The cache cannot be written., +      return null;, +    } else if (!requestMethod.equals("GET")) {, +      editor = cache.edit(key);, +      SSLSocket sslSocket = getSslSocket(httpConnection);]
[+++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/okhttp-android-support/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/okhttp-android-support/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okhttp-apache/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>]
[+++ b/.travis.yml, +before_install:, + - mvn -version, +, +++ b/.travis.yml, +before_install:, + - mvn -version, +, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +import java.util.concurrent.ExecutorService;, +  private boolean client = false;, +  private Variant variant = new Spdy3();, +  private FrameWriter frameWriter = variant.newWriter(bytesOut, client);;, +  private final ExecutorService executor = Executors.newCachedThreadPool(, +  public void setVariantAndClient(Variant variant, boolean client) {, +    if (this.variant.getProtocol() == variant.getProtocol() && this.client == client) {, +      return;, +    }, +    port = serverSocket.getLocalPort();, +          Util.closeQuietly(MockSpdyPeer.this);, +  @Override public synchronized void close() throws IOException {, +    executor.shutdown();, +      Util.closeQuietly(socket);, +      Util.closeQuietly(serverSocket);, +++ b/.travis.yml, +before_install:, + - mvn -version, +, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +import java.util.concurrent.ExecutorService;, +  private boolean client = false;, +  private Variant variant = new Spdy3();, +  private FrameWriter frameWriter = variant.newWriter(bytesOut, client);;, +  private final ExecutorService executor = Executors.newCachedThreadPool(, +  public void setVariantAndClient(Variant variant, boolean client) {, +    if (this.variant.getProtocol() == variant.getProtocol() && this.client == client) {, +      return;, +    }, +    port = serverSocket.getLocalPort();, +          Util.closeQuietly(MockSpdyPeer.this);, +  @Override public synchronized void close() throws IOException {, +    executor.shutdown();, +      Util.closeQuietly(socket);, +      Util.closeQuietly(serverSocket);, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +  private final MockSpdyPeer peer = new MockSpdyPeer();, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(variant, false);, +, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, client);, +++ b/.travis.yml, +before_install:, + - mvn -version, +, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +import java.util.concurrent.ExecutorService;, +  private boolean client = false;, +  private Variant variant = new Spdy3();, +  private FrameWriter frameWriter = variant.newWriter(bytesOut, client);;, +  private final ExecutorService executor = Executors.newCachedThreadPool(, +  public void setVariantAndClient(Variant variant, boolean client) {, +    if (this.variant.getProtocol() == variant.getProtocol() && this.client == client) {, +      return;, +    }, +    port = serverSocket.getLocalPort();, +          Util.closeQuietly(MockSpdyPeer.this);, +  @Override public synchronized void close() throws IOException {, +    executor.shutdown();, +      Util.closeQuietly(socket);, +      Util.closeQuietly(serverSocket);, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +  private final MockSpdyPeer peer = new MockSpdyPeer();, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(variant, false);, +, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, client);, +++ b/okhttp/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpA.connect(200, 200, null);, +    httpB.connect(200, 200, null);, +    httpC.connect(200, 200, null);, +    httpD.connect(200, 200, null);, +    httpE.connect(200, 200, null);]
[+++ b/mockwebserver/pom.xml, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-assembly-plugin</artifactId>, +        <configuration>, +          <descriptorRefs>, +            <descriptorRef>jar-with-dependencies</descriptorRef>, +          </descriptorRefs>, +        </configuration>, +        <executions>, +          <execution>, +            <phase>package</phase>, +            <goals>, +              <goal>single</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>]
[+++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0-SNAPSHOT</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    client = client.newBuilder(), +        .dns(new DoubleInetAddressDns()), +        .build();, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    client = client.newBuilder(), +        .dns(new DoubleInetAddressDns()), +        .build();, +, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +import java.io.FileNotFoundException;, +    if (requestSendStarted && requestIsUnrepeatable(e, userRequest)) return false;, +  private boolean requestIsUnrepeatable(IOException e, Request userRequest) {, +    return userRequest.body() instanceof UnrepeatableRequestBody, +        || e instanceof FileNotFoundException;, +  }, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void propfindRedirectsToPropfindAndMaintainsRequestBody() throws Exception {, +    // given, +    // when, +, +    // then, +    assertEquals("Request Body", page2.getBody().readUtf8());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void propfindRedirectsToPropfindAndMaintainsRequestBody() throws Exception {, +    // given, +    // when, +, +    // then, +    assertEquals("Request Body", page2.getBody().readUtf8());, +++ b/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.java, +  public static boolean redirectsWithBody(String method) {, +    return method.equals("PROPFIND"); // (WebDAV) redirects should also maintain the request body, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void propfindRedirectsToPropfindAndMaintainsRequestBody() throws Exception {, +    // given, +    // when, +, +    // then, +    assertEquals("Request Body", page2.getBody().readUtf8());, +++ b/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.java, +  public static boolean redirectsWithBody(String method) {, +    return method.equals("PROPFIND"); // (WebDAV) redirects should also maintain the request body, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +import okhttp3.RequestBody;, +        // Most redirects don't include a request body., +          final boolean maintainBody = HttpMethod.redirectsWithBody(method);, +            RequestBody requestBody = maintainBody ? userResponse.request().body() : null;, +            requestBuilder.method(method, requestBody);, +          if (!maintainBody) {, +        }]
[+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  private static final String NPE_THROW_WITH_NULL = "throw with null exception";, +, +    // The following try/catch block is a pseudo hacky way to get around a crash on Android 7.0, +    // More details:, +    // https://github.com/square/okhttp/issues/3245, +    // https://android-review.googlesource.com/#/c/271775/, +    try {, +    } catch (NullPointerException npe) {, +      if (NPE_THROW_WITH_NULL.equals(npe.getMessage())) {, +        throw new IOException(npe);, +      }, +    }]
[+++ b/CHANGELOG.md, +## Version 2.7.2, +, +_2016-01-07_, +, + *  Fix: Don't eagerly release stream allocations on cache hits. We might still, +    need them to handle redirects., +, +, +++ b/CHANGELOG.md, +## Version 2.7.2, +, +_2016-01-07_, +, + *  Fix: Don't eagerly release stream allocations on cache hits. We might still, +    need them to handle redirects., +, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status = "HTTP/1.1 200 OK";, +    return setStatus("HTTP/1.1 " + code + " OK");, +++ b/CHANGELOG.md, +## Version 2.7.2, +, +_2016-01-07_, +, + *  Fix: Don't eagerly release stream allocations on cache hits. We might still, +    need them to handle redirects., +, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status = "HTTP/1.1 200 OK";, +    return setStatus("HTTP/1.1 " + code + " OK");, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    assertEquals("HTTP/1.1 200 OK", response.getStatus());, +++ b/CHANGELOG.md, +## Version 2.7.2, +, +_2016-01-07_, +, + *  Fix: Don't eagerly release stream allocations on cache hits. We might still, +    need them to handle redirects., +, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status = "HTTP/1.1 200 OK";, +    return setStatus("HTTP/1.1 " + code + " OK");, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    assertEquals("HTTP/1.1 200 OK", response.getStatus());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +          contentType.charset(UTF8);, +++ b/CHANGELOG.md, +## Version 2.7.2, +, +_2016-01-07_, +, + *  Fix: Don't eagerly release stream allocations on cache hits. We might still, +    need them to handle redirects., +, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status = "HTTP/1.1 200 OK";, +    return setStatus("HTTP/1.1 " + code + " OK");, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    assertEquals("HTTP/1.1 200 OK", response.getStatus());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +          contentType.charset(UTF8);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.UnknownHostException;, +  @Test public void networkDropsOnConditionalGet() throws IOException {, +    client = client.newBuilder(), +        .cache(cache), +        .build();, +, +    // Seed the cache., +    server.enqueue(new MockResponse(), +        .addHeader("ETag: v1"), +        .setBody("A"));, +    Request cacheStoreRequest = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    executeSynchronously(cacheStoreRequest), +        .assertCode(200), +        .assertBody("A");, +, +    // Attempt conditional cache validation and a DNS miss., +    client.connectionPool().evictAll();, +    client = client.newBuilder(), +        .dns(new FakeDns().unknownHost()), +        .build();, +    Request conditionalGetRequest = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    try {, +      executeSynchronously(conditionalGetRequest);, +      fail();, +    } catch (UnknownHostException expected) {, +    }, +  }, +]
[+++ b/build.gradle, +  def platform = System.getProperty("okhttp.platform", "jdk8"), +  if (platform == "jdk8") {, +++ b/build.gradle, +  def platform = System.getProperty("okhttp.platform", "jdk8"), +  if (platform == "jdk8") {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    return System.getProperty("okhttp.platform", "jdk8");, +++ b/build.gradle, +  def platform = System.getProperty("okhttp.platform", "jdk8"), +  if (platform == "jdk8") {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    return System.getProperty("okhttp.platform", "jdk8");, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  boolean canRetry() {, +      // Don't try if the failure wasn't our fault!, +      if (!hasStreamFailure) return false;, +++ b/build.gradle, +  def platform = System.getProperty("okhttp.platform", "jdk8"), +  if (platform == "jdk8") {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    return System.getProperty("okhttp.platform", "jdk8");, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  boolean canRetry() {, +      // Don't try if the failure wasn't our fault!, +      if (!hasStreamFailure) return false;, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (sameConnection(this.request.url(), request.url())) return; // Already ready., +    return exchangeFinder.canRetry();, +++ b/build.gradle, +  def platform = System.getProperty("okhttp.platform", "jdk8"), +  if (platform == "jdk8") {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    return System.getProperty("okhttp.platform", "jdk8");, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  boolean canRetry() {, +      // Don't try if the failure wasn't our fault!, +      if (!hasStreamFailure) return false;, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (sameConnection(this.request.url(), request.url())) return; // Already ready., +    return exchangeFinder.canRetry();, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatform.kt, +      val jvmVersion = System.getProperty("java.specification.version", "unknown"), +      try {, +        // 1.8, 9, 10, 11, 12 etc, +        val version = jvmVersion.toInt(), +        if (version >= 9) return null, +      } catch (nfe: NumberFormatException) {, +        // expected on >= JDK 9, +      }, +, +++ b/build.gradle, +  def platform = System.getProperty("okhttp.platform", "jdk8"), +  if (platform == "jdk8") {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    return System.getProperty("okhttp.platform", "jdk8");, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  boolean canRetry() {, +      // Don't try if the failure wasn't our fault!, +      if (!hasStreamFailure) return false;, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (sameConnection(this.request.url(), request.url())) return; // Already ready., +    return exchangeFinder.canRetry();, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatform.kt, +      val jvmVersion = System.getProperty("java.specification.version", "unknown"), +      try {, +        // 1.8, 9, 10, 11, 12 etc, +        val version = jvmVersion.toInt(), +        if (version >= 9) return null, +      } catch (nfe: NumberFormatException) {, +        // expected on >= JDK 9, +      }, +, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt, +    private @Volatile var platform = findPlatform(), +    fun get(): Platform = platform, +, +    internal fun resetForTests(platform: Platform = findPlatform()) {, +      this.platform = platform, +    }, +++ b/build.gradle, +  def platform = System.getProperty("okhttp.platform", "jdk8"), +  if (platform == "jdk8") {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    return System.getProperty("okhttp.platform", "jdk8");, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  boolean canRetry() {, +      // Don't try if the failure wasn't our fault!, +      if (!hasStreamFailure) return false;, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (sameConnection(this.request.url(), request.url())) return; // Already ready., +    return exchangeFinder.canRetry();, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatform.kt, +      val jvmVersion = System.getProperty("java.specification.version", "unknown"), +      try {, +        // 1.8, 9, 10, 11, 12 etc, +        val version = jvmVersion.toInt(), +        if (version >= 9) return null, +      } catch (nfe: NumberFormatException) {, +        // expected on >= JDK 9]
[+++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +          journalWriter = Okio.buffer(Okio.blackhole());, +          return Okio.blackhole();, +          return Okio.blackhole();, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +          journalWriter = Okio.buffer(Okio.blackhole());, +          return Okio.blackhole();, +          return Okio.blackhole();, +++ b/pom.xml, +    <okio.version>1.10.0</okio.version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java, +            long byteCount = source.read(buffer, 8192L);, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java, +            long byteCount = source.read(buffer, 8192L);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, +    assertData("017e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e6000");, +    assertData(bytes.readByteArray(24_576));, +    assertData("007e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e6000");, +    assertData(bytes.readByteArray(24_576));, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java, +            long byteCount = source.read(buffer, 8192L);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, +    assertData("017e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e6000");, +    assertData(bytes.readByteArray(24_576));, +    assertData("007e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e6000");, +    assertData(bytes.readByteArray(24_576));, +++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketReader.java, +  private final byte[] maskBuffer = new byte[8192];, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java, +            long byteCount = source.read(buffer, 8192L);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, +    assertData("017e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e6000");, +    assertData(bytes.readByteArray(24_576));, +    assertData("007e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e6000");, +    assertData(bytes.readByteArray(24_576));, +++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketReader.java, +  private final byte[] maskBuffer = new byte[8192];, +++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketWriter.java, +    maskBuffer = isClient ? new byte[8192] : null;, +          && buffer.size() > contentLength - 8192 /* segment size */;, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java, +            long byteCount = source.read(buffer, 8192L);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, +    assertData("017e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e6000");, +    assertData(bytes.readByteArray(24_576));, +    assertData("007e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e6000");, +    assertData(bytes.readByteArray(24_576));, +++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketReader.java, +  private final byte[] maskBuffer = new byte[8192];, +++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketWriter.java, +    maskBuffer = isClient ? new byte[8192] : null;, +          && buffer.size() > contentLength - 8192 /* segment size */;, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +      while (source.read(skipBuffer, 8192) != -1) {, +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java, +            long byteCount = source.read(buffer, 8192L);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, +    assertData("017e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e6000");, +    assertData(bytes.readByteArray(24_576));, +    assertData("007e4000");, +    assertData(bytes.readByteArray(16_384));, +    assertData("007e6000");, +    assertData(bytes.readByteArray(24_576));, +++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketReader.java, +  private final byte[] maskBuffer = new byte[8192];, +++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketWriter.java, +    maskBuffer = isClient ? new byte[8192] : null;, +          && buffer.size() > contentLength - 8192 /* segment size */;, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +      while (source.read(skipBuffer, 8192) != -1) {, +++ b/pom.xml, +    <okio.version>1.8.0</okio.version>, +    <junit.version>4.11</junit.version>]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  private static Logger frameLogger;, +    frameLogger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +    frameLogger.setLevel(Level.FINE);, +    frameLogger.addHandler(handler);]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    Headers okHeaders = extractOkResponseHeaders(httpUrlConnection, okResponseBuilder);, +    Headers okHeaders = extractOkHeaders(javaResponse, okResponseBuilder);, +      Headers headers = extractOkHeaders(requestHeaders, null);, +    final Headers headers = withSyntheticHeaders(response);, +    okResponse = okResponse.newBuilder(), +        .body(null), +        .headers(withSyntheticHeaders(okResponse)), +        .build();, +  private static Headers withSyntheticHeaders(Response okResponse) {, +    return okResponse.headers().newBuilder(), +        .add(OkHeaders.SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(OkHeaders.RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        .build();, +  }, +, +  private static Headers extractOkHeaders(, +      CacheResponse javaResponse, Response.Builder okResponseBuilder) throws IOException {, +    return extractOkHeaders(javaResponseHeaders, okResponseBuilder);, +  private static Headers extractOkResponseHeaders(, +      HttpURLConnection httpUrlConnection, Response.Builder okResponseBuilder) {, +    return extractOkHeaders(javaResponseHeaders, okResponseBuilder);, +   * entry (one with a {@code null} key) is discarded. Special internal headers used to track cache, +   * metadata are omitted from the result and added to {@code okResponseBuilder} instead., +  static Headers extractOkHeaders(, +      Map<String, List<String>> javaHeaders, Response.Builder okResponseBuilder) {, +      if (okResponseBuilder != null && javaHeader.getValue().size() == 1) {, +        if (name.equals(OkHeaders.SENT_MILLIS)) {, +          okResponseBuilder.sentRequestAtMillis(Long.valueOf(javaHeader.getValue().get(0)));, +          continue;, +        }, +        if (name.equals(OkHeaders.RECEIVED_MILLIS)) {, +          okResponseBuilder.receivedResponseAtMillis(Long.valueOf(javaHeader.getValue().get(0)));, +          continue;, +        }, +      }, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    Headers okHeaders = extractOkResponseHeaders(httpUrlConnection, okResponseBuilder);, +    Headers okHeaders = extractOkHeaders(javaResponse, okResponseBuilder);, +      Headers headers = extractOkHeaders(requestHeaders, null);, +    final Headers headers = withSyntheticHeaders(response);, +    okResponse = okResponse.newBuilder(), +        .body(null), +        .headers(withSyntheticHeaders(okResponse)), +        .build();, +  private static Headers withSyntheticHeaders(Response okResponse) {, +    return okResponse.headers().newBuilder(), +        .add(OkHeaders.SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(OkHeaders.RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        .build();, +  }, +, +  private static Headers extractOkHeaders(, +      CacheResponse javaResponse, Response.Builder okResponseBuilder) throws IOException {, +    return extractOkHeaders(javaResponseHeaders, okResponseBuilder);, +  private static Headers extractOkResponseHeaders(, +      HttpURLConnection httpUrlConnection, Response.Builder okResponseBuilder) {, +    return extractOkHeaders(javaResponseHeaders, okResponseBuilder);, +   * entry (one with a {@code null} key) is discarded. Special internal headers used to track cache, +   * metadata are omitted from the result and added to {@code okResponseBuilder} instead., +  static Headers extractOkHeaders(, +      Map<String, List<String>> javaHeaders, Response.Builder okResponseBuilder) {, +      if (okResponseBuilder != null && javaHeader.getValue().size() == 1) {, +        if (name.equals(OkHeaders.SENT_MILLIS)) {]
[+++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java, +      if (link != null) queue.add(link);, +++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java, +      if (link != null) queue.add(link);, +++ b/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java, +    Set<String> blacklist = Collections.singleton(, +        "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=");, +++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java, +      if (link != null) queue.add(link);, +++ b/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java, +    Set<String> blacklist = Collections.singleton(, +        "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=");, +++ b/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.recipes;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.Socket;, +import java.security.GeneralSecurityException;, +import java.security.KeyManagementException;, +import java.security.KeyStore;, +import java.security.NoSuchAlgorithmException;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.TrustManagerFactory;, +import javax.net.ssl.X509TrustManager;, +import okhttp3.CipherSuite;, +import okhttp3.ConnectionSpec;, +import okhttp3.OkHttpClient;, +import okhttp3.Request;, +import okhttp3.Response;, +, +public final class CustomCipherSuites {, +  private final OkHttpClient client;, +, +  public CustomCipherSuites() throws GeneralSecurityException {, +    // Configure cipher suites to demonstrate how to customize which cipher suites will be used for, +    // an OkHttp request. In order to be selected a cipher suite must be included in both OkHttp's, +    // connection spec and in the SSLSocket's enabled cipher suites array. Most applications should, +    // not customize the cipher suites list., +    List<CipherSuite> customCipherSuites = Arrays.asList(, +        CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,, +        CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,, +        CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,, +        CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384);, +    final ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +        .cipherSuites(customCipherSuites.toArray(new CipherSuite[0])), +        .build();, +, +    X509TrustManager trustManager = defaultTrustManager();, +    SSLSocketFactory sslSocketFactory = defaultSslSocketFactory(trustManager);, +    SSLSocketFactory customSslSocketFactory = new DelegatingSSLSocketFactory(sslSocketFactory) {, +      @Override protected SSLSocket configureSocket(SSLSocket socket) throws IOException {, +        socket.setEnabledCipherSuites(javaNames(spec.cipherSuites()));, +        return socket;, +      }, +    };, +, +    client = new OkHttpClient.Builder(), +        .connectionSpecs(Collections.singletonList(spec)), +        .sslSocketFactory(customSslSocketFactory, trustManager), +        .build();, +  }, +, +  /**, +   * Returns the VM's default SSL socket factory, using {@code trustManager} for trusted root, +   * certificates., +   */, +  private SSLSocketFactory defaultSslSocketFactory(X509TrustManager trustManager), +      throws NoSuchAlgorithmException, KeyManagementException {, +    SSLContext sslContext = SSLContext.getInstance("TLS");, +    sslContext.init(null, new TrustManager[] { trustManager }, null);, +, +    return sslContext.getSocketFactory();, +  }, +, +  /** Returns a trust manager that trusts the VM's default certificate authorities. */, +  private X509TrustManager defaultTrustManager() throws GeneralSecurityException {, +    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(, +        TrustManagerFactory.getDefaultAlgorithm());]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +  public void release(boolean callEnd) {, +      if (callEnd) {, +      }, +      if (callEnd) {, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +  public void release(boolean callEnd) {, +      if (callEnd) {, +      }, +      if (callEnd) {, +  }, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +        streamAllocation.release(true);, +          streamAllocation.release(true);, +        streamAllocation.release(true);, +        streamAllocation.release(true);, +        streamAllocation.release(true);, +        streamAllocation.release(true);, +        streamAllocation.release(false);]
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http.HttpHeaders;, +, +  /** See https://github.com/square/okhttp/issues/2780. */, +  @Test public void testDigestChallenges() {, +    // Strict RFC 2617 header., +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest realm=\"myrealm\", nonce=\"fjalskdflwejrlaskdfjlaskdjflaks", +            + "jdflkasdf\", qop=\"auth\", stale=\"FALSE\""), +        .build();, +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("Digest", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Not strict RFC 2617 header., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest qop=\"auth\", realm=\"myrealm\", nonce=\"fjalskdflwejrlask", +            + "dfjlaskdjflaksjdflkasdf\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("Digest", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Not strict RFC 2617 header #2., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest qop=\"auth\", nonce=\"fjalskdflwejrlaskdfjlaskdjflaksjdflk", +            + "asdf\", realm=\"myrealm\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("Digest", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Wrong header., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest qop=\"auth\", underrealm=\"myrealm\", nonce=\"fjalskdflwej", +            + "rlaskdfjlaskdjflaksjdflkasdf\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(0, challenges.size());, +, +    // Not strict RFC 2617 header with some spaces., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest qop=\"auth\",    realm=\"myrealm\", nonce=\"fjalskdflwejrl", +            + "askdfjlaskdjflaksjdflkasdf\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("Digest", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Strict RFC 2617 header with some spaces., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest    realm=\"myrealm\", nonce=\"fjalskdflwejrlaskdfjlaskdjfl", +            + "aksjdflkasdf\", qop=\"auth\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("Digest", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Not strict RFC 2617 camelcased., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "DiGeSt qop=\"auth\", rEaLm=\"myrealm\", nonce=\"fjalskdflwejrlask", +            + "dfjlaskdjflaksjdflkasdf\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("DiGeSt", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Strict RFC 2617 camelcased., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "DIgEsT rEaLm=\"myrealm\", nonce=\"fjalskdflwejrlaskdfjlaskdjflaks", +            + "jdflkasdf\", qop=\"auth\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("DIgEsT", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Unquoted., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest realm=myrealm").build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(0, challenges.size());, +, +    // Scheme only., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest").build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(0, challenges.size());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http.HttpHeaders;, +, +  /** See https://github.com/square/okhttp/issues/2780. */, +  @Test public void testDigestChallenges() {]
[+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +import okhttp3.internal.ws.WebSocketRecorder.MessageDelegate;, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +import okhttp3.internal.ws.WebSocketRecorder.MessageDelegate;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.ws;, +, +import java.io.IOException;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.TimeUnit;, +import okhttp3.MediaType;, +import okhttp3.Response;, +import okhttp3.ResponseBody;, +import okhttp3.WebSocket;, +import okhttp3.WebSocketListener;, +import okio.Buffer;, +, +import static okhttp3.WebSocket.BINARY;, +import static okhttp3.WebSocket.TEXT;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +, +public final class WebSocketRecorder implements WebSocketReader.FrameCallback, WebSocketListener {, +  public interface MessageDelegate {, +    void onMessage(ResponseBody message) throws IOException;, +  }, +, +  private final BlockingQueue<Object> events = new LinkedBlockingQueue<>();, +  private MessageDelegate delegate;, +  private Response response;, +, +  /** Sets a delegate for the next call to {@link #onMessage}. Cleared after invoked. */, +  public void setNextMessageDelegate(MessageDelegate delegate) {, +    this.delegate = delegate;, +  }, +, +  @Override public void onOpen(WebSocket webSocket, Response response) {, +  }, +, +  @Override public void onMessage(ResponseBody message) throws IOException {, +    if (delegate != null) {, +      delegate.onMessage(message);, +      delegate = null;, +    } else {, +      Message event = new Message(message.contentType());, +      message.source().readAll(event.buffer);, +      message.close();, +      events.add(event);, +    }, +  }, +, +  @Override public void onPing(Buffer buffer) {, +    events.add(new Ping(buffer));, +  }, +, +  @Override public void onPong(Buffer buffer) {, +    events.add(new Pong(buffer));, +  }, +, +  @Override public void onClose(int code, String reason) {, +    events.add(new Close(code, reason));, +  }, +, +  @Override public void onFailure(IOException e, Response response) {, +    events.add(e);, +    this.response = response;]
[+++ b/checkstyle.xml, +        <!--<module name="FinalClass"/>-->, +++ b/checkstyle.xml, +        <!--<module name="FinalClass"/>-->, +++ b/src/main/java/libcore/Platform.java, +    private static final Platform PLATFORM = findPlatform();, +        return PLATFORM;]
[+++ b/CHANGELOG.md, +## Version 3.11.0, +, +_2018-07-12_, +, + *  **OkHttp's new okhttp-tls submodule tames HTTPS and TLS.**, +, +    `HeldCertificate` is a TLS certificate and its private key. Generate a certificate with its, +    builder then use it to sign another certificate or perform a TLS handshake. The, +    `certificatePem()` method encodes the certificate in the familiar PEM format, +    (`--- BEGIN CERTIFICATE ---`); the `privateKeyPkcs8Pem()` does likewise for the private key., +, +    `HandshakeCertificates` holds the TLS certificates required for a TLS handshake. On the server, +    it keeps your `HeldCertificate` and its chain. On the client it keeps the root certificates, +    that are trusted to sign a server's certificate chain. `HandshakeCertificates` also works with, +    mutual TLS where these roles are reversed., +, +    These classes make it possible to enable HTTPS in MockWebServer in [just a few lines of, +    code][https_server_sample]., +, + *  **OkHttp now supports prior knowledge cleartext HTTP/2.** Enable this by setting, +    `Protocol.H2_PRIOR_KNOWLEDGE` as the lone protocol on an `OkHttpClient.Builder`. This mode, +    only supports `http:` URLs and is best suited in closed environments where HTTPS is, +    inappropriate., +, + *  New: `HttpUrl.get(String)` is an alternative to `HttpUrl.parse(String)` that throws an exception, +    when the URL is malformed instead of returning null. Use this to avoid checking for null in, +    situations where the input is known to be well-formed. We've also added `MediaType.get(String)`, +    which is an exception-throwing alternative to `MediaType.parse(String)`., + *  New: The `EventListener` API previewed in OkHttp 3.9 has graduated to a stable API. Use this, +    interface to track metrics and monitor HTTP requests' size and duration., + *  New: `okhttp-dnsoverhttps` is an experimental API for doing DNS queries over HTTPS. Using HTTPS, +    for DNS offers better security and potentially better performance. This feature is a preview:, +    the API is subject to change., + *  New: `okhttp-sse` is an early preview of Server-Sent Events (SSE). This feature is incomplete, +    and is only suitable for experimental use., + *  New: MockWebServer now supports client authentication (mutual TLS). Call `requestClientAuth()`, +    to permit an optional client certificate or `requireClientAuth()` to require one., + *  New: `RecordedRequest.getHandshake()` returns the HTTPS handshake of a request sent to, +    `MockWebServer`., + *  Fix: Honor the `MockResponse` header delay in MockWebServer., + *  Fix: Don't release HTTP/2 connections that have multiple canceled calls. We had a bug where, +    canceling calls would cause the shared HTTP/2 connection to be unnecessarily released. This, +    harmed connection reuse., + *  Fix: Ensure canceled and discarded HTTP/2 data is not permanently counted against the limited, +    flow control window. We had a few bugs where window size accounting was broken when streams, +    were canceled or reset., + *  Fix: Recover gracefully if the TLS session returns an unexpected version (`NONE`) or cipher, +    suite (`SSL_NULL_WITH_NULL_NULL`)., + *  Fix: Don't change Conscrypt configuration globally. We migrated from a process-wide setting to, +    configuring only OkHttp's TLS sockets., + *  Fix: Prefer TLSv1.2 where it is available. On certain older platforms it is necessary to opt-in, +    to TLSv1.2., + *  New: `Request.tag()` permits multiple tags. Use a `Class<?>` as a key to identify tags. Note, +    that `tag()` now returns null if the request has no tag. Previously this would return the, +    request itself., + *  New: `Headers.Builder.addAll(Headers)`., + *  New: `ResponseBody.create(MediaType, ByteString)`., + *  New: Embed R8/ProGuard rules in the jar. These will be applied automatically by R8., + *  Fix: Release the connection if `Authenticator` throws an exception., + *  Fix: Change the declaration of `OkHttpClient.cache()` to return a `@Nullable Cache`. The return, +    value has always been nullable but it wasn't declared properly., + *  Fix: Reverse suppression of connect exceptions. When both a call and its retry fail, we now, +    throw the initial exception which is most likely to be actionable., + *  Fix: Retain interrupted state when throwing `InterruptedIOException`. A single interrupt should, +    now be sufficient to break out an in-flight OkHttp call., + *  Fix: Don't drop a call to `EventListener.callEnd()` when the response body is consumed inside an, +    interceptor., +, +, + [https_server_sample]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java, +++ b/CHANGELOG.md, +## Version 3.11.0, +, +_2018-07-12_, +, + *  **OkHttp's new okhttp-tls submodule tames HTTPS and TLS.**, +, +    `HeldCertificate` is a TLS certificate and its private key. Generate a certificate with its, +    builder then use it to sign another certificate or perform a TLS handshake. The, +    `certificatePem()` method encodes the certificate in the familiar PEM format, +    (`--- BEGIN CERTIFICATE ---`); the `privateKeyPkcs8Pem()` does likewise for the private key., +, +    `HandshakeCertificates` holds the TLS certificates required for a TLS handshake. On the server, +    it keeps your `HeldCertificate` and its chain. On the client it keeps the root certificates, +    that are trusted to sign a server's certificate chain. `HandshakeCertificates` also works with, +    mutual TLS where these roles are reversed., +, +    These classes make it possible to enable HTTPS in MockWebServer in [just a few lines of, +    code][https_server_sample]., +, + *  **OkHttp now supports prior knowledge cleartext HTTP/2.** Enable this by setting, +    `Protocol.H2_PRIOR_KNOWLEDGE` as the lone protocol on an `OkHttpClient.Builder`. This mode, +    only supports `http:` URLs and is best suited in closed environments where HTTPS is, +    inappropriate., +, + *  New: `HttpUrl.get(String)` is an alternative to `HttpUrl.parse(String)` that throws an exception, +    when the URL is malformed instead of returning null. Use this to avoid checking for null in, +    situations where the input is known to be well-formed. We've also added `MediaType.get(String)`, +    which is an exception-throwing alternative to `MediaType.parse(String)`.]
[+++ b/mockwebserver/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +++ b/samples/guide/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +++ b/samples/guide/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.1.2-SNAPSHOT</version>, +++ b/samples/guide/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.1.2-SNAPSHOT</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status;, +    setResponseCode(200);, +    String reason = "Mock Response";, +    if (code >= 100 && code < 200) {, +      reason = "Informational";, +    } else if (code >= 200 && code < 300) {, +      reason = "OK";, +    } else if (code >= 300 && code < 400) {, +      reason = "Redirection";, +    } else if (code >= 400 && code < 500) {, +      reason = "Client Error";, +    } else if (code >= 500 && code < 600) {, +      reason = "Server Error";, +    }, +    return setStatus("HTTP/1.1 " + code + " " + reason);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status;, +    setResponseCode(200);, +    String reason = "Mock Response";, +    if (code >= 100 && code < 200) {, +      reason = "Informational";, +    } else if (code >= 200 && code < 300) {, +      reason = "OK";, +    } else if (code >= 300 && code < 400) {, +      reason = "Redirection";, +    } else if (code >= 400 && code < 500) {, +      reason = "Client Error";, +    } else if (code >= 500 && code < 600) {, +      reason = "Server Error";, +    }, +    return setStatus("HTTP/1.1 " + code + " " + reason);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void setResponseMockReason() {, +    String[] reasons = {, +        "Mock Response",, +        "Informational",, +        "OK",, +        "Redirection",, +        "Client Error",, +        "Server Error",, +        "Mock Response", +    };, +    for (int i = 0; i < 600; i++) {, +      MockResponse response = new MockResponse().setResponseCode(i);, +      String expectedReason = reasons[i / 100];, +      assertEquals("HTTP/1.1 " + i + " " + expectedReason, response.getStatus());, +      assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    }, +  }, +, +  @Test public void setStatusControlsWholeStatusLine() {, +    MockResponse response = new MockResponse().setStatus("HTTP/1.1 202 That'll do pig");, +    assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    assertEquals("HTTP/1.1 202 That'll do pig", response.getStatus());, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status;, +    setResponseCode(200);, +    String reason = "Mock Response";, +    if (code >= 100 && code < 200) {, +      reason = "Informational";, +    } else if (code >= 200 && code < 300) {, +      reason = "OK";, +    } else if (code >= 300 && code < 400) {, +      reason = "Redirection";, +    } else if (code >= 400 && code < 500) {, +      reason = "Client Error";, +    } else if (code >= 500 && code < 600) {, +      reason = "Server Error";, +    }, +    return setStatus("HTTP/1.1 " + code + " " + reason);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void setResponseMockReason() {, +    String[] reasons = {, +        "Mock Response",, +        "Informational",, +        "OK",, +        "Redirection",, +        "Client Error",, +        "Server Error",, +        "Mock Response", +    };, +    for (int i = 0; i < 600; i++) {, +      MockResponse response = new MockResponse().setResponseCode(i);, +      String expectedReason = reasons[i / 100];, +      assertEquals("HTTP/1.1 " + i + " " + expectedReason, response.getStatus());, +      assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    }, +  }, +, +  @Test public void setStatusControlsWholeStatusLine() {, +    MockResponse response = new MockResponse().setStatus("HTTP/1.1 202 That'll do pig");, +    assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    assertEquals("HTTP/1.1 202 That'll do pig", response.getStatus());, +  }, +, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +    server.enqueue(new MockResponse().setResponseCode(200));]
[+++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.2.0-SNAPSHOT</version>, +++ b/samples/crawler/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>]
[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/Deadline.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.bytes;, +, +import java.util.concurrent.TimeUnit;, +, +/**, + * The time that a requested operation is due. If the deadline is reached before, + * the operation has completed, the operation should be aborted., + */, +public class Deadline {, +  public static final Deadline NONE = new Deadline() {, +    @Override public Deadline start(long timeout, TimeUnit unit) {, +      throw new UnsupportedOperationException();, +    }, +, +    @Override public boolean reached() {, +      return false;, +    }, +  };, +, +  private long deadlineNanos;, +, +  public Deadline() {, +  }, +, +  public Deadline start(long timeout, TimeUnit unit) {, +    deadlineNanos = System.nanoTime() + unit.toNanos(timeout);, +    return this;, +  }, +, +  public boolean reached() {, +    return System.nanoTime() - deadlineNanos >= 0; // Subtract to avoid overflow!, +  }, +}, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/Deadline.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.bytes;, +, +import java.util.concurrent.TimeUnit;, +, +/**, + * The time that a requested operation is due. If the deadline is reached before, + * the operation has completed, the operation should be aborted., + */, +public class Deadline {, +  public static final Deadline NONE = new Deadline() {, +    @Override public Deadline start(long timeout, TimeUnit unit) {, +      throw new UnsupportedOperationException();, +    }, +, +    @Override public boolean reached() {, +      return false;, +    }, +  };, +, +  private long deadlineNanos;, +, +  public Deadline() {, +  }, +, +  public Deadline start(long timeout, TimeUnit unit) {, +    deadlineNanos = System.nanoTime() + unit.toNanos(timeout);, +    return this;, +  }, +, +  public boolean reached() {, +    return System.nanoTime() - deadlineNanos >= 0; // Subtract to avoid overflow!, +  }, +}, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/OkBuffer.java, +  @Override public void write(OkBuffer source, long byteCount, Deadline deadline) {]
[+++ b/okhttp-apache/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.0.1-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.0.1-SNAPSHOT</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +  @Test public void networkErrorReportedAsCloseNotFailure() {, +    server2client.close();, +    client.processNextFrame();, +    clientListener.assertClose(1006, "");, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +  @Test public void networkErrorReportedAsCloseNotFailure() {, +    server2client.close();, +    client.processNextFrame();, +    clientListener.assertClose(1006, "");, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +    callback.assertClose(1005, "");, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +  @Test public void networkErrorReportedAsCloseNotFailure() {, +    server2client.close();, +    client.processNextFrame();, +    clientListener.assertClose(1006, "");, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +    callback.assertClose(1005, "");, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_ABNORMAL_TERMINATION;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_CLIENT_GOING_AWAY;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_PROTOCOL_EXCEPTION;, +      if (t instanceof IOException && !(t instanceof ProtocolException)) {, +        readerListener.onClose(CLOSE_ABNORMAL_TERMINATION, "");, +      } else {, +      }, +            int code = protocolException ? CLOSE_PROTOCOL_EXCEPTION : CLOSE_CLIENT_GOING_AWAY;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +  @Test public void networkErrorReportedAsCloseNotFailure() {, +    server2client.close();, +    client.processNextFrame();, +    clientListener.assertClose(1006, "");, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +    callback.assertClose(1005, "");, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_ABNORMAL_TERMINATION;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_CLIENT_GOING_AWAY;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_PROTOCOL_EXCEPTION;, +      if (t instanceof IOException && !(t instanceof ProtocolException)) {, +        readerListener.onClose(CLOSE_ABNORMAL_TERMINATION, "");, +      } else {, +      }, +            int code = protocolException ? CLOSE_PROTOCOL_EXCEPTION : CLOSE_CLIENT_GOING_AWAY;, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +import java.io.IOException;, +  /** Used when an unchecked exception was thrown in a listener. */, +  static final int CLOSE_CLIENT_GOING_AWAY = 1001;, +  /** Used when a {@link ProtocolException} was thrown by the reader or writer. */, +  static final int CLOSE_PROTOCOL_EXCEPTION = 1002;, +  /** Used when an empty close frame was received (i.e., without a status code). */, +  static final int CLOSE_NO_STATUS_CODE = 1005;, +  /** Used when a non-{@link ProtocolException} {@link IOException} was thrown by the reader. */, +  static final int CLOSE_ABNORMAL_TERMINATION = 1006;, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +  @Test public void networkErrorReportedAsCloseNotFailure() {, +    server2client.close();, +    client.processNextFrame();, +    clientListener.assertClose(1006, "");, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +    callback.assertClose(1005, "");, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_ABNORMAL_TERMINATION;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_CLIENT_GOING_AWAY;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_PROTOCOL_EXCEPTION;, +      if (t instanceof IOException && !(t instanceof ProtocolException)) {, +        readerListener.onClose(CLOSE_ABNORMAL_TERMINATION, "");, +      } else {, +      }, +            int code = protocolException ? CLOSE_PROTOCOL_EXCEPTION : CLOSE_CLIENT_GOING_AWAY;, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +import java.io.IOException;, +  /** Used when an unchecked exception was thrown in a listener. */, +  static final int CLOSE_CLIENT_GOING_AWAY = 1001;, +  /** Used when a {@link ProtocolException} was thrown by the reader or writer. */, +  static final int CLOSE_PROTOCOL_EXCEPTION = 1002;, +  /** Used when an empty close frame was received (i.e., without a status code). */, +  static final int CLOSE_NO_STATUS_CODE = 1005;, +  /** Used when a non-{@link ProtocolException} {@link IOException} was thrown by the reader. */, +  static final int CLOSE_ABNORMAL_TERMINATION = 1006;, +, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_NO_STATUS_CODE;, +        int code = CLOSE_NO_STATUS_CODE;]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void legalToExecuteTwiceCloning() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    Response response1 = call.execute();, +, +    Call cloned = call.clone();, +    Response response2 = cloned.execute();, +, +    assertEquals(response1.body().string(), "abc");, +    assertEquals(response2.body().string(), "def");, +  }, +, +  @Test public void legalToExecuteTwiceCloning_Async() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    call.enqueue(callback);, +, +    Call cloned = call.clone();, +    cloned.enqueue(callback);, +, +    callback.await(request.url()).assertBody("abc");, +    callback.await(request.url()).assertBody("def");, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void legalToExecuteTwiceCloning() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    Response response1 = call.execute();, +, +    Call cloned = call.clone();, +    Response response2 = cloned.execute();, +, +    assertEquals(response1.body().string(), "abc");, +    assertEquals(response2.body().string(), "def");, +  }, +, +  @Test public void legalToExecuteTwiceCloning_Async() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    call.enqueue(callback);, +, +    Call cloned = call.clone();, +    cloned.enqueue(callback);, +, +    callback.await(request.url()).assertBody("abc");, +    callback.await(request.url()).assertBody("def");, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Call.java, +public interface Call extends Cloneable {, +  /**, +   * Create a new, identical call to this one which can be enqueued or executed even if this call, +   * has already been., +   */, +  Call clone();, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void legalToExecuteTwiceCloning() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    Response response1 = call.execute();, +, +    Call cloned = call.clone();, +    Response response2 = cloned.execute();, +, +    assertEquals(response1.body().string(), "abc");, +    assertEquals(response2.body().string(), "def");, +  }]
[+++ b/benchmarks/pom.xml, +    <version>3.0.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.1</version>, +++ b/okcurl/pom.xml, +    <version>3.0.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.1</version>, +++ b/okcurl/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.1</version>, +++ b/okcurl/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.1</version>, +++ b/okcurl/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.1</version>, +++ b/okcurl/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.0.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.1</version>, +++ b/okcurl/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.0.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.1</version>, +++ b/okcurl/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.0.1</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.1</version>, +++ b/okcurl/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.1</version>]
[+++ b/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java, +    Set<String> blacklist = Collections.singleton(, +        "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=");, +++ b/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java, +    Set<String> blacklist = Collections.singleton(, +        "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=");, +++ b/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.recipes;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.Socket;, +import java.security.GeneralSecurityException;, +import java.security.KeyManagementException;, +import java.security.KeyStore;, +import java.security.NoSuchAlgorithmException;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.TrustManagerFactory;, +import javax.net.ssl.X509TrustManager;, +import okhttp3.CipherSuite;, +import okhttp3.ConnectionSpec;, +import okhttp3.OkHttpClient;, +import okhttp3.Request;, +import okhttp3.Response;, +, +public final class CustomCipherSuites {, +  private final OkHttpClient client;, +, +  public CustomCipherSuites() throws GeneralSecurityException {, +    // Configure cipher suites to demonstrate how to customize which cipher suites will be used for, +    // an OkHttp request. In order to be selected a cipher suite must be included in both OkHttp's, +    // connection spec and in the SSLSocket's enabled cipher suites array. Most applications should, +    // not customize the cipher suites list., +    List<CipherSuite> customCipherSuites = Arrays.asList(, +        CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,, +        CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,, +        CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,, +        CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384);, +    final ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +        .cipherSuites(customCipherSuites.toArray(new CipherSuite[0])), +        .build();, +, +    X509TrustManager trustManager = defaultTrustManager();, +    SSLSocketFactory sslSocketFactory = defaultSslSocketFactory(trustManager);, +    SSLSocketFactory customSslSocketFactory = new DelegatingSSLSocketFactory(sslSocketFactory) {, +      @Override protected SSLSocket configureSocket(SSLSocket socket) throws IOException {, +        socket.setEnabledCipherSuites(javaNames(spec.cipherSuites()));, +        return socket;, +      }, +    };, +, +    client = new OkHttpClient.Builder(), +        .connectionSpecs(Collections.singletonList(spec)), +        .sslSocketFactory(customSslSocketFactory, trustManager), +        .build();, +  }, +, +  /**, +   * Returns the VM's default SSL socket factory, using {@code trustManager} for trusted root, +   * certificates., +   */, +  private SSLSocketFactory defaultSslSocketFactory(X509TrustManager trustManager), +      throws NoSuchAlgorithmException, KeyManagementException {, +    SSLContext sslContext = SSLContext.getInstance("TLS");, +    sslContext.init(null, new TrustManager[] { trustManager }, null);, +, +    return sslContext.getSocketFactory();, +  }, +, +  /** Returns a trust manager that trusts the VM's default certificate authorities. */, +  private X509TrustManager defaultTrustManager() throws GeneralSecurityException {, +    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(, +        TrustManagerFactory.getDefaultAlgorithm());, +    trustManagerFactory.init((KeyStore) null);, +    TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();, +    if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {, +      throw new IllegalStateException("Unexpected default trust managers:", +          + Arrays.toString(trustManagers));, +    }]
[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/CHANGELOG.md, +++ b/.travis.yml, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.10.0</version>, +implementation 'com.squareup.okhttp3:okhttp:3.10.0', +  <version>3.10.0</version>, +testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0', +++ b/.travis.yml, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.10.0</version>, +implementation 'com.squareup.okhttp3:okhttp:3.10.0', +  <version>3.10.0</version>, +testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0', +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +      <artifactId>mockwebserver</artifactId>, +      <groupId>org.bouncycastle</groupId>, +      <artifactId>bcprov-jdk15on</artifactId>, +++ b/.travis.yml, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.10.0</version>, +implementation 'com.squareup.okhttp3:okhttp:3.10.0', +  <version>3.10.0</version>, +testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0', +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +      <artifactId>mockwebserver</artifactId>, +      <groupId>org.bouncycastle</groupId>, +      <artifactId>bcprov-jdk15on</artifactId>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/.travis.yml, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.10.0</version>, +implementation 'com.squareup.okhttp3:okhttp:3.10.0', +  <version>3.10.0</version>, +testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0', +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +      <artifactId>mockwebserver</artifactId>, +      <groupId>org.bouncycastle</groupId>, +      <artifactId>bcprov-jdk15on</artifactId>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      server.useHttps(sslClient.socketFactory, false);, +++ b/.travis.yml, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.10.0</version>, +implementation 'com.squareup.okhttp3:okhttp:3.10.0', +  <version>3.10.0</version>, +testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0', +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +      <artifactId>mockwebserver</artifactId>, +      <groupId>org.bouncycastle</groupId>, +      <artifactId>bcprov-jdk15on</artifactId>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +      server.useHttps(sslClient.socketFactory, false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +      @Override public void initChannel(SocketChannel channel) throws Exception {, +          SslClient sslClient = SslClient.localhost();, +          SSLEngine engine = sslClient.sslContext.createSSLEngine();, +        ChannelHandlerContext context, HttpObject message) throws Exception {, +++ b/.travis.yml, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.10.0</version>, +implementation 'com.squareup.okhttp3:okhttp:3.10.0', +  <version>3.10.0</version>, +testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0', +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +      <artifactId>mockwebserver</artifactId>, +      <groupId>org.bouncycastle</groupId>, +      <artifactId>bcprov-jdk15on</artifactId>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +      SslClient sslClient = SslClient.localhost();, +          new Scheme("https", 443, new SSLSocketFactory(sslClient.sslContext)));]
[+++ b/pom.xml, +    <junit.version>4.12</junit.version>]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt, +/*, + * Copyright (C) 2012 Square, Inc., + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.platform;, +, +import java.io.IOException;, +import java.lang.reflect.Field;, +import java.net.InetSocketAddress;, +import java.net.Socket;, +import java.security.NoSuchAlgorithmException;, +import java.security.Security;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +import javax.annotation.Nullable;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.X509TrustManager;, +import okhttp3.OkHttpClient;, +import okhttp3.Protocol;, +import okhttp3.internal.Util;, +import okhttp3.internal.tls.BasicCertificateChainCleaner;, +import okhttp3.internal.tls.BasicTrustRootIndex;, +import okhttp3.internal.tls.CertificateChainCleaner;, +import okhttp3.internal.tls.TrustRootIndex;, +import okio.Buffer;, +, +/**, + * Access to platform-specific features., + *, + * <h3>Server name indication (SNI)</h3>, + *, + * <p>Supported on Android 2.3+., + *, + * <p>Supported on OpenJDK 7+, + *, + * <h3>Session Tickets</h3>, + *, + * <p>Supported on Android 2.3+., + *, + * <h3>Android Traffic Stats (Socket Tagging)</h3>, + *, + * <p>Supported on Android 4.0+., + *, + * <h3>ALPN (Application Layer Protocol Negotiation)</h3>, + *, + * <p>Supported on Android 5.0+. The APIs were present in Android 4.4, but that implementation was, + * unstable., + *, + * <p>Supported on OpenJDK 8 via the JettyALPN-boot library., + *, + * <p>Supported on OpenJDK 9+ via SSLParameters and SSLSocket features., + *, + * <h3>Trust Manager Extraction</h3>, + *, + * <p>Supported on Android 2.3+ and OpenJDK 7+. There are no public APIs to recover the trust, + * manager that was used to create an {@link SSLSocketFactory}., + *, + * <h3>Android Cleartext Permit Detection</h3>, + *, + * <p>Supported on Android 6.0+ via {@code NetworkSecurityPolicy}., + */, +public class Platform {, +  private static final Platform PLATFORM = findPlatform();, +  public static final int INFO = 4;, +  public static final int WARN = 5;, +  private static final Logger logger = Logger.getLogger(OkHttpClient.class.getName());, +, +  public static Platform get() {, +    return PLATFORM;, +  }, +, +  /** Prefix used on custom headers. */, +  public String getPrefix() {, +    return "OkHttp";, +  }, +, +  protected @Nullable X509TrustManager trustManager(SSLSocketFactory sslSocketFactory) {, +    // Attempt to get the trust manager from an OpenJDK socket factory. We attempt this on all, +    // platforms in order to support Robolectric, which mixes classes from both Android and the, +    // Oracle JDK. Note that we don't support HTTP/2 or other nice features on Robolectric., +    try {]
[+++ b/CHANGELOG.md, +## Version 2.5.0, +, +_2015-08-25_, +, + *  **Timeouts now default to 10 seconds.** Previously we defaulted to never, +    timing out, and that was a lousy policy. If some of your requests require, +    more than 10 seconds to complete, you’ll need to adjust the timeouts, +    manually., +, + *  **OkHttp now rejects request headers that contain invalid characters.** This, +    includes potential security problems (newline characters) as well as simple, +    non-ASCII characters (including international characters and emoji)., +, + *  **Call canceling is more reliable.**  We had a bug where a socket being, +     connected wasn't being closed when the application used `Call.cancel()`., +, + *  **Changing a HttpUrl’s scheme now tracks the default port.** We had a bug, +    where changing a URL from `http` to `https` would leave it on port 80., +, + *  **Okio has been updated to 1.6.0.**, +     ```, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.6.0</version>, +     </dependency>, +     ```, +, + *  New: `Cache.initialize()`. Call this on a background thread to eagerly, +    initialize the response cache., + *  New: Fold `MockWebServerRule` into `MockWebServer`. This makes it easier to, +    write JUnit tests with `MockWebServer`. The `MockWebServer` library now, +    depends on JUnit, though it continues to work with all testing frameworks., + *  Fix: `FormEncodingBuilder` is now consistent with browsers in which, +    characters it escapes. Previously we weren’t percent-encoding commas,, +    parens, and other characters., + *  Fix: Relax `FormEncodingBuilder` to support building empty forms., + *  Fix: Timeouts throw `SocketTimeoutException`, not `InterruptedIOException`., + *  Fix: Change `MockWebServer` to use the same logic as OkHttp when determining, +    whether an HTTP request permits a body., + *  Fix: `HttpUrl` now uses the canonical form for IPv6 addresses., + *  Fix: Use `HttpUrl` internally., + *  Fix: Recover from Android 4.2.2 EBADF crashes., + *  Fix: Don't crash with an `IllegalStateException` if an HTTP/2 or SPDY, +    write fails, leaving the connection in an inconsistent state., + *  Fix: Make sure the default user agent is ASCII., +, +, +++ b/CHANGELOG.md, +## Version 2.5.0, +, +_2015-08-25_, +, + *  **Timeouts now default to 10 seconds.** Previously we defaulted to never, +    timing out, and that was a lousy policy. If some of your requests require, +    more than 10 seconds to complete, you’ll need to adjust the timeouts, +    manually., +, + *  **OkHttp now rejects request headers that contain invalid characters.** This, +    includes potential security problems (newline characters) as well as simple, +    non-ASCII characters (including international characters and emoji)., +, + *  **Call canceling is more reliable.**  We had a bug where a socket being, +     connected wasn't being closed when the application used `Call.cancel()`., +, + *  **Changing a HttpUrl’s scheme now tracks the default port.** We had a bug, +    where changing a URL from `http` to `https` would leave it on port 80., +, + *  **Okio has been updated to 1.6.0.**, +     ```, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.6.0</version>, +     </dependency>, +     ```, +, + *  New: `Cache.initialize()`. Call this on a background thread to eagerly, +    initialize the response cache., + *  New: Fold `MockWebServerRule` into `MockWebServer`. This makes it easier to, +    write JUnit tests with `MockWebServer`. The `MockWebServer` library now, +    depends on JUnit, though it continues to work with all testing frameworks., + *  Fix: `FormEncodingBuilder` is now consistent with browsers in which, +    characters it escapes. Previously we weren’t percent-encoding commas,, +    parens, and other characters., + *  Fix: Relax `FormEncodingBuilder` to support building empty forms., + *  Fix: Timeouts throw `SocketTimeoutException`, not `InterruptedIOException`., + *  Fix: Change `MockWebServer` to use the same logic as OkHttp when determining, +    whether an HTTP request permits a body., + *  Fix: `HttpUrl` now uses the canonical form for IPv6 addresses., + *  Fix: Use `HttpUrl` internally., + *  Fix: Recover from Android 4.2.2 EBADF crashes., + *  Fix: Don't crash with an `IllegalStateException` if an HTTP/2 or SPDY, +    write fails, leaving the connection in an inconsistent state., + *  Fix: Make sure the default user agent is ASCII., +, +, +++ b/README.md, +  <version>2.5.0</version>]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair);, +  private KeyPair generateKeyPair() throws GeneralSecurityException {, +  private X509Certificate selfSignedCertificate(KeyPair keyPair) throws GeneralSecurityException {, +    generator.setSerialNumber(BigInteger.ONE);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair);, +  private KeyPair generateKeyPair() throws GeneralSecurityException {, +  private X509Certificate selfSignedCertificate(KeyPair keyPair) throws GeneralSecurityException {, +    generator.setSerialNumber(BigInteger.ONE);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setProtocols(sslSocket, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair);, +  private KeyPair generateKeyPair() throws GeneralSecurityException {, +  private X509Certificate selfSignedCertificate(KeyPair keyPair) throws GeneralSecurityException {, +    generator.setSerialNumber(BigInteger.ONE);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setProtocols(sslSocket, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            Platform.get().setProtocols(sslSocket, protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair);, +  private KeyPair generateKeyPair() throws GeneralSecurityException {, +  private X509Certificate selfSignedCertificate(KeyPair keyPair) throws GeneralSecurityException {, +    generator.setSerialNumber(BigInteger.ONE);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setProtocols(sslSocket, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            Platform.get().setProtocols(sslSocket, protocols);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropBadTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.spdy;, +, +import com.squareup.okhttp.internal.spdy.hpackjson.Story;, +import org.junit.Ignore;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +, +import java.util.Collection;, +, +/**, + * Known bad tests for HPACK interop., + */, +// TODO: fix these tests (see if the input/test is legit, fix the implementation.), +@Ignore, +@RunWith(Parameterized.class), +public class HpackDecodeInteropBadTest extends HpackDecodeTestBase {, +, +  private static final String[] BAD_INTEROP_TESTS = {, +      "hyper-hpack",, +      "node-http2-protocol",, +      "raw-data",, +      "twitter-hpack", +  };, +, +  public HpackDecodeInteropBadTest(Story story) {, +    super(story);, +  }, +, +  @Parameterized.Parameters(name="{0}"), +  public static Collection<Story[]> createStories() throws Exception {, +    return createStories(BAD_INTEROP_TESTS);, +  }, +, +  @Test, +  public void testGoodDecoderInterop() throws Exception {, +    testDecoder();, +  }, +}, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair);, +  private KeyPair generateKeyPair() throws GeneralSecurityException {, +  private X509Certificate selfSignedCertificate(KeyPair keyPair) throws GeneralSecurityException {, +    generator.setSerialNumber(BigInteger.ONE);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setProtocols(sslSocket, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            Platform.get().setProtocols(sslSocket, protocols);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropBadTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.]
[+++ b/checkstyle.xml, +++ b/checkstyle.xml, +++ b/pom.xml, +        <version>2.10</version>, +    <profile>, +      <id>alpn-when-jdk8_111</id>, +      <activation>, +        <jdk>1.8.0_111</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, +      </properties>, +    </profile>, +++ b/checkstyle.xml, +++ b/pom.xml, +        <version>2.10</version>, +    <profile>, +      <id>alpn-when-jdk8_111</id>, +      <activation>, +        <jdk>1.8.0_111</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, +      </properties>, +    </profile>, +++ b/samples/pom.xml, +++ b/checkstyle.xml, +++ b/pom.xml, +        <version>2.10</version>, +    <profile>, +      <id>alpn-when-jdk8_111</id>, +      <activation>, +        <jdk>1.8.0_111</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, +      </properties>, +    </profile>, +++ b/samples/pom.xml, +++ /dev/null, +++ b/checkstyle.xml, +++ b/pom.xml, +        <version>2.10</version>, +    <profile>, +      <id>alpn-when-jdk8_111</id>, +      <activation>, +        <jdk>1.8.0_111</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, +      </properties>, +    </profile>, +++ b/samples/pom.xml, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +++ b/pom.xml, +        <version>2.10</version>, +    <profile>, +      <id>alpn-when-jdk8_111</id>, +      <activation>, +        <jdk>1.8.0_111</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, +      </properties>, +    </profile>, +++ b/samples/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +++ b/pom.xml, +        <version>2.10</version>, +    <profile>, +      <id>alpn-when-jdk8_111</id>, +      <activation>, +        <jdk>1.8.0_111</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, +      </properties>, +    </profile>, +++ b/samples/pom.xml, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +++ b/pom.xml, +        <version>2.10</version>, +    <profile>, +      <id>alpn-when-jdk8_111</id>, +      <activation>, +        <jdk>1.8.0_111</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.9.v20160720</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ b/bom/pom.xml, +        <artifactId>logging-interceptor</artifactId>, +++ b/bom/pom.xml, +        <artifactId>logging-interceptor</artifactId>, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    WebSocket server = serverListener.assertOpen();, +    closeWebSockets(webSocket, server);, +    WebSocket server = serverListener.assertOpen();, +    closeWebSockets(webSocket, server);, +    WebSocket server = serverListener.assertOpen();, +    closeWebSockets(webSocket, server);, +    WebSocket server = serverListener.assertOpen();, +    closeWebSockets(webSocket, server);, +    WebSocket webSocket = newWebSocket();, +    closeWebSockets(webSocket, server);, +    closeWebSockets(webSocket, server);, +, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +    closeWebSockets(webSocket, server);, +    WebSocket webSocket = newWebSocket();, +    closeWebSockets(webSocket, server);, +    closeWebSockets(webSocket, server);, +    closeWebSockets(webSocket, server);, +    WebSocket webSocket = newWebSocket();, +    closeWebSockets(webSocket, server);, +    WebSocket server = serverListener.assertOpen();, +, +    closeWebSockets(webSocket, server);, +, +  private void closeWebSockets(WebSocket webSocket, WebSocket server) {, +    server.close(1001, "");, +    clientListener.assertClosing(1001, "");, +    webSocket.close(1000, "");, +    serverListener.assertClosing(1000, "");, +    clientListener.assertClosed(1001, "");, +    serverListener.assertClosed(1000, "");, +    clientListener.assertExhausted();, +    serverListener.assertExhausted();, +  }, +++ b/bom/pom.xml, +        <artifactId>logging-interceptor</artifactId>, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    WebSocket server = serverListener.assertOpen();, +    closeWebSockets(webSocket, server);, +    WebSocket server = serverListener.assertOpen();, +    closeWebSockets(webSocket, server);, +    WebSocket server = serverListener.assertOpen();, +    closeWebSockets(webSocket, server);, +    WebSocket server = serverListener.assertOpen();, +    closeWebSockets(webSocket, server);, +    WebSocket webSocket = newWebSocket();, +    closeWebSockets(webSocket, server);, +    closeWebSockets(webSocket, server);, +, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +    closeWebSockets(webSocket, server);, +    WebSocket webSocket = newWebSocket();, +    closeWebSockets(webSocket, server);, +    closeWebSockets(webSocket, server);, +    closeWebSockets(webSocket, server);, +    WebSocket webSocket = newWebSocket();, +    closeWebSockets(webSocket, server);, +    WebSocket server = serverListener.assertOpen();, +, +    closeWebSockets(webSocket, server);, +, +  private void closeWebSockets(WebSocket webSocket, WebSocket server) {, +    server.close(1001, "");, +    clientListener.assertClosing(1001, "");, +    webSocket.close(1000, "");, +    serverListener.assertClosing(1000, "");, +    clientListener.assertClosed(1001, "");, +    serverListener.assertClosed(1000, "");, +    clientListener.assertExhausted();, +    serverListener.assertExhausted();, +  }, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +        StreamAllocation streamAllocation = Internal.instance.streamAllocation(call);]
[+++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.1.1</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-apache/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.1.1</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +        <version>3.1.1</version>, +++ b/mockwebserver/pom.xml, +        <version>3.0.1</version>, +        <version>3.1.0</version>, +        <version>3.1.1</version>, +++ b/okcurl/pom.xml, +        <version>3.1.0</version>, +        <version>1.5.0</version>, +        <version>3.1.1</version>, +++ b/okhttp-android-support/pom.xml]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import static org.junit.Assert.fail;, +, +  @Test public void setProtocolsRejectsHttp10() throws Exception {, +    OkHttpClient client = new OkHttpClient();, +    try {, +      client.setProtocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import static org.junit.Assert.fail;, +, +  @Test public void setProtocolsRejectsHttp10() throws Exception {, +    OkHttpClient client = new OkHttpClient();, +    try {, +      client.setProtocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.HostResolver;, +        .setConnectionPool(ConnectionPool.getDefault()), +        .setHostResolver(dns);, +  private static class FakeDns implements HostResolver {, +    @Override public InetAddress[] getAllByName(String host) throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import static org.junit.Assert.fail;, +, +  @Test public void setProtocolsRejectsHttp10() throws Exception {, +    OkHttpClient client = new OkHttpClient();, +    try {, +      client.setProtocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.HostResolver;, +        .setConnectionPool(ConnectionPool.getDefault()), +        .setHostResolver(dns);, +  private static class FakeDns implements HostResolver {, +    @Override public InetAddress[] getAllByName(String host) throws UnknownHostException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/HostResolver.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +, +/**, + * Domain name service. Prefer this over {@link InetAddress#getAllByName} to, + * make code more testable., + */, +public interface HostResolver {, +  HostResolver DEFAULT = new HostResolver() {, +    @Override public InetAddress[] getAllByName(String host) throws UnknownHostException {, +      if (host == null) throw new UnknownHostException("host == null");, +      return InetAddress.getAllByName(host);, +    }, +  };, +, +  InetAddress[] getAllByName(String host) throws UnknownHostException;, +}, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void setFollowRedirectsFalse() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import static org.junit.Assert.fail;, +, +  @Test public void setProtocolsRejectsHttp10() throws Exception {, +    OkHttpClient client = new OkHttpClient();, +    try {, +      client.setProtocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }]
[+++ b/.gitignore, +local.properties]
[+++ b/benchmarks/pom.xml, +    <version>3.10.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.10.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.10.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.10.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.10.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.10.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.10.0</version>, +++ b/okcurl/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.10.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.10.0</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    // Wait until the server has completely filled the stream and connection flow-control windows., +    int expectedFrameCount = Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE / 16384;, +    int dataFrameCount = 0;, +    while (dataFrameCount < expectedFrameCount) {, +      String log = http2Handler.take();, +      if (log.equals("FINE: << 0x00000003 16384 DATA          ")) {, +        dataFrameCount++;, +      }, +    }, +    // Wait until the server has completely filled the stream and connection flow-control windows., +    int expectedFrameCount = Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE / 16384;, +    int dataFrameCount = 0;, +    while (dataFrameCount < expectedFrameCount) {, +      String log = http2Handler.take();, +      if (log.equals("FINE: << 0x00000003 16384 DATA          ")) {, +        dataFrameCount++;, +      }, +    }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    // Wait until the server has completely filled the stream and connection flow-control windows., +    int expectedFrameCount = Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE / 16384;, +    int dataFrameCount = 0;, +    while (dataFrameCount < expectedFrameCount) {, +      String log = http2Handler.take();, +      if (log.equals("FINE: << 0x00000003 16384 DATA          ")) {, +        dataFrameCount++;, +      }, +    }, +    // Wait until the server has completely filled the stream and connection flow-control windows., +    int expectedFrameCount = Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE / 16384;, +    int dataFrameCount = 0;, +    while (dataFrameCount < expectedFrameCount) {, +      String log = http2Handler.take();, +      if (log.equals("FINE: << 0x00000003 16384 DATA          ")) {, +        dataFrameCount++;, +      }, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java, +    if (outFinished) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    // Wait until the server has completely filled the stream and connection flow-control windows., +    int expectedFrameCount = Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE / 16384;, +    int dataFrameCount = 0;, +    while (dataFrameCount < expectedFrameCount) {, +      String log = http2Handler.take();, +      if (log.equals("FINE: << 0x00000003 16384 DATA          ")) {, +        dataFrameCount++;, +      }, +    }, +    // Wait until the server has completely filled the stream and connection flow-control windows., +    int expectedFrameCount = Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE / 16384;, +    int dataFrameCount = 0;, +    while (dataFrameCount < expectedFrameCount) {, +      String log = http2Handler.take();, +      if (log.equals("FINE: << 0x00000003 16384 DATA          ")) {, +        dataFrameCount++;, +      }, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java, +    if (outFinished) {, +++ b/samples/guide/pom.xml, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>okhttp-tls</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    // Wait until the server has completely filled the stream and connection flow-control windows., +    int expectedFrameCount = Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE / 16384;, +    int dataFrameCount = 0;, +    while (dataFrameCount < expectedFrameCount) {, +      String log = http2Handler.take();, +      if (log.equals("FINE: << 0x00000003 16384 DATA          ")) {, +        dataFrameCount++;, +      }, +    }, +    // Wait until the server has completely filled the stream and connection flow-control windows., +    int expectedFrameCount = Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE / 16384;, +    int dataFrameCount = 0;, +    while (dataFrameCount < expectedFrameCount) {, +      String log = http2Handler.take();, +      if (log.equals("FINE: << 0x00000003 16384 DATA          ")) {, +        dataFrameCount++;, +      }, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java, +    if (outFinished) {, +++ b/samples/guide/pom.xml, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertTrue(message.contains("A connection to " + server.url("/") + " was leaked.", +      assertTrue(message.contains("A connection to " + server.url("/") + " was leaked."]
[+++ b/okhttp/pom.xml, +    <dependency>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <version>1.17</version>, +      <scope>provided</scope>, +    </dependency>, +++ b/okhttp/pom.xml, +    <dependency>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <version>1.17</version>, +      <scope>provided</scope>, +    </dependency>, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.time.Duration;, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;, +     * Sets the default connect timeout for new connections. A value of 0 means no timeout,, +     * otherwise values must be between 1 and {@link Integer#MAX_VALUE} when converted to, +     * milliseconds., +     *, +     * <p>The connectTimeout is applied when connecting a TCP socket to the target host., +     * The default value is 10 seconds., +     */, +    @IgnoreJRERequirement, +    public Builder connectTimeout(Duration duration) {, +      connectTimeout = checkDuration("timeout", duration.toMillis(), TimeUnit.MILLISECONDS);, +      return this;, +    }, +, +    /**, +     * Sets the default read timeout for new connections. A value of 0 means no timeout, otherwise, +     * values must be between 1 and {@link Integer#MAX_VALUE} when converted to milliseconds., +     *, +     * <p>The read timeout is applied to both the TCP socket and for individual read IO operations, +     * including on {@link Source} of the {@link Response}. The default value is 10 seconds., +     *, +     * @see Socket#setSoTimeout(int), +     * @see Source#timeout(), +     */, +    @IgnoreJRERequirement, +    public Builder readTimeout(Duration duration) {, +      readTimeout = checkDuration("timeout", duration.toMillis(), TimeUnit.MILLISECONDS);, +      return this;, +    }, +, +    /**, +     * Sets the default write timeout for new connections. A value of 0 means no timeout, otherwise, +     * values must be between 1 and {@link Integer#MAX_VALUE} when converted to milliseconds., +     *, +     * <p>The write timeout is applied for individual write IO operations., +     * The default value is 10 seconds., +     *, +     * @see Sink#timeout(), +     */, +    @IgnoreJRERequirement, +    public Builder writeTimeout(Duration duration) {, +      writeTimeout = checkDuration("timeout", duration.toMillis(), TimeUnit.MILLISECONDS);, +      return this;, +    }, +, +    /**, +     * Sets the interval between HTTP/2 and web socket pings initiated by this client. Use this to, +     * automatically send ping frames until either the connection fails or it is closed. This keeps, +     * the connection alive and may detect connectivity failures., +     *, +     * <p>If the server does not respond to each ping with a pong within {@code interval}, this, +     * client will assume that connectivity has been lost. When this happens on a web socket the, +     * connection is canceled and its listener is {@linkplain WebSocketListener#onFailure notified, +     * of the failure}. When it happens on an HTTP/2 connection the connection is closed and any, +     * calls it is carrying {@linkplain java.io.IOException will fail with an IOException}., +     *, +     * <p>The default value of 0 disables client-initiated pings., +     */, +    @IgnoreJRERequirement, +    public Builder pingInterval(Duration duration) {, +      pingInterval = checkDuration("timeout", duration.toMillis(), TimeUnit.MILLISECONDS);, +      return this;, +    }, +, +    /**]
[+++ b/okhttp/pom.xml, +      <version>1.1.0</version>, +++ b/okhttp/pom.xml, +      <version>1.1.0</version>, +++ b/pom.xml, +          <version>1.1.0</version>]
[+++ b/benchmarks/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/bom/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0-SNAPSHOT</version>]
[+++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.3.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.3.0-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    long fixedContentLength = httpEngine.policy.getFixedContentLength();, +    long contentLength = httpEngine.requestHeaders.getContentLength();, +    if (contentLength > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("Use setFixedLengthStreamingMode() or ", +          + "setChunkedStreamingMode() for requests larger than 2 GiB.");, +    }, +, +      return new RetryableOutputStream((int) contentLength);, +    private long bytesRemaining;, +    private FixedLengthOutputStream(OutputStream socketOut, long bytesRemaining) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    long fixedContentLength = httpEngine.policy.getFixedContentLength();, +    long contentLength = httpEngine.requestHeaders.getContentLength();, +    if (contentLength > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("Use setFixedLengthStreamingMode() or ", +          + "setChunkedStreamingMode() for requests larger than 2 GiB.");, +    }, +, +      return new RetryableOutputStream((int) contentLength);, +    private long bytesRemaining;, +    private FixedLengthOutputStream(OutputStream socketOut, long bytesRemaining) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +  /** Like the superclass field of the same name, but a long and available on all platforms. */, +  private long fixedContentLength = -1;, +  final long getFixedContentLength() {, +, +  @Override public void setFixedLengthStreamingMode(int contentLength) {, +    setFixedLengthStreamingMode((long) contentLength);, +  }, +, +  // @Override Don't override: this overload method doesn't exist prior to Java 1.7., +  public void setFixedLengthStreamingMode(long contentLength) {, +    if (super.connected) throw new IllegalStateException("Already connected");, +    if (chunkLength > 0) throw new IllegalStateException("Already in chunked mode");, +    if (contentLength < 0) throw new IllegalArgumentException("contentLength < 0");, +    this.fixedContentLength = contentLength;, +    super.fixedContentLength = (int) Math.min(contentLength, Integer.MAX_VALUE);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    long fixedContentLength = httpEngine.policy.getFixedContentLength();, +    long contentLength = httpEngine.requestHeaders.getContentLength();, +    if (contentLength > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("Use setFixedLengthStreamingMode() or ", +          + "setChunkedStreamingMode() for requests larger than 2 GiB.");, +    }, +, +      return new RetryableOutputStream((int) contentLength);, +    private long bytesRemaining;, +    private FixedLengthOutputStream(OutputStream socketOut, long bytesRemaining) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +  /** Like the superclass field of the same name, but a long and available on all platforms. */, +  private long fixedContentLength = -1;, +  final long getFixedContentLength() {, +, +  @Override public void setFixedLengthStreamingMode(int contentLength) {, +    setFixedLengthStreamingMode((long) contentLength);, +  }, +, +  // @Override Don't override: this overload method doesn't exist prior to Java 1.7., +  public void setFixedLengthStreamingMode(long contentLength) {, +    if (super.connected) throw new IllegalStateException("Already connected");, +    if (chunkLength > 0) throw new IllegalStateException("Already in chunked mode");, +    if (contentLength < 0) throw new IllegalArgumentException("contentLength < 0");, +    this.fixedContentLength = contentLength;, +    super.fixedContentLength = (int) Math.min(contentLength, Integer.MAX_VALUE);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestHeaders.java, +  private long contentLength = -1;, +  public long getContentLength() {, +  public void setContentLength(long contentLength) {, +    headers.add("Content-Length", Long.toString(contentLength));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    long fixedContentLength = httpEngine.policy.getFixedContentLength();, +    long contentLength = httpEngine.requestHeaders.getContentLength();, +    if (contentLength > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("Use setFixedLengthStreamingMode() or ", +          + "setChunkedStreamingMode() for requests larger than 2 GiB.");, +    }, +, +      return new RetryableOutputStream((int) contentLength);, +    private long bytesRemaining;, +    private FixedLengthOutputStream(OutputStream socketOut, long bytesRemaining) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +  /** Like the superclass field of the same name, but a long and available on all platforms. */, +  private long fixedContentLength = -1;, +  final long getFixedContentLength() {, +, +  @Override public void setFixedLengthStreamingMode(int contentLength) {, +    setFixedLengthStreamingMode((long) contentLength);, +  }, +, +  // @Override Don't override: this overload method doesn't exist prior to Java 1.7., +  public void setFixedLengthStreamingMode(long contentLength) {, +    if (super.connected) throw new IllegalStateException("Already connected");, +    if (chunkLength > 0) throw new IllegalStateException("Already in chunked mode");, +    if (contentLength < 0) throw new IllegalArgumentException("contentLength < 0");, +    this.fixedContentLength = contentLength;, +    super.fixedContentLength = (int) Math.min(contentLength, Integer.MAX_VALUE);, +  }]
[+++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import javax.net.ServerSocketFactory;, +  private ServerSocketFactory serverSocketFactory = ServerSocketFactory.getDefault();, +  public void setServerSocketFactory(ServerSocketFactory serverSocketFactory) {, +    if (serverSocketFactory == null) throw new IllegalArgumentException("null serverSocketFactory");, +    this.serverSocketFactory = serverSocketFactory;, +  }, +, +    serverSocket = serverSocketFactory.createServerSocket(port, 50, inetAddress);, +    sleepIfDelayed(response);, +  private void sleepIfDelayed(MockResponse response) {, +    if (response.getBodyDelayTimeMs() != 0) {, +      try {, +        Thread.sleep(response.getBodyDelayTimeMs());, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    }, +  }, +, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +    executeSynchronously(request).assertBody("retry success");, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +    executeSynchronously(request).assertBody("retry success");, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +    executeSynchronously(request).assertBody("retry success");, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    assertEquals(0, client.client().getConnectionPool().getIdleConnectionCount());, +    assertEquals(Arrays.asList(server.getUrl("/").toURI(), server2.getUrl("/").toURI()),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +    executeSynchronously(request).assertBody("retry success");, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    assertEquals(0, client.client().getConnectionPool().getIdleConnectionCount());, +    assertEquals(Arrays.asList(server.getUrl("/").toURI(), server2.getUrl("/").toURI()),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    Response response = Http2xStream.readSpdy3HeadersList(headerBlock).request(request).build();, +    Response response = Http2xStream.readSpdy3HeadersList(headerBlock).request(request).build();, +    Response response = Http2xStream.readHttp2HeadersList(headerBlock).request(request).build();, +    List<Header> headerBlock = Http2xStream.spdy3HeadersList(request);, +    assertEquals(expected, Http2xStream.spdy3HeadersList(request));, +    assertEquals(expected, Http2xStream.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +    executeSynchronously(request).assertBody("retry success");, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    assertEquals(0, client.client().getConnectionPool().getIdleConnectionCount());, +    assertEquals(Arrays.asList(server.getUrl("/").toURI(), server2.getUrl("/").toURI()),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    Response response = Http2xStream.readSpdy3HeadersList(headerBlock).request(request).build();, +    Response response = Http2xStream.readSpdy3HeadersList(headerBlock).request(request).build();, +    Response response = Http2xStream.readHttp2HeadersList(headerBlock).request(request).build();, +    List<Header> headerBlock = Http2xStream.spdy3HeadersList(request);, +    assertEquals(expected, Http2xStream.spdy3HeadersList(request));, +    assertEquals(expected, Http2xStream.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +  private static final String proxyAHost = "proxya";, +      new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(proxyAHost, proxyAPort));, +  private static final String proxyBHost = "proxyb";, +      new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(proxyBHost, proxyBPort));, +  private String uriHost = "hosta";, +  private RouteDatabase routeDatabase = new RouteDatabase();, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    routeSelector = new RouteSelector(address, routeDatabase);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    proxySelector.assertRequests(address.url().uri());, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    proxySelector.assertRequests(address.url().uri());, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    proxySelector.assertRequests(address.url().uri());, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    proxySelector.assertRequests(address.url().uri());, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +        if (i == 513) {, +          // pause slightly after half way to make result more predictable, +          Thread.sleep(100);, +        }, +    assertEquals(512f, i, 5f); // Halfway +/- 0.5%]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheRequest.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.cache, +, +import java.io.IOException, +import okio.Sink, +, +interface CacheRequest {, +  @Throws(IOException::class), +  fun body(): Sink, +, +  fun abort(), +}, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheRequest.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.cache, +, +import java.io.IOException, +import okio.Sink, +, +interface CacheRequest {, +  @Throws(IOException::class), +  fun body(): Sink, +, +  fun abort(), +}, +++ b/okhttp/src/main/java/okhttp3/internal/http/ExchangeCode.kt, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.http, +, +import java.io.IOException, +import okhttp3.Headers, +import okhttp3.Request, +import okhttp3.Response, +import okhttp3.internal.connection.RealConnection, +import okio.Sink, +import okio.Source, +, +/** Encodes HTTP requests and decodes HTTP responses.  */, +interface ExchangeCodec {, +, +  /** Returns the connection that carries this codec.  */, +  fun connection(): RealConnection, +, +  /** Returns an output stream where the request body can be streamed.  */, +  @Throws(IOException::class), +  fun createRequestBody(request: Request, contentLength: Long): Sink, +, +  /** This should update the HTTP engine's sentRequestMillis field.  */, +  @Throws(IOException::class), +  fun writeRequestHeaders(request: Request), +, +  /** Flush the request to the underlying socket.  */, +  @Throws(IOException::class), +  fun flushRequest()]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, +  @Override public boolean isDuplex() {, +    return true;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, +  @Override public boolean isDuplex() {, +    return true;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, +  @Override public boolean isDuplex() {, +    return true;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, +  @Override public boolean isDuplex() {, +    return true;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.io.IOException;, +      @Override public @Nullable IOException timeoutExit(Call call, @Nullable IOException e) {, +        return ((RealCall) call).timeoutExit(e);, +      }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, +  @Override public boolean isDuplex() {, +    return true;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.io.IOException;, +      @Override public @Nullable IOException timeoutExit(Call call, @Nullable IOException e) {, +        return ((RealCall) call).timeoutExit(e);, +      }, +, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import javax.annotation.Nullable;, +import okio.AsyncTimeout;, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +  final AsyncTimeout timeout;, +    this.timeout = new AsyncTimeout() {, +      @Override protected void timedOut() {, +        cancel();, +      }, +    };, +    this.timeout.timeout(client.callTimeoutMillis(), MILLISECONDS);, +    timeout.enter();, +  @Nullable IOException timeoutExit(@Nullable IOException cause) {, +    if (!timeout.exit()) return cause;, +, +    InterruptedIOException e = new InterruptedIOException("timeout");, +    if (cause != null) {, +      e.initCause(cause);, +    }, +    return e;, +  }, +, +    return timeout;, +      timeout.enter();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, +  @Override public boolean isDuplex() {, +    return true;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.io.IOException;, +      @Override public @Nullable IOException timeoutExit(Call call, @Nullable IOException e) {, +        return ((RealCall) call).timeoutExit(e);, +      }, +, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import javax.annotation.Nullable;]
[+++ b/benchmarks/pom.xml, +    <version>2.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-ws-tests/pom.xml, +    <version>2.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-ws-tests/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-ws/pom.xml, +    <version>2.3.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.3.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.3.0</version>, +++ b/okcurl/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.3.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.3.0</version>]
[+++ b/bom/pom.xml, +  <version>3.13.0-SNAPSHOT</version>]
[+++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java, +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java, +++ b/okhttp-urlconnection/pom.xml, +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java, +++ b/okhttp-urlconnection/pom.xml, +++ b/okhttp-ws/pom.xml, +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java, +++ b/okhttp-urlconnection/pom.xml, +++ b/okhttp-ws/pom.xml, +++ b/okhttp/pom.xml, +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java, +++ b/okhttp-urlconnection/pom.xml, +++ b/okhttp-ws/pom.xml, +++ b/okhttp/pom.xml, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +              "Unexpected char %#04x at %d in header value: %s", (int) c, i, value));, +++ b/mockwebserver/README.md, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/okhttp-apache/pom.xml, +++ b/okhttp-logging-interceptor/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java, +++ b/okhttp-urlconnection/pom.xml, +++ b/okhttp-ws/pom.xml, +++ b/okhttp/pom.xml, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +              "Unexpected char %#04x at %d in header value: %s", (int) c, i, value));, +++ b/pom.xml]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.internal.platform.Platform;, +import static okhttp3.internal.platform.Platform.INFO;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.internal.platform.Platform;, +import static okhttp3.internal.platform.Platform.INFO;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.platform.Platform;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.internal.platform.Platform;, +import static okhttp3.internal.platform.Platform.INFO;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.platform.Platform;, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +    okhttp3.internal.cache.CacheRequest okCacheRequest =, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.internal.platform.Platform;, +import static okhttp3.internal.platform.Platform.INFO;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.platform.Platform;, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +    okhttp3.internal.cache.CacheRequest okCacheRequest =, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +import okhttp3.internal.cache.CacheRequest;, +import okhttp3.internal.cache.CacheStrategy;, +import okhttp3.internal.cache.InternalCache;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.internal.platform.Platform;, +import static okhttp3.internal.platform.Platform.INFO;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.platform.Platform;, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +    okhttp3.internal.cache.CacheRequest okCacheRequest =, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +import okhttp3.internal.cache.CacheRequest;, +import okhttp3.internal.cache.CacheStrategy;, +import okhttp3.internal.cache.InternalCache;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.cache.CacheRequest;, +import okhttp3.internal.http.HttpHeaders;, +import okhttp3.internal.platform.Platform;, +    if (HttpHeaders.hasVaryAll(responseHeaders)) {, +    Set<String> varyFields = HttpHeaders.varyFields(responseHeaders);, +    if (HttpHeaders.hasVaryAll(responseHeaders)) {, +      varyHeaders = HttpHeaders.varyHeaders(request.headers(), responseHeaders);, +        return HttpHeaders.contentLength(okHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.internal.platform.Platform;, +import static okhttp3.internal.platform.Platform.INFO;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.platform.Platform;, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +    okhttp3.internal.cache.CacheRequest okCacheRequest =, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +import okhttp3.internal.cache.CacheRequest;, +import okhttp3.internal.cache.CacheStrategy;, +import okhttp3.internal.cache.InternalCache;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.cache.CacheRequest;, +import okhttp3.internal.http.HttpHeaders;, +import okhttp3.internal.platform.Platform;, +    if (HttpHeaders.hasVaryAll(responseHeaders)) {, +    Set<String> varyFields = HttpHeaders.varyFields(responseHeaders);, +    if (HttpHeaders.hasVaryAll(responseHeaders)) {, +      varyHeaders = HttpHeaders.varyHeaders(request.headers(), responseHeaders);, +        return HttpHeaders.contentLength(okHeaders);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.internal.cache.InternalCache;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.internal.platform.Platform;, +import static okhttp3.internal.platform.Platform.INFO;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.platform.Platform;, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +    okhttp3.internal.cache.CacheRequest okCacheRequest =, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java, +import okhttp3.internal.cache.CacheRequest;, +import okhttp3.internal.cache.CacheStrategy;, +import okhttp3.internal.cache.InternalCache;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.cache.CacheRequest;, +import okhttp3.internal.http.HttpHeaders;, +import okhttp3.internal.platform.Platform;, +    if (HttpHeaders.hasVaryAll(responseHeaders)) {, +    Set<String> varyFields = HttpHeaders.varyFields(responseHeaders);, +    if (HttpHeaders.hasVaryAll(responseHeaders)) {, +      varyHeaders = HttpHeaders.varyHeaders(request.headers(), responseHeaders);, +        return HttpHeaders.contentLength(okHeaders);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import okhttp3.internal.cache.InternalCache;, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.internal.cache.InternalCache;, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import okhttp3.internal.platform.Platform;, +import static okhttp3.internal.platform.Platform.INFO;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.platform.Platform;, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +    okhttp3.internal.cache.CacheRequest okCacheRequest =, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java]
[+++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/mockwebserver/gradle.properties, +POM_ARTIFACT_ID=mockwebserver, +POM_NAME=mockwebserver, +POM_PACKAGING=jar, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/mockwebserver/gradle.properties, +POM_ARTIFACT_ID=mockwebserver, +POM_NAME=mockwebserver, +POM_PACKAGING=jar, +++ b/okcurl/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/mockwebserver/gradle.properties, +POM_ARTIFACT_ID=mockwebserver, +POM_NAME=mockwebserver, +POM_PACKAGING=jar, +++ b/okcurl/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/okcurl/gradle.properties, +POM_ARTIFACT_ID=okcurl, +POM_NAME=okcurl, +POM_PACKAGING=jar, +++ b/.buildscript/deploy_snapshot.sh, +  ./gradlew clean uploadArchives, +++ /dev/null, +++ b/.travis.yml, +    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=", +    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=", +++ b/gradle.properties, +VERSION_NAME=4.0.0-SNAPSHOT, +++ b/mockwebserver/build.gradle, +apply plugin: 'com.vanniktech.maven.publish', +, +++ b/mockwebserver/gradle.properties, +POM_ARTIFACT_ID=mockwebserver, +POM_NAME=mockwebserver, +POM_PACKAGING=jar]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.spdy;, +, +import com.squareup.okhttp.internal.Util;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.Okio;, +import okio.Source;, +import org.junit.After;, +import org.junit.Test;, +, +import static com.squareup.okhttp.internal.Util.headerEntries;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.CANCEL;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.PROTOCOL_ERROR;, +import static com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE;, +import static com.squareup.okhttp.internal.spdy.Settings.PERSIST_VALUE;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_DATA;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_PING;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_RST_STREAM;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_SETTINGS;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_WINDOW_UPDATE;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class Http2ConnectionTest {, +  private static final Variant HTTP_2 = new Http20Draft12();, +  private final MockSpdyPeer peer = new MockSpdyPeer();, +, +  @After public void tearDown() throws Exception {, +    peer.close();, +  }, +, +  @Test public void serverPingsClientHttp2() throws Exception {, +    peer.setVariantAndClient(HTTP_2, false);, +, +    // write the mocking script, +    peer.sendFrame().ping(false, 2, 3);, +    peer.acceptFrame(); // PING, +    peer.play();, +, +    // play it back, +    connection(peer, HTTP_2);, +, +    // verify the peer received what was expected, +    MockSpdyPeer.InFrame ping = peer.takeFrame();, +    assertEquals(TYPE_PING, ping.type);, +    assertEquals(0, ping.streamId);, +    assertEquals(2, ping.payload1);, +    assertEquals(3, ping.payload2);, +    assertTrue(ping.ack);, +  }, +, +  @Test public void clientPingsServerHttp2() throws Exception {, +    peer.setVariantAndClient(HTTP_2, false);, +, +    // write the mocking script, +    peer.acceptFrame(); // PING, +    peer.sendFrame().ping(true, 1, 5);, +    peer.play();, +, +    // play it back, +    SpdyConnection connection = connection(peer, HTTP_2);, +    Ping ping = connection.ping();, +    assertTrue(ping.roundTripTime() > 0);, +    assertTrue(ping.roundTripTime() < TimeUnit.SECONDS.toNanos(1));, +, +    // verify the peer received what was expected, +    MockSpdyPeer.InFrame pingFrame = peer.takeFrame();, +    assertEquals(0, pingFrame.streamId);, +    assertEquals(1, pingFrame.payload1);, +    assertEquals(0x4f4b6f6b, pingFrame.payload2); // connection.ping() sets this., +    assertFalse(pingFrame.ack);, +  }, +, +  @Test public void peerHttp2ServerLowersInitialWindowSize() throws Exception {, +    peer.setVariantAndClient(HTTP_2, false);]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.framed.Settings;, +  private Settings settings;, +   * When {@linkplain MockWebServer#setProtocols(java.util.List) protocols}, +   * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2 HTTP/2}, this, +   * pushes {@code settings} before writing the response., +   */, +  public MockResponse withSettings(Settings settings) {, +    this.settings = settings;, +    return this;, +  }, +, +  public Settings getSettings() {, +    return settings;, +  }, +, +  /**, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.framed.Settings;, +  private Settings settings;, +   * When {@linkplain MockWebServer#setProtocols(java.util.List) protocols}, +   * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2 HTTP/2}, this, +   * pushes {@code settings} before writing the response., +   */, +  public MockResponse withSettings(Settings settings) {, +    this.settings = settings;, +    return this;, +  }, +, +  public Settings getSettings() {, +    return settings;, +  }, +, +  /**, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.framed.Settings;, +      Settings settings = response.getSettings();, +      if (settings != null) {, +        stream.getConnection().setSettings(settings);, +      }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.framed.Settings;, +  private Settings settings;, +   * When {@linkplain MockWebServer#setProtocols(java.util.List) protocols}, +   * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2 HTTP/2}, this, +   * pushes {@code settings} before writing the response., +   */, +  public MockResponse withSettings(Settings settings) {, +    this.settings = settings;, +    return this;, +  }, +, +  public Settings getSettings() {, +    return settings;, +  }, +, +  /**, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.framed.Settings;, +      Settings settings = response.getSettings();, +      if (settings != null) {, +        stream.getConnection().setSettings(settings);, +      }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HttpOverHttp2Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.framed;, +, +import com.squareup.okhttp.Headers;, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.PushPromise;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import java.net.HttpURLConnection;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class HttpOverHttp2Test extends HttpOverSpdyTest {, +, +  public HttpOverHttp2Test() {, +    super(Protocol.HTTP_2);, +    this.hostHeader = ":authority";, +  }, +]
[+++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.0.2</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.0</version>, +        <version>3.0.2</version>, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/okcurl/pom.xml, +        <version>3.0.0</version>, +        <version>1.1.0</version>, +        <version>3.0.2</version>, +++ b/okhttp-android-support/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-apache/pom.xml, +        <version>2.10.4</version>, +        <version>3.0.2</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +        <version>3.0.2</version>, +++ b/okhttp-hpacktests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +        <version>2.10.4</version>]
[+++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.get().cancel();, +      call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.get().cancel();, +      call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +        return ((RealCall) call).streamAllocation();, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.get().cancel();, +      call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +        return ((RealCall) call).streamAllocation();, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.CallServerInterceptor;, +import okhttp3.internal.http.RetryAndFollowUpInterceptor;, +  private final RetryAndFollowUpInterceptor retryAndFollowUpInterceptor;, +    this.retryAndFollowUpInterceptor = new RetryAndFollowUpInterceptor(client);, +    this.retryAndFollowUpInterceptor.setForWebSocket(true);, +    retryAndFollowUpInterceptor.cancel();, +    return retryAndFollowUpInterceptor.isCanceled();, +  }, +, +  StreamAllocation streamAllocation() {, +    return retryAndFollowUpInterceptor.streamAllocation();, +        if (retryAndFollowUpInterceptor.isCanceled()) {, +    String string = retryAndFollowUpInterceptor.isCanceled() ? "canceled call" : "call";, +    interceptors.add(retryAndFollowUpInterceptor);, +    if (!retryAndFollowUpInterceptor.isForWebSocket()) {, +    interceptors.add(new CallServerInterceptor(, +        retryAndFollowUpInterceptor.isForWebSocket()));, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.get().cancel();, +      call.get().cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +        return ((RealCall) call).streamAllocation();, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.CallServerInterceptor;, +import okhttp3.internal.http.RetryAndFollowUpInterceptor;, +  private final RetryAndFollowUpInterceptor retryAndFollowUpInterceptor;, +    this.retryAndFollowUpInterceptor = new RetryAndFollowUpInterceptor(client);, +    this.retryAndFollowUpInterceptor.setForWebSocket(true);, +    retryAndFollowUpInterceptor.cancel();, +    return retryAndFollowUpInterceptor.isCanceled();, +  }, +, +  StreamAllocation streamAllocation() {, +    return retryAndFollowUpInterceptor.streamAllocation();, +        if (retryAndFollowUpInterceptor.isCanceled()) {, +    String string = retryAndFollowUpInterceptor.isCanceled() ? "canceled call" : "call";, +    interceptors.add(retryAndFollowUpInterceptor);, +    if (!retryAndFollowUpInterceptor.isForWebSocket()) {, +    interceptors.add(new CallServerInterceptor(, +        retryAndFollowUpInterceptor.isForWebSocket()));, +++ b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.http;, +, +import java.io.IOException;, +import java.net.ProtocolException;, +import okhttp3.Interceptor;, +import okhttp3.Request;, +import okhttp3.Response;, +import okio.BufferedSink;, +import okio.Okio;, +import okio.Sink;, +, +/** This is the last interceptor in the chain. It makes a network call to the server. */, +public final class CallServerInterceptor implements Interceptor {, +  private final boolean forWebSocket;, +, +  public CallServerInterceptor(boolean forWebSocket) {, +    this.forWebSocket = forWebSocket;, +  }, +, +  @Override public Response intercept(Chain chain) throws IOException {, +    HttpStream httpStream = ((RealInterceptorChain) chain).httpStream();, +    StreamAllocation streamAllocation = ((RealInterceptorChain) chain).streamAllocation();, +    Request request = chain.request();, +, +    long sentRequestMillis = System.currentTimeMillis();, +    httpStream.writeRequestHeaders(request);, +, +    if (HttpMethod.permitsRequestBody(request.method()) && request.body() != null) {, +      Sink requestBodyOut = httpStream.createRequestBody(request, request.body().contentLength());, +      BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  @Option(, +      name = "--call-timeout",, +      description = "Maximum time allowed for the entire call (seconds)"), +  public int callTimeout = DEFAULT_TIMEOUT;, +, +    if (callTimeout != DEFAULT_TIMEOUT) {, +      builder.callTimeout(callTimeout, SECONDS);, +    }, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  @Option(, +      name = "--call-timeout",, +      description = "Maximum time allowed for the entire call (seconds)"), +  public int callTimeout = DEFAULT_TIMEOUT;, +, +    if (callTimeout != DEFAULT_TIMEOUT) {, +      builder.callTimeout(callTimeout, SECONDS);, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +  final String hostname;, +    hostname = builder.hostname;, +        Util.threadFactory(Util.format("OkHttp %s Writer", hostname), false));, +        Util.threadFactory(Util.format("OkHttp %s Push Observer", hostname), true));, +      writerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", hostname, streamId) {, +          new NamedRunnable("OkHttp Window Update %s stream %d", hostname, streamId) {, +      super("OkHttp %s ping %08x%08x", hostname, payload1, payload2);, +    String hostname;, +      return socket(socket, ((InetSocketAddress) socket.getRemoteSocketAddress()).getHostName(),, +        Socket socket, String hostname, BufferedSource source, BufferedSink sink) {, +      this.hostname = hostname;, +      super("OkHttp %s", hostname);, +          listenerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", hostname, streamId) {, +                Platform.get().log(INFO, "Http2Connection.Listener failure for " + hostname, e);, +        listenerExecutor.execute(new NamedRunnable("OkHttp %s settings", hostname) {, +        writerExecutor.execute(new NamedRunnable("OkHttp %s ACK Settings", hostname) {, +      pushExecutorExecute(new NamedRunnable("OkHttp %s Push Request[%s]", hostname, streamId) {, +      pushExecutorExecute(new NamedRunnable("OkHttp %s Push Headers[%s]", hostname, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Data[%s]", hostname, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Reset[%s]", hostname, streamId) {, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  @Option(, +      name = "--call-timeout",, +      description = "Maximum time allowed for the entire call (seconds)"), +  public int callTimeout = DEFAULT_TIMEOUT;, +, +    if (callTimeout != DEFAULT_TIMEOUT) {, +      builder.callTimeout(callTimeout, SECONDS);, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +  final String hostname;, +    hostname = builder.hostname;, +        Util.threadFactory(Util.format("OkHttp %s Writer", hostname), false));, +        Util.threadFactory(Util.format("OkHttp %s Push Observer", hostname), true));, +      writerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", hostname, streamId) {, +          new NamedRunnable("OkHttp Window Update %s stream %d", hostname, streamId) {, +      super("OkHttp %s ping %08x%08x", hostname, payload1, payload2);, +    String hostname;, +      return socket(socket, ((InetSocketAddress) socket.getRemoteSocketAddress()).getHostName(),, +        Socket socket, String hostname, BufferedSource source, BufferedSink sink) {, +      this.hostname = hostname;, +      super("OkHttp %s", hostname);, +          listenerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", hostname, streamId) {, +                Platform.get().log(INFO, "Http2Connection.Listener failure for " + hostname, e);, +        listenerExecutor.execute(new NamedRunnable("OkHttp %s settings", hostname) {, +        writerExecutor.execute(new NamedRunnable("OkHttp %s ACK Settings", hostname) {, +      pushExecutorExecute(new NamedRunnable("OkHttp %s Push Request[%s]", hostname, streamId) {, +      pushExecutorExecute(new NamedRunnable("OkHttp %s Push Headers[%s]", hostname, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Data[%s]", hostname, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Reset[%s]", hostname, streamId) {, +++ /dev/null, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  @Option(, +      name = "--call-timeout",, +      description = "Maximum time allowed for the entire call (seconds)"), +  public int callTimeout = DEFAULT_TIMEOUT;, +, +    if (callTimeout != DEFAULT_TIMEOUT) {, +      builder.callTimeout(callTimeout, SECONDS);, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +  final String hostname;, +    hostname = builder.hostname;, +        Util.threadFactory(Util.format("OkHttp %s Writer", hostname), false));, +        Util.threadFactory(Util.format("OkHttp %s Push Observer", hostname), true));, +      writerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", hostname, streamId) {, +          new NamedRunnable("OkHttp Window Update %s stream %d", hostname, streamId) {, +      super("OkHttp %s ping %08x%08x", hostname, payload1, payload2);, +    String hostname;, +      return socket(socket, ((InetSocketAddress) socket.getRemoteSocketAddress()).getHostName(),, +        Socket socket, String hostname, BufferedSource source, BufferedSink sink) {, +      this.hostname = hostname;, +      super("OkHttp %s", hostname);, +          listenerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", hostname, streamId) {, +                Platform.get().log(INFO, "Http2Connection.Listener failure for " + hostname, e);, +        listenerExecutor.execute(new NamedRunnable("OkHttp %s settings", hostname) {, +        writerExecutor.execute(new NamedRunnable("OkHttp %s ACK Settings", hostname) {, +      pushExecutorExecute(new NamedRunnable("OkHttp %s Push Request[%s]", hostname, streamId) {, +      pushExecutorExecute(new NamedRunnable("OkHttp %s Push Headers[%s]", hostname, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Data[%s]", hostname, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Reset[%s]", hostname, streamId) {]
[+++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +    return (installedCache.directory().equals(directory), +        && installedCache.maxSize() == maxSize, +    return delegate.size();, +    return delegate.maxSize();, +    return delegate.networkCount();, +    return delegate.hitCount();, +    return delegate.requestCount();, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +    return (installedCache.directory().equals(directory), +        && installedCache.maxSize() == maxSize, +    return delegate.size();, +    return delegate.maxSize();, +    return delegate.networkCount();, +    return delegate.hitCount();, +    return delegate.requestCount();, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    assertEquals(1, cache.writeSuccessCount());, +    assertEquals(0, cache.writeAbortCount());, +    assertEquals(1, cache.writeSuccessCount());, +    assertEquals(0, cache.writeAbortCount());, +    assertEquals(2, cache.requestCount());, +    assertEquals(1, cache.hitCount());, +    assertEquals(2, cache.requestCount());, +    assertEquals(1, cache.networkCount());, +    assertEquals(1, cache.hitCount());, +    assertEquals(4, cache.requestCount()); // 2 requests + 2 redirects, +    assertEquals(2, cache.networkCount());, +    assertEquals(2, cache.hitCount());, +    assertEquals(4, cache.requestCount()); // 2 direct + 2 redirect = 4, +    assertEquals(2, cache.hitCount());, +    assertEquals(4, cache.requestCount()); // 2 direct + 2 redirect = 4, +    assertEquals(2, cache.hitCount());, +    assertEquals(1, cache.writeAbortCount());, +    assertEquals(0, cache.writeSuccessCount());, +    assertEquals(1, cache.writeAbortCount());, +    assertEquals(1, cache.writeSuccessCount());, +    assertEquals(1, cache.writeAbortCount());, +    assertEquals(0, cache.writeSuccessCount());, +    assertEquals(1, cache.writeAbortCount());, +    assertEquals(1, cache.writeSuccessCount());, +    assertEquals(1, client.connectionPool().idleConnectionCount());, +    assertEquals(1, cache.requestCount());, +    assertEquals(0, cache.networkCount());, +    assertEquals(0, cache.hitCount());, +    assertEquals(2, cache.requestCount());, +    assertEquals(1, cache.networkCount());, +    assertEquals(1, cache.hitCount());, +    assertEquals(2, cache.requestCount());, +    assertEquals(1, cache.networkCount());, +    assertEquals(0, cache.hitCount());, +    assertEquals(2, cache.requestCount());, +    assertEquals(1, cache.networkCount());, +    assertEquals(0, cache.hitCount());, +    assertEquals(1, cache.requestCount());, +    assertEquals(1, cache.networkCount());, +    assertEquals(0, cache.hitCount());, +    assertEquals(3, cache.requestCount());, +    assertEquals(3, cache.networkCount());, +    assertEquals(0, cache.hitCount());, +    assertEquals(1, cache.requestCount());, +    assertEquals(1, cache.networkCount());, +    assertEquals(0, cache.hitCount());, +    assertEquals(3, cache.requestCount());, +    assertEquals(3, cache.networkCount());, +    assertEquals(2, cache.hitCount());, +    assertEquals(1, cache.requestCount());, +    assertEquals(1, cache.networkCount());, +    assertEquals(0, cache.hitCount());, +    assertEquals(3, cache.requestCount());, +    assertEquals(1, cache.networkCount());, +    assertEquals(2, cache.hitCount());, +    writeFile(cache.directory(), urlKey + ".0", entryMetadata);, +    writeFile(cache.directory(), urlKey + ".1", entryBody);, +    writeFile(cache.directory(), "journal", journalBody);, +    cache = new Cache(cache.directory(), Integer.MAX_VALUE, fileSystem);, +    writeFile(cache.directory(), urlKey + ".0", entryMetadata);, +    writeFile(cache.directory(), urlKey + ".1", entryBody);, +    writeFile(cache.directory(), "journal", journalBody);, +    cache = new Cache(cache.directory(), Integer.MAX_VALUE, fileSystem);, +    writeFile(cache.directory(), urlKey + ".0", entryMetadata);, +    writeFile(cache.directory(), urlKey + ".1", entryBody);, +    writeFile(cache.directory(), "journal", journalBody);, +    cache = new Cache(cache.directory(), Integer.MAX_VALUE, fileSystem);, +    writeFile(cache.directory(), urlKey + ".0", entryMetadata);, +    writeFile(cache.directory(), urlKey + ".1", entryBody);, +    writeFile(cache.directory(), "journal", journalBody);, +    cache = new Cache(cache.directory(), Integer.MAX_VALUE, fileSystem);, +    assertEquals(0, client.cache().size());, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java, +    return (installedCache.directory().equals(directory), +        && installedCache.maxSize() == maxSize, +    return delegate.size();, +    return delegate.maxSize();, +    return delegate.networkCount();, +    return delegate.hitCount();, +    return delegate.requestCount();, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    assertEquals(1, cache.writeSuccessCount());, +    assertEquals(0, cache.writeAbortCount());]
[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +  @Test public void spaceInName() throws Exception {, +    assertEquals("a b", Cookie.parse(url, "a b=cd").name());, +  }, +, +  @Test public void spaceInValue() throws Exception {, +    assertEquals("c d", Cookie.parse(url, "ab=c d").value());, +  }, +, +  @Test public void invalidCharacters() throws Exception {, +    assertEquals(null, Cookie.parse(url, "a\u0000b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0000d"));, +    assertEquals(null, Cookie.parse(url, "a\u0001b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0001d"));, +    assertEquals(null, Cookie.parse(url, "a\u0009b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0009d"));, +    assertEquals(null, Cookie.parse(url, "a\u001fb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u001fd"));, +    assertEquals(null, Cookie.parse(url, "a\u007fb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u007fd"));, +    assertEquals(null, Cookie.parse(url, "a\u0080b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0080d"));, +    assertEquals(null, Cookie.parse(url, "a\u00ffb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u00ffd"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +  @Test public void spaceInName() throws Exception {, +    assertEquals("a b", Cookie.parse(url, "a b=cd").name());, +  }, +, +  @Test public void spaceInValue() throws Exception {, +    assertEquals("c d", Cookie.parse(url, "ab=c d").value());, +  }, +, +  @Test public void invalidCharacters() throws Exception {, +    assertEquals(null, Cookie.parse(url, "a\u0000b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0000d"));, +    assertEquals(null, Cookie.parse(url, "a\u0001b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0001d"));, +    assertEquals(null, Cookie.parse(url, "a\u0009b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0009d"));, +    assertEquals(null, Cookie.parse(url, "a\u001fb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u001fd"));, +    assertEquals(null, Cookie.parse(url, "a\u007fb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u007fd"));, +    assertEquals(null, Cookie.parse(url, "a\u0080b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0080d"));, +    assertEquals(null, Cookie.parse(url, "a\u00ffb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u00ffd"));, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Call.java, +   * avoid leaking resources callers must {@linkplain ResponseBody close the response body}., +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +  @Test public void spaceInName() throws Exception {, +    assertEquals("a b", Cookie.parse(url, "a b=cd").name());, +  }, +, +  @Test public void spaceInValue() throws Exception {, +    assertEquals("c d", Cookie.parse(url, "ab=c d").value());, +  }, +, +  @Test public void invalidCharacters() throws Exception {, +    assertEquals(null, Cookie.parse(url, "a\u0000b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0000d"));, +    assertEquals(null, Cookie.parse(url, "a\u0001b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0001d"));, +    assertEquals(null, Cookie.parse(url, "a\u0009b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0009d"));, +    assertEquals(null, Cookie.parse(url, "a\u001fb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u001fd"));, +    assertEquals(null, Cookie.parse(url, "a\u007fb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u007fd"));, +    assertEquals(null, Cookie.parse(url, "a\u0080b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0080d"));, +    assertEquals(null, Cookie.parse(url, "a\u00ffb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u00ffd"));, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Call.java, +   * avoid leaking resources callers must {@linkplain ResponseBody close the response body}., +++ b/okhttp/src/main/java/okhttp3/Cookie.java, +import static okhttp3.internal.Util.indexOfControlOrNonAscii;, +    if (cookieName.isEmpty() || indexOfControlOrNonAscii(cookieName) != -1) return null;, +    if (indexOfControlOrNonAscii(cookieValue) != -1) return null;, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +  @Test public void spaceInName() throws Exception {, +    assertEquals("a b", Cookie.parse(url, "a b=cd").name());, +  }, +, +  @Test public void spaceInValue() throws Exception {, +    assertEquals("c d", Cookie.parse(url, "ab=c d").value());, +  }, +, +  @Test public void invalidCharacters() throws Exception {, +    assertEquals(null, Cookie.parse(url, "a\u0000b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0000d"));, +    assertEquals(null, Cookie.parse(url, "a\u0001b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0001d"));]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp.internal.framed;, +, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.internal.Platform;, +import com.squareup.okhttp.internal.SslContextBuilder;, +import com.squareup.okhttp.internal.Util;, +import java.io.File;, +import java.io.IOException;, +import java.net.ProtocolException;, +import java.net.ServerSocket;, +import java.net.Socket;, +import java.util.Arrays;, +import java.util.List;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import okio.BufferedSink;, +import okio.Okio;, +import okio.Source;, +, +/** A basic SPDY/HTTP_2 server that serves the contents of a local directory. */, +public final class FramedServer implements IncomingStreamHandler {, +  static final Logger logger = Logger.getLogger(FramedServer.class.getName());, +, +  private final List<Protocol> framedProtocols =, +      Util.immutableList(Protocol.HTTP_2, Protocol.SPDY_3);, +, +  private final File baseDirectory;, +  private final SSLSocketFactory sslSocketFactory;, +, +  public FramedServer(File baseDirectory, SSLSocketFactory sslSocketFactory) {, +    this.baseDirectory = baseDirectory;, +    this.sslSocketFactory = sslSocketFactory;, +  }, +, +  private void run() throws Exception {, +    ServerSocket serverSocket = new ServerSocket(8888);, +    serverSocket.setReuseAddress(true);, +, +    while (true) {, +      Socket socket = null;, +      try {, +        socket = serverSocket.accept();, +, +        SSLSocket sslSocket = doSsl(socket);, +        String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +        Protocol protocol = protocolString != null ? Protocol.get(protocolString) : null;, +        if (protocol == null || !framedProtocols.contains(protocol)) {, +          throw new ProtocolException("Protocol " + protocol + " unsupported");, +        }, +        FramedConnection framedConnection = new FramedConnection.Builder(false, sslSocket), +            .protocol(protocol), +            .handler(this), +            .build();, +        framedConnection.sendConnectionPreface();, +      } catch (IOException e) {, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        Util.closeQuietly(socket);, +      } catch (Exception e) {, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +        Util.closeQuietly(socket);, +      }, +    }, +  }, +, +  private SSLSocket doSsl(Socket socket) throws IOException {, +    SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(, +        socket, socket.getInetAddress().getHostAddress(), socket.getPort(), true);, +    sslSocket.setUseClientMode(false);, +    Platform.get().configureTlsExtensions(sslSocket, null, framedProtocols);, +    sslSocket.startHandshake();, +    return sslSocket;, +  }, +, +  @Override public void receive(final FramedStream stream) throws IOException {, +    try {, +      List<Header> requestHeaders = stream.getRequestHeaders();, +      String path = null;, +      for (int i = 0, size = requestHeaders.size(); i < size; i++) {, +        if (requestHeaders.get(i).name.equals(Header.TARGET_PATH)) {, +          path = requestHeaders.get(i).value.utf8();, +          break;]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +          .commonName(InetAddress.getByName("localhost").getCanonicalHostName()), +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +          .commonName(InetAddress.getByName("localhost").getCanonicalHostName()), +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    return inetSocketAddress.getAddress().getCanonicalHostName();, +    InetSocketAddress address = new InetSocketAddress(inetSocketAddress.getAddress(), +            .getCanonicalHostName(), getPort());, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +          .commonName(InetAddress.getByName("localhost").getCanonicalHostName()), +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    return inetSocketAddress.getAddress().getCanonicalHostName();, +    InetSocketAddress address = new InetSocketAddress(inetSocketAddress.getAddress(), +            .getCanonicalHostName(), getPort());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.net.InetAddress;, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +          .commonName(InetAddress.getByName("localhost").getCanonicalHostName()), +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    return inetSocketAddress.getAddress().getCanonicalHostName();, +    InetSocketAddress address = new InetSocketAddress(inetSocketAddress.getAddress(), +            .getCanonicalHostName(), getPort());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.net.InetAddress;, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    assertEquals(server.getHostName(), dnsStart.domainName);, +    assertEquals(server.getHostName(), dnsEnd.domainName);, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +          .commonName(InetAddress.getByName("localhost").getCanonicalHostName()), +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    return inetSocketAddress.getAddress().getCanonicalHostName();, +    InetSocketAddress address = new InetSocketAddress(inetSocketAddress.getAddress(), +            .getCanonicalHostName(), getPort());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.net.InetAddress;, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    assertEquals(server.getHostName(), dnsStart.domainName);, +    assertEquals(server.getHostName(), dnsEnd.domainName);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +    assertEquals(new X500Principal("CN=" + server.getHostName()), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=" + server.getHostName()), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=" + server.getHostName()), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=" + server.getHostName()), response.handshake().peerPrincipal());]
[+++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +++ b/samples/crawler/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.1-SNAPSHOT</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import java.net.InetSocketAddress;, +import java.net.Proxy;, +import okhttp3.internal.RecordingOkAuthenticator;, +import org.junit.After;, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client;, +  private SocksProxy socksProxy;, +, +  @Before public void setUp() throws IOException {, +    client = defaultClient().newBuilder(), +  @After public void tearDown() throws Exception {, +    if (socksProxy != null) {, +      socksProxy.shutdown();, +    }, +  }, +, +    List<Class<?>> expectedEvents = Arrays.asList(, +        DnsStart.class, DnsEnd.class,, +        ConnectStart.class, ConnectEnd.class);, +    enableTlsWithTunnel(false);, +        ConnectStart.class, SecureConnectStart.class,, +        SecureConnectEnd.class, ConnectEnd.class);, +  @Test public void successfulConnect() throws IOException {, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +    InetSocketAddress expectedAddress = new InetSocketAddress(address, server.getPort());, +, +    ConnectStart connectStart = listener.removeUpToEvent(ConnectStart.class);, +    assertSame(call, connectStart.call);, +    assertEquals(expectedAddress, connectStart.inetSocketAddress);, +    assertEquals(Proxy.NO_PROXY, connectStart.proxy);, +, +    ConnectEnd connectEnd = listener.removeUpToEvent(ConnectEnd.class);, +    assertSame(call, connectEnd.call);, +    assertEquals(expectedAddress, connectEnd.inetSocketAddress);, +    assertEquals(Protocol.HTTP_1_1, connectEnd.protocol);, +    assertNull(connectEnd.throwable);, +  }, +, +  @Test public void failedConnect() throws UnknownHostException {, +    enableTlsWithTunnel(false);, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +    InetSocketAddress expectedAddress = new InetSocketAddress(address, server.getPort());, +, +    ConnectStart connectStart = listener.removeUpToEvent(ConnectStart.class);, +    assertSame(call, connectStart.call);, +    assertEquals(expectedAddress, connectStart.inetSocketAddress);, +    assertEquals(Proxy.NO_PROXY, connectStart.proxy);, +, +    ConnectEnd connectEnd = listener.removeUpToEvent(ConnectEnd.class);, +    assertSame(call, connectEnd.call);, +    assertEquals(expectedAddress, connectEnd.inetSocketAddress);, +    assertNull(connectEnd.protocol);, +    assertTrue(connectEnd.throwable instanceof IOException);, +  }, +, +  @Test public void multipleConnectsForSingleCall() throws IOException {, +    enableTlsWithTunnel(false);, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));, +    server.enqueue(new MockResponse());, +, +    client = client.newBuilder(), +        .dns(new DoubleInetAddressDns()), +        .build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    listener.removeUpToEvent(ConnectStart.class);, +    listener.removeUpToEvent(ConnectEnd.class);, +    listener.removeUpToEvent(ConnectStart.class);, +    listener.removeUpToEvent(ConnectEnd.class);, +  }, +]
[+++ b/pom.xml, +        <artifactId>maven-release-plugin</artifactId>, +        <version>2.4.2</version>, +        <dependencies>, +          <dependency>, +            <groupId>org.apache.maven.scm</groupId>, +            <artifactId>maven-scm-provider-gitexe</artifactId>, +            <version>1.9</version>, +          </dependency>, +        </dependencies>, +        <configuration>, +          <autoVersionSubmodules>true</autoVersionSubmodules>, +        </configuration>, +      </plugin>, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, +  public MockDuplexResponseBody requestIOException() {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        requestBody.exhausted();, +        fail();, +      } catch (IOException expected) {, +      }, +    });, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, +  public MockDuplexResponseBody requestIOException() {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        requestBody.exhausted();, +        fail();, +      } catch (IOException expected) {, +      }, +    });, +    return this;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import java.util.ArrayList;, +import java.util.List;, +import okhttp3.internal.Util;, +    List<Response> responsesNotClosed = new ArrayList<>();, +, +          responsesNotClosed.add(response);, +    try (Response response = call.execute()) {, +      assertEquals("unrelated response body!", response.body().string());, +    }, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(0, server.takeRequest().getSequenceNumber()); // No connection reuse., +, +    for (Response response : responsesNotClosed) {, +      Util.closeQuietly(response);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, +  public MockDuplexResponseBody requestIOException() {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        requestBody.exhausted();, +        fail();, +      } catch (IOException expected) {, +      }, +    });, +    return this;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import java.util.ArrayList;, +import java.util.List;, +import okhttp3.internal.Util;, +    List<Response> responsesNotClosed = new ArrayList<>();, +, +          responsesNotClosed.add(response);, +    try (Response response = call.execute()) {, +      assertEquals("unrelated response body!", response.body().string());, +    }, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(0, server.takeRequest().getSequenceNumber()); // No connection reuse., +, +    for (Response response : responsesNotClosed) {, +      Util.closeQuietly(response);, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import java.net.HttpURLConnection;, +import okhttp3.internal.RecordingOkAuthenticator;, +  /**, +   * Duplex calls that have follow-ups are weird. By the time we know there's a follow-up we've, +   * already split off another thread to stream the request body. Because we permit at most one, +   * exchange at a time we break the request stream out from under that writer., +   */, +  @Test public void duplexWithRedirect() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +, +    MockDuplexResponseBody mockDuplexResponseBody = enqueueResponseWithBody(, +        new MockResponse(), +            .clearHeaders(), +            .setResponseCode(HttpURLConnection.HTTP_MOVED_PERM), +            .addHeader("Location: /b"),, +        new MockDuplexResponseBody(), +            .sendResponse("/a has moved!\n"), +            .requestIOException(), +            .exhaustResponse());, +    server.enqueue(new MockResponse(), +        .setBody("this is /b"));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .post(new AsyncRequestBody()), +        .build());, +, +    try (Response response = call.execute()) {]
[+++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/okhttp-android-support/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/okhttp-android-support/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okhttp-apache/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/mockwebserver/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okcurl/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/okhttp-android-support/pom.xml, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +++ b/okhttp-apache/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.4.0-SNAPSHOT</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import java.util.ArrayDeque;, +import okio.Utf8;, +    assertEquals(headerEntries("a", "android"), stream.takeHeaders());, +    assertEquals(headerEntries("a", "android"), stream.takeHeaders());, +  static final class RecordingHeadersListener implements Header.Listener {, +    final ArrayDeque<Header> receivedHeaders = new ArrayDeque<>();, +, +    @Override public void onHeaders(List<Header> headers) {, +      for (Header header : headers) {, +        if (header == null) continue; // TODO: deliver Headers, not List<Header>, +        receivedHeaders.add(header);, +      }, +    }, +, +    public List<Header> takeAll() {, +      List<Header> result = new ArrayList<>();, +      for (Header header; (header = receivedHeaders.poll()) != null; ) {, +        result.add(header);, +      }, +      return result;, +    }, +  }, +, +  @Test public void clientReadsHeadersDataHeadersData() throws Exception {, +    peer.sendFrame().settings(new Settings());, +    peer.acceptFrame(); // ACK, +    peer.acceptFrame(); // SYN_STREAM, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().data(false, 3, new Buffer().writeUtf8("robot"), 5);, +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("cyborg"), 6);, +    peer.acceptFrame(); // PING, +    peer.sendFrame().ping(true, 1, 0); // PONG, +    peer.play();, +, +    RecordingHeadersListener headersListener = new RecordingHeadersListener();, +, +    Http2Connection connection = connect(peer);, +    Http2Stream stream = connection.newStream(headerEntries(), false);, +    stream.setHeadersListener(headersListener);, +    assertStreamData("robotcyborg", stream.getSource());, +    assertEquals(headerEntries("a", "android", "b", "banana"), headersListener.takeAll());, +    connection.writePingAndAwaitPong();, +    assertEquals(0, connection.openStreamCount());, +  }, +, +  @Test public void clientReadsHeadersDataPingPongHeadersData() throws Exception {, +    peer.sendFrame().settings(new Settings());, +    peer.acceptFrame(); // ACK, +    peer.acceptFrame(); // SYN_STREAM, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().data(false, 3, new Buffer().writeUtf8("robot"), 5);, +    peer.acceptFrame(); // PING, +    peer.sendFrame().ping(true, 1, 0); // PONG, +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("cyborg"), 6);, +    peer.acceptFrame(); // PING, +    peer.sendFrame().ping(true, 1, 0); // PONG, +    peer.play();, +, +    RecordingHeadersListener headersListener = new RecordingHeadersListener();, +, +    Http2Connection connection = connect(peer);, +    Http2Stream stream = connection.newStream(headerEntries(), false);, +    stream.setHeadersListener(headersListener);, +    BufferedSource source = Okio.buffer(stream.getSource());, +, +    assertStreamPrefix("robot", source);, +    assertEquals(headerEntries("a", "android"), headersListener.takeAll());, +    connection.writePingAndAwaitPong();, +, +    assertStreamPrefix("cyborg", source);, +    assertEquals(headerEntries("b", "banana"), headersListener.takeAll());, +    connection.writePingAndAwaitPong();, +, +    assertEquals(0, connection.openStreamCount());, +  }]
[+++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9099";, +        webSocket.close(1000, null);, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9099";, +        webSocket.close(1000, null);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.validateCloseCode;, +  private static final long MAX_QUEUE_SIZE = 16 * 1024 * 1024; // 16 MiB., +    validateCloseCode(code);, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9099";, +        webSocket.close(1000, null);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.validateCloseCode;, +  private static final long MAX_QUEUE_SIZE = 16 * 1024 * 1024; // 16 MiB., +    validateCloseCode(code);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +  static String closeCodeExceptionMessage(int code) {, +      return "Code must be in range [1000,5000): " + code;, +      return "Code " + code + " is reserved and may not be used.";, +    } else {, +      return null;, +, +  static void validateCloseCode(int code) {, +    String message = closeCodeExceptionMessage(code);, +    if (message != null) throw new IllegalArgumentException(message);, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9099";, +        webSocket.close(1000, null);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.validateCloseCode;, +  private static final long MAX_QUEUE_SIZE = 16 * 1024 * 1024; // 16 MiB., +    validateCloseCode(code);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +  static String closeCodeExceptionMessage(int code) {, +      return "Code must be in range [1000,5000): " + code;, +      return "Code " + code + " is reserved and may not be used.";, +    } else {, +      return null;, +, +  static void validateCloseCode(int code) {, +    String message = closeCodeExceptionMessage(code);, +    if (message != null) throw new IllegalArgumentException(message);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java, +          String codeExceptionMessage = WebSocketProtocol.closeCodeExceptionMessage(code);, +          if (codeExceptionMessage != null) throw new ProtocolException(codeExceptionMessage);, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9099",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 OK", +"5.15 OK", +"7.1.5 OK", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9099";, +        webSocket.close(1000, null);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.validateCloseCode;, +  private static final long MAX_QUEUE_SIZE = 16 * 1024 * 1024; // 16 MiB., +    validateCloseCode(code);, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +  static String closeCodeExceptionMessage(int code) {, +      return "Code must be in range [1000,5000): " + code;, +      return "Code " + code + " is reserved and may not be used.";, +    } else {, +      return null;, +, +  static void validateCloseCode(int code) {]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +before_install:, + - mvn -version, +jdk:, +  - oraclejdk7, +  - oraclejdk8, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +before_install:, + - mvn -version, +jdk:, +  - oraclejdk7, +  - oraclejdk8, +++ b/CHANGELOG.md, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +before_install:, + - mvn -version, +jdk:, +  - oraclejdk7, +  - oraclejdk8, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +before_install:, + - mvn -version, +jdk:, +  - oraclejdk7, +  - oraclejdk8, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +      <id>npn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.npn</groupId>, +          <artifactId>npn-boot</artifactId>, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +before_install:, + - mvn -version, +jdk:, +  - oraclejdk7, +  - oraclejdk8, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', +++ b/benchmarks/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +      <id>npn-when-jdk7</id>, +          <groupId>org.mortbay.jetty.npn</groupId>, +          <artifactId>npn-boot</artifactId>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.zip.GZIPOutputStream;, +  /** Which ALPN/NPN protocols are in use. Only useful with TLS. */, +    server.play();, +    byte[] body = new byte[bodyByteCount];, +    random.nextBytes(body);, +      body = gzip(body);, +      result.setChunkedBody(new Buffer().write(body), 1024);, +, +  /** Returns a gzipped copy of {@code bytes}. */, +  private byte[] gzip(byte[] bytes) throws IOException {, +    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, +    OutputStream gzippedOut = new GZIPOutputStream(bytesOut);, +    gzippedOut.write(bytes);, +    gzippedOut.close();, +    return bytesOut.toByteArray();, +  }, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +before_install:, + - mvn -version, +jdk:, +  - oraclejdk7, +  - oraclejdk8, +++ b/CHANGELOG.md]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpResponseCacheTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.internal.SslContextBuilder;, +import com.squareup.okhttp.internal.Util;, +import com.squareup.okhttp.internal.http.OkHeaders;, +import com.squareup.okhttp.internal.huc.HttpURLConnectionImpl;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import java.io.BufferedReader;, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +import java.io.OutputStream;, +import java.net.CacheRequest;, +import java.net.CookieHandler;, +import java.net.CookieManager;, +import java.net.HttpCookie;, +import java.net.HttpURLConnection;, +import java.net.ResponseCache;, +import java.net.URISyntaxException;, +import java.net.URL;, +import java.net.URLConnection;, +import java.security.Principal;, +import java.security.cert.Certificate;, +import java.text.DateFormat;, +import java.text.SimpleDateFormat;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Date;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Locale;, +import java.util.TimeZone;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReference;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSession;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.GzipSink;, +import okio.Okio;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AT_END;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +/**, + * Android's HttpResponseCacheTest. This tests both the {@link HttpResponseCache} implementation and, + * the behavior of {@link com.squareup.okhttp.OkResponseCache} classes generally., + */, +public final class HttpResponseCacheTest {, +  private static final HostnameVerifier NULL_HOSTNAME_VERIFIER = new HostnameVerifier() {, +    @Override public boolean verify(String s, SSLSession sslSession) {, +      return true;, +    }, +  };, +, +  private static final SSLContext sslContext = SslContextBuilder.localhost();, +, +  @Rule public TemporaryFolder cacheRule = new TemporaryFolder();, +  @Rule public MockWebServerRule serverRule = new MockWebServerRule();, +  @Rule public MockWebServerRule server2Rule = new MockWebServerRule();, +, +  private final OkHttpClient client = new OkHttpClient();]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private int http2ErrorCode = -1;, +  public int getHttp2ErrorCode() {, +    return http2ErrorCode;, +  }, +, +  /**, +   * Sets the <a href="https://tools.ietf.org/html/rfc7540#section-7">HTTP/2 error code</a> to be, +   * returned when resetting the stream. This is only valid with {@link, +   * SocketPolicy#RESET_STREAM_AT_START}., +   */, +  public MockResponse setHttp2ErrorCode(int http2ErrorCode) {, +    this.http2ErrorCode = http2ErrorCode;, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private int http2ErrorCode = -1;, +  public int getHttp2ErrorCode() {, +    return http2ErrorCode;, +  }, +, +  /**, +   * Sets the <a href="https://tools.ietf.org/html/rfc7540#section-7">HTTP/2 error code</a> to be, +   * returned when resetting the stream. This is only valid with {@link, +   * SocketPolicy#RESET_STREAM_AT_START}., +   */, +  public MockResponse setHttp2ErrorCode(int http2ErrorCode) {, +    this.http2ErrorCode = http2ErrorCode;, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +import static okhttp3.mockwebserver.SocketPolicy.RESET_STREAM_AT_START;, +    RecordedRequest request = new RecordedRequest(, +        null, null, null, -1, null, sequenceNumber, socket);, +    requestQueue.add(request);, +    dispatcher.dispatch(request);, +      MockResponse peekedResponse = dispatcher.peek();, +      if (peekedResponse.getSocketPolicy() == RESET_STREAM_AT_START) {, +        try {, +          dispatchBookkeepingRequest(sequenceNumber.getAndIncrement(), socket);, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, +          return;, +        } catch (InterruptedException e) {, +          throw new InterruptedIOException();, +        }, +      }, +, +      requestCount.incrementAndGet();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private int http2ErrorCode = -1;, +  public int getHttp2ErrorCode() {, +    return http2ErrorCode;, +  }, +, +  /**, +   * Sets the <a href="https://tools.ietf.org/html/rfc7540#section-7">HTTP/2 error code</a> to be, +   * returned when resetting the stream. This is only valid with {@link, +   * SocketPolicy#RESET_STREAM_AT_START}., +   */, +  public MockResponse setHttp2ErrorCode(int http2ErrorCode) {, +    this.http2ErrorCode = http2ErrorCode;, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +import static okhttp3.mockwebserver.SocketPolicy.RESET_STREAM_AT_START;, +    RecordedRequest request = new RecordedRequest(, +        null, null, null, -1, null, sequenceNumber, socket);, +    requestQueue.add(request);, +    dispatcher.dispatch(request);, +      MockResponse peekedResponse = dispatcher.peek();, +      if (peekedResponse.getSocketPolicy() == RESET_STREAM_AT_START) {, +        try {, +          dispatchBookkeepingRequest(sequenceNumber.getAndIncrement(), socket);, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, +          return;, +        } catch (InterruptedException e) {, +          throw new InterruptedIOException();, +        }, +      }, +, +      requestCount.incrementAndGet();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +  NO_RESPONSE,, +, +  /**, +   * Fail HTTP/2 requests without processing them by sending an {@linkplain, +   * MockResponse#getHttp2ErrorCode() HTTP/2 error code}., +   */, +  RESET_STREAM_AT_START, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private int http2ErrorCode = -1;, +  public int getHttp2ErrorCode() {, +    return http2ErrorCode;, +  }, +]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.JavaNetHeaders;, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +    return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(response.headers(), StatusLine.get(response).toString());, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.JavaNetHeaders;, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +    return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(response.headers(), StatusLine.get(response).toString());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.JavaNetHeaders;, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +    return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(response.headers(), StatusLine.get(response).toString());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.JavaNetHeaders;, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +    return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(response.headers(), StatusLine.get(response).toString());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.JavaNetHeaders;, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +    return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(response.headers(), StatusLine.get(response).toString());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.JavaNetHeaders;, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +    return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(response.headers(), StatusLine.get(response).toString());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.client().setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.JavaNetHeaders;, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());, +    return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(request.headers(), null);, +      return JavaNetHeaders.toMultimap(response.headers(), StatusLine.get(response).toString());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.JavaNetCookieJar;, +    client.setCookieJar(new JavaNetCookieJar(cookieManager));, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java]
[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. Seed the cache (potentially)., +    // 2. Expect a cache hit or miss., +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    // 1. Seed the cache., +    // 2. Invalidate it with an uncacheable response., +    // 3. Expect a cache miss., +  @Test public void putInvalidatesWithNoContentResponse() throws Exception {, +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    server.enqueue(new MockResponse(), +        .setBody("A"), +        .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)));, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .setResponseCode(HttpURLConnection.HTTP_NO_CONTENT));, +    server.enqueue(new MockResponse(), +        .setBody("C"));, +, +    HttpUrl url = server.url("/");, +, +    assertEquals("A", get(url).body().string());, +, +    Request request = new Request.Builder(), +        .url(url), +        .put(RequestBody.create(MediaType.parse("text/plain"), "foo")), +        .build();, +    Response invalidate = client.newCall(request).execute();, +    assertEquals("", invalidate.body().string());, +, +    assertEquals("C", get(url).body().string());, +  }, +, +    // 1. Request a range., +    // 2. Request a full document, expecting a cache miss., +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. Seed the cache (potentially)., +    // 2. Expect a cache hit or miss., +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    // 1. Seed the cache., +    // 2. Invalidate it with an uncacheable response., +    // 3. Expect a cache miss., +  @Test public void putInvalidatesWithNoContentResponse() throws Exception {, +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    server.enqueue(new MockResponse(), +        .setBody("A"), +        .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)));, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .setResponseCode(HttpURLConnection.HTTP_NO_CONTENT));, +    server.enqueue(new MockResponse(), +        .setBody("C"));, +, +    HttpUrl url = server.url("/");, +, +    assertEquals("A", get(url).body().string());, +, +    Request request = new Request.Builder(), +        .url(url), +        .put(RequestBody.create(MediaType.parse("text/plain"), "foo")), +        .build();, +    Response invalidate = client.newCall(request).execute();, +    assertEquals("", invalidate.body().string());, +, +    assertEquals("C", get(url).body().string());, +  }, +, +    // 1. Request a range., +    // 2. Request a full document, expecting a cache miss., +++ b/okhttp/src/main/java/okhttp3/CookieJar.java, + * accept and which to reject. A reasonable policy is to reject all cookies, though that may, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. Seed the cache (potentially)., +    // 2. Expect a cache hit or miss., +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    // 1. Seed the cache., +    // 2. Invalidate it with an uncacheable response., +    // 3. Expect a cache miss., +  @Test public void putInvalidatesWithNoContentResponse() throws Exception {, +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    server.enqueue(new MockResponse(), +        .setBody("A"), +        .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)));, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .setResponseCode(HttpURLConnection.HTTP_NO_CONTENT));, +    server.enqueue(new MockResponse(), +        .setBody("C"));, +]
[+++ b/benchmarks/README.md, +  1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/README.md, +  1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, +            <argument>okhttp3.benchmarks.Benchmark</argument>, +++ b/benchmarks/README.md, +  1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, +            <argument>okhttp3.benchmarks.Benchmark</argument>, +++ /dev/null, +++ b/benchmarks/README.md, +  1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, +            <argument>okhttp3.benchmarks.Benchmark</argument>, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/README.md, +  1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, +            <argument>okhttp3.benchmarks.Benchmark</argument>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/README.md, +  1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, +            <argument>okhttp3.benchmarks.Benchmark</argument>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/README.md, +  1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, +            <argument>okhttp3.benchmarks.Benchmark</argument>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/README.md, +  1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, +            <argument>okhttp3.benchmarks.Benchmark</argument>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/README.md, +  1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, +            <argument>okhttp3.benchmarks.Benchmark</argument>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/README.md, +  1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, +            <argument>okhttp3.benchmarks.Benchmark</argument>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/README.md, +  1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, +            <argument>okhttp3.benchmarks.Benchmark</argument>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/README.md, +  1. If you made modifications to `Benchmark` run `mvn compile`., +++ b/benchmarks/pom.xml, +            <argument>okhttp3.benchmarks.Benchmark</argument>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +          return new X509Certificate[0];, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +          return new X509Certificate[0];, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.ProtocolException;, +  @Test public void tooManyProxyAuthFailuresWithConnectionClose() throws IOException {, +    server.useHttps(sslContext.getSocketFactory(), true);, +    server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, +    for (int i = 0; i < 21; i++) {, +      server.enqueue(new MockResponse(), +          .setResponseCode(407), +          .addHeader("Proxy-Authenticate: Basic realm=\"localhost\""), +          .addHeader("Connection: close"));, +    }, +, +    client = client.newBuilder(), +        .sslSocketFactory(sslContext.getSocketFactory()), +        .proxy(server.toProxyAddress()), +        .proxyAuthenticator(new RecordingOkAuthenticator("password")), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .build();, +, +    Request request = new Request.Builder(), +        .url("https://android.com/foo"), +        .build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (ProtocolException expected) {, +    }, +  }, +, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +          return new X509Certificate[0];, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.ProtocolException;, +  @Test public void tooManyProxyAuthFailuresWithConnectionClose() throws IOException {, +    server.useHttps(sslContext.getSocketFactory(), true);, +    server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, +    for (int i = 0; i < 21; i++) {, +      server.enqueue(new MockResponse(), +          .setResponseCode(407), +          .addHeader("Proxy-Authenticate: Basic realm=\"localhost\""), +          .addHeader("Connection: close"));, +    }, +, +    client = client.newBuilder(), +        .sslSocketFactory(sslContext.getSocketFactory()), +        .proxy(server.toProxyAddress()), +        .proxyAuthenticator(new RecordingOkAuthenticator("password")), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .build();, +, +    Request request = new Request.Builder(), +        .url("https://android.com/foo"), +        .build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (ProtocolException expected) {, +    }, +  }, +, +++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java, +import okhttp3.internal.URLFilter;, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +          return new X509Certificate[0];, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.ProtocolException;, +  @Test public void tooManyProxyAuthFailuresWithConnectionClose() throws IOException {, +    server.useHttps(sslContext.getSocketFactory(), true);, +    server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, +    for (int i = 0; i < 21; i++) {, +      server.enqueue(new MockResponse(), +          .setResponseCode(407), +          .addHeader("Proxy-Authenticate: Basic realm=\"localhost\""), +          .addHeader("Connection: close"));, +    }, +, +    client = client.newBuilder(), +        .sslSocketFactory(sslContext.getSocketFactory()), +        .proxy(server.toProxyAddress()), +        .proxyAuthenticator(new RecordingOkAuthenticator("password")), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .build();, +, +    Request request = new Request.Builder(), +        .url("https://android.com/foo"), +        .build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (ProtocolException expected) {, +    }, +  }, +, +++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java, +import okhttp3.internal.URLFilter;, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java]
[+++ b/okhttp-android-support/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.3.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-android-support</artifactId>, +  <name>OkHttp Android Platform Support</name>, +  <description>Classes to support the Android platform's use of OkHttp (not required for most developers).</description>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, + , +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <excludePackageNames>com.squareup.okhttp.internal.*</excludePackageNames>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +          </links>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/okhttp-android-support/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.3.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-android-support</artifactId>, +  <name>OkHttp Android Platform Support</name>, +  <description>Classes to support the Android platform's use of OkHttp (not required for most developers).</description>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp-urlconnection</artifactId>, +      <version>${project.version}</version>, +    </dependency>, + , +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <excludePackageNames>com.squareup.okhttp.internal.*</excludePackageNames>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +          </links>, +        </configuration>, +      </plugin>, +    </plugins>]
[+++ b/benchmarks/pom.xml, +    <version>3.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.0.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.0.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.0.0</version>, +++ b/okcurl/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.0.0</version>]
[+++ b/README.md, +    --classpath ~/.m2/repository/com/google/mockwebserver/mockwebserver/20120905/mockwebserver-20120905.jar \, +    --classpath target/okhttp-0.9-SNAPSHOT.jar \, +    ./src/test/java, +++ b/README.md, +    --classpath ~/.m2/repository/com/google/mockwebserver/mockwebserver/20120905/mockwebserver-20120905.jar \, +    --classpath target/okhttp-0.9-SNAPSHOT.jar \, +    ./src/test/java, +++ b/pom.xml, +    <version>0.9-SNAPSHOT</version>]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/CHANGELOG.md, +Change Log, +==========, +, +Version 1.0.1 *(2013-05-06)*, +----------------------------, +, + * Correct casing of SSL in method names (`getSslSocketFactory`/`setSslSocketFactory`)., +, +, +Version 1.0.0 *(2013-05-06)*, +----------------------------, +, +Initial release., +]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    serverListener.assertFailure(EOFException.class);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    serverListener.assertFailure(EOFException.class);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +    transmitter.initCallStackTrace(, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    serverListener.assertFailure(EOFException.class);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +    transmitter.initCallStackTrace(, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +  public void initCallStackTrace(@Nullable Object callStackTrace) {, +  public void releaseStreamForException() {, +    streamAllocation.releaseStreamForException();, +  public boolean canRetry() {, +    return streamAllocation.canRetry();, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    long contentLength = request.body().contentLength();, +    Sink rawRequestBody = streamAllocation.codec().createRequestBody(request, contentLength);, +    return new RequestBodySink(rawRequestBody, contentLength);, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    if (e != null) {, +      streamAllocation.streamFailed(e);, +    }, +      try {, +      } catch (IOException e) {, +        streamAllocation.streamFailed(e);, +        throw e;, +      }, +    }, +, +    @Override public void flush() throws IOException {, +      try {, +        super.flush();, +      } catch (IOException e) {, +        streamAllocation.streamFailed(e);, +        throw e;, +      }, +      try {, +      } catch (IOException e) {, +        streamAllocation.streamFailed(e);, +        throw e;, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    serverListener.assertFailure(EOFException.class);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +    transmitter.initCallStackTrace(, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +  public void initCallStackTrace(@Nullable Object callStackTrace) {, +  public void releaseStreamForException() {, +    streamAllocation.releaseStreamForException();, +  public boolean canRetry() {, +    return streamAllocation.canRetry();, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    long contentLength = request.body().contentLength();, +    Sink rawRequestBody = streamAllocation.codec().createRequestBody(request, contentLength);, +    return new RequestBodySink(rawRequestBody, contentLength);, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    try {]
[+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +import javax.net.ssl.SSLSession;, +      // block for session establishment, +      SSLSession sslSocketSession = sslSocket.getSession();, +      if (!isValid(sslSocketSession)) {, +        throw new IOException("a valid ssl session was not established");, +      }, +      Handshake unverifiedHandshake = Handshake.get(sslSocketSession);, +  private boolean isValid(SSLSession sslSocketSession) {, +    // don't use SslSocket.getSession since for failed results it returns SSL_NULL_WITH_NULL_NULL, +    return !"NONE".equals(sslSocketSession.getProtocol()) && !"SSL_NULL_WITH_NULL_NULL".equals(, +        sslSocketSession.getCipherSuite());, +  }, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +      if (connection.allocations.size() < connection.allocationLimit, +          && address.equals(connection.route().address), +          && !connection.noNewStreams) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +      if (connection.allocations.size() < connection.allocationLimit, +          && address.equals(connection.route().address), +          && !connection.noNewStreams) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +      if (connection.allocations.size() < connection.allocationLimit, +          && address.equals(connection.route().address), +          && !connection.noNewStreams) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +      if (connection.allocations.size() < connection.allocationLimit, +          && address.equals(connection.route().address), +          && !connection.noNewStreams) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout,, +      List<ConnectionSpec> connectionSpecs, boolean connectionRetryEnabled) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +      if (connection.allocations.size() < connection.allocationLimit, +          && address.equals(connection.route().address), +          && !connection.noNewStreams) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout,, +      List<ConnectionSpec> connectionSpecs, boolean connectionRetryEnabled) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +      RealConnection pooledConnection = Internal.instance.get(connectionPool, address, this);, +      if (pooledConnection != null) {, +        this.connection = pooledConnection;, +        return pooledConnection;, +      }, +    }, +    RealConnection newConnection = new RealConnection(connectionPool, selectedRoute);, +, +    synchronized (connectionPool) {, +      acquire(newConnection);, +      Internal.instance.put(connectionPool, newConnection);, +      this.connection = newConnection;, +    newConnection.connect(connectTimeout, readTimeout, writeTimeout, address.connectionSpecs(),, +        connectionRetryEnabled);, +    routeDatabase().connected(newConnection.route());, +    return newConnection;, +    deallocate(noNewStreams, false, true);, +    deallocate(false, true, false);, +    deallocate(true, false, false);, +   * connection will be detached or closed., +  private void deallocate(boolean noNewStreams, boolean released, boolean streamFinished) {, +    RealConnection connectionToClose = null;, +    synchronized (connectionPool) {, +              connectionToClose = connection;, +    }, +    if (connectionToClose != null) {, +      Util.closeQuietly(connectionToClose.socket());, +    }, +      } else if (connection != null && !connection.isMultiplexed(), +          || e instanceof ConnectionShutdownException) {, +    deallocate(noNewStreams, false, true);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +      if (connection.allocations.size() < connection.allocationLimit, +          && address.equals(connection.route().address), +          && !connection.noNewStreams) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout,, +      List<ConnectionSpec> connectionSpecs, boolean connectionRetryEnabled) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +      RealConnection pooledConnection = Internal.instance.get(connectionPool, address, this);, +      if (pooledConnection != null) {, +        this.connection = pooledConnection;, +        return pooledConnection;, +      }, +    }, +    RealConnection newConnection = new RealConnection(connectionPool, selectedRoute);, +, +    synchronized (connectionPool) {, +      acquire(newConnection);, +      Internal.instance.put(connectionPool, newConnection);, +      this.connection = newConnection;, +    newConnection.connect(connectTimeout, readTimeout, writeTimeout, address.connectionSpecs(),, +        connectionRetryEnabled);, +    routeDatabase().connected(newConnection.route());, +    return newConnection;, +    deallocate(noNewStreams, false, true);, +    deallocate(false, true, false);]
[+++ b/mockwebserver/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/mockwebserver/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.2.2-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.2.2-SNAPSHOT</version>]
[+++ b/okhttp-apache/pom.xml, +  <packaging>bundle</packaging>, +      <plugin>, +        <groupId>org.apache.felix</groupId>, +        <artifactId>maven-bundle-plugin</artifactId>, +        <extensions>true</extensions>, +        <configuration>, +          <instructions>, +            <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, +            <Bundle-Version>${project.version}</Bundle-Version>, +            <Export-Package>, +              okhttp3.apache.*, +            </Export-Package>, +          </instructions>, +        </configuration>, +      </plugin>, +++ b/okhttp-apache/pom.xml, +  <packaging>bundle</packaging>, +      <plugin>, +        <groupId>org.apache.felix</groupId>, +        <artifactId>maven-bundle-plugin</artifactId>, +        <extensions>true</extensions>, +        <configuration>, +          <instructions>, +            <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, +            <Bundle-Version>${project.version}</Bundle-Version>, +            <Export-Package>, +              okhttp3.apache.*, +            </Export-Package>, +          </instructions>, +        </configuration>, +      </plugin>, +++ b/okhttp-logging-interceptor/pom.xml, +  <packaging>bundle</packaging>, +, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.felix</groupId>, +        <artifactId>maven-bundle-plugin</artifactId>, +        <extensions>true</extensions>, +        <configuration>, +          <instructions>, +            <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, +            <Bundle-Version>${project.version}</Bundle-Version>, +            <Export-Package>, +              okhttp3.logging.*, +            </Export-Package>, +          </instructions>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/okhttp-apache/pom.xml, +  <packaging>bundle</packaging>, +      <plugin>, +        <groupId>org.apache.felix</groupId>, +        <artifactId>maven-bundle-plugin</artifactId>, +        <extensions>true</extensions>, +        <configuration>, +          <instructions>, +            <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, +            <Bundle-Version>${project.version}</Bundle-Version>, +            <Export-Package>, +              okhttp3.apache.*, +            </Export-Package>, +          </instructions>, +        </configuration>, +      </plugin>, +++ b/okhttp-logging-interceptor/pom.xml, +  <packaging>bundle</packaging>, +, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.felix</groupId>, +        <artifactId>maven-bundle-plugin</artifactId>, +        <extensions>true</extensions>, +        <configuration>, +          <instructions>, +            <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>, +            <Bundle-Version>${project.version}</Bundle-Version>, +            <Export-Package>, +              okhttp3.logging.*, +            </Export-Package>, +          </instructions>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/okhttp-urlconnection/pom.xml, +  <packaging>bundle</packaging>, +, +      <plugin>, +        <groupId>org.apache.felix</groupId>, +        <artifactId>maven-bundle-plugin</artifactId>, +        <extensions>true</extensions>, +        <configuration>]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws IOException, InterruptedException {, +        if (i == 513) {, +          // pause slightly after half way to make result more predictable, +          Thread.sleep(100);, +        }, +    assertEquals(512f, i, 5f); // Halfway +/- 0.5%]
[+++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +import okhttp3.internal.tls.SslClient;, +    SslClient client = new SslClient.Builder().build();, +    X509TrustManager x509TrustManager = client.trustManager;, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +import okhttp3.internal.tls.SslClient;, +    SslClient client = new SslClient.Builder().build();, +    X509TrustManager x509TrustManager = client.trustManager;, +++ b/pom.xml, +    <animal.sniffer.version>1.11</animal.sniffer.version>]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +  final OkAuthenticator authenticator;, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy), +      throws UnknownHostException {, +    if (authenticator == null) throw new IllegalArgumentException("authenticator == null");, +    this.authenticator = authenticator;, +, +  /**, +   * Returns the client's authenticator. This method never returns null., +   */, +  public OkAuthenticator getAuthenticator() {, +    return authenticator;, +  }, +, +          && equal(this.hostnameVerifier, that.hostnameVerifier), +          && equal(this.authenticator, that.authenticator);, +    result = 31 * result + (authenticator != null ? authenticator.hashCode() : 0);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +  final OkAuthenticator authenticator;, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy), +      throws UnknownHostException {, +    if (authenticator == null) throw new IllegalArgumentException("authenticator == null");, +    this.authenticator = authenticator;, +, +  /**, +   * Returns the client's authenticator. This method never returns null., +   */, +  public OkAuthenticator getAuthenticator() {, +    return authenticator;, +  }, +, +          && equal(this.hostnameVerifier, that.hostnameVerifier), +          && equal(this.authenticator, that.authenticator);, +    result = 31 * result + (authenticator != null ? authenticator.hashCode() : 0);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +          boolean credentialsFound = HttpAuthenticator.processAuthHeader(, +              route.address.authenticator, HTTP_PROXY_AUTH, responseHeaders, requestHeaders,, +              route.proxy, url);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +  final OkAuthenticator authenticator;, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy), +      throws UnknownHostException {, +    if (authenticator == null) throw new IllegalArgumentException("authenticator == null");, +    this.authenticator = authenticator;, +, +  /**, +   * Returns the client's authenticator. This method never returns null., +   */, +  public OkAuthenticator getAuthenticator() {, +    return authenticator;, +  }, +, +          && equal(this.hostnameVerifier, that.hostnameVerifier), +          && equal(this.authenticator, that.authenticator);, +    result = 31 * result + (authenticator != null ? authenticator.hashCode() : 0);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +          boolean credentialsFound = HttpAuthenticator.processAuthHeader(, +              route.address.authenticator, HTTP_PROXY_AUTH, responseHeaders, requestHeaders,, +              route.proxy, url);, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkAuthenticator.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.internal.Base64;, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.net.Proxy;, +import java.net.URL;, +import java.util.List;, +, +/**, + * Responds to authentication challenges from the remote web or proxy server by, + * returning credentials., + */, +public interface OkAuthenticator {, +  /**, +   * Returns a credential that satisfies the authentication challenge made by, +   * {@code url}. Returns null if the challenge cannot be satisfied. This method, +   * is called in response to an HTTP 401 unauthorized status code sent by the, +   * origin server., +   *, +   * @param challenges parsed "WWW-Authenticate" challenge headers from the HTTP, +   *     response., +   */, +  Credential authenticate(Proxy proxy, URL url, List<Challenge> challenges) throws IOException;, +]
[+++ b/benchmarks/pom.xml, +    <version>3.8.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.8.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.8.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.8.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.8.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.8.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.8.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.8.0</version>, +++ b/okcurl/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.8.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.8.0</version>]
[+++ b/pom.xml, +++ b/pom.xml, +++ b/src/main/java/libcore/net/http/HttpsURLConnectionImpl.java, +            // Get a connection. This may return a pooled connection!, +            // If the TLS connection is ready, use it., +            // The TLS connection isn't ready. Build a tunnel if necessary and then handshake., +            if (connection.getAddress().requiresTunnel()) {, +                makeTunnel(policy, connection, getRequestHeaders());, +            }, +++ b/pom.xml, +++ b/src/main/java/libcore/net/http/HttpsURLConnectionImpl.java, +            // Get a connection. This may return a pooled connection!, +            // If the TLS connection is ready, use it., +            // The TLS connection isn't ready. Build a tunnel if necessary and then handshake., +            if (connection.getAddress().requiresTunnel()) {, +                makeTunnel(policy, connection, getRequestHeaders());, +            }, +++ b/src/test/java/libcore/net/http/URLConnectionTest.java, +    public void testProxyWithConnectionReuse() throws IOException {, +        SSLSocketFactory socketFactory = sslContext.getSocketFactory();, +        RecordingHostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, +, +        server.useHttps(socketFactory, true);, +        server.enqueue(new MockResponse(), +                .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +                .clearHeaders());, +        server.enqueue(new MockResponse().setBody("response 1"));, +        server.enqueue(new MockResponse().setBody("response 2"));, +        server.play();, +, +        URL url = new URL("https://android.com/foo");, +        OkHttpsConnection connection1 = (OkHttpsConnection) openConnection(, +                url, server.toProxyAddress());, +        connection1.setSSLSocketFactory(socketFactory);, +        connection1.setHostnameVerifier(hostnameVerifier);, +        assertContent("response 1", connection1);, +, +        OkHttpsConnection connection2 = (OkHttpsConnection) openConnection(, +                url, server.toProxyAddress());, +        connection2.setSSLSocketFactory(socketFactory);, +        connection2.setHostnameVerifier(hostnameVerifier);, +        assertContent("response 2", connection2);, +    }, +]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    serverSocket = new ServerSocket(port, 50, inetAddress);, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    serverSocket = new ServerSocket(port, 50, inetAddress);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    serverSocket = new ServerSocket(port, 50, inetAddress);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, +    Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    serverSocket = new ServerSocket(port, 50, inetAddress);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, +    Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertNull(request.body());, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    serverSocket = new ServerSocket(port, 50, inetAddress);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, +    Logger logger = Logger.getLogger(Http20Draft14.class.getName());]
[+++ b/okhttp/src/main/java/okhttp3/Authenticator.java, + * <p>Implementations should check if the initial request already included an attempt to, + * authenticate. If so it is likely that further attempts will not be useful and the authenticator, + * should give up., + *, + *    if (response.request().header("Authorization") != null) {, + *      return null; // Give up, we've already failed to authenticate., + *    }, + *, + *    if (response.request().header("Proxy-Authorization") != null) {, + *      return null; // Give up, we've already failed to authenticate., + *    }, + *, +++ b/okhttp/src/main/java/okhttp3/Authenticator.java, + * <p>Implementations should check if the initial request already included an attempt to, + * authenticate. If so it is likely that further attempts will not be useful and the authenticator, + * should give up., + *, + *    if (response.request().header("Authorization") != null) {, + *      return null; // Give up, we've already failed to authenticate., + *    }, + *, + *    if (response.request().header("Proxy-Authorization") != null) {, + *      return null; // Give up, we've already failed to authenticate., + *    }, + *, +++ b/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java, +            if (response.request().header("Authorization") != null) {, +              return null; // Give up, we've already attempted to authenticate., +            }, +, +++ b/okhttp/src/main/java/okhttp3/Authenticator.java, + * <p>Implementations should check if the initial request already included an attempt to, + * authenticate. If so it is likely that further attempts will not be useful and the authenticator, + * should give up., + *, + *    if (response.request().header("Authorization") != null) {, + *      return null; // Give up, we've already failed to authenticate., + *    }, + *, + *    if (response.request().header("Proxy-Authorization") != null) {, + *      return null; // Give up, we've already failed to authenticate., + *    }, + *, +++ b/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java, +            if (response.request().header("Authorization") != null) {, +              return null; // Give up, we've already attempted to authenticate., +            }, +, +++ b/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java, +    Set<String> blacklist = Collections.singleton("sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=");, +++ b/okhttp/src/main/java/okhttp3/Authenticator.java, + * <p>Implementations should check if the initial request already included an attempt to, + * authenticate. If so it is likely that further attempts will not be useful and the authenticator, + * should give up., + *, + *    if (response.request().header("Authorization") != null) {, + *      return null; // Give up, we've already failed to authenticate., + *    }, + *, + *    if (response.request().header("Proxy-Authorization") != null) {, + *      return null; // Give up, we've already failed to authenticate., + *    }, + *, +++ b/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java, +            if (response.request().header("Authorization") != null) {, +              return null; // Give up, we've already attempted to authenticate., +            }, +, +++ b/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java, +    Set<String> blacklist = Collections.singleton("sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=");, +++ /dev/null]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void dnsReturnsZeroIpAddresses() throws Exception {, +    // Configure a DNS that returns our local MockWebServer for android.com., +    FakeDns dns = new FakeDns();, +    List<InetAddress> ipAddresses = new ArrayList<>();, +    dns.set("android.com", ipAddresses);, +    client = client.newBuilder(), +        .dns(dns), +        .build();, +, +    server.enqueue(new MockResponse());, +    Request request = new Request.Builder(), +        .url(server.url("/").newBuilder().host("android.com").build()), +        .build();, +    executeSynchronously(request).assertFailure(dns + " returned no addresses for android.com");, +, +    dns.assertRequests("android.com");, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void dnsReturnsZeroIpAddresses() throws Exception {, +    // Configure a DNS that returns our local MockWebServer for android.com., +    FakeDns dns = new FakeDns();, +    List<InetAddress> ipAddresses = new ArrayList<>();, +    dns.set("android.com", ipAddresses);, +    client = client.newBuilder(), +        .dns(dns), +        .build();, +, +    server.enqueue(new MockResponse());, +    Request request = new Request.Builder(), +        .url(server.url("/").newBuilder().host("android.com").build()), +        .build();, +    executeSynchronously(request).assertFailure(dns + " returned no addresses for android.com");, +, +    dns.assertRequests("android.com");, +  }, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +      if (value == null) throw new NullPointerException("value == null");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void dnsReturnsZeroIpAddresses() throws Exception {, +    // Configure a DNS that returns our local MockWebServer for android.com., +    FakeDns dns = new FakeDns();, +    List<InetAddress> ipAddresses = new ArrayList<>();, +    dns.set("android.com", ipAddresses);, +    client = client.newBuilder(), +        .dns(dns), +        .build();, +, +    server.enqueue(new MockResponse());, +    Request request = new Request.Builder(), +        .url(server.url("/").newBuilder().host("android.com").build()), +        .build();, +    executeSynchronously(request).assertFailure(dns + " returned no addresses for android.com");, +, +    dns.assertRequests("android.com");, +  }, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +      if (value == null) throw new NullPointerException("value == null");, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java, +import java.net.UnknownHostException;, +      if (addresses.isEmpty()) {, +        throw new UnknownHostException(address.dns() + " returned no addresses for " + socketHost);, +      }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void dnsReturnsZeroIpAddresses() throws Exception {, +    // Configure a DNS that returns our local MockWebServer for android.com., +    FakeDns dns = new FakeDns();, +    List<InetAddress> ipAddresses = new ArrayList<>();, +    dns.set("android.com", ipAddresses);, +    client = client.newBuilder(), +        .dns(dns), +        .build();, +, +    server.enqueue(new MockResponse());, +    Request request = new Request.Builder(), +        .url(server.url("/").newBuilder().host("android.com").build()), +        .build();, +    executeSynchronously(request).assertFailure(dns + " returned no addresses for android.com");, +, +    dns.assertRequests("android.com");, +  }, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +      if (value == null) throw new NullPointerException("value == null");, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java, +import java.net.UnknownHostException;, +      if (addresses.isEmpty()) {, +        throw new UnknownHostException(address.dns() + " returned no addresses for " + socketHost);, +      }, +, +++ b/pom.xml]
[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, +    Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, +    Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java, +    URL url = new URL("https://twitter.com");, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, +    Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java, +    URL url = new URL("https://twitter.com");, +++ /dev/null, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;, +    Logger logger = Logger.getLogger(Http20Draft12.class.getName());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java, +    URL url = new URL("https://twitter.com");, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft12Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.http;, +, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.PushPromise;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import java.util.Arrays;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class HttpOverHttp20Draft12Test extends HttpOverSpdyTest {, +, +  public HttpOverHttp20Draft12Test() {, +    super(Protocol.HTTP_2);, +    this.hostHeader = ":authority";, +  }, +, +  @Test public void serverSendsPushPromise_GET() throws Exception {, +    MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet"), +        .withPush(new PushPromise("GET", "/foo/bar", Arrays.asList("foo: bar"),, +            new MockResponse().setBody("bar").setStatus("HTTP/1.1 200 Sweet")));, +    server.enqueue(response);, +    server.play();, +, +    connection = client.open(server.getUrl("/foo"));, +    assertContent("ABCDE", connection, Integer.MAX_VALUE);, +    assertEquals(200, connection.getResponseCode());, +    assertEquals("Sweet", connection.getResponseMessage());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /foo HTTP/1.1", request.getRequestLine());, +    assertContains(request.getHeaders(), ":scheme: https");, +    assertContains(request.getHeaders(), hostHeader + ": " + hostName + ":" + server.getPort());, +, +    RecordedRequest pushedRequest = server.takeRequest();, +    assertEquals("GET /foo/bar HTTP/1.1", pushedRequest.getRequestLine());, +    assertEquals(Arrays.asList("foo: bar"), pushedRequest.getHeaders());, +  }, +, +  @Test public void serverSendsPushPromise_HEAD() throws Exception {, +    MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet"), +        .withPush(new PushPromise("HEAD", "/foo/bar", Arrays.asList("foo: bar"),, +            new MockResponse().setStatus("HTTP/1.1 204 Sweet")));, +    server.enqueue(response);, +    server.play();, +, +    connection = client.open(server.getUrl("/foo"));, +    assertContent("ABCDE", connection, Integer.MAX_VALUE);, +    assertEquals(200, connection.getResponseCode());, +    assertEquals("Sweet", connection.getResponseMessage());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /foo HTTP/1.1", request.getRequestLine());, +    assertContains(request.getHeaders(), ":scheme: https");, +    assertContains(request.getHeaders(), hostHeader + ": " + hostName + ":" + server.getPort());, +, +    RecordedRequest pushedRequest = server.takeRequest();, +    assertEquals("HEAD /foo/bar HTTP/1.1", pushedRequest.getRequestLine());, +    assertEquals(Arrays.asList("foo: bar"), pushedRequest.getHeaders());, +  }, +}, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft12;]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onResponse(Response response) throws IOException {, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onResponse(Response response) throws IOException {, +++ b/mockwebserver/README.md, +[Mockito](https://code.google.com/p/mockito/):, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onResponse(Response response) throws IOException {, +++ b/mockwebserver/README.md, +[Mockito](https://code.google.com/p/mockito/):, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onResponse(Response response) throws IOException {, +++ b/mockwebserver/README.md, +[Mockito](https://code.google.com/p/mockito/):, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ /dev/null, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>3.0.0-RC1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.0-RC1', +  <version>3.0.0-RC1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.0-RC1', +++ b/benchmarks/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onResponse(Response response) throws IOException {, +++ b/mockwebserver/README.md, +[Mockito](https://code.google.com/p/mockito/):, +testCompile 'com.squareup.okhttp:mockwebserver:(insert latest version)', +++ b/mockwebserver/pom.xml, +    <version>3.0.0-SNAPSHOT</version>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/internal/SslContextBuilder.java, +, +import java.math.BigInteger;, +import java.security.KeyPair;, +import java.security.KeyPairGenerator;, +import java.security.Security;, +import java.security.cert.X509Certificate;, +import java.util.Date;, +import javax.security.auth.x500.X500Principal;, +import org.bouncycastle.jce.provider.BouncyCastleProvider;]
[+++ b/mockwebserver/pom.xml, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +            <link>http://square.github.io/okio/</link>, +          </links>, +        </configuration>, +      </plugin>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +++ b/mockwebserver/pom.xml, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +            <link>http://square.github.io/okio/</link>, +          </links>, +        </configuration>, +      </plugin>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +, +  /** @deprecated replaced with {@link #peek}. */, +  protected final SocketPolicy peekSocketPolicy() {, +    throw new UnsupportedOperationException("This API is obsolete. Override peek() instead!");, +  }]
[+++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/crawler/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Platform.get().afterHandshake(sslSocket);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Platform.get().afterHandshake(sslSocket);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, +  public MockDuplexResponseBody requestIOException() {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        requestBody.exhausted();, +        fail();, +      } catch (IOException expected) {, +      }, +    });, +    return this;, +  }, +, +  public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        Thread.sleep(unit.toMillis(duration));, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    });, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Platform.get().afterHandshake(sslSocket);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, +  public MockDuplexResponseBody requestIOException() {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        requestBody.exhausted();, +        fail();, +      } catch (IOException expected) {, +      }, +    });, +    return this;, +  }, +, +  public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        Thread.sleep(unit.toMillis(duration));, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    });, +    return this;, +  }, +, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +      } else if (requestBody.isDuplex()) {, +        logger.log("--> END " + request.method() + " (duplex request body omitted)");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Platform.get().afterHandshake(sslSocket);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, +  public MockDuplexResponseBody requestIOException() {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        requestBody.exhausted();, +        fail();, +      } catch (IOException expected) {, +      }, +    });, +    return this;, +  }, +, +  public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        Thread.sleep(unit.toMillis(duration));, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    });, +    return this;, +  }, +, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +      } else if (requestBody.isDuplex()) {, +        logger.log("--> END " + request.method() + " (duplex request body omitted)");, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +  public void requestFailed(Call call, IOException ioe) {, +    logWithTime("requestFailed: " + ioe);, +  }, +, +  @Override, +  public void responseFailed(Call call, IOException ioe) {, +    logWithTime("responseFailed: " + ioe);, +  }, +, +  @Override, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Platform.get().afterHandshake(sslSocket);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private long headersDelayAmount = 0;, +  private TimeUnit headersDelayUnit = TimeUnit.MILLISECONDS;, +, +  public MockResponse setHeadersDelay(long delay, TimeUnit unit) {, +    headersDelayAmount = delay;, +    headersDelayUnit = unit;, +    return this;, +  }, +, +  public long getHeadersDelay(TimeUnit unit) {, +    return unit.convert(headersDelayAmount, headersDelayUnit);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private long headersDelayAmount = 0;, +  private TimeUnit headersDelayUnit = TimeUnit.MILLISECONDS;, +, +  public MockResponse setHeadersDelay(long delay, TimeUnit unit) {, +    headersDelayAmount = delay;, +    headersDelayUnit = unit;, +    return this;, +  }, +, +  public long getHeadersDelay(TimeUnit unit) {, +    return unit.convert(headersDelayAmount, headersDelayUnit);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +    sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +  private void sleepIfDelayed(long delayMs) {, +      sleepIfDelayed(response.getHeadersDelay(TimeUnit.MILLISECONDS));, +, +        sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private long headersDelayAmount = 0;, +  private TimeUnit headersDelayUnit = TimeUnit.MILLISECONDS;, +, +  public MockResponse setHeadersDelay(long delay, TimeUnit unit) {, +    headersDelayAmount = delay;, +    headersDelayUnit = unit;, +    return this;, +  }, +, +  public long getHeadersDelay(TimeUnit unit) {, +    return unit.convert(headersDelayAmount, headersDelayUnit);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +    sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +  private void sleepIfDelayed(long delayMs) {, +      sleepIfDelayed(response.getHeadersDelay(TimeUnit.MILLISECONDS));, +, +        sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.SynchronousQueue;, +, +import okhttp3.Callback;, +  @Test public void responseHeadersAfterGoaway() throws Exception {, +    server.enqueue(new MockResponse(), +        .setHeadersDelay(1, SECONDS), +        .setBody("ABC"));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setBody("DEF"));, +, +    final BlockingQueue<String> bodies = new SynchronousQueue<>();, +    Callback callback = new Callback() {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +        bodies.add(response.body().string());, +      }, +      @Override public void onFailure(Call call, IOException e) {, +        System.out.println(e);, +      }, +    };, +    client.newCall(new Request.Builder().url(server.url("/")).build()).enqueue(callback);, +    client.newCall(new Request.Builder().url(server.url("/")).build()).enqueue(callback);, +, +    assertEquals("DEF", bodies.poll(2, SECONDS));, +    assertEquals("ABC", bodies.poll(2, SECONDS));, +    assertEquals(2, server.getRequestCount());, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private long headersDelayAmount = 0;, +  private TimeUnit headersDelayUnit = TimeUnit.MILLISECONDS;, +, +  public MockResponse setHeadersDelay(long delay, TimeUnit unit) {, +    headersDelayAmount = delay;, +    headersDelayUnit = unit;, +    return this;, +  }, +, +  public long getHeadersDelay(TimeUnit unit) {, +    return unit.convert(headersDelayAmount, headersDelayUnit);, +  }, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +import javax.net.ssl.SSLPeerUnverifiedException;, +        .subjectAlternativeName("root_ca.com"), +        .subjectAlternativeName("intermediate_ca.com"), +        .commonName("Local Host"), +        .subjectAlternativeName(server.getHostName()), +        .subjectAlternativeName("root_ca.com"), +        .subjectAlternativeName("intermediate_ca.com"), +        .subjectAlternativeName("jethrowillis.com"), +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +  @Test public void commonNameIsNotTrusted() throws Exception {, +    serverCert = new HeldCertificate.Builder(), +        .issuedBy(serverIntermediateCa), +        .serialNumber("3"), +        .commonName(server.getHostName()), +        .subjectAlternativeName("different-host.com"), +        .build();, +, +    OkHttpClient client = buildClient(clientCert, clientIntermediateCa);, +, +    SSLSocketFactory socketFactory = buildServerSslSocketFactory(ClientAuth.NEEDS);, +, +    server.useHttps(socketFactory, false);, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +, +    try {, +      call.execute();, +      fail();, +    } catch (SSLPeerUnverifiedException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +import javax.net.ssl.SSLPeerUnverifiedException;, +        .subjectAlternativeName("root_ca.com"), +        .subjectAlternativeName("intermediate_ca.com"), +        .commonName("Local Host"), +        .subjectAlternativeName(server.getHostName()), +        .subjectAlternativeName("root_ca.com"), +        .subjectAlternativeName("intermediate_ca.com"), +        .subjectAlternativeName("jethrowillis.com"), +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +  @Test public void commonNameIsNotTrusted() throws Exception {, +    serverCert = new HeldCertificate.Builder(), +        .issuedBy(serverIntermediateCa), +        .serialNumber("3"), +        .commonName(server.getHostName()), +        .subjectAlternativeName("different-host.com"), +        .build();, +, +    OkHttpClient client = buildClient(clientCert, clientIntermediateCa);, +, +    SSLSocketFactory socketFactory = buildServerSslSocketFactory(ClientAuth.NEEDS);, +, +    server.useHttps(socketFactory, false);, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +, +    try {, +      call.execute();, +      fail();, +    } catch (SSLPeerUnverifiedException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java, +    assertFalse(verifier.verify("foo.com", session));, +    assertFalse(verifier.verify("\u82b1\u5b50.co.jp", session));, +    assertFalse(verifier.verify("\u82b1\u5b50.co.jp", session));, +    assertFalse(verifier.verify("www.foo.com", session));, +    assertFalse(verifier.verify("\u82b1\u5b50.foo.com", session));, +    assertFalse(verifier.verify("foo.co.jp", session));, +    assertFalse(verifier.verify("\u82b1\u5b50.co.jp", session));, +    assertFalse(verifier.verify("google.com", session));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +import javax.net.ssl.SSLPeerUnverifiedException;, +        .subjectAlternativeName("root_ca.com"), +        .subjectAlternativeName("intermediate_ca.com"), +        .commonName("Local Host"), +        .subjectAlternativeName(server.getHostName()), +        .subjectAlternativeName("root_ca.com"), +        .subjectAlternativeName("intermediate_ca.com"), +        .subjectAlternativeName("jethrowillis.com"), +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +  @Test public void commonNameIsNotTrusted() throws Exception {, +    serverCert = new HeldCertificate.Builder(), +        .issuedBy(serverIntermediateCa), +        .serialNumber("3"), +        .commonName(server.getHostName()), +        .subjectAlternativeName("different-host.com")]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.http.ExchangeCodec;, +            && !discard(this, ExchangeCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.http.ExchangeCodec;, +            && !discard(this, ExchangeCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.http.ExchangeCodec;, +            && !discard(this, ExchangeCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectionSpecSelector.java, +final class ConnectionSpecSelector {, +  ConnectionSpecSelector(List<ConnectionSpec> connectionSpecs) {, +  ConnectionSpec configureSecureSocket(SSLSocket sslSocket) throws IOException {, +  boolean connectionFailed(IOException e) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.http.ExchangeCodec;, +            && !discard(this, ExchangeCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectionSpecSelector.java, +final class ConnectionSpecSelector {, +  ConnectionSpecSelector(List<ConnectionSpec> connectionSpecs) {, +  ConnectionSpec configureSecureSocket(SSLSocket sslSocket) throws IOException {, +  boolean connectionFailed(IOException e) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +import okhttp3.internal.http.ExchangeCodec;]
[+++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +    String[] result = Arrays.copyOf(array, array.length + 1);]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    assertNull(dnsEnd.ioe);, +    assertTrue(dnsEnd.ioe instanceof UnknownHostException);, +    assertTrue(dnsEnd.ioe instanceof UnknownHostException);, +    assertNull(connectEnd.ioe);, +    assertNotNull(connectEnd.ioe);, +    assertNull(connectEnd.ioe);, +    assertNull(connectEnd.ioe);, +    assertNull(connectEnd.ioe);, +    assertNull(secureEnd.ioe);, +    assertNotNull(secureEnd.ioe);, +    assertNull(secureEnd.ioe);, +    assertNotNull(responseBodyEnd.ioe);, +    assertNotNull(responseBodyEnd.ioe);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    assertNull(dnsEnd.ioe);, +    assertTrue(dnsEnd.ioe instanceof UnknownHostException);, +    assertTrue(dnsEnd.ioe instanceof UnknownHostException);, +    assertNull(connectEnd.ioe);, +    assertNotNull(connectEnd.ioe);, +    assertNull(connectEnd.ioe);, +    assertNull(connectEnd.ioe);, +    assertNull(connectEnd.ioe);, +    assertNull(secureEnd.ioe);, +    assertNotNull(secureEnd.ioe);, +    assertNull(secureEnd.ioe);, +    assertNotNull(responseBodyEnd.ioe);, +    assertNotNull(responseBodyEnd.ioe);, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +import java.io.IOException;, +      IOException ioe) {, +    logEvent(new DnsEnd(call, domainName, inetAddressList, ioe));, +  @Override public void secureConnectEnd(Call call, Handshake handshake, IOException ioe) {, +    logEvent(new SecureConnectEnd(call, handshake, ioe));, +      @Nullable Proxy proxy, Protocol protocol, IOException ioe) {, +    logEvent(new ConnectEnd(call, inetSocketAddress, proxy, protocol, ioe));, +  @Override public void requestHeadersEnd(Call call, long headerLength, IOException ioe) {, +    logEvent(new RequestHeadersEnd(call, headerLength, ioe));, +  @Override public void requestBodyEnd(Call call, long bytesWritten, IOException ioe) {, +    logEvent(new RequestBodyEnd(call, bytesWritten, ioe));, +  @Override public void responseHeadersEnd(Call call, long headerLength, IOException ioe) {, +    logEvent(new ResponseHeadersEnd(call, headerLength, ioe));, +  @Override public void responseBodyEnd(Call call, long bytesRead, IOException ioe) {, +    logEvent(new ResponseBodyEnd(call, bytesRead, ioe));, +  @Override public void callEnd(Call call, IOException ioe) {, +    logEvent(new CallEnd(call, ioe));, +    final IOException ioe;, +    DnsEnd(Call call, String domainName, List<InetAddress> inetAddressList, IOException ioe) {, +      super(call, domainName, inetAddressList, ioe);, +      this.ioe = ioe;, +    final IOException ioe;, +        IOException ioe) {, +      super(call, inetSocketAddress, proxy, protocol, ioe);, +      this.ioe = ioe;, +    final IOException ioe;, +    SecureConnectEnd(Call call, Handshake handshake, IOException ioe) {, +      super(call, handshake, ioe);, +      this.ioe = ioe;, +    final IOException ioe;, +    CallEnd(Call call, IOException ioe) {, +      super(call, ioe);, +      this.ioe = ioe;, +    final IOException ioe;, +    RequestHeadersEnd(Call call, long headerLength, IOException ioe) {, +      super(call, headerLength, ioe);, +      this.ioe = ioe;, +    final IOException ioe;, +    RequestBodyEnd(Call call, long bytesWritten, IOException ioe) {, +      super(call, bytesWritten, ioe);, +      this.ioe = ioe;, +    final IOException ioe;, +    ResponseHeadersEnd(Call call, long headerLength, IOException ioe) {, +      super(call, headerLength, ioe);, +      this.ioe = ioe;, +    final IOException ioe;, +    ResponseBodyEnd(Call call, long bytesRead, IOException ioe) {, +      super(call, bytesRead, ioe);, +      this.ioe = ioe;, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    assertNull(dnsEnd.ioe);, +    assertTrue(dnsEnd.ioe instanceof UnknownHostException);, +    assertTrue(dnsEnd.ioe instanceof UnknownHostException);, +    assertNull(connectEnd.ioe);, +    assertNotNull(connectEnd.ioe);, +    assertNull(connectEnd.ioe);, +    assertNull(connectEnd.ioe);, +    assertNull(connectEnd.ioe);, +    assertNull(secureEnd.ioe);, +    assertNotNull(secureEnd.ioe);, +    assertNull(secureEnd.ioe);, +    assertNotNull(responseBodyEnd.ioe);, +    assertNotNull(responseBodyEnd.ioe);, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +import java.io.IOException;, +      IOException ioe) {, +    logEvent(new DnsEnd(call, domainName, inetAddressList, ioe));, +  @Override public void secureConnectEnd(Call call, Handshake handshake, IOException ioe) {, +    logEvent(new SecureConnectEnd(call, handshake, ioe));, +      @Nullable Proxy proxy, Protocol protocol, IOException ioe) {, +    logEvent(new ConnectEnd(call, inetSocketAddress, proxy, protocol, ioe));]
[+++ b/CHANGELOG.md, +## Version 2.0.0-RC2, +, +_2014-06-11_, +, +This update fixes problems in 2.0.0-RC1. Read the 2.0.0-RC1 changes for, +advice on upgrading from 1.x to 2.x., +, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, +    connections were neither closed nor pooled., + *  Fix: Revert builder-style return types from OkHttpClient's timeout methods, +    for binary compatibility with OkHttp 1.x., + *  Fix: Don't skip client stream 1 on SPDY/3.1. This fixes SPDY connectivity to, +    `https://google.com`, which doesn't follow the SPDY/3.1 spec!, + *  Fix: Always configure NPN headers. This fixes connectivity to, +    `https://facebook.com` when SPDY and HTTP/2 are both disabled. Otherwise an, +    unexpected NPN response is received and OkHttp crashes., + *  Fix: Write continuation frames when HPACK data is larger than 16383 bytes., + *  Fix: Don't drop uncaught exceptions thrown in async calls., + *  Fix: Throw an exception eagerly when a request body is not legal. Previously, +    we ignored the problem at request-building time, only to crash later with a, +    `NullPointerException`., + *  Fix: Include a backwards-compatible `OkHttp-Response-Source` header with, +    `OkUrlFactory `responses., + *  Fix: Don't include a default User-Agent header in requests made with the Call, +    API. Requests made with OkUrlFactory will continue to have a default user, +    agent., + *  New: Guava-like API to create headers:, +, +    ```, +    Headers headers = Headers.of(name1, value1, name2, value2, ...)., +    ```, +, + *  New: Make the content-type header optional for request bodies., + *  New: `Response.isSuccessful()` is a convenient API to check response codes., + *  New: The response body can now be read outside of the callback. Response, +    bodies must always be closed, otherwise they will leak connections!, + *  New: APIs to create multipart request bodies (`MultipartBuilder`) and form, +    encoding bodies (`FormEncodingBuilder`)., +, +++ b/CHANGELOG.md, +## Version 2.0.0-RC2, +, +_2014-06-11_, +, +This update fixes problems in 2.0.0-RC1. Read the 2.0.0-RC1 changes for, +advice on upgrading from 1.x to 2.x., +, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, +    connections were neither closed nor pooled., + *  Fix: Revert builder-style return types from OkHttpClient's timeout methods, +    for binary compatibility with OkHttp 1.x., + *  Fix: Don't skip client stream 1 on SPDY/3.1. This fixes SPDY connectivity to, +    `https://google.com`, which doesn't follow the SPDY/3.1 spec!, + *  Fix: Always configure NPN headers. This fixes connectivity to, +    `https://facebook.com` when SPDY and HTTP/2 are both disabled. Otherwise an, +    unexpected NPN response is received and OkHttp crashes., + *  Fix: Write continuation frames when HPACK data is larger than 16383 bytes., + *  Fix: Don't drop uncaught exceptions thrown in async calls., + *  Fix: Throw an exception eagerly when a request body is not legal. Previously, +    we ignored the problem at request-building time, only to crash later with a, +    `NullPointerException`., + *  Fix: Include a backwards-compatible `OkHttp-Response-Source` header with, +    `OkUrlFactory `responses., + *  Fix: Don't include a default User-Agent header in requests made with the Call, +    API. Requests made with OkUrlFactory will continue to have a default user, +    agent., + *  New: Guava-like API to create headers:, +, +    ```, +    Headers headers = Headers.of(name1, value1, name2, value2, ...)., +    ```, +, + *  New: Make the content-type header optional for request bodies., + *  New: `Response.isSuccessful()` is a convenient API to check response codes., + *  New: The response body can now be read outside of the callback. Response, +    bodies must always be closed, otherwise they will leak connections!, + *  New: APIs to create multipart request bodies (`MultipartBuilder`) and form, +    encoding bodies (`FormEncodingBuilder`)., +, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +    List<String> allArgs = new ArrayList<>();, +    List<Object> modifiers = new ArrayList<>();, +++ b/CHANGELOG.md, +## Version 2.0.0-RC2, +, +_2014-06-11_, +, +This update fixes problems in 2.0.0-RC1. Read the 2.0.0-RC1 changes for, +advice on upgrading from 1.x to 2.x., +, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, +    connections were neither closed nor pooled., + *  Fix: Revert builder-style return types from OkHttpClient's timeout methods, +    for binary compatibility with OkHttp 1.x., + *  Fix: Don't skip client stream 1 on SPDY/3.1. This fixes SPDY connectivity to, +    `https://google.com`, which doesn't follow the SPDY/3.1 spec!, + *  Fix: Always configure NPN headers. This fixes connectivity to, +    `https://facebook.com` when SPDY and HTTP/2 are both disabled. Otherwise an, +    unexpected NPN response is received and OkHttp crashes.]
[+++ b/pom.xml, +            <plugin>, +                <groupId>org.apache.maven.plugins</groupId>, +                <artifactId>maven-javadoc-plugin</artifactId>, +                <executions>, +                    <execution>, +                        <id>attach-javadocs</id>, +                        <goals><goal>jar</goal></goals>, +                    </execution>, +                </executions>, +            </plugin>, +            <plugin>, +                <groupId>org.apache.maven.plugins</groupId>, +                <artifactId>maven-gpg-plugin</artifactId>, +                <executions>, +                    <execution>, +                        <id>sign-artifacts</id>, +                        <phase>verify</phase>, +                        <goals>, +                            <goal>sign</goal>, +                        </goals>, +                    </execution>, +                </executions>, +            </plugin>]
[+++ b/benchmarks/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/benchmarks/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/mockwebserver/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/benchmarks/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/mockwebserver/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/okcurl/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/benchmarks/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/mockwebserver/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/okcurl/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/okhttp-android-support/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/benchmarks/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/mockwebserver/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/okcurl/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/okhttp-android-support/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/okhttp-apache/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/benchmarks/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/mockwebserver/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/okcurl/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/okhttp-android-support/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/okhttp-apache/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/okhttp-hpacktests/pom.xml, +    <groupId>com.squareup.okhttp3</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>]
[+++ b/checkstyle.xml, +  <module name="SuppressWarningsFilter"/>, +, +    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->, +    <module name="SuppressWarningsHolder"/>, +++ b/checkstyle.xml, +  <module name="SuppressWarningsFilter"/>, +, +    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->, +    <module name="SuppressWarningsHolder"/>, +++ b/pom.xml, +        <version>2.12</version>, +++ b/checkstyle.xml, +  <module name="SuppressWarningsFilter"/>, +, +    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->, +    <module name="SuppressWarningsHolder"/>, +++ b/pom.xml, +        <version>2.12</version>, +++ b/samples/pom.xml, +    <module>slack</module>, +++ b/checkstyle.xml, +  <module name="SuppressWarningsFilter"/>, +, +    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->, +    <module name="SuppressWarningsHolder"/>, +++ b/pom.xml, +        <version>2.12</version>, +++ b/samples/pom.xml, +    <module>slack</module>, +++ b/samples/slack/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3.sample</groupId>, +    <artifactId>sample-parent</artifactId>, +    <version>3.5.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>slack</artifactId>, +  <name>Sample: Slack</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.moshi</groupId>, +      <artifactId>moshi</artifactId>, +    </dependency>, +  </dependencies>, +</project>, +++ b/checkstyle.xml, +  <module name="SuppressWarningsFilter"/>, +, +    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->, +    <module name="SuppressWarningsHolder"/>, +++ b/pom.xml, +        <version>2.12</version>, +++ b/samples/pom.xml, +    <module>slack</module>, +++ b/samples/slack/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3.sample</groupId>, +    <artifactId>sample-parent</artifactId>, +    <version>3.5.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>slack</artifactId>, +  <name>Sample: Slack</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.moshi</groupId>, +      <artifactId>moshi</artifactId>, +    </dependency>, +  </dependencies>, +</project>, +++ b/samples/slack/src/main/java/okhttp3/slack/OAuthSession.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at]
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      @Override public void initChannel(SocketChannel channel) {, +          HandshakeCertificates handshakeCertificates = localhost();, +          SSLEngine engine = handshakeCertificates.sslContext().createSSLEngine();, +        ChannelHandlerContext context, HttpObject message) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      @Override public void initChannel(SocketChannel channel) {, +          HandshakeCertificates handshakeCertificates = localhost();, +          SSLEngine engine = handshakeCertificates.sslContext().createSSLEngine();, +        ChannelHandlerContext context, HttpObject message) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      SSLSocketFactory socketFactory = handshakeCertificates.sslSocketFactory();, +          .sslSocketFactory(socketFactory, handshakeCertificates.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      @Override public void initChannel(SocketChannel channel) {, +          HandshakeCertificates handshakeCertificates = localhost();, +          SSLEngine engine = handshakeCertificates.sslContext().createSSLEngine();, +        ChannelHandlerContext context, HttpObject message) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      SSLSocketFactory socketFactory = handshakeCertificates.sslSocketFactory();, +          .sslSocketFactory(socketFactory, handshakeCertificates.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      SSLSocketFactory socketFactory = handshakeCertificates.sslSocketFactory();, +          .sslSocketFactory(socketFactory, handshakeCertificates.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +          new Scheme("https", 443, new SSLSocketFactory(handshakeCertificates.sslContext())));, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      server.useHttps(handshakeCertificates.sslSocketFactory(), false);, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      @Override public void initChannel(SocketChannel channel) {, +          HandshakeCertificates handshakeCertificates = localhost();, +          SSLEngine engine = handshakeCertificates.sslContext().createSSLEngine();, +        ChannelHandlerContext context, HttpObject message) {, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      SSLSocketFactory socketFactory = handshakeCertificates.sslSocketFactory();, +          .sslSocketFactory(socketFactory, handshakeCertificates.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      SSLSocketFactory socketFactory = handshakeCertificates.sslSocketFactory();, +          .sslSocketFactory(socketFactory, handshakeCertificates.trustManager()), +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();, +      SSLSocketFactory socketFactory = handshakeCertificates.sslSocketFactory();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.tls.HandshakeCertificates;, +      HandshakeCertificates handshakeCertificates = localhost();]
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +  private @Nullable Call call;, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +  private @Nullable Call call;, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +  private @Nullable Call call;, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +  private @Nullable Call call;, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceRecorder.java, +  public void onFailure(EventSource eventSource, @Nullable Throwable t, @Nullable Response response) {, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +  private @Nullable Call call;, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceRecorder.java, +  public void onFailure(EventSource eventSource, @Nullable Throwable t, @Nullable Response response) {, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HandshakeCertificates.java, +import javax.annotation.Nullable;, +    private @Nullable HeldCertificate heldCertificate;, +    private @Nullable X509Certificate[] intermediates;, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +  private @Nullable Call call;, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceRecorder.java, +  public void onFailure(EventSource eventSource, @Nullable Throwable t, @Nullable Response response) {, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HandshakeCertificates.java, +import javax.annotation.Nullable;, +    private @Nullable HeldCertificate heldCertificate;, +    private @Nullable X509Certificate[] intermediates;, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, +import javax.annotation.Nullable;, +    private @Nullable String cn;, +    private @Nullable String ou;, +    private @Nullable BigInteger serialNumber;, +    private @Nullable KeyPair keyPair;, +    private @Nullable HeldCertificate signedBy;, +    private @Nullable String keyAlgorithm;, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +  private @Nullable Call call;, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/main/java/okhttp3/sse/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceRecorder.java, +  public void onFailure(EventSource eventSource, @Nullable Throwable t, @Nullable Response response) {, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HandshakeCertificates.java, +import javax.annotation.Nullable;, +    private @Nullable HeldCertificate heldCertificate;, +    private @Nullable X509Certificate[] intermediates;, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, +import javax.annotation.Nullable;]
[+++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.SSLSocket;, +      SSLSocket sslSocket = getSslSocket(httpConnection);, +      if (sslSocket != null) {, +        cipherSuite = sslSocket.getSession().getCipherSuite();, +          peerCertificatesNonFinal = sslSocket.getSession().getPeerCertificates();, +        localCertificates = sslSocket.getSession().getLocalCertificates();, +    /**, +     * Returns the SSL socket used by {@code httpConnection} for HTTPS, nor null, +     * if the connection isn't using HTTPS. Since we permit redirects across, +     * protocols (HTTP to HTTPS or vice versa), the implementation type of the, +     * connection doesn't necessarily match the implementation type of its HTTP, +     * engine., +     */, +    private SSLSocket getSslSocket(HttpURLConnection httpConnection) {, +      HttpEngine engine = httpConnection instanceof HttpsURLConnectionImpl, +          ? ((HttpsURLConnectionImpl) httpConnection).getHttpEngine(), +          : ((HttpURLConnectionImpl) httpConnection).getHttpEngine();, +      return engine instanceof HttpsURLConnectionImpl.HttpsEngine, +          ? ((HttpsURLConnectionImpl.HttpsEngine) engine).getSslSocket(), +          : null;, +    }, +, +++ b/CHANGELOG.md, +Version 1.1.1 *(2013-06-23)*, +----------------------------, +, + * Fix: ClassCastException when caching responses that were redirected from, +   HTTP to HTTPS., +, +, +++ b/okhttp-apache/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.1.2-SNAPSHOT</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.SSLSocket;, +      SSLSocket sslSocket = getSslSocket(httpConnection);, +      if (sslSocket != null) {, +        cipherSuite = sslSocket.getSession().getCipherSuite();, +          peerCertificatesNonFinal = sslSocket.getSession().getPeerCertificates();, +        localCertificates = sslSocket.getSession().getLocalCertificates();, +    /**, +     * Returns the SSL socket used by {@code httpConnection} for HTTPS, nor null, +     * if the connection isn't using HTTPS. Since we permit redirects across, +     * protocols (HTTP to HTTPS or vice versa), the implementation type of the, +     * connection doesn't necessarily match the implementation type of its HTTP, +     * engine., +     */, +    private SSLSocket getSslSocket(HttpURLConnection httpConnection) {, +      HttpEngine engine = httpConnection instanceof HttpsURLConnectionImpl, +          ? ((HttpsURLConnectionImpl) httpConnection).getHttpEngine(), +          : ((HttpURLConnectionImpl) httpConnection).getHttpEngine();, +      return engine instanceof HttpsURLConnectionImpl.HttpsEngine, +          ? ((HttpsURLConnectionImpl.HttpsEngine) engine).getSslSocket(), +          : null;, +    }, +]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp.internal.framed;, +, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.internal.Platform;, +import com.squareup.okhttp.internal.SslContextBuilder;, +import com.squareup.okhttp.internal.Util;, +import java.io.File;, +import java.io.IOException;, +import java.net.ProtocolException;, +import java.net.ServerSocket;, +import java.net.Socket;, +import java.util.Arrays;, +import java.util.List;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import okio.BufferedSink;, +import okio.Okio;, +import okio.Source;, +, +/** A basic SPDY/HTTP_2 server that serves the contents of a local directory. */, +public final class FramedServer implements IncomingStreamHandler {, +  static final Logger logger = Logger.getLogger(FramedServer.class.getName());, +, +  private final List<Protocol> framedProtocols =, +      Util.immutableList(Protocol.HTTP_2, Protocol.SPDY_3);, +, +  private final File baseDirectory;, +  private final SSLSocketFactory sslSocketFactory;, +, +  public FramedServer(File baseDirectory, SSLSocketFactory sslSocketFactory) {, +    this.baseDirectory = baseDirectory;, +    this.sslSocketFactory = sslSocketFactory;, +  }, +, +  private void run() throws Exception {, +    ServerSocket serverSocket = new ServerSocket(8888);, +    serverSocket.setReuseAddress(true);, +, +    while (true) {, +      Socket socket = null;, +      try {, +        socket = serverSocket.accept();, +, +        SSLSocket sslSocket = doSsl(socket);, +        String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +        Protocol protocol = protocolString != null ? Protocol.get(protocolString) : null;, +        if (protocol == null || !framedProtocols.contains(protocol)) {, +          throw new ProtocolException("Protocol " + protocol + " unsupported");, +        }, +        FramedConnection framedConnection = new FramedConnection.Builder(false, sslSocket), +            .protocol(protocol), +            .handler(this), +            .build();, +        framedConnection.sendConnectionPreface();, +      } catch (IOException e) {, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        Util.closeQuietly(socket);, +      } catch (Exception e) {, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +        Util.closeQuietly(socket);, +      }, +    }, +  }, +, +  private SSLSocket doSsl(Socket socket) throws IOException {, +    SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(, +        socket, socket.getInetAddress().getHostAddress(), socket.getPort(), true);, +    sslSocket.setUseClientMode(false);, +    Platform.get().configureTlsExtensions(sslSocket, null, framedProtocols);, +    sslSocket.startHandshake();, +    return sslSocket;, +  }, +, +  @Override public void receive(final FramedStream stream) throws IOException {, +    try {, +      List<Header> requestHeaders = stream.getRequestHeaders();, +      String path = null;, +      for (int i = 0, size = requestHeaders.size(); i < size; i++) {, +        if (requestHeaders.get(i).name.equals(Header.TARGET_PATH)) {, +          path = requestHeaders.get(i).value.utf8();, +          break;]
[+++ b/okhttp/pom.xml]
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ /dev/null, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/http2/Http2Server.java]
[+++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java, +import org.junit.Assume;, +    Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);, +, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java, +import org.junit.Assume;, +    Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);, +, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +import java.util.Collections;, +import static okhttp3.internal.http2.hpackjson.Story.MISSING;, +    if (interopTests.length == 0) {, +      return Collections.singletonList(new Story[] {MISSING});, +    }, +, +    for (Case testCase : story.getCases()) {, +      bytesIn.write(testCase.getWire());, +      assertSetEquals(String.format("seqno=%d", testCase.getSeqno()), testCase.getHeaders(),, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java, +import org.junit.Assume;, +    Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);, +, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +import java.util.Collections;, +import static okhttp3.internal.http2.hpackjson.Story.MISSING;, +    if (interopTests.length == 0) {, +      return Collections.singletonList(new Story[] {MISSING});, +    }, +, +    for (Case testCase : story.getCases()) {, +      bytesIn.write(testCase.getWire());, +      assertSetEquals(String.format("seqno=%d", testCase.getSeqno()), testCase.getHeaders(),, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +import org.junit.Assume;, +    Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);, +, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java, +import org.junit.Assume;, +    Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);, +, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +import java.util.Collections;, +import static okhttp3.internal.http2.hpackjson.Story.MISSING;, +    if (interopTests.length == 0) {, +      return Collections.singletonList(new Story[] {MISSING});, +    }, +, +    for (Case testCase : story.getCases()) {, +      bytesIn.write(testCase.getWire());, +      assertSetEquals(String.format("seqno=%d", testCase.getSeqno()), testCase.getHeaders(),, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +import org.junit.Assume;, +    Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);, +, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/HpackJsonUtil.java, +import java.net.URL;, +import java.util.Collections;, +import static okhttp3.internal.http2.hpackjson.Story.MISSING;, +    URL resource = HpackJsonUtil.class.getResource("/hpack-test-case");, +    if (resource == null) {, +      return new String[0];, +    }, +    File testCaseDirectory = new File(resource.toURI());, +, +    if (result.isEmpty()) {, +      // missing files, +      return Collections.singletonList(MISSING);, +    }, +, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java, +import org.junit.Assume;, +    Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);, +, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +import java.util.Collections;, +import static okhttp3.internal.http2.hpackjson.Story.MISSING;, +    if (interopTests.length == 0) {, +      return Collections.singletonList(new Story[] {MISSING});, +    }, +, +    for (Case testCase : story.getCases()) {, +      bytesIn.write(testCase.getWire());, +      assertSetEquals(String.format("seqno=%d", testCase.getSeqno()), testCase.getHeaders(),, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +import org.junit.Assume;, +    Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);, +, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/HpackJsonUtil.java, +import java.net.URL;, +import java.util.Collections;, +import static okhttp3.internal.http2.hpackjson.Story.MISSING;, +    URL resource = HpackJsonUtil.class.getResource("/hpack-test-case");, +    if (resource == null) {, +      return new String[0];, +    }, +    File testCaseDirectory = new File(resource.toURI());, +, +    if (result.isEmpty()) {, +      // missing files, +      return Collections.singletonList(MISSING);]
[+++ b/benchmarks/pom.xml, +    <version>2.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>2.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.6.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.6.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.6.0</version>, +++ b/okcurl/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.6.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.6.0</version>]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java, +import com.squareup.okhttp.Authenticator;, +public final class RecordingOkAuthenticator implements Authenticator {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java, +import com.squareup.okhttp.Authenticator;, +public final class RecordingOkAuthenticator implements Authenticator {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.Authenticator;, +  private final Authenticator authenticator = AuthenticatorAdapter.INSTANCE;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java, +import com.squareup.okhttp.Authenticator;, +public final class RecordingOkAuthenticator implements Authenticator {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.Authenticator;, +  private final Authenticator authenticator = AuthenticatorAdapter.INSTANCE;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +  final Authenticator authenticator;, +      Authenticator authenticator, Proxy proxy, List<Protocol> protocols), +  public Authenticator getAuthenticator() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java, +import com.squareup.okhttp.Authenticator;, +public final class RecordingOkAuthenticator implements Authenticator {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.Authenticator;, +  private final Authenticator authenticator = AuthenticatorAdapter.INSTANCE;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +  final Authenticator authenticator;, +      Authenticator authenticator, Proxy proxy, List<Protocol> protocols), +  public Authenticator getAuthenticator() {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Authenticator.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import java.io.IOException;, +import java.net.Proxy;, +, +/**, + * Responds to authentication challenges from the remote web or proxy server., + */, +public interface Authenticator {, +  /**, +   * Returns a request that includes a credential to satisfy an authentication, +   * challenge in {@code response}. Returns null if the challenge cannot be, +   * satisfied. This method is called in response to an HTTP 401 unauthorized, +   * status code sent by the origin server., +   *, +   * <p>Typical implementations will look up a credential and create a request, +   * derived from the initial request by setting the "Authorization" header., +   * <pre>   {@code, +   *, +   *    String credential = Credentials.basic(...), +   *    return response.request().newBuilder(), +   *        .header("Authorization", credential), +   *        .build();, +   * }</pre>, +   */, +  Request authenticate(Proxy proxy, Response response) throws IOException;, +, +  /**, +   * Returns a request that includes a credential to satisfy an authentication, +   * challenge made by {@code response}. Returns null if the challenge cannot be, +   * satisfied. This method is called in response to an HTTP 407 unauthorized, +   * status code sent by the proxy server., +   *, +   * <p>Typical implementations will look up a credential and create a request, +   * derived from the initial request by setting the "Proxy-Authorization", +   * header. <pre>   {@code, +   *, +   *    String credential = Credentials.basic(...), +   *    return response.request().newBuilder(), +   *        .header("Proxy-Authorization", credential), +   *        .build();, +   * }</pre>, +   */, +  Request authenticateProxy(Proxy proxy, Response response) throws IOException;, +}, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java, +import com.squareup.okhttp.Authenticator;, +public final class RecordingOkAuthenticator implements Authenticator {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.Authenticator;, +  private final Authenticator authenticator = AuthenticatorAdapter.INSTANCE;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +  final Authenticator authenticator;, +      Authenticator authenticator, Proxy proxy, List<Protocol> protocols), +  public Authenticator getAuthenticator() {]
[+++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    // While MockWebServer waits to read the client's HEADERS frame before sending the response, it, +    // doesn't wait to read the client's DATA frame and may send a DATA frame before the client, +    // does. So we can't assume the client's empty DATA will be logged first., +    assertThat(countFrames(logs, "FINE: >> 0x00000003     0 DATA          END_STREAM")), +        .isEqualTo((long) 2);, +    assertThat(countFrames(logs, "FINE: >> 0x00000003     3 DATA          ")), +        .isEqualTo((long) 1);, +++ /dev/null, +++ b/build.gradle, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    // While MockWebServer waits to read the client's HEADERS frame before sending the response, it, +    // doesn't wait to read the client's DATA frame and may send a DATA frame before the client, +    // does. So we can't assume the client's empty DATA will be logged first., +    assertThat(countFrames(logs, "FINE: >> 0x00000003     0 DATA          END_STREAM")), +        .isEqualTo((long) 2);, +    assertThat(countFrames(logs, "FINE: >> 0x00000003     3 DATA          ")), +        .isEqualTo((long) 1);, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    // While MockWebServer waits to read the client's HEADERS frame before sending the response, it, +    // doesn't wait to read the client's DATA frame and may send a DATA frame before the client, +    // does. So we can't assume the client's empty DATA will be logged first., +    assertThat(countFrames(logs, "FINE: >> 0x00000003     0 DATA          END_STREAM")), +        .isEqualTo((long) 2);, +    assertThat(countFrames(logs, "FINE: >> 0x00000003     3 DATA          ")), +        .isEqualTo((long) 1);, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.kt, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.connection, +, +import java.io.IOException;, +, +/**, + * An exception thrown to indicate a problem connecting via a single Route. Multiple attempts may, + * have been made with alternative protocols, none of which were successful., + */, +class RouteException internal constructor(val firstConnectException: IOException) :, +    RuntimeException(firstConnectException) {, +  var lastConnectException: IOException = firstConnectException, +, +  fun addConnectException(e: IOException) {, +    firstConnectException.addSuppressed(e), +    lastConnectException = e, +  }, +}, +++ /dev/null, +++ b/build.gradle, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    // While MockWebServer waits to read the client's HEADERS frame before sending the response, it, +    // doesn't wait to read the client's DATA frame and may send a DATA frame before the client, +    // does. So we can't assume the client's empty DATA will be logged first., +    assertThat(countFrames(logs, "FINE: >> 0x00000003     0 DATA          END_STREAM")), +        .isEqualTo((long) 2);, +    assertThat(countFrames(logs, "FINE: >> 0x00000003     3 DATA          ")), +        .isEqualTo((long) 1);, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.kt, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.connection, +, +import java.io.IOException;, +, +/**]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair, "1");, +  public KeyPair generateKeyPair() throws GeneralSecurityException {, +  public X509Certificate selfSignedCertificate(KeyPair keyPair, String serialNumber), +      throws GeneralSecurityException {, +    generator.setSerialNumber(new BigInteger(serialNumber));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair, "1");, +  public KeyPair generateKeyPair() throws GeneralSecurityException {, +  public X509Certificate selfSignedCertificate(KeyPair keyPair, String serialNumber), +      throws GeneralSecurityException {, +    generator.setSerialNumber(new BigInteger(serialNumber));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().configureTlsExtensions(sslSocket, null, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair, "1");, +  public KeyPair generateKeyPair() throws GeneralSecurityException {, +  public X509Certificate selfSignedCertificate(KeyPair keyPair, String serialNumber), +      throws GeneralSecurityException {, +    generator.setSerialNumber(new BigInteger(serialNumber));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().configureTlsExtensions(sslSocket, null, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            Platform.get().configureTlsExtensions(sslSocket, null, protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair, "1");, +  public KeyPair generateKeyPair() throws GeneralSecurityException {, +  public X509Certificate selfSignedCertificate(KeyPair keyPair, String serialNumber), +      throws GeneralSecurityException {, +    generator.setSerialNumber(new BigInteger(serialNumber));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().configureTlsExtensions(sslSocket, null, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            Platform.get().configureTlsExtensions(sslSocket, null, protocols);, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair, "1");, +  public KeyPair generateKeyPair() throws GeneralSecurityException {, +  public X509Certificate selfSignedCertificate(KeyPair keyPair, String serialNumber), +      throws GeneralSecurityException {, +    generator.setSerialNumber(new BigInteger(serialNumber));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().configureTlsExtensions(sslSocket, null, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            Platform.get().configureTlsExtensions(sslSocket, null, protocols);, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair, "1");, +  public KeyPair generateKeyPair() throws GeneralSecurityException {, +  public X509Certificate selfSignedCertificate(KeyPair keyPair, String serialNumber), +      throws GeneralSecurityException {, +    generator.setSerialNumber(new BigInteger(serialNumber));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().configureTlsExtensions(sslSocket, null, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            Platform.get().configureTlsExtensions(sslSocket, null, protocols);, +++ /dev/null, +++ /dev/null, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.spdy;, +, +import com.squareup.okhttp.internal.spdy.hpackjson.Story;, +import java.util.Collection;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +, +import static com.squareup.okhttp.internal.spdy.hpackjson.HpackJsonUtil.storiesForCurrentDraft;, +, +@RunWith(Parameterized.class), +public class HpackDecodeInteropTest extends HpackDecodeTestBase {, +, +  public HpackDecodeInteropTest(Story story) {, +    super(story);, +  }, +, +  @Parameterized.Parameters(name="{0}"), +  public static Collection<Story[]> createStories() throws Exception {, +    return createStories(storiesForCurrentDraft());, +  }, +, +  @Test, +  public void testGoodDecoderInterop() throws Exception {, +    testDecoder();]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, +              transport = Transport.HTTP_20_DRAFT_09;, +        if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, +          if (transport == Transport.HTTP_20_DRAFT_09) {, +            builder.http20Draft09();, +            builder.spdy3();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, +              transport = Transport.HTTP_20_DRAFT_09;, +        if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, +          if (transport == Transport.HTTP_20_DRAFT_09) {, +            builder.http20Draft09();, +            builder.spdy3();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/ByteArrayPool.java, +  /*, +   * Copyright (C) 2012 The Android Open Source Project, +   *, +   * Licensed under the Apache License, Version 2.0 (the "License");, +   * you may not use this file except in compliance with the License., +   * You may obtain a copy of the License at, +   *, +   *      http://www.apache.org/licenses/LICENSE-2.0, +   *, +   * Unless required by applicable law or agreed to in writing, software, +   * distributed under the License is distributed on an "AS IS" BASIS,, +   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +   * See the License for the specific language governing permissions and, +   * limitations under the License., +   */, +, +  package com.squareup.okhttp.internal.spdy;, +, +  import java.util.ArrayList;, +  import java.util.Collections;, +  import java.util.Comparator;, +  import java.util.List;, +, +  /**, +   * ByteArrayPool is a source and repository of <code>byte[]</code> objects. Its purpose is to, +   * supply those buffers to consumers who need to use them for a short period of time and then, +   * dispose of them. Simply creating and disposing such buffers in the conventional manner can, +   * considerable heap churn and garbage collection delays on Android, which lacks good management, +   * of short-lived heap objects. It may be advantageous to trade off some memory in the form of a, +   * permanently allocated pool of buffers in order to gain heap performance improvements; that is, +   * what this class does., +   * <p>, +   * A good candidate user for this class is something like an I/O system that uses large temporary, +   * <code>byte[]</code> buffers to copy data around. In these use cases, often the consumer wants, +   * the buffer to be a certain minimum size to ensure good performance (e.g. when copying data, +   * chunks off of a stream), but doesn't mind if the buffer is larger than the minimum. Taking this, +   * into account and also to maximize the odds of being able to reuse a recycled buffer, this, +   * class is free to return buffers larger than the requested size. The caller needs to be able, +   * to gracefully deal with getting buffers any size over the minimum., +   * <p>, +   * If there is not a suitably-sized buffer in its recycling pool when a buffer is requested, this, +   * class will allocate a new buffer and return it., +   * <p>, +   * This class has no special ownership of buffers it creates; the caller is free to take a buffer, +   * it receives from this pool, use it permanently, and never return it to the pool; additionally,, +   * it is not harmful to return to this pool a buffer that was allocated elsewhere, provided there, +   * are no other lingering references to it., +   * <p>, +   * This class ensures that the total size of the buffers in its recycling pool never exceeds a, +   * certain byte limit. When a buffer is returned that would cause the pool to exceed the limit,, +   * least-recently-used buffers are disposed., +   */, +  public class ByteArrayPool {, +    /** The buffer pool, arranged both by last use and by buffer size. */, +    private List<byte[]> mBuffersByLastUse = new ArrayList<byte[]>();, +    private List<byte[]> mBuffersBySize = new ArrayList<byte[]>(64);, +, +    /** The total size of the buffers in the pool. */, +    private int mCurrentSize = 0;, +, +    /**, +     * The maximum aggregate size of the buffers in the pool. Old buffers are discarded to stay, +     * under this limit., +     */, +    private final int mSizeLimit;, +, +    /** Compares buffers by size. */, +    protected static final Comparator<byte[]> BUF_COMPARATOR = new Comparator<byte[]>() {, +      @Override, +      public int compare(byte[] lhs, byte[] rhs) {, +        return lhs.length - rhs.length;, +      }, +    };, +, +    /**, +     * @param sizeLimit the maximum size of the pool, in bytes, +     */]
[+++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java, +++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java, +import okhttp3.internal.http2.Header;]
[+++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, +  public static void ensureAllConnectionsReleased(OkHttpClient client) {, +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +  }, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, +  public static void ensureAllConnectionsReleased(OkHttpClient client) {, +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, +  public static void ensureAllConnectionsReleased(OkHttpClient client) {, +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, +  public static void ensureAllConnectionsReleased(OkHttpClient client) {, +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +import org.junit.After;, +  @After, +  public void tearDown() {, +    TestUtil.ensureAllConnectionsReleased(client);, +  }, +, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, +  public static void ensureAllConnectionsReleased(OkHttpClient client) {, +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +import org.junit.After;, +  @After, +  public void tearDown() {, +    TestUtil.ensureAllConnectionsReleased(client);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import org.junit.After;, +  @After, +  public void tearDown() {, +    TestUtil.ensureAllConnectionsReleased(client);, +  }, +, +++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java, +import static org.junit.Assert.assertEquals;, +, +, +  public static void ensureAllConnectionsReleased(OkHttpClient client) {, +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +import org.junit.After;, +  @After, +  public void tearDown() {, +    TestUtil.ensureAllConnectionsReleased(client);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java]
[+++ b/mockwebserver/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.mockwebserver</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ b/mockwebserver/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.mockwebserver</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ b/okcurl/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.curl</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ b/mockwebserver/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.mockwebserver</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ b/okcurl/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.curl</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ b/okhttp-android-support/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.androidsupport</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ b/mockwebserver/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.mockwebserver</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ b/okcurl/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.curl</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ b/okhttp-android-support/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>]
[+++ b/mockwebserver/pom.xml, +    <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.1</version>, +++ b/okcurl/pom.xml, +    <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.1</version>, +++ b/okcurl/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.1</version>, +++ b/okcurl/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.1</version>, +++ b/okcurl/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.1</version>, +++ b/okcurl/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.1</version>, +++ b/okcurl/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.1</version>, +++ b/okcurl/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.1</version>, +++ b/okcurl/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.13.1</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.1</version>, +++ b/okcurl/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.1</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.1</version>]
[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import org.junit.Ignore;, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  @Ignore("TODO(jwilson): reject parameters that use invalid characters"), +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Other", singletonMap((String) null, "abc=="))),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import org.junit.Ignore;, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  @Ignore("TODO(jwilson): reject parameters that use invalid characters"), +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Other", singletonMap((String) null, "abc=="))),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +import java.net.MalformedURLException;, +import java.net.UnknownHostException;, +    try {, +      new HttpUrl.Builder().scheme("http").toString();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("host == null", expected.getMessage());, +    try {, +      new HttpUrl.Builder().host("host").toString();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("scheme == null", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import org.junit.Ignore;, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  @Ignore("TODO(jwilson): reject parameters that use invalid characters"), +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Other", singletonMap((String) null, "abc=="))),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +import java.net.MalformedURLException;, +import java.net.UnknownHostException;, +    try {, +      new HttpUrl.Builder().scheme("http").toString();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("host == null", expected.getMessage());, +    try {, +      new HttpUrl.Builder().host("host").toString();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("scheme == null", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area")), response.challenges());, +    assertEquals(Arrays.asList(new Challenge("Bearer", "oauthed")), response.challenges());, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import org.junit.Ignore;, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  @Ignore("TODO(jwilson): reject parameters that use invalid characters"), +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Other", singletonMap((String) null, "abc=="))),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +import java.net.MalformedURLException;, +import java.net.UnknownHostException;, +    try {, +      new HttpUrl.Builder().scheme("http").toString();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("host == null", expected.getMessage());, +    try {, +      new HttpUrl.Builder().host("host").toString();, +      fail();]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior., +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior., +++ b/okhttp/src/main/java/okhttp3/Cache.java, +  final DiskLruCache cache;, +  int writeSuccessCount;, +  int writeAbortCount;, +  CacheRequest put(Response response) {, +  void remove(Request request) throws IOException {, +  void update(Response cached, Response network) {, +  synchronized void trackResponse(CacheStrategy cacheStrategy) {, +  synchronized void trackConditionalCacheHit() {, +    boolean done;, +  static int readInt(BufferedSource source) throws IOException {, +    final DiskLruCache.Snapshot snapshot;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior., +++ b/okhttp/src/main/java/okhttp3/Cache.java, +  final DiskLruCache cache;, +  int writeSuccessCount;, +  int writeAbortCount;, +  CacheRequest put(Response response) {, +  void remove(Request request) throws IOException {, +  void update(Response cached, Response network) {, +  synchronized void trackResponse(CacheStrategy cacheStrategy) {, +  synchronized void trackConditionalCacheHit() {, +    boolean done;, +  static int readInt(BufferedSource source) throws IOException {, +    final DiskLruCache.Snapshot snapshot;, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +   * <p>These differences may have a significant consequence when the URI is interpreted by a, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior., +++ b/okhttp/src/main/java/okhttp3/Cache.java, +  final DiskLruCache cache;, +  int writeSuccessCount;, +  int writeAbortCount;, +  CacheRequest put(Response response) {, +  void remove(Request request) throws IOException {, +  void update(Response cached, Response network) {, +  synchronized void trackResponse(CacheStrategy cacheStrategy) {, +  synchronized void trackConditionalCacheHit() {, +    boolean done;, +  static int readInt(BufferedSource source) throws IOException {, +    final DiskLruCache.Snapshot snapshot;, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +   * <p>These differences may have a significant consequence when the URI is interpreted by a, +++ b/okhttp/src/main/java/okhttp3/Request.java, +  final HttpUrl url;, +  final String method;, +  final Headers headers;, +  final RequestBody body;, +  final Object tag;, +  Request(Builder builder) {, +    HttpUrl url;, +    String method;, +    Headers.Builder headers;, +    RequestBody body;, +    Object tag;, +    Builder(Request request) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior., +++ b/okhttp/src/main/java/okhttp3/Cache.java, +  final DiskLruCache cache;, +  int writeSuccessCount;, +  int writeAbortCount;, +  CacheRequest put(Response response) {, +  void remove(Request request) throws IOException {, +  void update(Response cached, Response network) {, +  synchronized void trackResponse(CacheStrategy cacheStrategy) {, +  synchronized void trackConditionalCacheHit() {, +    boolean done;, +  static int readInt(BufferedSource source) throws IOException {, +    final DiskLruCache.Snapshot snapshot;, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +   * <p>These differences may have a significant consequence when the URI is interpreted by a, +++ b/okhttp/src/main/java/okhttp3/Request.java, +  final HttpUrl url;, +  final String method;, +  final Headers headers;, +  final RequestBody body;, +  final Object tag;, +  Request(Builder builder) {, +    HttpUrl url;, +    String method;, +    Headers.Builder headers;, +    RequestBody body;, +    Object tag;, +    Builder(Request request) {, +++ b/okhttp/src/main/java/okhttp3/Response.java, +  final Request request;, +  final Protocol protocol;, +  final int code;]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      if (position == 0 || position > response.headers().size()) {, +      if (position > response.headers().size()) {, +        return null;, +      }, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      if (position == 0 || position > response.headers().size()) {, +      if (position > response.headers().size()) {, +        return null;, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelTagImmediatelyAfterEnqueue() throws Exception {, +        .tag("request"), +    client.cancel("request");, +        client.cancel("request");, +    Request request = new Request.Builder().url(server.url("/a")).tag("request").build();, +      client.newCall(request).execute();, +        client.cancel("request B");, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    client.newCall(requestA).enqueue(callback);, +    Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();, +    client.newCall(requestB).enqueue(callback);, +, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    Request request = new Request.Builder().url(server.url("/a")).tag("request A").build();, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      if (position == 0 || position > response.headers().size()) {, +      if (position > response.headers().size()) {, +        return null;, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelTagImmediatelyAfterEnqueue() throws Exception {, +        .tag("request"), +    client.cancel("request");, +        client.cancel("request");, +    Request request = new Request.Builder().url(server.url("/a")).tag("request").build();, +      client.newCall(request).execute();, +        client.cancel("request B");, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    client.newCall(requestA).enqueue(callback);, +    Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();, +    client.newCall(requestB).enqueue(callback);, +, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    Request request = new Request.Builder().url(server.url("/a")).tag("request A").build();, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +    client.newCall(newRequest("http://a/1", "tag1")).enqueue(callback);, +    client.newCall(newRequest("http://a/2")).enqueue(callback);, +    dispatcher.cancel("tag1");, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      if (position == 0 || position > response.headers().size()) {, +      if (position > response.headers().size()) {, +        return null;, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelTagImmediatelyAfterEnqueue() throws Exception {, +        .tag("request"), +    client.cancel("request");, +        client.cancel("request");, +    Request request = new Request.Builder().url(server.url("/a")).tag("request").build();, +      client.newCall(request).execute();, +        client.cancel("request B");, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    client.newCall(requestA).enqueue(callback);, +    Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();, +    client.newCall(requestB).enqueue(callback);, +, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    Request request = new Request.Builder().url(server.url("/a")).tag("request A").build();, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +    client.newCall(newRequest("http://a/1", "tag1")).enqueue(callback);, +    client.newCall(newRequest("http://a/2")).enqueue(callback);, +    dispatcher.cancel("tag1");, +++ /dev/null, +++ b/CHANGELOG.md, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      if (position == 0 || position > response.headers().size()) {, +      if (position > response.headers().size()) {, +        return null;, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelTagImmediatelyAfterEnqueue() throws Exception {, +        .tag("request"), +    client.cancel("request");, +        client.cancel("request");, +    Request request = new Request.Builder().url(server.url("/a")).tag("request").build();, +      client.newCall(request).execute();, +        client.cancel("request B");, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    client.newCall(requestA).enqueue(callback);, +    Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();, +    client.newCall(requestB).enqueue(callback);, +, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    Request request = new Request.Builder().url(server.url("/a")).tag("request A").build();]
[+++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals(expected, HttpUrl.parse("    http://host/    ")); // Both., +    assertEquals(expected, HttpUrl.parse("http://host/").resolve("   "));, +    assertEquals(expected, HttpUrl.parse("http://host/").resolve("  .  "));, +  @Ignore // TODO(jwilson): implement character encoding., +  @Ignore // TODO(jwilson): implement character encoding., +    assertEquals("password%40", HttpUrl.parse("http://:password@@host/path").password());, +  @Ignore // TODO(jwilson): implement character encoding., +    assertEquals("/%00", HttpUrl.parse("http://host/\u0000").path());, +    assertEquals("/%08", HttpUrl.parse("http://host/\u0008").path());, +    assertEquals("/%EF%BF%BD", HttpUrl.parse("http://host/\ufffd").path());, +  @Test public void port() throws Exception {, +    assertEquals(HttpUrl.parse("http://host/"), HttpUrl.parse("http://host:80/"));, +    assertEquals(HttpUrl.parse("http://host:99/"), HttpUrl.parse("http://host:99/"));, +    assertEquals(65535, HttpUrl.parse("http://host:65535/").port());, +    assertEquals(null, HttpUrl.parse("http://host:0/"));, +    assertEquals(null, HttpUrl.parse("http://host:65536/"));, +    assertEquals(null, HttpUrl.parse("http://host:-1/"));, +    assertEquals(null, HttpUrl.parse("http://host:a/"));, +    assertEquals(null, HttpUrl.parse("http://host:%39%39/"));, +  }, +, +  @Ignore // TODO(jwilson): implement character encoding., +  @Ignore // TODO(jwilson): implement character encoding., +  @Ignore // TODO(jwilson): implement character encoding., +, +  @Test public void relativePath() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");, +    assertEquals(HttpUrl.parse("http://host/a/b/d/e/f"), base.resolve("d/e/f"));, +    assertEquals(HttpUrl.parse("http://host/d/e/f"), base.resolve("../../d/e/f"));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve(".."));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../.."));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../../.."));, +    assertEquals(HttpUrl.parse("http://host/a/b/"), base.resolve("."));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("././.."));, +    assertEquals(HttpUrl.parse("http://host/a/b/c/"), base.resolve("c/d/../e/../"));, +    assertEquals(HttpUrl.parse("http://host/a/b/..e/"), base.resolve("..e/"));, +    assertEquals(HttpUrl.parse("http://host/a/b/e/f../"), base.resolve("e/f../"));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("%2E."));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve(".%2E"));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("%2E%2E"));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("%2e."));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve(".%2e"));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("%2e%2e"));, +    assertEquals(HttpUrl.parse("http://host/a/b/"), base.resolve("%2E"));, +    assertEquals(HttpUrl.parse("http://host/a/b/"), base.resolve("%2e"));, +  }, +, +  @Test public void pathWithBackslash() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");, +    assertEquals(HttpUrl.parse("http://host/a/b/d/e/f"), base.resolve("d\\e\\f"));, +    assertEquals(HttpUrl.parse("http://host/d/e/f"), base.resolve("../..\\d\\e\\f"));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("..\\.."));, +  }, +, +  @Test public void relativePathWithSameScheme() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");, +    assertEquals(HttpUrl.parse("http://host/a/b/d/e/f"), base.resolve("http:d/e/f"));, +    assertEquals(HttpUrl.parse("http://host/d/e/f"), base.resolve("http:../../d/e/f"));, +  }, +++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals(expected, HttpUrl.parse("    http://host/    ")); // Both., +    assertEquals(expected, HttpUrl.parse("http://host/").resolve("   "));, +    assertEquals(expected, HttpUrl.parse("http://host/").resolve("  .  "));, +  @Ignore // TODO(jwilson): implement character encoding., +  @Ignore // TODO(jwilson): implement character encoding., +    assertEquals("password%40", HttpUrl.parse("http://:password@@host/path").password());, +  @Ignore // TODO(jwilson): implement character encoding., +    assertEquals("/%00", HttpUrl.parse("http://host/\u0000").path());, +    assertEquals("/%08", HttpUrl.parse("http://host/\u0008").path());, +    assertEquals("/%EF%BF%BD", HttpUrl.parse("http://host/\ufffd").path());, +  @Test public void port() throws Exception {, +    assertEquals(HttpUrl.parse("http://host/"), HttpUrl.parse("http://host:80/"));, +    assertEquals(HttpUrl.parse("http://host:99/"), HttpUrl.parse("http://host:99/"));, +    assertEquals(65535, HttpUrl.parse("http://host:65535/").port());, +    assertEquals(null, HttpUrl.parse("http://host:0/"));, +    assertEquals(null, HttpUrl.parse("http://host:65536/"));, +    assertEquals(null, HttpUrl.parse("http://host:-1/"));, +    assertEquals(null, HttpUrl.parse("http://host:a/"));, +    assertEquals(null, HttpUrl.parse("http://host:%39%39/"));, +  }, +, +  @Ignore // TODO(jwilson): implement character encoding., +  @Ignore // TODO(jwilson): implement character encoding., +  @Ignore // TODO(jwilson): implement character encoding., +, +  @Test public void relativePath() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");]
[+++ b/okhttp-apache/pom.xml, +    <version>1.1.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1</version>, +++ b/pom.xml, +  <version>1.1.1</version>, +    <tag>parent-1.1.1</tag>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1</version>, +++ b/pom.xml, +  <version>1.1.1</version>, +    <tag>parent-1.1.1</tag>, +++ b/samples/guide/pom.xml, +    <version>1.1.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1</version>, +++ b/pom.xml, +  <version>1.1.1</version>, +    <tag>parent-1.1.1</tag>, +++ b/samples/guide/pom.xml, +    <version>1.1.1</version>, +++ b/samples/pom.xml, +    <version>1.1.1</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.1.1</version>, +++ b/okhttp/pom.xml, +    <version>1.1.1</version>, +++ b/pom.xml, +  <version>1.1.1</version>, +    <tag>parent-1.1.1</tag>, +++ b/samples/guide/pom.xml, +    <version>1.1.1</version>, +++ b/samples/pom.xml, +    <version>1.1.1</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.1.1</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/HeldCertificate.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.mockwebserver;, +, +import java.io.IOException;, +import java.math.BigInteger;, +import java.security.GeneralSecurityException;, +import java.security.KeyPair;, +import java.security.KeyPairGenerator;, +import java.security.PrivateKey;, +import java.security.PublicKey;, +import java.security.SecureRandom;, +import java.security.Security;, +import java.security.cert.CertificateEncodingException;, +import java.security.cert.X509Certificate;, +import java.util.ArrayList;, +import java.util.Date;, +import java.util.List;, +import java.util.UUID;, +import java.util.concurrent.TimeUnit;, +import javax.security.auth.x500.X500Principal;, +import okio.ByteString;, +import org.bouncycastle.asn1.ASN1Encodable;, +import org.bouncycastle.asn1.DERSequence;, +import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;, +import org.bouncycastle.asn1.x509.BasicConstraints;, +import org.bouncycastle.asn1.x509.GeneralName;, +import org.bouncycastle.asn1.x509.X509Extensions;, +import org.bouncycastle.jce.provider.BouncyCastleProvider;, +import org.bouncycastle.x509.X509V3CertificateGenerator;, +, +import static okhttp3.internal.Util.verifyAsIpAddress;, +, +/**, + * A certificate and its private key., + *, + * <p>Typically the certificate and private key combination would be used by MockWebServer (or, + * another HTTPS server) to identify itself in the TLS handshake. The certificate alone can be used, + * by OkHttp (or another HTTPS client) to verify the identity of that server., + *, + * <p>The trust challenge is reversed for mutual auth. In this case the client has both the private, + * key and the certificate, and the server has a certificate only., + *, + * <p>In addition to the TLS handshake, a held certificate can be used to sign a different, + * certificate. In such cases the held certificate represents a certificate authority., + *, + * <p>This class is intended to be used for testing. It uses small keys (1024 bit RSA) because they, + * are quick to generate., + */, +public final class HeldCertificate {, +  private final X509Certificate certificate;, +  private final KeyPair keyPair;, +, +  private HeldCertificate(X509Certificate certificate, KeyPair keyPair) {, +    this.certificate = certificate;, +    this.keyPair = keyPair;, +  }, +, +  public X509Certificate certificate() {, +    return certificate;, +  }, +, +  public KeyPair keyPair() {, +    return keyPair;, +  }, +, +  /**, +   * Returns the certificate encoded in <a href="https://tools.ietf.org/html/rfc7468">PEM, +   * format</a>., +   */, +  public String certificatePem() {, +    try {, +      StringBuilder result = new StringBuilder();, +      result.append("-----BEGIN CERTIFICATE-----\n");, +      encodeBase64Lines(result, ByteString.of(certificate.getEncoded()));, +      result.append("-----END CERTIFICATE-----\n");, +      return result.toString();, +    } catch (CertificateEncodingException e) {, +      throw new AssertionError(e);, +    }, +  }, +, +  /**, +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   */]
[+++ b/okhttp-apache/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.0.2-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.0.2-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.0.2-SNAPSHOT</version>]
[+++ b/.travis.yml, +  - ./mvnw checkstyle:check -B]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +public final class MockWebServer implements TestRule, Closeable {, +  @Override public void close() throws IOException {, +    shutdown();, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.Closeable;, +public final class MockWebServer implements TestRule, Closeable {, +  @Override public void close() throws IOException {, +    shutdown();, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.io.Closeable;, +  @Test public void closeViaClosable() throws IOException {, +    Closeable server = new MockWebServer();, +    server.close();, +  }, +]
[+++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/WebPlatformTestRun.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import com.google.gson.Gson;, +import com.squareup.okhttp.internal.Util;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +import java.util.List;, +, +/**, + * The result of a test run from the <a href="https://github.com/w3c/web-platform-tests">W3C web, + * platform tests</a>. This class serves as a Gson model for browser test results., + *, + * <p><strong>Note:</strong> When extracting the .json file from the browser after a test run, be, + * careful to avoid text encoding problems. In one environment, Safari was corrupting UTF-8 data, + * for download (but the clipboard was fine), and Firefox was corrupting UTF-8 data copied to the, + * clipboard (but the download was fine)., + */, +public final class WebPlatformTestRun {, +  List<TestResult> results;, +, +  public SubtestResult get(String testName, String subtestName) {, +    for (TestResult result : results) {, +      if (testName.equals(result.test)) {, +        for (SubtestResult subtestResult : result.subtests) {, +          if (subtestName.equals(subtestResult.name)) {, +            return subtestResult;, +          }, +        }, +      }, +    }, +    return null;, +  }, +, +  public static WebPlatformTestRun load(InputStream in) throws IOException {, +    try {, +      return new Gson().getAdapter(WebPlatformTestRun.class), +          .fromJson(new InputStreamReader(in, Util.UTF_8));, +    } finally {, +      Util.closeQuietly(in);, +    }, +  }, +, +  public static class TestResult {, +    String test;, +    List<SubtestResult> subtests;, +  }, +, +  public static class SubtestResult {, +    String name;, +    Status status;, +    String message;, +, +    public boolean isPass() {, +      return status == Status.PASS;, +    }, +  }, +, +  public enum Status {, +    PASS, FAIL, +  }, +}, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/WebPlatformTestRun.java, +/*, + * Copyright (C) 2015 Square, Inc., + *]
[+++ b/mockwebserver/pom.xml, +    <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-sse/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.13.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.13.0</version>, +++ b/okcurl/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.13.0</version>, +++ b/okhttp-dnsoverhttps/pom.xml, +    <version>3.13.0</version>]
[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-13, +    Request.Builder requestBuilder = new Request.Builder().header("Accept", DNS_MESSAGE.toString());, +      requestBuilder = requestBuilder.url(url).post(RequestBody.create(DNS_MESSAGE, query));, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-13, +    Request.Builder requestBuilder = new Request.Builder().header("Accept", DNS_MESSAGE.toString());, +      requestBuilder = requestBuilder.url(url).post(RequestBody.create(DNS_MESSAGE, query));, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java, +        .url(HttpUrl.get("https://dns.google.com/experimental")), +        .url(HttpUrl.get("https://cloudflare-dns.com/dns-query")), +        .url(HttpUrl.get("https://doh.cleanbrowsing.org/doh/family-filter/")), +      //result.add(buildCleanBrowsing(client)); // timeouts, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-13, +    Request.Builder requestBuilder = new Request.Builder().header("Accept", DNS_MESSAGE.toString());, +      requestBuilder = requestBuilder.url(url).post(RequestBody.create(DNS_MESSAGE, query));, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java, +        .url(HttpUrl.get("https://dns.google.com/experimental")), +        .url(HttpUrl.get("https://cloudflare-dns.com/dns-query")), +        .url(HttpUrl.get("https://doh.cleanbrowsing.org/doh/family-filter/")), +      //result.add(buildCleanBrowsing(client)); // timeouts, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java, +          new DnsOverHttps.Builder().client(bootstrapClient).url(url).post(true).build());]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +public class ConnectionPool {, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +public class ConnectionPool {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +public class Route {, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +public class ConnectionPool {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +public class Route {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.Timeout;, +  public static final Source EMPTY_SOURCE = new Source() {, +    @Override public long read(Buffer sink, long byteCount) throws IOException {, +      return -1;, +    }, +    @Override public Timeout timeout() {, +      return Timeout.NONE;, +    }, +    @Override public void close() throws IOException {, +    }, +  };, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +public class ConnectionPool {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +public class Route {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.Timeout;, +  public static final Source EMPTY_SOURCE = new Source() {, +    @Override public long read(Buffer sink, long byteCount) throws IOException {, +      return -1;, +    }, +    @Override public Timeout timeout() {, +      return Timeout.NONE;, +    }, +    @Override public void close() throws IOException {, +    }, +  };, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java, +import com.squareup.okhttp.internal.Util;, +import okio.Okio;, +      return Okio.buffer(Util.EMPTY_SOURCE);, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +public class ConnectionPool {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +public class Route {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.Timeout;, +  public static final Source EMPTY_SOURCE = new Source() {, +    @Override public long read(Buffer sink, long byteCount) throws IOException {, +      return -1;, +    }, +    @Override public Timeout timeout() {, +      return Timeout.NONE;, +    }, +    @Override public void close() throws IOException {, +    }, +  };, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java, +import com.squareup.okhttp.internal.Util;, +import okio.Okio;, +      return Okio.buffer(Util.EMPTY_SOURCE);, +++ b/pom.xml, +    <!-- Targetted to jdk7u60-b13; Oracle jdk7u55-b13. -->, +    <npn.version>1.1.7.v20140316</npn.version>]
[+++ b/okhttp-apache/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-apache</artifactId>, +  <name>OkHttp Apache HttpClient</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>org.apache.httpcomponents</groupId>, +      <artifactId>httpclient</artifactId>, +      <scope>provided</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/okhttp-apache/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-apache</artifactId>, +  <name>OkHttp Apache HttpClient</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>org.apache.httpcomponents</groupId>, +      <artifactId>httpclient</artifactId>, +      <scope>provided</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +// Copyright 2013 Square, Inc., +package com.squareup.okhttp.apache;, +, +import com.squareup.okhttp.OkHttpClient;, +import java.io.IOException;, +import java.io.InputStream;, +import java.net.HttpURLConnection;, +import java.net.InetSocketAddress;, +import java.net.Proxy;, +import java.net.URL;, +import org.apache.http.Header;, +import org.apache.http.HttpEntity;, +import org.apache.http.HttpEntityEnclosingRequest;, +import org.apache.http.HttpHost;, +import org.apache.http.HttpRequest;, +import org.apache.http.HttpResponse;, +import org.apache.http.RequestLine;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.ResponseHandler;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.conn.ClientConnectionManager;, +import org.apache.http.conn.params.ConnRouteParams;, +import org.apache.http.entity.InputStreamEntity;, +import org.apache.http.message.BasicHttpResponse;, +import org.apache.http.params.AbstractHttpParams;, +import org.apache.http.params.HttpParams;, +import org.apache.http.protocol.HttpContext;, +, +import static java.net.Proxy.Type.HTTP;, +import static org.apache.http.HttpVersion.HTTP_1_1;, +, +/**, + * Implements Apache's {@link HttpClient} API using {@link OkHttpClient}., + * <p>, + * <strong>Warning:</strong> Many core features of Apache HTTP client are not implemented by this, + * API. This includes the keep-alive strategy, cookie store, credentials provider, route planner, + * and others., + */, +public class OkApacheClient implements HttpClient {, +  protected final OkHttpClient client;, +, +  private final HttpParams params = new AbstractHttpParams() {, +    @Override public Object getParameter(String name) {]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +    stream.reply(responseHeaders, true);, +    stream.reply(responseHeaders, true);, +    stream.reply(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +    stream.reply(responseHeaders, true);, +    stream.reply(responseHeaders, true);, +    stream.reply(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    boolean expectContinue = false;, +          && lowercaseHeader.substring(7).trim().equals("100-continue")) {, +        expectContinue = true;, +    if (expectContinue) {, +    if (contentLength != -1) {, +      body.close();, +      stream.reply(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +    stream.reply(responseHeaders, true);, +    stream.reply(responseHeaders, true);, +    stream.reply(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    boolean expectContinue = false;, +          && lowercaseHeader.substring(7).trim().equals("100-continue")) {, +        expectContinue = true;, +    if (expectContinue) {, +    if (contentLength != -1) {, +      body.close();, +      stream.reply(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +  RESET_STREAM_AT_START, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +    stream.reply(responseHeaders, true);, +    stream.reply(responseHeaders, true);, +    stream.reply(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    boolean expectContinue = false;, +          && lowercaseHeader.substring(7).trim().equals("100-continue")) {, +        expectContinue = true;, +    if (expectContinue) {, +    if (contentLength != -1) {, +      body.close();, +      stream.reply(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +  RESET_STREAM_AT_START, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    server.enqueue(new MockResponse());, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +    stream.reply(responseHeaders, true);, +    stream.reply(responseHeaders, true);, +    stream.reply(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    boolean expectContinue = false;, +          && lowercaseHeader.substring(7).trim().equals("100-continue")) {, +        expectContinue = true;, +    if (expectContinue) {, +    if (contentLength != -1) {, +      body.close();, +      stream.reply(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +  RESET_STREAM_AT_START, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    server.enqueue(new MockResponse());, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +  /** https://tools.ietf.org/html/rfc3986#section-5.4.1 */, +  @Test public void rfc3886NormalExamples() {, +    HttpUrl url = HttpUrl.parse("http://a/b/c/d;p?q");, +    assertEquals(null, url.resolve("g:h")); // No 'g:' scheme in HttpUrl., +    assertEquals(HttpUrl.parse("http://a/b/c/g"), url.resolve("g"));, +    assertEquals(HttpUrl.parse("http://a/b/c/g"), url.resolve("./g"));, +    assertEquals(HttpUrl.parse("http://a/b/c/g/"), url.resolve("g/"));, +    assertEquals(HttpUrl.parse("http://a/g"), url.resolve("/g"));, +    assertEquals(HttpUrl.parse("http://g"), url.resolve("//g"));, +    assertEquals(HttpUrl.parse("http://a/b/c/d;p?y"), url.resolve("?y"));, +    assertEquals(HttpUrl.parse("http://a/b/c/g?y"), url.resolve("g?y"));, +    assertEquals(HttpUrl.parse("http://a/b/c/d;p?q#s"), url.resolve("#s"));, +    assertEquals(HttpUrl.parse("http://a/b/c/g#s"), url.resolve("g#s"));, +    assertEquals(HttpUrl.parse("http://a/b/c/g?y#s"), url.resolve("g?y#s"));, +    assertEquals(HttpUrl.parse("http://a/b/c/;x"), url.resolve(";x"));, +    assertEquals(HttpUrl.parse("http://a/b/c/g;x"), url.resolve("g;x"));, +    assertEquals(HttpUrl.parse("http://a/b/c/g;x?y#s"), url.resolve("g;x?y#s"));, +    assertEquals(HttpUrl.parse("http://a/b/c/d;p?q"), url.resolve(""));, +    assertEquals(HttpUrl.parse("http://a/b/c/"), url.resolve("."));, +    assertEquals(HttpUrl.parse("http://a/b/c/"), url.resolve("./"));, +    assertEquals(HttpUrl.parse("http://a/b/"), url.resolve(".."));, +    assertEquals(HttpUrl.parse("http://a/b/"), url.resolve("../"));, +    assertEquals(HttpUrl.parse("http://a/b/g"), url.resolve("../g"));, +    assertEquals(HttpUrl.parse("http://a/"), url.resolve("../.."));, +    assertEquals(HttpUrl.parse("http://a/"), url.resolve("../../"));, +    assertEquals(HttpUrl.parse("http://a/g"), url.resolve("../../g"));, +  }, +, +  /** https://tools.ietf.org/html/rfc3986#section-5.4.2 */, +  @Test public void rfc3886AbnormalExamples() {, +    HttpUrl url = HttpUrl.parse("http://a/b/c/d;p?q");, +    assertEquals(HttpUrl.parse("http://a/g"), url.resolve("../../../g"));, +    assertEquals(HttpUrl.parse("http://a/g"), url.resolve("../../../../g"));, +    assertEquals(HttpUrl.parse("http://a/g"), url.resolve("/./g"));, +    assertEquals(HttpUrl.parse("http://a/g"), url.resolve("/../g"));, +    assertEquals(HttpUrl.parse("http://a/b/c/g."), url.resolve("g."));, +    assertEquals(HttpUrl.parse("http://a/b/c/.g"), url.resolve(".g"));]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    sleepIfDelayed(response.getHeadersDelay(TimeUnit.MILLISECONDS));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    sleepIfDelayed(response.getHeadersDelay(TimeUnit.MILLISECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    server.enqueue(new MockResponse().setHeadersDelay(2, TimeUnit.SECONDS));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    sleepIfDelayed(response.getHeadersDelay(TimeUnit.MILLISECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    server.enqueue(new MockResponse().setHeadersDelay(2, TimeUnit.SECONDS));, +++ b/pom.xml, +    <apache.http.version>4.2.2</apache.http.version>, +          <version>3.6.1</version>, +              <version>2.8.1</version>, +              <version>2.0.16</version>, +          <version>2.17</version>, +              <version>2.17</version>]
[+++ b/README.md, +  <groupId>com.squareup.okhttp</groupId>, +  <version>2.7.0</version>, +compile 'com.squareup.okhttp:okhttp:2.7.0', +  <groupId>com.squareup.okhttp</groupId>, +  <version>2.7.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.7.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/README.md, +  <groupId>com.squareup.okhttp</groupId>, +  <version>2.7.0</version>, +compile 'com.squareup.okhttp:okhttp:2.7.0', +  <groupId>com.squareup.okhttp</groupId>, +  <version>2.7.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.7.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/README.md, +  <groupId>com.squareup.okhttp</groupId>, +  <version>2.7.0</version>, +compile 'com.squareup.okhttp:okhttp:2.7.0', +  <groupId>com.squareup.okhttp</groupId>, +  <version>2.7.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.7.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/README.md, +  <groupId>com.squareup.okhttp</groupId>, +++ b/README.md, +  <groupId>com.squareup.okhttp</groupId>, +  <version>2.7.0</version>, +compile 'com.squareup.okhttp:okhttp:2.7.0', +  <groupId>com.squareup.okhttp</groupId>, +  <version>2.7.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.7.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/README.md, +  <groupId>com.squareup.okhttp</groupId>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/README.md, +  <groupId>com.squareup.okhttp</groupId>, +  <version>2.7.0</version>, +compile 'com.squareup.okhttp:okhttp:2.7.0', +  <groupId>com.squareup.okhttp</groupId>, +  <version>2.7.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.7.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/README.md, +  <groupId>com.squareup.okhttp</groupId>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/okcurl/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/README.md, +  <groupId>com.squareup.okhttp</groupId>, +  <version>2.7.0</version>, +compile 'com.squareup.okhttp:okhttp:2.7.0', +  <groupId>com.squareup.okhttp</groupId>, +  <version>2.7.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.7.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/mockwebserver/README.md, +  <groupId>com.squareup.okhttp</groupId>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/okcurl/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0"]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  @Override, +  public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler), +      throws IOException {, +  @Override, +  public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler,, +      HttpContext context) throws IOException {, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  @Override, +  public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler), +      throws IOException {, +  @Override, +  public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler,, +      HttpContext context) throws IOException {, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +  private MockWebServer server = new MockWebServer();, +  private OkApacheClient client = new OkApacheClient();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  @Override, +  public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler), +      throws IOException {, +  @Override, +  public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler,, +      HttpContext context) throws IOException {, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +  private MockWebServer server = new MockWebServer();, +  private OkApacheClient client = new OkApacheClient();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +++ b/okhttp/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  @Override, +  public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler), +      throws IOException {, +  @Override, +  public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler,, +      HttpContext context) throws IOException {, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +  private MockWebServer server = new MockWebServer();, +  private OkApacheClient client = new OkApacheClient();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +++ b/okhttp/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    Platform.get().connectSocket(socket, route.inetSocketAddress, connectTimeout);, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  @Override, +  public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler), +      throws IOException {, +  @Override, +  public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler,, +      HttpContext context) throws IOException {, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +  private MockWebServer server = new MockWebServer();, +  private OkApacheClient client = new OkApacheClient();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +++ b/okhttp/pom.xml, +    <version>1.0.3-SNAPSHOT</version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    Platform.get().connectSocket(socket, route.inetSocketAddress, connectTimeout);, +++ /dev/null, +++ b/CHANGELOG.md, +++ b/okhttp-apache/pom.xml, +    <version>1.0.3-SNAPSHOT</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +  public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        Thread.sleep(unit.toMillis(duration));, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    });, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +  public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        Thread.sleep(unit.toMillis(duration));, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    });, +    return this;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +  @Test public void fullCallTimeoutAppliesToSetup() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +, +    server.enqueue(new MockResponse(), +        .setHeadersDelay(500, TimeUnit.MILLISECONDS));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(new AsyncRequestBody()), +        .build();, +, +    Call call = client.newCall(request);, +    call.timeout().timeout(250, TimeUnit.MILLISECONDS);, +    try {, +      call.execute();, +      fail();, +    } catch (IOException e) {, +      assertEquals("timeout", e.getMessage());, +      assertTrue(call.isCanceled());, +    }, +  }, +, +  @Test public void fullCallTimeoutDoesNotApplyOnceConnected() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +, +    MockDuplexResponseBody mockDuplexResponseBody = enqueueResponseWithBody(, +        new MockResponse(), +            .clearHeaders(),, +        new MockDuplexResponseBody(), +            .sendResponse("response A\n"), +            .sleep(750, TimeUnit.MILLISECONDS), +            .sendResponse("response B\n"), +            .receiveRequest("request C\n"), +            .exhaustResponse(), +            .exhaustRequest());, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(new AsyncRequestBody()), +        .build();, +, +    Call call = client.newCall(request);, +    call.timeout().timeout(500, TimeUnit.MILLISECONDS); // Long enough for the first TLS handshake., +, +    try (Response response = call.execute()) {, +      BufferedSink requestBody = ((AsyncRequestBody) call.request().body()).takeSink();, +, +      BufferedSource responseBody = response.body().source();, +      assertEquals("response A", responseBody.readUtf8Line());, +      assertEquals("response B", responseBody.readUtf8Line());, +, +      requestBody.writeUtf8("request C\n");, +      requestBody.close();, +      assertNull(responseBody.readUtf8Line());, +    }, +, +    mockDuplexResponseBody.awaitSuccess();, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +  public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        Thread.sleep(unit.toMillis(duration));, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    });, +    return this;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +  @Test public void fullCallTimeoutAppliesToSetup() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +]
[+++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-ws-tests/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0-SNAPSHOT</version>]
[+++ b/okhttp/src/main/java/okhttp3/Dns.java, +++ b/okhttp/src/main/java/okhttp3/Dns.java, +++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_151</id>, +      <activation>, +        <jdk>1.8.0_151</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, +      </properties>, +    </profile>, +    <profile>, +      <id>alpn-when-jdk8_152</id>, +      <activation>, +        <jdk>1.8.0_152</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +        .add(OkHeaders.SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(OkHeaders.RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(OkHeaders.SENT_MILLIS)) {, +        if (name.equals(OkHeaders.RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +        .add(OkHeaders.SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(OkHeaders.RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(OkHeaders.SENT_MILLIS)) {, +        if (name.equals(OkHeaders.RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import javax.net.ssl.SSLPeerUnverifiedException;, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +        .add(OkHeaders.SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(OkHeaders.RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(OkHeaders.SENT_MILLIS)) {, +        if (name.equals(OkHeaders.RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import javax.net.ssl.SSLPeerUnverifiedException;, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertFalse(connection instanceof HttpURLConnectionImpl);, +    assertFalse(connection2 instanceof HttpURLConnectionImpl);, +    assertFalse(connection instanceof HttpURLConnectionImpl);, +    assertFalse(connection2 instanceof HttpURLConnectionImpl);, +    assertFalse(connection instanceof HttpURLConnectionImpl);, +    assertFalse(connection2 instanceof HttpURLConnectionImpl);, +    assertFalse(connection instanceof HttpURLConnectionImpl);, +    assertFalse(connection2 instanceof HttpURLConnectionImpl);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +        .add(OkHeaders.SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(OkHeaders.RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(OkHeaders.SENT_MILLIS)) {, +        if (name.equals(OkHeaders.RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java, +import javax.net.ssl.SSLPeerUnverifiedException;, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +        try {, +        } catch (Throwable t) {, +          throw new IOException("unexpected cache failure", t);, +        }, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertFalse(connection instanceof HttpURLConnectionImpl);, +    assertFalse(connection2 instanceof HttpURLConnectionImpl);, +    assertFalse(connection instanceof HttpURLConnectionImpl);, +    assertFalse(connection2 instanceof HttpURLConnectionImpl);]
[+++ b/CHANGELOG.md, +    `ConnectionSpec` class., +    client.setConnectionSpecs(Arrays.asList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));, +    client.setConnectionSpecs(Arrays.asList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));, +++ b/CHANGELOG.md, +    `ConnectionSpec` class., +    client.setConnectionSpecs(Arrays.asList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));, +    client.setConnectionSpecs(Arrays.asList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    client.setConnectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));, +    client.setConnectionSpecs(Arrays.asList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));, +      assertTrue(expected.getMessage().contains("exhausted connection specs"));, +++ b/CHANGELOG.md, +    `ConnectionSpec` class., +    client.setConnectionSpecs(Arrays.asList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));, +    client.setConnectionSpecs(Arrays.asList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    client.setConnectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));, +    client.setConnectionSpecs(Arrays.asList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));, +      assertTrue(expected.getMessage().contains("exhausted connection specs"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    List<ConnectionSpec> connectionSpecs = Util.immutableList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT);, +        Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), connectionSpecs);, +        Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), connectionSpecs);, +        ConnectionSpec.CLEARTEXT);, +        ConnectionSpec.MODERN_TLS);, +        ConnectionSpec.CLEARTEXT));, +++ b/CHANGELOG.md, +    `ConnectionSpec` class., +    client.setConnectionSpecs(Arrays.asList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));, +    client.setConnectionSpecs(Arrays.asList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    client.setConnectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));, +    client.setConnectionSpecs(Arrays.asList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));, +      assertTrue(expected.getMessage().contains("exhausted connection specs"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    List<ConnectionSpec> connectionSpecs = Util.immutableList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT);, +        Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), connectionSpecs);, +        Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), connectionSpecs);, +        ConnectionSpec.CLEARTEXT);, +        ConnectionSpec.MODERN_TLS);, +        ConnectionSpec.CLEARTEXT));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.ConnectionSpec;, +  public final List<ConnectionSpec> connectionSpecs = Util.immutableList(, +      ConnectionSpec.MODERN_TLS,, +      ConnectionSpec.COMPATIBLE_TLS,, +      ConnectionSpec.CLEARTEXT);, +        .setConnectionSpecs(connectionSpecs), +        uriPort, ConnectionSpec.CLEARTEXT);, +        uriPort, ConnectionSpec.CLEARTEXT);, +        proxyA, protocols, connectionSpecs);, +        proxyAPort, ConnectionSpec.CLEARTEXT);, +        proxyAPort, ConnectionSpec.CLEARTEXT);, +        NO_PROXY, protocols, connectionSpecs);, +        uriPort, ConnectionSpec.CLEARTEXT);, +        uriPort, ConnectionSpec.CLEARTEXT);, +        uriPort, ConnectionSpec.CLEARTEXT);, +        uriPort, ConnectionSpec.CLEARTEXT);, +        uriPort, ConnectionSpec.CLEARTEXT);, +        ConnectionSpec.CLEARTEXT);, +        ConnectionSpec.CLEARTEXT);, +        ConnectionSpec.CLEARTEXT);, +        ConnectionSpec.CLEARTEXT);, +        ConnectionSpec.CLEARTEXT);, +        proxyAPort, ConnectionSpec.CLEARTEXT);, +        proxyAPort, ConnectionSpec.CLEARTEXT);, +        uriPort, ConnectionSpec.CLEARTEXT);, +        hostnameVerifier, null, authenticator, null, protocols, connectionSpecs);, +        proxyAPort, ConnectionSpec.MODERN_TLS);, +        proxyAPort, ConnectionSpec.COMPATIBLE_TLS);, +        proxyAPort, ConnectionSpec.MODERN_TLS);, +        proxyAPort, ConnectionSpec.COMPATIBLE_TLS);, +        proxyBPort, ConnectionSpec.MODERN_TLS);, +        proxyBPort, ConnectionSpec.COMPATIBLE_TLS);, +        proxyBPort, ConnectionSpec.MODERN_TLS);, +        proxyBPort, ConnectionSpec.COMPATIBLE_TLS);, +        uriPort, ConnectionSpec.MODERN_TLS);, +        uriPort, ConnectionSpec.COMPATIBLE_TLS);, +        uriPort, ConnectionSpec.MODERN_TLS);, +        uriPort, ConnectionSpec.COMPATIBLE_TLS);, +      InetAddress socketAddress, int socketPort, ConnectionSpec connectionSpec) {, +    assertEquals(connectionSpec, connection.getRoute().getConnectionSpec());, +        protocols, connectionSpecs);, +++ b/CHANGELOG.md, +    `ConnectionSpec` class., +    client.setConnectionSpecs(Arrays.asList(]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +  private static final int CLIENT_AUTH_NONE = 0;, +  private static final int CLIENT_AUTH_REQUESTED = 1;, +  private static final int CLIENT_AUTH_REQUIRED = 2;, +, +  private int clientAuth = CLIENT_AUTH_NONE;, +   * Configure the server to not perform SSL authentication of the client. This leaves, +   * authentication to another layer such as in an HTTP cookie or header. This is the default and, +   * most common configuration., +   */, +  public void noClientAuth() {, +    this.clientAuth = CLIENT_AUTH_NONE;, +  }, +, +  /**, +   * Configure the server to {@linkplain SSLSocket#setWantClientAuth want client auth}. If the, +   * client presents a certificate that is {@linkplain TrustManager trusted} the handshake will, +   * proceed normally. The connection will also proceed normally if the client presents no, +   * certificate at all! But if the client presents an untrusted certificate the handshake will fail, +   * and no connection will be established., +   */, +  public void requestClientAuth() {, +    this.clientAuth = CLIENT_AUTH_REQUESTED;, +  }, +, +  /**, +   * Configure the server to {@linkplain SSLSocket#setNeedClientAuth need client auth}. If the, +   * client presents a certificate that is {@linkplain TrustManager trusted} the handshake will, +   * proceed normally. If the client presents an untrusted certificate or no certificate at all the, +   * handshake will fail and no connection will be established., +   */, +  public void requireClientAuth() {, +    this.clientAuth = CLIENT_AUTH_REQUIRED;, +  }, +, +  /**, +          if (clientAuth == CLIENT_AUTH_REQUIRED) {, +            sslSocket.setNeedClientAuth(true);, +          } else if (clientAuth == CLIENT_AUTH_REQUESTED) {, +            sslSocket.setWantClientAuth(true);, +          }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +  private static final int CLIENT_AUTH_NONE = 0;, +  private static final int CLIENT_AUTH_REQUESTED = 1;, +  private static final int CLIENT_AUTH_REQUIRED = 2;, +, +  private int clientAuth = CLIENT_AUTH_NONE;, +   * Configure the server to not perform SSL authentication of the client. This leaves, +   * authentication to another layer such as in an HTTP cookie or header. This is the default and, +   * most common configuration., +   */, +  public void noClientAuth() {, +    this.clientAuth = CLIENT_AUTH_NONE;, +  }, +, +  /**, +   * Configure the server to {@linkplain SSLSocket#setWantClientAuth want client auth}. If the, +   * client presents a certificate that is {@linkplain TrustManager trusted} the handshake will, +   * proceed normally. The connection will also proceed normally if the client presents no, +   * certificate at all! But if the client presents an untrusted certificate the handshake will fail, +   * and no connection will be established., +   */, +  public void requestClientAuth() {, +    this.clientAuth = CLIENT_AUTH_REQUESTED;, +  }, +, +  /**, +   * Configure the server to {@linkplain SSLSocket#setNeedClientAuth need client auth}. If the, +   * client presents a certificate that is {@linkplain TrustManager trusted} the handshake will, +   * proceed normally. If the client presents an untrusted certificate or no certificate at all the, +   * handshake will fail and no connection will be established., +   */, +  public void requireClientAuth() {, +    this.clientAuth = CLIENT_AUTH_REQUIRED;, +  }, +, +  /**, +          if (clientAuth == CLIENT_AUTH_REQUIRED) {, +            sslSocket.setNeedClientAuth(true);, +          } else if (clientAuth == CLIENT_AUTH_REQUESTED) {, +            sslSocket.setWantClientAuth(true);, +          }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import java.io.IOException;, +import okhttp3.Handshake;, +  private final Handshake handshake;, +    if (socket instanceof SSLSocket) {, +      try {, +        this.handshake = Handshake.get(((SSLSocket) socket).getSession());, +      } catch (IOException e) {, +        throw new IllegalArgumentException(e);, +      }, +    } else {, +      this.handshake = null;, +    }, +    return handshake != null ? handshake.tlsVersion() : null;, +  }, +, +  /**, +   * Returns the TLS handshake of the connection that carried this request, or null if the request]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import javax.net.ServerSocketFactory;, +  private ServerSocketFactory serverSocketFactory = ServerSocketFactory.getDefault();, +  public void setServerSocketFactory(ServerSocketFactory serverSocketFactory) {, +    if (serverSocketFactory == null) throw new IllegalArgumentException("null serverSocketFactory");, +    this.serverSocketFactory = serverSocketFactory;, +  }, +, +    serverSocket = serverSocketFactory.createServerSocket(port, 50, inetAddress);, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import javax.net.ServerSocketFactory;, +  private ServerSocketFactory serverSocketFactory = ServerSocketFactory.getDefault();, +  public void setServerSocketFactory(ServerSocketFactory serverSocketFactory) {, +    if (serverSocketFactory == null) throw new IllegalArgumentException("null serverSocketFactory");, +    this.serverSocketFactory = serverSocketFactory;, +  }, +, +    serverSocket = serverSocketFactory.createServerSocket(port, 50, inetAddress);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import javax.net.ServerSocketFactory;, +  private ServerSocketFactory serverSocketFactory = ServerSocketFactory.getDefault();, +  public void setServerSocketFactory(ServerSocketFactory serverSocketFactory) {, +    if (serverSocketFactory == null) throw new IllegalArgumentException("null serverSocketFactory");, +    this.serverSocketFactory = serverSocketFactory;, +  }, +, +    serverSocket = serverSocketFactory.createServerSocket(port, 50, inetAddress);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft14;, +    Logger logger = Logger.getLogger(Http20Draft14.class.getName());, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import javax.net.ServerSocketFactory;, +  private ServerSocketFactory serverSocketFactory = ServerSocketFactory.getDefault();, +  public void setServerSocketFactory(ServerSocketFactory serverSocketFactory) {]
[+++ b/okhttp-apache/pom.xml, +    <version>1.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.0</version>, +++ b/okhttp/pom.xml, +    <version>1.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.0</version>, +++ b/okhttp/pom.xml, +    <version>1.0.0</version>, +++ b/pom.xml, +  <version>1.0.0</version>, +    <tag>parent-1.0.0</tag>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.0</version>, +++ b/okhttp/pom.xml, +    <version>1.0.0</version>, +++ b/pom.xml, +  <version>1.0.0</version>, +    <tag>parent-1.0.0</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.0</version>, +++ b/okhttp/pom.xml, +    <version>1.0.0</version>, +++ b/pom.xml, +  <version>1.0.0</version>, +    <tag>parent-1.0.0</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.0</version>, +++ b/samples/pom.xml, +    <version>1.0.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.0.0</version>, +++ b/okhttp/pom.xml, +    <version>1.0.0</version>, +++ b/pom.xml, +  <version>1.0.0</version>, +    <tag>parent-1.0.0</tag>, +++ b/samples/guide/pom.xml, +    <version>1.0.0</version>, +++ b/samples/pom.xml, +    <version>1.0.0</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.0.0</version>]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ /dev/null, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import javax.net.ssl.HttpsURLConnection;, +      hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java, +import javax.net.ssl.HttpsURLConnection;, +      HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);, +      HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);, +++ b/checkstyle.xml, +    <module name="UnusedImports">, +      <property name="processJavadoc" value="true"/>, +    </module>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import javax.net.ssl.HttpsURLConnection;, +      hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/HttpResponseCacheTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]
[+++ b/README.md, +Downloadable .jars can be found on the [GitHub download page][1]., +, +You can also depend on the .jar through Maven:, +    <groupId>com.squareup</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., + [1]: http://github.com/square/okhttp/downloads, +++ b/README.md, +Downloadable .jars can be found on the [GitHub download page][1]., +, +You can also depend on the .jar through Maven:, +    <groupId>com.squareup</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., + [1]: http://github.com/square/okhttp/downloads, +++ b/deploy_website.sh, +#!/bin/bash, +, +set -ex, +, +DIR=temp-clone, +, +# Delete any existing temporary website clone, +rm -rf $DIR, +, +# Clone the current repo into temp folder, +git clone git@github.com:square/okhttp.git $DIR, +, +# Move working directory into temp folder, +cd $DIR, +, +# Checkout and track the gh-pages branch, +git checkout -t origin/gh-pages, +, +# Delete everything, +rm -rf *, +, +# Copy website files from real repo, +cp -R ../website/* ., +, +# Stage all files in git and create a commit, +git add ., +git add -u, +git commit -m "Website at $(date)", +, +# Push the new files up to GitHub, +git push origin gh-pages, +, +# Delete our temp folder, +cd .., +rm -rf $DIR, +++ b/README.md, +Downloadable .jars can be found on the [GitHub download page][1]., +, +You can also depend on the .jar through Maven:, +    <groupId>com.squareup</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., + [1]: http://github.com/square/okhttp/downloads, +++ b/deploy_website.sh, +#!/bin/bash, +, +set -ex, +, +DIR=temp-clone, +, +# Delete any existing temporary website clone, +rm -rf $DIR, +, +# Clone the current repo into temp folder, +git clone git@github.com:square/okhttp.git $DIR, +, +# Move working directory into temp folder, +cd $DIR, +, +# Checkout and track the gh-pages branch, +git checkout -t origin/gh-pages, +, +# Delete everything, +rm -rf *, +, +# Copy website files from real repo, +cp -R ../website/* ., +, +# Stage all files in git and create a commit, +git add ., +git add -u, +git commit -m "Website at $(date)", +, +# Push the new files up to GitHub, +git push origin gh-pages, +, +# Delete our temp folder]
[+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +  private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +  private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import org.junit.Ignore;, +public class CookieTest {, +  HttpUrl url = HttpUrl.parse("http://example.com/");, +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +  private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import org.junit.Ignore;, +public class CookieTest {, +  HttpUrl url = HttpUrl.parse("http://example.com/");, +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +  private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import org.junit.Ignore;, +public class CookieTest {, +  HttpUrl url = HttpUrl.parse("http://example.com/");, +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    client.client().setProxyAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +  private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import org.junit.Ignore;, +public class CookieTest {, +  HttpUrl url = HttpUrl.parse("http://example.com/");, +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    client.client().setProxyAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java, +import okhttp3.JavaNetAuthenticator;, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +  private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import org.junit.Ignore;, +public class CookieTest {, +  HttpUrl url = HttpUrl.parse("http://example.com/");, +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    client.client().setProxyAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java, +import okhttp3.JavaNetAuthenticator;, +    client.client().setAuthenticator(new JavaNetAuthenticator());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/RouteSelectorTest.java, +  private final Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +  private Authenticator authenticator = Authenticator.NONE;, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import org.junit.Ignore;, +public class CookieTest {, +  HttpUrl url = HttpUrl.parse("http://example.com/");, +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +  @Ignore("cookie matching isn't implemented"), +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java]
[+++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    sleepIfDelayed(response);, +  private void sleepIfDelayed(MockResponse response) {, +    if (response.getBodyDelayTimeMs() != 0) {, +      try {, +        Thread.sleep(response.getBodyDelayTimeMs());, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    }, +  }, +, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    sleepIfDelayed(response);, +  private void sleepIfDelayed(MockResponse response) {, +    if (response.getBodyDelayTimeMs() != 0) {, +      try {, +        Thread.sleep(response.getBodyDelayTimeMs());]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +++ b/pom.xml, +    <animal.sniffer.version>1.15</animal.sniffer.version>]
[+++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +, +    testLogging {, +      exceptionFormat = 'full', +    }, +  tasks.withType(JavaCompile).configureEach {, +    options.errorprone {, +      check("MissingOverride", CheckSeverity.ERROR), +    }, +  }, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +, +    testLogging {, +      exceptionFormat = 'full', +    }, +  tasks.withType(JavaCompile).configureEach {, +    options.errorprone {, +      check("MissingOverride", CheckSeverity.ERROR), +    }, +  }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    @Override LogRecorder assertLogMatch(String pattern) {, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +, +    testLogging {, +      exceptionFormat = 'full', +    }, +  tasks.withType(JavaCompile).configureEach {, +    options.errorprone {, +      check("MissingOverride", CheckSeverity.ERROR), +    }, +  }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    @Override LogRecorder assertLogMatch(String pattern) {, +++ b/okhttp/src/main/java/okhttp3/Handshake.kt, +class Handshake private constructor(, +  override fun equals(other: Any?): Boolean {, +    return other is Handshake, +        && tlsVersion == other.tlsVersion, +        && cipherSuite == other.cipherSuite, +        && peerCertificates == other.peerCertificates, +        && localCertificates == other.localCertificates, +  }, +, +  override fun hashCode(): Int {, +    var result = 17, +    result = 31 * result + tlsVersion.hashCode(), +    result = 31 * result + cipherSuite.hashCode(), +    result = 31 * result + peerCertificates.hashCode(), +    result = 31 * result + localCertificates.hashCode(), +    return result, +  }, +, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +, +    testLogging {, +      exceptionFormat = 'full', +    }, +  tasks.withType(JavaCompile).configureEach {, +    options.errorprone {, +      check("MissingOverride", CheckSeverity.ERROR), +    }, +  }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    @Override LogRecorder assertLogMatch(String pattern) {, +++ b/okhttp/src/main/java/okhttp3/Handshake.kt, +class Handshake private constructor(, +  override fun equals(other: Any?): Boolean {, +    return other is Handshake, +        && tlsVersion == other.tlsVersion, +        && cipherSuite == other.cipherSuite, +        && peerCertificates == other.peerCertificates, +        && localCertificates == other.localCertificates, +  }, +, +  override fun hashCode(): Int {, +    var result = 17, +    result = 31 * result + tlsVersion.hashCode(), +    result = 31 * result + cipherSuite.hashCode(), +    result = 31 * result + peerCertificates.hashCode(), +    result = 31 * result + localCertificates.hashCode(), +    return result, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Route.kt, +data class Route(, +  fun requiresTunnel(): Boolean = address.sslSocketFactory() != null && proxy.type() == Proxy.Type.HTTP, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +, +    testLogging {]
[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final HpackDraft10.Reader hpackReader = new HpackDraft10.Reader(4096, bytesIn);, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final HpackDraft10.Reader hpackReader = new HpackDraft10.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private HpackDraft10.Writer hpackWriter = new HpackDraft10.Writer(bytesOut);, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final HpackDraft10.Reader hpackReader = new HpackDraft10.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private HpackDraft10.Writer hpackWriter = new HpackDraft10.Writer(bytesOut);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java, +  private static final int CURRENT_DRAFT = 9;, +          if (firstStory.getDraft() == CURRENT_DRAFT) {, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft16;, +    Logger logger = Logger.getLogger(Http20Draft16.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.2.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final HpackDraft10.Reader hpackReader = new HpackDraft10.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private HpackDraft10.Writer hpackWriter = new HpackDraft10.Writer(bytesOut);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java, +  private static final int CURRENT_DRAFT = 9;]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE) && protocols.size() > 1) {, +      // when using h2_prior_knowledge, no other protocol should be supported., +      throw new IllegalArgumentException(, +          "protocols containing h2_prior_knowledge cannot use other protocols: " + protocols);, +    } else if (!protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE), +        && !protocols.contains(Protocol.HTTP_1_1)) {, +        } else if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE)) {, +          protocol = Protocol.H2_PRIOR_KNOWLEDGE;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE) && protocols.size() > 1) {, +      // when using h2_prior_knowledge, no other protocol should be supported., +      throw new IllegalArgumentException(, +          "protocols containing h2_prior_knowledge cannot use other protocols: " + protocols);, +    } else if (!protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE), +        && !protocols.contains(Protocol.HTTP_1_1)) {, +        } else if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE)) {, +          protocol = Protocol.H2_PRIOR_KNOWLEDGE;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void testH2PriorKnowledgeServerFallback() {, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      fail();, +      assertEquals("protocols containing h2_prior_knowledge cannot use other protocols: ", +              + "[h2_prior_knowledge, http/1.1]", expected.getMessage());, +  @Test public void testH2PriorKnowledgeServerDuplicates() {, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +      fail();, +      assertEquals("protocols containing h2_prior_knowledge cannot use other protocols: ", +          + "[h2_prior_knowledge, h2_prior_knowledge]", expected.getMessage());, +  @Test public void testMockWebServerH2PriorKnowledgeProtocol() {, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +    assertEquals(Protocol.H2_PRIOR_KNOWLEDGE, server.protocols().get(0));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE) && protocols.size() > 1) {, +      // when using h2_prior_knowledge, no other protocol should be supported., +      throw new IllegalArgumentException(, +          "protocols containing h2_prior_knowledge cannot use other protocols: " + protocols);, +    } else if (!protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE), +        && !protocols.contains(Protocol.HTTP_1_1)) {, +        } else if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE)) {, +          protocol = Protocol.H2_PRIOR_KNOWLEDGE;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void testH2PriorKnowledgeServerFallback() {, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      fail();, +      assertEquals("protocols containing h2_prior_knowledge cannot use other protocols: ", +              + "[h2_prior_knowledge, http/1.1]", expected.getMessage());, +  @Test public void testH2PriorKnowledgeServerDuplicates() {, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +      fail();, +      assertEquals("protocols containing h2_prior_knowledge cannot use other protocols: ", +          + "[h2_prior_knowledge, h2_prior_knowledge]", expected.getMessage());, +  @Test public void testMockWebServerH2PriorKnowledgeProtocol() {, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +    assertEquals(Protocol.H2_PRIOR_KNOWLEDGE, server.protocols().get(0));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void httpsCallsFailWhenProtocolIsH2PriorKnowledge() throws Exception {, +    client = client.newBuilder(), +        .protocols(Collections.singletonList(Protocol.H2_PRIOR_KNOWLEDGE)), +        .build();, +, +    server.useHttps(sslClient.socketFactory, false);, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    try {, +      call.execute();, +      fail();, +    } catch (UnknownServiceException expected) {, +      assertEquals("H2_PRIOR_KNOWLEDGE cannot be used with HTTPS", expected.getMessage());, +    }, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE) && protocols.size() > 1) {, +      // when using h2_prior_knowledge, no other protocol should be supported., +      throw new IllegalArgumentException(, +          "protocols containing h2_prior_knowledge cannot use other protocols: " + protocols);, +    } else if (!protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE), +        && !protocols.contains(Protocol.HTTP_1_1)) {, +        } else if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE)) {, +          protocol = Protocol.H2_PRIOR_KNOWLEDGE;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void testH2PriorKnowledgeServerFallback() {, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      fail();, +      assertEquals("protocols containing h2_prior_knowledge cannot use other protocols: ", +              + "[h2_prior_knowledge, http/1.1]", expected.getMessage());, +  @Test public void testH2PriorKnowledgeServerDuplicates() {, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +    assertEquals(TlsVersion.TLS_1_2, fallbackRequest.getTlsVersion());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +    assertEquals(TlsVersion.TLS_1_2, fallbackRequest.getTlsVersion());, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, +import java.security.interfaces.RSAPrivateKey;, +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc5208">PKCS, +   * #8</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +    if (!(keyPair.getPrivate() instanceof RSAPrivateKey)) {, +      throw new IllegalStateException("PKCS1 only supports RSA keys");, +    }, +  /** Build a held certificate with reasonable defaults. */, +    private String keyAlgorithm;, +    private int keySize;, +, +    public Builder() {, +      ecdsa256();, +    }, +    /**, +     * Configure the certificate to generate a 256-bit ECDSA key, which provides about 128 bits of, +     * security. ECDSA keys are noticeably faster than RSA keys., +     *, +     * <p>This is the default configuration and has been since this API was introduced in OkHttp, +     * 3.11.0. Note that the default may change in future releases., +     */, +    public Builder ecdsa256() {, +      keyAlgorithm = "ECDSA";, +      keySize = 256;, +      return this;, +    }, +, +    /**, +     * Configure the certificate to generate a 2048-bit RSA key, which provides about 112 bits of, +     * security. RSA keys are interoperable with very old clients that don't support ECDSA., +     */, +    public Builder rsa2048() {, +      keyAlgorithm = "RSA";, +      keySize = 2048;, +      return this;, +    }, +, +      generator.setSignatureAlgorithm(signedByKeyPair.getPrivate() instanceof RSAPrivateKey, +          ? "SHA256WithRSAEncryption", +          : "SHA256withECDSA");, +        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(keyAlgorithm, "BC");, +        keyPairGenerator.initialize(keySize, new SecureRandom());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +    assertEquals(TlsVersion.TLS_1_2, fallbackRequest.getTlsVersion());, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, +import java.security.interfaces.RSAPrivateKey;, +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc5208">PKCS, +   * #8</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +    if (!(keyPair.getPrivate() instanceof RSAPrivateKey)) {, +      throw new IllegalStateException("PKCS1 only supports RSA keys");, +    }, +  /** Build a held certificate with reasonable defaults. */, +    private String keyAlgorithm;, +    private int keySize;, +, +    public Builder() {, +      ecdsa256();, +    }]
[+++ b/mockwebserver/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>1.2.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>1.2.1-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.2.1-SNAPSHOT</version>]
[+++ b/pom.xml, +        <bootclasspathPrefix>${settings.localRepository}/org/mortbay/jetty/npn/npn-boot/${npn.version}/npn-boot-${npn.version}.jar</bootclasspathPrefix>, +                <argLine>-Xbootclasspath/p:${bootclasspathPrefix}</argLine>, +        <bootclasspathPrefix>${settings.localRepository}/org/mortbay/jetty/alpn/alpn-boot/${alpn.version}/alpn-boot-${alpn.version}.jar</bootclasspathPrefix>, +                <argLine>-Xbootclasspath/p:${bootclasspathPrefix}</argLine>]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer implements IncomingStreamHandler {, +            .handler(this), +  @Override public void receive(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer implements IncomingStreamHandler {, +            .handler(this), +  @Override public void receive(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.framed.IncomingStreamHandler;, +          FramedSocketHandler framedSocketHandler = new FramedSocketHandler(socket, protocol);, +              .handler(framedSocketHandler), +  private class FramedSocketHandler implements IncomingStreamHandler {, +    @Override public void receive(FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer implements IncomingStreamHandler {, +            .handler(this), +  @Override public void receive(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.framed.IncomingStreamHandler;, +          FramedSocketHandler framedSocketHandler = new FramedSocketHandler(socket, protocol);, +              .handler(framedSocketHandler), +  private class FramedSocketHandler implements IncomingStreamHandler {, +    @Override public void receive(FramedStream stream) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      String endMessage = "--> END " + request.method();, +      if (logBody && hasRequestBody) {, +        endMessage += " (" + requestBody.contentLength() + "-byte body)";, +      logger.log(endMessage);, +      String endMessage = "<-- END HTTP";, +      if (logBody && HttpEngine.hasBody(response)) {, +        endMessage += " (" + buffer.size() + "-byte body)";, +      logger.log(endMessage);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer implements IncomingStreamHandler {, +            .handler(this), +  @Override public void receive(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.framed.IncomingStreamHandler;, +          FramedSocketHandler framedSocketHandler = new FramedSocketHandler(socket, protocol);, +              .handler(framedSocketHandler), +  private class FramedSocketHandler implements IncomingStreamHandler {, +    @Override public void receive(FramedStream stream) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      String endMessage = "--> END " + request.method();, +      if (logBody && hasRequestBody) {, +        endMessage += " (" + requestBody.contentLength() + "-byte body)";, +      logger.log(endMessage);, +      String endMessage = "<-- END HTTP";, +      if (logBody && HttpEngine.hasBody(response)) {, +        endMessage += " (" + buffer.size() + "-byte body)";, +      logger.log(endMessage);, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute();, +    client.newCall(request().post(RequestBody.create(null, "Hi?")).build()).execute();, +    client.newCall(request().post(body).build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer implements IncomingStreamHandler {, +            .handler(this), +  @Override public void receive(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.framed.IncomingStreamHandler;, +          FramedSocketHandler framedSocketHandler = new FramedSocketHandler(socket, protocol);, +              .handler(framedSocketHandler), +  private class FramedSocketHandler implements IncomingStreamHandler {, +    @Override public void receive(FramedStream stream) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      String endMessage = "--> END " + request.method();, +      if (logBody && hasRequestBody) {, +        endMessage += " (" + requestBody.contentLength() + "-byte body)";, +      logger.log(endMessage);, +      String endMessage = "<-- END HTTP";, +      if (logBody && HttpEngine.hasBody(response)) {, +        endMessage += " (" + buffer.size() + "-byte body)";, +      logger.log(endMessage);, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute();, +    client.newCall(request().post(RequestBody.create(null, "Hi?")).build()).execute();, +    client.newCall(request().post(body).build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +    call.execute();, +    server.enqueue(new MockResponse().setResponseCode(301).addHeader("Location: http://square.com"));, +  @Ignore // TODO(jwilson): fix HttpEngine connection cleanups.]
[+++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.github/CONTRIBUTING.md, +sure your code compiles by running `./gradlew check`. Checkstyle failures, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.github/CONTRIBUTING.md, +sure your code compiles by running `./gradlew check`. Checkstyle failures, +++ b/.gitignore, +.gradle, +generated, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.github/CONTRIBUTING.md, +sure your code compiles by running `./gradlew check`. Checkstyle failures, +++ b/.gitignore, +.gradle, +generated, +++ b/.travis.yml, + - ./gradlew check, +++ b/.buildscript/deploy_snapshot.sh, +  echo "TODO: fix snapshot deployment for gradle...", +  # ./mvnw clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -DskipTests -B, +++ b/.github/CONTRIBUTING.md, +sure your code compiles by running `./gradlew check`. Checkstyle failures, +++ b/.gitignore, +.gradle, +generated, +++ b/.travis.yml, + - ./gradlew check, +++ b/build.gradle, +buildscript {, +  ext.versions = [, +      'airline': '0.8',, +      'android': '4.1.1.4',, +      'animalSniffer': '1.17',, +      'assertj': '3.11.0',, +      'bouncycastle': '1.60',, +      'checkstyle': '8.15',, +      'conscrypt': '2.0.0',, +      'findbugs': '3.0.2',, +      'guava': '27.0.1-jre',, +      'java': '1.8',, +      'jnrUnixsocket': '0.22',, +      'jsoup': '1.11.3',, +      'junit': '4.12',, +      'moshi': '1.8.0',, +      'okio': '1.17.2',, +  ], +, +  ext.deps = [, +      'airline': "io.airlift:airline:${versions.airline}",, +      'android': "com.google.android:android:${versions.android}",, +      'animalSniffer': "org.codehaus.mojo:animal-sniffer-annotations:${versions.animalSniffer}",, +      'assertj': "org.assertj:assertj-core:${versions.assertj}",, +      'bouncycastle': "org.bouncycastle:bcprov-jdk15on:${versions.bouncycastle}",, +      'conscrypt': "org.conscrypt:conscrypt-openjdk-uber:${versions.conscrypt}",, +      'guava': "com.google.guava:guava:${versions.guava}",, +      'jnrUnixsocket': "com.github.jnr:jnr-unixsocket:${versions.jnrUnixsocket}",, +      'jsoup': "org.jsoup:jsoup:${versions.jsoup}",, +      'jsr305': "com.google.code.findbugs:jsr305:${versions.findbugs}",, +      'junit': "junit:junit:${versions.junit}",, +      'moshi': "com.squareup.moshi:moshi:${versions.moshi}",, +      'okio': "com.squareup.okio:okio:${versions.okio}", +  ], +, +  dependencies {, +    // TODO(jwilson): configure maven-publish-plugin to limit which artifacts are published., +    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.8.0', +  }, +, +  repositories {, +    mavenCentral(), +    gradlePluginPortal(), +  }, +}, +, +plugins {, +  id 'ru.vyarus.animalsniffer' version '1.5.0', +  id 'com.github.johnrengelman.shadow' version '4.0.1', +}, +, +allprojects {, +  group = GROUP, +  version = VERSION_NAME, +, +  repositories {, +    mavenCentral(), +  }, +}, +, +subprojects { project ->, +  apply plugin: 'java', +  apply plugin: 'java-library']
[+++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static String getDefaultUserAgent() {, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int position) {, +        return delegate.getHeaderFieldKey(position);, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int position) {, +        return delegate.getHeaderFieldKey(position);, +++ b/src/test/java/com/squareup/okhttp/internal/io/DiskLruCacheTest.java, +import org.junit.After;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import org.junit.Before;, +import org.junit.Test;, +public final class DiskLruCacheTest {, +    @Before public void setUp() throws Exception {, +    @After public void tearDown() throws Exception {, +    @Test public void emptyCache() throws Exception {, +    @Test public void writeAndReadEntry() throws Exception {, +    @Test public void readAndWriteEntryAcrossCacheOpenAndClose() throws Exception {, +    @Test public void journalWithEditAndPublish() throws Exception {, +    @Test public void revertedNewFileIsRemoveInJournal() throws Exception {, +    @Test public void unterminatedEditIsRevertedOnClose() throws Exception {, +    @Test public void journalDoesNotIncludeReadOfYetUnpublishedValue() throws Exception {, +    @Test public void journalWithEditAndPublishAndRead() throws Exception {, +    @Test public void cannotOperateOnEditAfterPublish() throws Exception {, +    @Test public void cannotOperateOnEditAfterRevert() throws Exception {, +    @Test public void explicitRemoveAppliedToDiskImmediately() throws Exception {, +    @Test public void readAndWriteOverlapsMaintainConsistency() throws Exception {, +    @Test public void openWithDirtyKeyDeletesAllFilesForThatKey() throws Exception {, +    @Test public void openWithInvalidVersionClearsDirectory() throws Exception {, +    @Test public void openWithInvalidAppVersionClearsDirectory() throws Exception {, +    @Test public void openWithInvalidValueCountClearsDirectory() throws Exception {, +    @Test public void openWithInvalidBlankLineClearsDirectory() throws Exception {, +    @Test public void openWithInvalidJournalLineClearsDirectory() throws Exception {, +    @Test public void openWithInvalidFileSizeClearsDirectory() throws Exception {, +    @Test public void openWithTruncatedLineDiscardsThatLine() throws Exception {, +    @Test public void openWithTooManyFileSizesClearsDirectory() throws Exception {, +    @Test public void keyWithSpaceNotPermitted() throws Exception {, +    @Test public void keyWithNewlineNotPermitted() throws Exception {, +    @Test public void keyWithCarriageReturnNotPermitted() throws Exception {, +    @Test public void nullKeyThrows() throws Exception {, +    @Test public void createNewEntryWithTooFewValuesFails() throws Exception {, +    @Test public void createNewEntryWithMissingFileAborts() throws Exception {, +    @Test public void revertWithTooFewValues() throws Exception {, +    @Test public void updateExistingEntryWithTooFewValuesReusesPreviousValues() throws Exception {, +    @Test public void evictOnInsert() throws Exception {, +    @Test public void evictOnUpdate() throws Exception {, +    @Test public void evictionHonorsLruFromCurrentSession() throws Exception {, +    @Test public void evictionHonorsLruFromPreviousSession() throws Exception {, +    @Test public void cacheSingleEntryOfSizeGreaterThanMaxSize() throws Exception {, +    @Test public void cacheSingleValueOfSizeGreaterThanMaxSize() throws Exception {, +    @Test public void constructorDoesNotAllowZeroCacheSize() throws Exception {, +    @Test public void constructorDoesNotAllowZeroValuesPerEntry() throws Exception {, +    @Test public void removeAbsentElement() throws Exception {, +    @Test public void readingTheSameStreamMultipleTimes() throws Exception {, +    @Test public void rebuildJournalOnRepeatedReads() throws Exception {, +    @Test public void rebuildJournalOnRepeatedEdits() throws Exception {, +    @Test public void openCreatesDirectoryIfNecessary() throws Exception {, +    @Test public void fileDeletedExternally() throws Exception {, +    @Test public void editSameVersion() throws Exception {, +    @Test public void editSnapshotAfterChangeAborted() throws Exception {, +    @Test public void editSnapshotAfterChangeCommitted() throws Exception {, +    @Test public void editSinceEvicted() throws Exception {, +    @Test public void editSinceEvictedAndRecreated() throws Exception {, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);]
[+++ b/okhttp/pom.xml]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.get("text/plain"), bodyText);, +        return MediaType.get("text/plain; charset=utf-8");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.get("text/plain"), bodyText);, +        return MediaType.get("text/plain; charset=utf-8");, +++ b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.get("application/octet-stream");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.get("text/plain"), bodyText);, +        return MediaType.get("text/plain; charset=utf-8");, +++ b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.get("application/octet-stream");, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +  public static final MediaType DNS_MESSAGE = MediaType.get("application/dns-message");, +  public static final MediaType UDPWIREFORMAT = MediaType.get("application/dns-udpwireformat");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.get("text/plain"), bodyText);, +        return MediaType.get("text/plain; charset=utf-8");, +++ b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.get("application/octet-stream");, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +  public static final MediaType DNS_MESSAGE = MediaType.get("application/dns-message");, +  public static final MediaType UDPWIREFORMAT = MediaType.get("application/dns-udpwireformat");, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  private static final MediaType PLAIN = MediaType.get("text/plain; charset=utf-8");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    return RequestBody.create(MediaType.get("text/plain"), bodyText);, +        return MediaType.get("text/plain; charset=utf-8");, +++ b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java, +  private static final MediaType DEFAULT_MEDIA_TYPE = MediaType.get("application/octet-stream");, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +  public static final MediaType DNS_MESSAGE = MediaType.get("application/dns-message");, +  public static final MediaType UDPWIREFORMAT = MediaType.get("application/dns-udpwireformat");]
[+++ b/mockwebserver/pom.xml, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +            <link>http://square.github.io/okio/</link>, +          </links>, +        </configuration>, +      </plugin>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +++ b/mockwebserver/pom.xml, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +            <link>http://square.github.io/okio/</link>, +          </links>, +        </configuration>, +      </plugin>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +++ b/mockwebserver/pom.xml, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +            <link>http://square.github.io/okio/</link>, +          </links>, +        </configuration>, +      </plugin>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +++ b/pom.xml]
[+++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +import com.squareup.okhttp.UrlComponentEncodingTester.Component;, +import com.squareup.okhttp.UrlComponentEncodingTester.Encoding;, +import java.util.Arrays;, +    assertEquals(expected, HttpUrl.parse("    http://host/    ")); // Both., +    assertEquals(expected, HttpUrl.parse("http://host/").resolve("   "));, +    assertEquals(expected, HttpUrl.parse("http://host/").resolve("  .  "));, +    assertEquals("/%0B", HttpUrl.parse("http://h/\u000b").path()); // line tabulation, +    assertEquals("/%1C", HttpUrl.parse("http://h/\u001c").path()); // information separator 4, +    assertEquals("/%1D", HttpUrl.parse("http://h/\u001d").path()); // information separator 3, +    assertEquals("/%1E", HttpUrl.parse("http://h/\u001e").path()); // information separator 2, +    assertEquals("/%1F", HttpUrl.parse("http://h/\u001f").path()); // information separator 1, +    assertEquals("/%C2%85", HttpUrl.parse("http://h/\u0085").path()); // next line, +    assertEquals("/%C2%A0", HttpUrl.parse("http://h/\u00a0").path()); // non-breaking space, +    assertEquals("/%E1%9A%80", HttpUrl.parse("http://h/\u1680").path()); // ogham space mark, +    assertEquals("/%E1%A0%8E", HttpUrl.parse("http://h/\u180e").path()); // mongolian vowel separator, +    assertEquals("/%E2%80%80", HttpUrl.parse("http://h/\u2000").path()); // en quad, +    assertEquals("/%E2%80%81", HttpUrl.parse("http://h/\u2001").path()); // em quad, +    assertEquals("/%E2%80%82", HttpUrl.parse("http://h/\u2002").path()); // en space, +    assertEquals("/%E2%80%83", HttpUrl.parse("http://h/\u2003").path()); // em space, +    assertEquals("/%E2%80%84", HttpUrl.parse("http://h/\u2004").path()); // three-per-em space, +    assertEquals("/%E2%80%85", HttpUrl.parse("http://h/\u2005").path()); // four-per-em space, +    assertEquals("/%E2%80%86", HttpUrl.parse("http://h/\u2006").path()); // six-per-em space, +    assertEquals("/%E2%80%87", HttpUrl.parse("http://h/\u2007").path()); // figure space, +    assertEquals("/%E2%80%88", HttpUrl.parse("http://h/\u2008").path()); // punctuation space, +    assertEquals("/%E2%80%89", HttpUrl.parse("http://h/\u2009").path()); // thin space, +    assertEquals("/%E2%80%8A", HttpUrl.parse("http://h/\u200a").path()); // hair space, +    assertEquals("/%E2%80%8B", HttpUrl.parse("http://h/\u200b").path()); // zero-width space, +    assertEquals("/%E2%80%8C", HttpUrl.parse("http://h/\u200c").path()); // zero-width non-joiner, +    assertEquals("/%E2%80%8D", HttpUrl.parse("http://h/\u200d").path()); // zero-width joiner, +    assertEquals("/%E2%80%8E", HttpUrl.parse("http://h/\u200e").path()); // left-to-right mark, +    assertEquals("/%E2%80%8F", HttpUrl.parse("http://h/\u200f").path()); // right-to-left mark, +    assertEquals("/%E2%80%A8", HttpUrl.parse("http://h/\u2028").path()); // line separator, +    assertEquals("/%E2%80%A9", HttpUrl.parse("http://h/\u2029").path()); // paragraph separator, +    assertEquals("/%E2%80%AF", HttpUrl.parse("http://h/\u202f").path()); // narrow non-breaking space, +    assertEquals("/%E2%81%9F", HttpUrl.parse("http://h/\u205f").path()); // medium mathematical space, +    assertEquals("/%E3%80%80", HttpUrl.parse("http://h/\u3000").path()); // ideographic space, +    assertEquals("password%40", HttpUrl.parse("http://:password@@host/path").password());, +    assertEquals("/%00", HttpUrl.parse("http://host/\u0000").path());, +    assertEquals("/%08", HttpUrl.parse("http://host/\u0008").path());, +    assertEquals("/%EF%BF%BD", HttpUrl.parse("http://host/\ufffd").path());, +        .override(Encoding.PERCENT, '[', ']', '{', '}', '|', '^', '\'', ';', '=', '@'), +        .override(Encoding.SKIP, ':', '/', '\\', '?', '#'), +        .test(Component.USER);, +        .override(Encoding.PERCENT, '[', ']', '{', '}', '|', '^', '\'', ':', ';', '=', '@'), +        .override(Encoding.SKIP, '/', '\\', '?', '#'), +        .test(Component.PASSWORD);, +  }, +, +  @Test public void hostContainsIllegalCharacter() throws Exception {, +    assertEquals(null, HttpUrl.parse("http://\n/"));, +    assertEquals(null, HttpUrl.parse("http:// /"));, +    assertEquals(null, HttpUrl.parse("http://%20/"));, +  }, +, +  @Test public void hostIpv6() throws Exception {, +    // Square braces are absent from host()..., +    assertEquals("::1", HttpUrl.parse("http://[::1]/").host());, +, +    // ... but they're included in toString()., +    assertEquals("http://[::1]/", HttpUrl.parse("http://[::1]/").toString());, +, +    // IPv6 colons don't interfere with port numbers or passwords., +    assertEquals(8080, HttpUrl.parse("http://[::1]:8080/").port());, +    assertEquals("password", HttpUrl.parse("http://user:password@[::1]/").password());, +    assertEquals("::1", HttpUrl.parse("http://user:password@[::1]:8080/").host());, +, +    // Permit the contents of IPv6 addresses to be percent-encoded..., +    assertEquals("::1", HttpUrl.parse("http://[%3A%3A%31]/").host());, +, +    // Including the Square braces themselves! (This is what Chrome does.), +    assertEquals("::1", HttpUrl.parse("http://%5B%3A%3A1%5D/").host());, +  }, +, +  @Test public void port() throws Exception {, +    assertEquals(HttpUrl.parse("http://host/"), HttpUrl.parse("http://host:80/"));]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private Headers.Builder trailers = new Headers.Builder();, +  public Headers getTrailers() {, +    return trailers.build();, +  }, +, +  /** Replaces all headers with those specified. */, +  /** Replaces all trailers with those specified. */, +  public MockResponse setTrailers(Headers trailers) {, +    this.trailers = trailers.newBuilder();, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private Headers.Builder trailers = new Headers.Builder();, +  public Headers getTrailers() {, +    return trailers.build();, +  }, +, +  /** Replaces all headers with those specified. */, +  /** Replaces all trailers with those specified. */, +  public MockResponse setTrailers(Headers trailers) {, +    this.trailers = trailers.newBuilder();, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      Headers trailers = response.getTrailers();, +      if (!hasResponseBody && trailers.size() > 0) {, +        throw new IllegalStateException("unsupported: no body and non-empty trailers " + trailers);, +      }, +      if (trailers.size() > 0) {, +        stream.enqueueTrailers(trailers);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private Headers.Builder trailers = new Headers.Builder();, +  public Headers getTrailers() {, +    return trailers.build();, +  }, +, +  /** Replaces all headers with those specified. */, +  /** Replaces all trailers with those specified. */, +  public MockResponse setTrailers(Headers trailers) {, +    this.trailers = trailers.newBuilder();, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      Headers trailers = response.getTrailers();, +      if (!hasResponseBody && trailers.size() > 0) {, +        throw new IllegalStateException("unsupported: no body and non-empty trailers " + trailers);, +      }, +      if (trailers.size() > 0) {, +        stream.enqueueTrailers(trailers);, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  // Coming soon, +  @Test @Ignore public void clientReadsHeadersDataTrailersHttp1ChunkedTransferEncoding() throws IOException {, +    MockResponse mockResponse = new MockResponse(), +        .clearHeaders(), +        .addHeader("h1", "v1"), +        .addHeader("h2", "v2"), +        .setChunkedBody("HelloBonjour", 1024), +        .setTrailers(Headers.of("trailers", "boom"));, +    server.enqueue(mockResponse);, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +, +    Response response = call.execute();, +    BufferedSource source = response.body().source();, +, +    assertEquals("v1", response.header("h1"));, +    assertEquals("v2", response.header("h2"));, +, +    assertEquals("Hello", source.readUtf8(5));, +    assertEquals("Bonjour", source.readUtf8(7));, +, +    assertTrue(source.exhausted());, +    assertEquals(Headers.of("trailers", "boom"), response.trailers());, +  }, +, +  @Test public void clientReadsHeadersDataTrailersHttp2() throws IOException {, +    MockResponse mockResponse = new MockResponse(), +        .clearHeaders(), +        .addHeader("h1", "v1"), +        .addHeader("h2", "v2"), +        .setBody("HelloBonjour"), +        .setTrailers(Headers.of("trailers", "boom"));, +    server.enqueue(mockResponse);, +    enableProtocol(Protocol.HTTP_2);, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +, +    Response response = call.execute();, +    BufferedSource source = response.body().source();, +]
[+++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    Security.insertProviderAt(Conscrypt.newProviderBuilder().provideTrustManager().build(), 1);, +    System.out.println(, +        "Running tests using " + Platform.get() + " " + System.getProperty("java.vm.version"));, +    System.out.println("TLS1.3+TLS1.2");, +    testClient(urls, buildClient(ConnectionSpec.RESTRICTED_TLS));, +, +    System.out.println("\nTLS1.3 only");, +    System.out.println(Platform.get());, +, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    Security.insertProviderAt(Conscrypt.newProviderBuilder().provideTrustManager().build(), 1);, +    System.out.println(, +        "Running tests using " + Platform.get() + " " + System.getProperty("java.vm.version"));, +    System.out.println("TLS1.3+TLS1.2");, +    testClient(urls, buildClient(ConnectionSpec.RESTRICTED_TLS));, +, +    System.out.println("\nTLS1.3 only");, +    System.out.println(Platform.get());, +, +++ b/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.java, +    return Conscrypt.newProviderBuilder().provideTrustManager().build();, +      return SSLContext.getInstance("TLSv1.3", getProvider());, +      try {, +        // Allow for Conscrypt 1.2, +        return SSLContext.getInstance("TLS", getProvider());, +      } catch (NoSuchAlgorithmException e2) {, +  }, +  public static ConscryptPlatform buildIfSupported() {, +      // Trigger an early exception over a fatal error, prefer a RuntimeException over Error., +      Class.forName("org.conscrypt.Conscrypt");, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    Security.insertProviderAt(Conscrypt.newProviderBuilder().provideTrustManager().build(), 1);, +    System.out.println(, +        "Running tests using " + Platform.get() + " " + System.getProperty("java.vm.version"));, +    System.out.println("TLS1.3+TLS1.2");, +    testClient(urls, buildClient(ConnectionSpec.RESTRICTED_TLS));, +, +    System.out.println("\nTLS1.3 only");, +    System.out.println(Platform.get());, +, +++ b/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.java, +    return Conscrypt.newProviderBuilder().provideTrustManager().build();, +      return SSLContext.getInstance("TLSv1.3", getProvider());, +      try {, +        // Allow for Conscrypt 1.2, +        return SSLContext.getInstance("TLS", getProvider());, +      } catch (NoSuchAlgorithmException e2) {, +  }, +  public static ConscryptPlatform buildIfSupported() {, +      // Trigger an early exception over a fatal error, prefer a RuntimeException over Error., +      Class.forName("org.conscrypt.Conscrypt");, +++ b/pom.xml, +    <conscrypt.version>1.3.0</conscrypt.version>]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Version;, +  @Test public void userAgentIsIncludedByDefault() throws Exception {, +    assertTrue(recordedRequest.getHeader("User-Agent"), +        .matches("okhttp/\\d\\.\\d\\.\\d(-SNAPSHOT)?"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Version;, +  @Test public void userAgentIsIncludedByDefault() throws Exception {, +    assertTrue(recordedRequest.getHeader("User-Agent"), +        .matches("okhttp/\\d\\.\\d\\.\\d(-SNAPSHOT)?"));, +++ b/okhttp/pom.xml, +        <groupId>org.codehaus.mojo</groupId>, +        <artifactId>templating-maven-plugin</artifactId>, +        <version>1.0-alpha-3</version>, +        <executions>, +          <execution>, +            <goals>, +              <goal>filter-sources</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +      <plugin>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Version;, +  @Test public void userAgentIsIncludedByDefault() throws Exception {, +    assertTrue(recordedRequest.getHeader("User-Agent"), +        .matches("okhttp/\\d\\.\\d\\.\\d(-SNAPSHOT)?"));, +++ b/okhttp/pom.xml, +        <groupId>org.codehaus.mojo</groupId>, +        <artifactId>templating-maven-plugin</artifactId>, +        <version>1.0-alpha-3</version>, +        <executions>, +          <execution>, +            <goals>, +              <goal>filter-sources</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +      <plugin>, +++ b/okhttp/src/main/java-templates/com/squareup/okhttp/internal/Version.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal;, +, +public final class Version {, +  public static String userAgent() {, +    return "okhttp/${project.version}";, +  }, +, +  private Version() {, +  }, +}, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Version;, +  @Test public void userAgentIsIncludedByDefault() throws Exception {, +    assertTrue(recordedRequest.getHeader("User-Agent"), +        .matches("okhttp/\\d\\.\\d\\.\\d(-SNAPSHOT)?"));, +++ b/okhttp/pom.xml, +        <groupId>org.codehaus.mojo</groupId>, +        <artifactId>templating-maven-plugin</artifactId>, +        <version>1.0-alpha-3</version>, +        <executions>, +          <execution>, +            <goals>, +              <goal>filter-sources</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +      <plugin>, +++ b/okhttp/src/main/java-templates/com/squareup/okhttp/internal/Version.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, +    ByteString data = ByteString.decodeHex("", +        + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", +        + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +, +    sink.write(data).flush();, +    assertData(data);, +    sink.write(data).flush();, +    assertData(data);, +    ByteString data = ByteString.decodeHex("", +        + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", +        + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +    sink.write(data).flush();, +    assertData("60b420bb");, +    assertData("", +        + "0000000058e5f96f1a7fb386dec41920967d0d185a443df4d7", +        + "c4c9376391d4a65e0ed8230d1332734b796dee2b4495fb4376");, +    sink.write(data).close();, +    assertData("3851d9d4");, +    assertData("", +        + "58e5f96f00000000429a4ae98621e04fce98f47702a1c49b8f", +        + "2130583b742dc906eb214c55f6cb1c139c948173a16c941b93");, +    assertData(ByteString.decodeHex(hex));, +  }, +, +  private void assertData(ByteString expected) throws EOFException {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, +    ByteString data = ByteString.decodeHex("", +        + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", +        + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +, +    sink.write(data).flush();, +    assertData(data);, +    sink.write(data).flush();, +    assertData(data);, +    ByteString data = ByteString.decodeHex("", +        + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", +        + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +    sink.write(data).flush();, +    assertData("60b420bb");, +    assertData("", +        + "0000000058e5f96f1a7fb386dec41920967d0d185a443df4d7", +        + "c4c9376391d4a65e0ed8230d1332734b796dee2b4495fb4376");, +    sink.write(data).close();, +    assertData("3851d9d4");, +    assertData("", +        + "58e5f96f00000000429a4ae98621e04fce98f47702a1c49b8f", +        + "2130583b742dc906eb214c55f6cb1c139c948173a16c941b93");, +    assertData(ByteString.decodeHex(hex));, +  }, +, +  private void assertData(ByteString expected) throws EOFException {, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, +    ByteString data = ByteString.decodeHex("", +        + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", +        + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +, +    sink.write(data).flush();, +    assertData(data);, +    sink.write(data).flush();, +    assertData(data);, +    ByteString data = ByteString.decodeHex("", +        + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", +        + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +    sink.write(data).flush();, +    assertData("60b420bb");, +    assertData("", +        + "0000000058e5f96f1a7fb386dec41920967d0d185a443df4d7", +        + "c4c9376391d4a65e0ed8230d1332734b796dee2b4495fb4376");, +    sink.write(data).close();, +    assertData("3851d9d4");, +    assertData("", +        + "58e5f96f00000000429a4ae98621e04fce98f47702a1c49b8f", +        + "2130583b742dc906eb214c55f6cb1c139c948173a16c941b93");, +    assertData(ByteString.decodeHex(hex));, +  }, +, +  private void assertData(ByteString expected) throws EOFException {, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java, +  private final Buffer controlFrameBuffer = new Buffer();, +  private final Buffer messageFrameBuffer = new Buffer();, +, +  private final byte[] maskKey;, +  private final byte[] maskBuffer;, +, +    // Masks are only a concern for server writers., +    maskKey = isClient ? null : new byte[4];, +    maskBuffer = isClient ? null : new byte[8192];, +    boolean isMasked = (b1 & B1_FLAG_MASK) != 0;, +    if (frameLength > 0L) {, +        source.readFully(controlFrameBuffer, frameLength);, +        for (long frameBytesRead = 0L; frameBytesRead < frameLength; ) {, +          controlFrameBuffer.write(maskBuffer, 0, read);, +        frameCallback.onReadPing(controlFrameBuffer.readByteString());, +        frameCallback.onReadPong(controlFrameBuffer.readByteString());, +        long bufferSize = controlFrameBuffer.size();, +          code = controlFrameBuffer.readShort();, +          reason = controlFrameBuffer.readUtf8();]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import static java.util.Arrays.asList;, +, +      return bootstrapDnsHosts(asList(bootstrapDnsHosts));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import static java.util.Arrays.asList;, +, +      return bootstrapDnsHosts(asList(bootstrapDnsHosts));, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +    assertThat(result).contains(address("157.240.1.18"));, +    assertThat(result).contains(address("2a03:2880:f029:11:face:b00c:0:2"));, +    assertThat(asList(request1.getPath(), request2.getPath())).containsExactlyInAnyOrder(, +        "/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AAAEAAQ",, +        "/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AABwAAQ");, +      assertThat(cause).isInstanceOf(IOException.class);, +      assertThat(cause).hasMessage("response size exceeds limit (65536 bytes): 65537 bytes");, +      assertThat(ioe).hasMessage("google.com");, +      assertThat(ioe.getCause()).isInstanceOf(RuntimeException.class);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import static java.util.Arrays.asList;, +, +      return bootstrapDnsHosts(asList(bootstrapDnsHosts));, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +    assertThat(result).contains(address("157.240.1.18"));, +    assertThat(result).contains(address("2a03:2880:f029:11:face:b00c:0:2"));, +    assertThat(asList(request1.getPath(), request2.getPath())).containsExactlyInAnyOrder(, +        "/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AAAEAAQ",, +        "/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AABwAAQ");, +      assertThat(cause).isInstanceOf(IOException.class);, +      assertThat(cause).hasMessage("response size exceeds limit (65536 bytes): 65537 bytes");]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, +   * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, +   * frame</a> immediately after the response and will close the connection when the client's socket, +   * is exhausted., +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, +   * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, +   * frame</a> immediately after the response and will close the connection when the client's socket, +   * is exhausted., +++ b/okhttp/src/main/java/okhttp3/Cache.java, +  private final DiskLruCache cache;, +  private int writeSuccessCount;, +  private int writeAbortCount;, +  private CacheRequest put(Response response) {, +  private void remove(Request request) throws IOException {, +  private void update(Response cached, Response network) {, +  private synchronized void trackResponse(CacheStrategy cacheStrategy) {, +  private synchronized void trackConditionalCacheHit() {, +    private boolean done;, +  private static int readInt(BufferedSource source) throws IOException {, +    private final DiskLruCache.Snapshot snapshot;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, +   * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, +   * frame</a> immediately after the response and will close the connection when the client's socket, +   * is exhausted., +++ b/okhttp/src/main/java/okhttp3/Cache.java, +  private final DiskLruCache cache;, +  private int writeSuccessCount;, +  private int writeAbortCount;, +  private CacheRequest put(Response response) {, +  private void remove(Request request) throws IOException {, +  private void update(Response cached, Response network) {, +  private synchronized void trackResponse(CacheStrategy cacheStrategy) {, +  private synchronized void trackConditionalCacheHit() {, +    private boolean done;, +  private static int readInt(BufferedSource source) throws IOException {, +    private final DiskLruCache.Snapshot snapshot;, +++ b/okhttp/src/main/java/okhttp3/Request.java, +  private final HttpUrl url;, +  private final String method;, +  private final Headers headers;, +  private final RequestBody body;, +  private final Object tag;, +  private Request(Builder builder) {, +    private HttpUrl url;, +    private String method;, +    private Headers.Builder headers;, +    private RequestBody body;, +    private Object tag;, +    private Builder(Request request) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, +   * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, +   * frame</a> immediately after the response and will close the connection when the client's socket, +   * is exhausted., +++ b/okhttp/src/main/java/okhttp3/Cache.java, +  private final DiskLruCache cache;, +  private int writeSuccessCount;, +  private int writeAbortCount;, +  private CacheRequest put(Response response) {, +  private void remove(Request request) throws IOException {, +  private void update(Response cached, Response network) {, +  private synchronized void trackResponse(CacheStrategy cacheStrategy) {, +  private synchronized void trackConditionalCacheHit() {, +    private boolean done;, +  private static int readInt(BufferedSource source) throws IOException {, +    private final DiskLruCache.Snapshot snapshot;, +++ b/okhttp/src/main/java/okhttp3/Request.java]
[+++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +++ b/okhttp/src/main/java/okhttp3/MultipartBody.java, +    private final Headers headers;, +    private final RequestBody body;, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +++ b/okhttp/src/main/java/okhttp3/MultipartBody.java, +    private final Headers headers;, +    private final RequestBody body;, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +          journalWriter = Okio.buffer(Okio.blackhole());, +          return Okio.blackhole();, +          return Okio.blackhole();, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +++ b/okhttp/src/main/java/okhttp3/MultipartBody.java, +    private final Headers headers;, +    private final RequestBody body;, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +          journalWriter = Okio.buffer(Okio.blackhole());, +          return Okio.blackhole();, +          return Okio.blackhole();, +++ b/pom.xml, +    <okio.version>1.10.0</okio.version>]
[+++ b/README.md, +OkHttp, +Known Issues, +------------, +, +The SPDY implementation is incomplete:, +, +* Settings frames are not honored. Flow control is not implemented., +* It assumes a well-behaved peer. If the peer sends an invalid frame, OkHttp's SPDY client will not respond with the required `RST` frame., +, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +[Individual Contributor License Agreement (CLA)][3]., + [2]: http://developer.android.com/reference/java/net/ProxySelector.html, + [3]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1, +++ b/README.md, +OkHttp, +Known Issues, +------------, +, +The SPDY implementation is incomplete:, +, +* Settings frames are not honored. Flow control is not implemented., +* It assumes a well-behaved peer. If the peer sends an invalid frame, OkHttp's SPDY client will not respond with the required `RST` frame., +, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +[Individual Contributor License Agreement (CLA)][3]., + [2]: http://developer.android.com/reference/java/net/ProxySelector.html, + [3]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1, +++ b/checkstyle.xml, +        <!--<module name="EqualsAvoidNull"/>-->, +++ b/README.md, +OkHttp, +Known Issues, +------------, +, +The SPDY implementation is incomplete:, +, +* Settings frames are not honored. Flow control is not implemented., +* It assumes a well-behaved peer. If the peer sends an invalid frame, OkHttp's SPDY client will not respond with the required `RST` frame., +, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +, +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +[Individual Contributor License Agreement (CLA)][3]., + [2]: http://developer.android.com/reference/java/net/ProxySelector.html, + [3]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1, +++ b/checkstyle.xml, +        <!--<module name="EqualsAvoidNull"/>-->, +++ b/src/main/java/libcore/util/Libcore.java]
[+++ b/okhttp/build.gradle, +      'okhttp3.ConnectionSpec#cipherSuites()',, +      'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, +      'okhttp3.ConnectionSpec#isTls()',, +      'okhttp3.ConnectionSpec#supportsTlsExtensions()',, +      'okhttp3.ConnectionSpec#tlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#build()',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ b/okhttp/build.gradle, +      'okhttp3.ConnectionSpec#cipherSuites()',, +      'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, +      'okhttp3.ConnectionSpec#isTls()',, +      'okhttp3.ConnectionSpec#supportsTlsExtensions()',, +      'okhttp3.ConnectionSpec#tlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#build()',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.kt, +++ b/okhttp/build.gradle, +      'okhttp3.ConnectionSpec#cipherSuites()',, +      'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, +      'okhttp3.ConnectionSpec#isTls()',, +      'okhttp3.ConnectionSpec#supportsTlsExtensions()',, +      'okhttp3.ConnectionSpec#tlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#build()',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.kt, +++ /dev/null, +++ b/okhttp/build.gradle, +      'okhttp3.ConnectionSpec#cipherSuites()',, +      'okhttp3.ConnectionSpec#isCompatible(javax.net.ssl.SSLSocket)',, +      'okhttp3.ConnectionSpec#isTls()',, +      'okhttp3.ConnectionSpec#supportsTlsExtensions()',, +      'okhttp3.ConnectionSpec#tlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledCipherSuites()',, +      'okhttp3.ConnectionSpec$Builder#allEnabledTlsVersions()',, +      'okhttp3.ConnectionSpec$Builder#build()',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(okhttp3.CipherSuite\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#cipherSuites(java.lang.String\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#supportsTlsExtensions(boolean)',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(okhttp3.TlsVersion\\[\\])',, +      'okhttp3.ConnectionSpec$Builder#tlsVersions(java.lang.String\\[\\])',, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.kt, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import okhttp3.ConnectionSpec.Builder, +import okhttp3.internal.Util, +import okhttp3.internal.Util.concat, +import okhttp3.internal.Util.indexOf, +import okhttp3.internal.Util.intersect, +import okhttp3.internal.Util.nonEmptyIntersection, +import java.util.Arrays, +import java.util.Objects, +import javax.net.ssl.SSLSocket, +, +/**, + * Specifies configuration for the socket connection that HTTP traffic travels through. For `https:`, + * URLs, this includes the TLS version and cipher suites to use when negotiating a secure, + * connection., + *, + * The TLS versions configured in a connection spec are only be used if they are also enabled in the, + * SSL socket. For example, if an SSL socket does not have TLS 1.3 enabled, it will not be used even, + * if it is present on the connection spec. The same policy also applies to cipher suites., + *, + * Use [Builder.allEnabledTlsVersions] and [Builder.allEnabledCipherSuites] to defer all feature, + * selection to the underlying SSL socket.]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +    assertEquals(TlsVersion.TLS_1_2, fallbackRequest.getTlsVersion());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +    assertEquals(TlsVersion.TLS_1_2, fallbackRequest.getTlsVersion());, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, +import java.security.interfaces.RSAPrivateKey;, +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc5208">PKCS, +   * #8</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +    if (!(keyPair.getPrivate() instanceof RSAPrivateKey)) {, +      throw new IllegalStateException("PKCS1 only supports RSA keys");, +    }, +  /** Build a held certificate with reasonable defaults. */, +    private String keyAlgorithm;, +    private int keySize;, +, +    public Builder() {, +      ecdsa256();, +    }, +    /**, +     * Configure the certificate to generate a 256-bit ECDSA key, which provides about 128 bits of, +     * security. ECDSA keys are noticeably faster than RSA keys., +     *, +     * <p>This is the default configuration and has been since this API was introduced in OkHttp, +     * 3.11.0. Note that the default may change in future releases., +     */, +    public Builder ecdsa256() {, +      keyAlgorithm = "ECDSA";, +      keySize = 256;, +      return this;, +    }, +, +    /**, +     * Configure the certificate to generate a 2048-bit RSA key, which provides about 112 bits of, +     * security. RSA keys are interoperable with very old clients that don't support ECDSA., +     */, +    public Builder rsa2048() {, +      keyAlgorithm = "RSA";, +      keySize = 2048;, +      return this;, +    }, +, +      generator.setSignatureAlgorithm(signedByKeyPair.getPrivate() instanceof RSAPrivateKey, +          ? "SHA256WithRSAEncryption", +          : "SHA256withECDSA");, +        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(keyAlgorithm, "BC");, +        keyPairGenerator.initialize(keySize, new SecureRandom());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +    assertEquals(TlsVersion.TLS_1_2, fallbackRequest.getTlsVersion());, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, +import java.security.interfaces.RSAPrivateKey;, +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc5208">PKCS, +   * #8</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +    if (!(keyPair.getPrivate() instanceof RSAPrivateKey)) {, +      throw new IllegalStateException("PKCS1 only supports RSA keys");, +    }, +  /** Build a held certificate with reasonable defaults. */, +    private String keyAlgorithm;, +    private int keySize;, +, +    public Builder() {, +      ecdsa256();, +    }]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import java.net.Inet6Address;, +import java.net.InetAddress;, +      String path = requestLine.substring(methodEnd + 1, pathEnd);, +      if (!path.startsWith("/")) {, +        path = "/";, +      }, +      this.path = path;, +      InetAddress inetAddress = socket.getLocalAddress();, +, +      String hostname = inetAddress.getHostName();, +      if (inetAddress instanceof Inet6Address) {, +        hostname = "[" + hostname + "]";, +      }, +, +      int localPort = socket.getLocalPort();, +      // Allow null in failure case to allow for testing bad requests, +      this.requestUrl =, +          HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, localPort, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import java.net.Inet6Address;, +import java.net.InetAddress;, +      String path = requestLine.substring(methodEnd + 1, pathEnd);, +      if (!path.startsWith("/")) {, +        path = "/";, +      }, +      this.path = path;, +      InetAddress inetAddress = socket.getLocalAddress();, +, +      String hostname = inetAddress.getHostName();, +      if (inetAddress instanceof Inet6Address) {, +        hostname = "[" + hostname + "]";, +      }, +, +      int localPort = socket.getLocalPort();, +      // Allow null in failure case to allow for testing bad requests, +      this.requestUrl =, +          HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, localPort, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Shutdown {@link MockWebServer} after writing response., +   */, +  SHUTDOWN_SERVER_AFTER_RESPONSE,, +, +  /**, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import java.net.Inet6Address;, +import java.net.InetAddress;, +      String path = requestLine.substring(methodEnd + 1, pathEnd);, +      if (!path.startsWith("/")) {, +        path = "/";, +      }, +      this.path = path;, +      InetAddress inetAddress = socket.getLocalAddress();, +, +      String hostname = inetAddress.getHostName();, +      if (inetAddress instanceof Inet6Address) {, +        hostname = "[" + hostname + "]";, +      }, +, +      int localPort = socket.getLocalPort();, +      // Allow null in failure case to allow for testing bad requests, +      this.requestUrl =, +          HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, localPort, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Shutdown {@link MockWebServer} after writing response., +   */, +  SHUTDOWN_SERVER_AFTER_RESPONSE,, +, +  /**, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void shutdownServerAfterRequest() throws Exception {, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE));, +, +    URL url = server.url("/").url();, +, +    HttpURLConnection connection = (HttpURLConnection) url.openConnection();, +    assertEquals(HttpURLConnection.HTTP_OK, connection.getResponseCode());, +, +    HttpURLConnection refusedConnection = (HttpURLConnection) url.openConnection();, +, +    try {, +      refusedConnection.getResponseCode();, +      fail("Second connection should be refused");, +    } catch (ConnectException e ) {]
[+++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +++ /dev/null, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, +    client = defaultClient().newBuilder(), +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, +    client = defaultClient().newBuilder(), +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient().newBuilder(), +, +    TestUtil.ensureAllConnectionsReleased(client);, +    OkHttpClient c = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, +    client = defaultClient().newBuilder(), +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient().newBuilder(), +, +    TestUtil.ensureAllConnectionsReleased(client);, +    OkHttpClient c = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +  @After, +  public void tearDown() {, +    TestUtil.ensureAllConnectionsReleased(client);, +  }, +, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, +    client = defaultClient().newBuilder(), +    TestUtil.ensureAllConnectionsReleased(client);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient().newBuilder(), +, +    TestUtil.ensureAllConnectionsReleased(client);, +    OkHttpClient c = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +  @After, +  public void tearDown() {, +    TestUtil.ensureAllConnectionsReleased(client);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static okhttp3.TestUtil.defaultClient;, +  private OkHttpClient client = defaultClient();, +, +  @After, +  public void tearDown() {, +    TestUtil.ensureAllConnectionsReleased(client);, +  }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +            + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) ", +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java]
[+++ b/mockwebserver/pom.xml, +      <optional>true</optional>, +++ b/mockwebserver/pom.xml, +      <optional>true</optional>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.mockwebserver.rule;, +, +import com.squareup.okhttp.internal.Util;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import java.io.IOException;, +import java.net.ServerSocket;, +import java.net.URL;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +import org.junit.rules.ExternalResource;, +, +/**, + * Allows you to use {@link MockWebServer} as a JUnit test rule., + *, + * <p>This rule starts {@link MockWebServer} on an available port before your test runs, and shuts, + * it down after it completes., + */, +public class MockWebServerRule extends ExternalResource {, +  private static final Logger logger = Logger.getLogger(MockWebServerRule.class.getName());, +, +  private final int port = pickPort();, +  private final MockWebServer server = new MockWebServer();, +, +  @Override protected void before() {, +    try {, +      server.play(port);, +    } catch (IOException e) {, +      throw new RuntimeException(e);, +    }, +  }, +, +  @Override protected void after() {, +    try {, +      server.shutdown();, +    } catch (IOException e) {, +      logger.log(Level.WARNING, "MockWebServer shutdown failed", e);, +    }, +  }, +, +  public int getPort() {, +    return port;, +  }, +, +  public int getRequestCount() {, +    return server.getRequestCount();, +  }, +, +  public void enqueue(MockResponse response) {, +    server.enqueue(response);, +  }, +, +  public RecordedRequest takeRequest() throws InterruptedException {, +    return server.takeRequest();, +  }, +, +  public URL getUrl(String path) {, +    return server.getUrl(path);, +  }, +, +  /** For any other functionality, use the {@linkplain MockWebServer} directly. */, +  public MockWebServer get() {, +    return server;, +  }, +, +  private static int pickPort() {, +    ServerSocket socket = null;, +    try {, +      socket = new ServerSocket(0);, +      return socket.getLocalPort();, +    } catch (IOException e) {, +      throw new RuntimeException(e);, +    } finally {, +      Util.closeQuietly(socket);, +    }, +  }, +}, +++ b/mockwebserver/pom.xml, +      <optional>true</optional>]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    client = new OkHttpClient.Builder(), +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    client = new OkHttpClient.Builder(), +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/okhttp-sse/src/main/java/okhttp3/sse/EventSources.java, +    return (request, listener) -> {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {]
[+++ b/build.gradle, +      check("MissingFail", CheckSeverity.ERROR), +++ b/build.gradle, +      check("MissingFail", CheckSeverity.ERROR), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.Ignore;, +  @Ignore("Not actually failing where expected"), +      fail();, +++ b/build.gradle, +      check("MissingFail", CheckSeverity.ERROR), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import org.junit.Ignore;, +  @Ignore("Not actually failing where expected"), +      fail();, +++ b/okhttp/src/test/java/okhttp3/URLConnectionTest.java, +      fail();, +      fail();, +      fail();, +      fail();]
[+++ /dev/null, +++ /dev/null, +++ b/CHANGELOG.md, +++ /dev/null, +++ b/CHANGELOG.md, +++ b/README.md, +An HTTP & SPDY client for Android and Java applications., +, +For more information please see [the website][1]., +, +Making Connections, +------------------, +, +Although you provide only the URL, OkHttp plans its connection to your webserver, +using three types: URL, Address, and Route., +, +#### [URLs](http://developer.android.com/reference/java/net/URL.html), +, +URLs (like `https://github.com/square/okhttp`) are fundamental to HTTP and the, +Internet. In addition to being a universal, decentralized naming scheme for, +everything on the web, they also specify how to access web resources., +, +URLs are abstract:, +, + * They specify that the call may be plaintext (`http`) or encrypted (`https`),, +   but not which cryptographic algorithms should be used. Nor do they specify, +   how to verify the peer's certificates (the [HostnameVerifier](http://developer.android.com/reference/javax/net/ssl/HostnameVerifier.html)), +   or which certificates can be trusted (the [SSLSocketFactory](http://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html))., + * They don't specify whether a specific proxy server should be used or how to, +   authenticate with that proxy server., +, +They're also concrete: each URL identifies a specific path (like `/square/okhttp`), +and query (like `?q=sharks&lang=en`). Each webserver hosts many URLs., +, +#### [Addresses](http://square.github.io/okhttp/javadoc/com/squareup/okhttp/Address.html), +, +Addresses specify a webserver (like `github.com`) and all of the **static**, +configuration necessary to connect to that server: the port number, HTTPS, +settings, and preferred network protocols (like HTTP/2 or SPDY)., +, +URLs that share the same address may also share the same underlying TCP socket, +connection. Sharing a connection has substantial performance benefits: lower, +latency, higher throughput (due to [TCP slow start](http://www.igvita.com/2011/10/20/faster-web-vs-tcp-slow-start/)), +and conserved battery. OkHttp uses a [ConnectionPool](http://square.github.io/okhttp/javadoc/com/squareup/okhttp/ConnectionPool.html), +that automatically reuses HTTP/1.x connections and multiplexes HTTP/2 and SPDY, +connections., +, +In OkHttp some fields of the address come from the URL (scheme, hostname, port), +and the rest come from the [OkHttpClient](http://square.github.io/okhttp/javadoc/com/squareup/okhttp/OkHttpClient.html)., +, +#### [Routes](http://square.github.io/okhttp/javadoc/com/squareup/okhttp/Route.html), +, +Routes supply the **dynamic** information necessary to actually connect to a webserver., +This is the specific IP address to attempt (as discovered by a DNS query), the, +exact proxy server to use (if a [ProxySelector](http://developer.android.com/reference/java/net/ProxySelector.html), +is in use), and which version of TLS to negotiate (for HTTPS connections)., +, +There may be many routes for a single address. For example, a webserver that, +is hosted in multiple datacenters may yield multiple IP addresses in its DNS, +response., +, +#### [Connections](http://square.github.io/okhttp/javadoc/com/squareup/okhttp/Connection.html), +, +When you request a URL with OkHttp, here's what it does:, +, + 1. Use the URL and configured OkHttpClient to create an **address**. This address, +    specifies how we'll connect to the webserver., + 2. Attempt to retrieve a connection with that address in the **connection pool**., + 3. If it didn't find a connection in the pool, select a **route** to attempt., +    This usually means making a DNS request to get the server's IP addresses., +    Select a TLS version and proxy server if necessary., + 4. If it's a new route, connect. Build either a direct socket connection, a TLS, +    tunnel (for HTTPS over an HTTP proxy), or a direct TLS connection. Do TLS, +    handshakes as necessary., + 5. Send the HTTP request and read its HTTP response., +, +If there's a problem with the connection, OkHttp will select another route and, +try again. This can be used to automatically fail over on webservers that offer, +multiple IP addresses. It's also useful when a pooled connection is stale or if, +the attempted TLS version is unsupported., +, +Once the response has been received, the connection will be returned to the pool, +so it can be reused for a future request. Connections are evicted from the pool, +after a period of inactivity., +Download [the latest JAR][2] or grab via Maven:, +Building, +--------, +, +OkHttp requires Java 7 to build and run tests. Runtime compatibility with Java 6 is enforced as, +part of the build to ensure compliance with Android and older versions of the JVM., +, +, +, +Testing, +-------, +, +### On the Desktop, +, +Run OkHttp tests on the desktop with Maven. Running HTTP/2 and SPDY tests on the desktop uses, +[Jetty-NPN][3] when running OpenJDK 7 or [Jetty-ALPN][4] when OpenJDK 8.]
[+++ b/build.gradle, +      'okio': '2.2.2',, +++ b/build.gradle, +      'okio': '2.2.2',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt, +import okio.utf8Size, +      val utf8ByteCount = label.utf8Size(), +    nameBuf.copyTo(this, 0, nameBuf.size), +++ b/build.gradle, +      'okio': '2.2.2',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt, +import okio.utf8Size, +      val utf8ByteCount = label.utf8Size(), +    nameBuf.copyTo(this, 0, nameBuf.size), +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +import java.io.EOFException;, +      assertThat(ioe.getCause()).isInstanceOf(EOFException.class);, +++ b/build.gradle, +      'okio': '2.2.2',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt, +import okio.utf8Size, +      val utf8ByteCount = label.utf8Size(), +    nameBuf.copyTo(this, 0, nameBuf.size), +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +import java.io.EOFException;, +      assertThat(ioe.getCause()).isInstanceOf(EOFException.class);, +++ b/okhttp/src/main/java/okhttp3/Cache.kt, +import okio.buffer, +import okio.ByteString.Companion.decodeBase64, +import okio.ByteString.Companion.encodeUtf8, +              val metadata = snapshot.getSource(ENTRY_METADATA).buffer(), +        val source = rawSource.buffer(), +      val sink = editor.newSink(ENTRY_METADATA).buffer(), +          bytes.write(line.decodeBase64()!!), +      bodySource = object : ForwardingSource(source) {, +      }.buffer(), +    fun key(url: HttpUrl): String = url.toString().encodeUtf8().md5().hex(), +++ b/build.gradle, +      'okio': '2.2.2',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt, +import okio.utf8Size, +      val utf8ByteCount = label.utf8Size(), +    nameBuf.copyTo(this, 0, nameBuf.size), +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +import java.io.EOFException;, +      assertThat(ioe.getCause()).isInstanceOf(EOFException.class);, +++ b/okhttp/src/main/java/okhttp3/Cache.kt, +import okio.buffer, +import okio.ByteString.Companion.decodeBase64, +import okio.ByteString.Companion.encodeUtf8, +              val metadata = snapshot.getSource(ENTRY_METADATA).buffer(), +        val source = rawSource.buffer(), +      val sink = editor.newSink(ENTRY_METADATA).buffer(), +          bytes.write(line.decodeBase64()!!), +      bodySource = object : ForwardingSource(source) {, +      }.buffer(), +    fun key(url: HttpUrl): String = url.toString().encodeUtf8().md5().hex(), +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.kt, +import okio.ByteString.Companion.decodeBase64, +          this.hash = pin.substring("sha1/".length).decodeBase64()!!, +          this.hash = pin.substring("sha256/".length).decodeBase64()!!, +++ b/build.gradle, +      'okio': '2.2.2',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt, +import okio.utf8Size, +      val utf8ByteCount = label.utf8Size(), +    nameBuf.copyTo(this, 0, nameBuf.size), +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +import java.io.EOFException;, +      assertThat(ioe.getCause()).isInstanceOf(EOFException.class);, +++ b/okhttp/src/main/java/okhttp3/Cache.kt, +import okio.buffer, +import okio.ByteString.Companion.decodeBase64, +import okio.ByteString.Companion.encodeUtf8, +              val metadata = snapshot.getSource(ENTRY_METADATA).buffer(), +        val source = rawSource.buffer(), +      val sink = editor.newSink(ENTRY_METADATA).buffer(), +          bytes.write(line.decodeBase64()!!), +      bodySource = object : ForwardingSource(source) {, +      }.buffer(), +    fun key(url: HttpUrl): String = url.toString().encodeUtf8().md5().hex(), +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.kt, +import okio.ByteString.Companion.decodeBase64, +          this.hash = pin.substring("sha1/".length).decodeBase64()!!, +          this.hash = pin.substring("sha256/".length).decodeBase64()!!, +++ b/okhttp/src/main/java/okhttp3/Credentials.kt, +import okio.ByteString.Companion.encode, +    val encoded = usernameAndPassword.encode(charset).base64(), +++ b/build.gradle, +      'okio': '2.2.2',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt, +import okio.utf8Size, +      val utf8ByteCount = label.utf8Size(), +    nameBuf.copyTo(this, 0, nameBuf.size), +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +import java.io.EOFException;, +      assertThat(ioe.getCause()).isInstanceOf(EOFException.class);, +++ b/okhttp/src/main/java/okhttp3/Cache.kt, +import okio.buffer, +import okio.ByteString.Companion.decodeBase64]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ /dev/null, +++ b/okhttp-urlconnection/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ /dev/null, +++ b/okhttp-urlconnection/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  /** Lazily created (with synthetic headers) on first call to getHeaders(). */, +  private Headers responseHeaders;, +  private Headers getHeaders() throws IOException {, +    if (responseHeaders == null) {, +      Response response = getResponse().getResponse();, +      Headers headers = response.headers();, +, +      responseHeaders = headers.newBuilder(), +          .add(Platform.get().getPrefix() + "-Response-Source", responseSourceHeader(response)), +          .build();, +    }, +    return responseHeaders;, +  }, +, +  private static String responseSourceHeader(Response response) {, +    if (response.networkResponse() == null) {, +      if (response.cacheResponse() == null) {, +        return "NONE";, +      }, +      return "CACHE " + response.code();, +    }, +    if (response.cacheResponse() == null) {, +      return "NETWORK " + response.code();, +    }, +    return "CONDITIONAL_CACHE " + response.networkResponse().code();, +  }, +, +      return getHeaders().value(position);, +          ? StatusLine.get(getResponse().getResponse()).toString(), +          : getHeaders().get(fieldName);, +      return getHeaders().name(position);, +      return OkHeaders.toMultimap(getHeaders(),, +          StatusLine.get(getResponse().getResponse()).toString());, +  // @Override Don't override: this overload method doesn't exist prior to Java 1.7., +  public void setFixedLengthStreamingMode(long contentLength) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ /dev/null, +++ b/okhttp-urlconnection/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  /** Lazily created (with synthetic headers) on first call to getHeaders(). */, +  private Headers responseHeaders;, +  private Headers getHeaders() throws IOException {, +    if (responseHeaders == null) {, +      Response response = getResponse().getResponse();, +      Headers headers = response.headers();, +, +      responseHeaders = headers.newBuilder(), +          .add(Platform.get().getPrefix() + "-Response-Source", responseSourceHeader(response)), +          .build();, +    }, +    return responseHeaders;, +  }, +, +  private static String responseSourceHeader(Response response) {, +    if (response.networkResponse() == null) {, +      if (response.cacheResponse() == null) {, +        return "NONE";, +      }, +      return "CACHE " + response.code();, +    }, +    if (response.cacheResponse() == null) {, +      return "NETWORK " + response.code();, +    }, +    return "CONDITIONAL_CACHE " + response.networkResponse().code();, +  }, +]
[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.Map;, +  /** All map values are Boolean.TRUE. (Collections.newSetFromMap isn't available in Froyo) */, +  private final Map<Socket, Boolean> openClientSockets = new ConcurrentHashMap<>();, +  private final Map<SpdyConnection, Boolean> openSpdyConnections = new ConcurrentHashMap<>();, +    serverSocket = new ServerSocket(port, 50, inetAddress);, +        for (Iterator<Socket> s = openClientSockets.keySet().iterator(); s.hasNext(); ) {, +        for (Iterator<SpdyConnection> s = openSpdyConnections.keySet().iterator(); s.hasNext(); ) {, +            openClientSockets.put(socket, true);, +          openClientSockets.put(socket, true);, +          openSpdyConnections.put(spdyConnection, Boolean.TRUE);, +++ b/CHANGELOG.md, +++ b/README.md, +  <version>2.0.0</version>, +compile 'com.squareup.okhttp:okhttp:2.0.0', +  <version>2.0.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', + [3]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/deploy_website.sh, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.Map;, +  /** All map values are Boolean.TRUE. (Collections.newSetFromMap isn't available in Froyo) */, +  private final Map<Socket, Boolean> openClientSockets = new ConcurrentHashMap<>();, +  private final Map<SpdyConnection, Boolean> openSpdyConnections = new ConcurrentHashMap<>();, +    serverSocket = new ServerSocket(port, 50, inetAddress);, +        for (Iterator<Socket> s = openClientSockets.keySet().iterator(); s.hasNext(); ) {, +        for (Iterator<SpdyConnection> s = openSpdyConnections.keySet().iterator(); s.hasNext(); ) {, +            openClientSockets.put(socket, true);, +          openClientSockets.put(socket, true);, +          openSpdyConnections.put(spdyConnection, Boolean.TRUE);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java]
[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    // Give the socket a chance to become stale., +    Thread.sleep(250);, +, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    // Give the socket a chance to become stale., +    Thread.sleep(250);, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.http.OkHeaders;, +      if (OkHeaders.hasBody(response) && response.code() >= HTTP_BAD_REQUEST) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    // Give the socket a chance to become stale., +    Thread.sleep(250);, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.http.OkHeaders;, +      if (OkHeaders.hasBody(response) && response.code() >= HTTP_BAD_REQUEST) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    // Give the socket a chance to become stale., +    Thread.sleep(250);, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.http.OkHeaders;, +      if (OkHeaders.hasBody(response) && response.code() >= HTTP_BAD_REQUEST) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.BridgeInterceptor;, +import okhttp3.internal.http.CacheInterceptor;, +import okhttp3.internal.http.ConnectInterceptor;, +    interceptors.add(new BridgeInterceptor(client.cookieJar()));, +    interceptors.add(new CacheInterceptor(client.internalCache()));, +    interceptors.add(new ConnectInterceptor(client));, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    // Give the socket a chance to become stale., +    Thread.sleep(250);, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.http.OkHeaders;, +      if (OkHeaders.hasBody(response) && response.code() >= HTTP_BAD_REQUEST) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.BridgeInterceptor;, +import okhttp3.internal.http.CacheInterceptor;, +import okhttp3.internal.http.ConnectInterceptor;, +    interceptors.add(new BridgeInterceptor(client.cookieJar()));, +    interceptors.add(new CacheInterceptor(client.internalCache()));, +    interceptors.add(new ConnectInterceptor(client));, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    // Give the socket a chance to become stale., +    Thread.sleep(250);, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.http.OkHeaders;, +      if (OkHeaders.hasBody(response) && response.code() >= HTTP_BAD_REQUEST) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.BridgeInterceptor;, +import okhttp3.internal.http.CacheInterceptor;, +import okhttp3.internal.http.ConnectInterceptor;, +    interceptors.add(new BridgeInterceptor(client.cookieJar()));, +    interceptors.add(new CacheInterceptor(client.internalCache()));, +    interceptors.add(new ConnectInterceptor(client));, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java, +/*, + *  Licensed to the Apache Software Foundation (ASF) under one or more, + *  contributor license agreements.  See the NOTICE file distributed with, + *  this work for additional information regarding copyright ownership., + *  The ASF licenses this file to You under the Apache License, Version 2.0, + *  (the "License"); you may not use this file except in compliance with, + *  the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + *  Unless required by applicable law or agreed to in writing, software, + *  distributed under the License is distributed on an "AS IS" BASIS,]
[+++ /dev/null, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE/bug_report.md, +---, +name: Bug report, +about: A reproducible problem, +title: '', +labels: bug, +assignees: '', +, +---, +, +Bug reports must include a failing test! Writing a test helps you to isolate and describe the problem, and it helps us to fix it fast. Bug without tests may be closed without comment., +, +Here’s an example to get you started., +https://gist.github.com/swankjesse/981fcae102f513eb13ed, +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE/bug_report.md, +---, +name: Bug report, +about: A reproducible problem, +title: '', +labels: bug, +assignees: '', +, +---, +, +Bug reports must include a failing test! Writing a test helps you to isolate and describe the problem, and it helps us to fix it fast. Bug without tests may be closed without comment., +, +Here’s an example to get you started., +https://gist.github.com/swankjesse/981fcae102f513eb13ed, +++ b/.github/ISSUE_TEMPLATE/feature_request.md, +---, +name: Feature request, +about: Suggest an idea, +title: '', +labels: enhancement, +assignees: '', +, +---, +, +Start by telling us what problem you’re trying to solve. Often a solution already exists!, +, +Don’t send pull requests to implement new features without first getting our support. Sometimes we leave features out on purpose to keep the project small., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE/bug_report.md, +---, +name: Bug report, +about: A reproducible problem, +title: '', +labels: bug, +assignees: '', +, +---, +, +Bug reports must include a failing test! Writing a test helps you to isolate and describe the problem, and it helps us to fix it fast. Bug without tests may be closed without comment., +, +Here’s an example to get you started., +https://gist.github.com/swankjesse/981fcae102f513eb13ed, +++ b/.github/ISSUE_TEMPLATE/feature_request.md, +---, +name: Feature request, +about: Suggest an idea, +title: '', +labels: enhancement, +assignees: '', +, +---, +, +Start by telling us what problem you’re trying to solve. Often a solution already exists!, +, +Don’t send pull requests to implement new features without first getting our support. Sometimes we leave features out on purpose to keep the project small., +++ b/.github/ISSUE_TEMPLATE/question.md, +---, +name: Question, +about: Use Stack Overflow instead, +title: "\U0001F649", +labels: '', +assignees: '', +, +---, +, +🛑 𝙎𝙏𝙊𝙋, +, +This issue tracker is not the place for questions!, +, +If you want to ask how to do something, or to understand why something isn't working the way you expect it to, use Stack Overflow. https://stackoverflow.com/questions/tagged/okhttp, +, +We close all questions without reading them., +++ /dev/null, +++ b/.github/ISSUE_TEMPLATE/bug_report.md, +---, +name: Bug report, +about: A reproducible problem, +title: '', +labels: bug, +assignees: '', +, +---, +]
[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.zip.GZIPOutputStream;, +    server.play();, +    byte[] body = new byte[bodyByteCount];, +    random.nextBytes(body);, +      body = gzip(body);, +      result.setChunkedBody(new Buffer().write(body), 1024);, +, +  /** Returns a gzipped copy of {@code bytes}. */, +  private byte[] gzip(byte[] bytes) throws IOException {, +    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, +    OutputStream gzippedOut = new GZIPOutputStream(bytesOut);, +    gzippedOut.write(bytes);, +    gzippedOut.close();, +    return bytesOut.toByteArray();, +  }, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.zip.GZIPOutputStream;, +    server.play();, +    byte[] body = new byte[bodyByteCount];, +    random.nextBytes(body);, +      body = gzip(body);, +      result.setChunkedBody(new Buffer().write(body), 1024);, +, +  /** Returns a gzipped copy of {@code bytes}. */, +  private byte[] gzip(byte[] bytes) throws IOException {, +    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, +    OutputStream gzippedOut = new GZIPOutputStream(bytesOut);, +    gzippedOut.write(bytes);, +    gzippedOut.close();, +    return bytesOut.toByteArray();, +  }, +++ b/mockwebserver/README.md, +  server.play();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.zip.GZIPOutputStream;, +    server.play();, +    byte[] body = new byte[bodyByteCount];, +    random.nextBytes(body);, +      body = gzip(body);, +      result.setChunkedBody(new Buffer().write(body), 1024);, +, +  /** Returns a gzipped copy of {@code bytes}. */, +  private byte[] gzip(byte[] bytes) throws IOException {, +    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, +    OutputStream gzippedOut = new GZIPOutputStream(bytesOut);, +    gzippedOut.write(bytes);, +    gzippedOut.close();, +    return bytesOut.toByteArray();, +  }, +++ b/mockwebserver/README.md, +  server.play();, +++ b/mockwebserver/pom.xml, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.zip.GZIPOutputStream;, +    server.play();, +    byte[] body = new byte[bodyByteCount];, +    random.nextBytes(body);, +      body = gzip(body);, +      result.setChunkedBody(new Buffer().write(body), 1024);, +, +  /** Returns a gzipped copy of {@code bytes}. */, +  private byte[] gzip(byte[] bytes) throws IOException {, +    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, +    OutputStream gzippedOut = new GZIPOutputStream(bytesOut);, +    gzippedOut.write(bytes);, +    gzippedOut.close();, +    return bytesOut.toByteArray();, +  }, +++ b/mockwebserver/README.md, +  server.play();, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +, +  /** @deprecated replaced with {@link #peek}. */, +  protected final SocketPolicy peekSocketPolicy() {, +    throw new UnsupportedOperationException("This API is obsolete. Override peek() instead!");, +  }, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.zip.GZIPOutputStream;, +    server.play();, +    byte[] body = new byte[bodyByteCount];, +    random.nextBytes(body);, +      body = gzip(body);, +      result.setChunkedBody(new Buffer().write(body), 1024);, +, +  /** Returns a gzipped copy of {@code bytes}. */, +  private byte[] gzip(byte[] bytes) throws IOException {, +    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, +    OutputStream gzippedOut = new GZIPOutputStream(bytesOut);]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel()`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels have, +You can redact headers that may contain sensitive information by calling `redactHeader()`., +```java, +logging.redactHeader("Authorization");, +logging.redactHeader("Cookie");, +```, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel()`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels have, +You can redact headers that may contain sensitive information by calling `redactHeader()`., +```java, +logging.redactHeader("Authorization");, +logging.redactHeader("Cookie");, +```, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import java.util.Collections;, +import java.util.Set;, +import java.util.TreeSet;, +  private volatile Set<String> headersToRedact = Collections.emptySet();, +, +  public void redactHeader(String name) {, +    Set<String> newHeadersToRedact = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);, +    newHeadersToRedact.addAll(headersToRedact);, +    newHeadersToRedact.add(name);, +    headersToRedact = newHeadersToRedact;, +  }, +, +          logHeader(headers, i);, +        logHeader(headers, i);, +  private void logHeader(Headers headers, int i) {, +    String value = headersToRedact.contains(headers.name(i)) ? "██" : headers.value(i);, +    logger.log(headers.name(i) + ": " + value);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel()`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels have, +You can redact headers that may contain sensitive information by calling `redactHeader()`., +```java, +logging.redactHeader("Authorization");, +logging.redactHeader("Cookie");]
[+++ b/okhttp-tests/pom.xml, +, +  <build>, +    <plugins>, +      <!-- Do not deploy this as an artifact to Maven central. -->, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-deploy-plugin</artifactId>, +        <configuration>, +          <skip>true</skip>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>]
[+++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/tls/HeldCertificate.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.mockwebserver.internal.tls;, +, +import java.math.BigInteger;, +import java.security.GeneralSecurityException;, +import java.security.KeyPair;, +import java.security.KeyPairGenerator;, +import java.security.SecureRandom;, +import java.security.Security;, +import java.security.cert.X509Certificate;, +import java.util.ArrayList;, +import java.util.Date;, +import java.util.List;, +import java.util.UUID;, +import javax.security.auth.x500.X500Principal;, +import org.bouncycastle.asn1.ASN1Encodable;, +import org.bouncycastle.asn1.DERSequence;, +import org.bouncycastle.asn1.x509.BasicConstraints;, +import org.bouncycastle.asn1.x509.GeneralName;, +import org.bouncycastle.asn1.x509.X509Extensions;, +import org.bouncycastle.jce.provider.BouncyCastleProvider;, +import org.bouncycastle.x509.X509V3CertificateGenerator;, +, +import static okhttp3.internal.Util.verifyAsIpAddress;, +, +/**, + * A certificate and its private key. This can be used on the server side by HTTPS servers, or on, + * the client side to verify those HTTPS servers. A held certificate can also be used to sign other, + * held certificates, as done in practice by certificate authorities., + */, +public final class HeldCertificate {, +  public final X509Certificate certificate;, +  public final KeyPair keyPair;, +, +  public HeldCertificate(X509Certificate certificate, KeyPair keyPair) {, +    this.certificate = certificate;, +    this.keyPair = keyPair;, +  }, +, +  public static final class Builder {, +    static {, +      Security.addProvider(new BouncyCastleProvider());, +    }, +, +    private final long duration = 1000L * 60 * 60 * 24; // One day., +    private String hostname;, +    private List<String> altNames = new ArrayList<>();, +    private String serialNumber = "1";, +    private KeyPair keyPair;, +    private HeldCertificate issuedBy;, +    private int maxIntermediateCas;, +, +    public Builder serialNumber(String serialNumber) {, +      this.serialNumber = serialNumber;, +      return this;, +    }, +, +    /**, +     * Set this certificate's name. Typically this is the URL hostname for TLS certificates. This is, +     * the CN (common name) in the certificate. Will be a random string if no value is provided., +     */, +    public Builder commonName(String hostname) {, +      this.hostname = hostname;, +      return this;, +    }, +, +    public Builder keyPair(KeyPair keyPair) {, +      this.keyPair = keyPair;, +      return this;, +    }, +, +    /**, +     * Set the certificate that signs this certificate. If unset, a self-signed certificate will be, +     * generated., +     */, +    public Builder issuedBy(HeldCertificate signedBy) {, +      this.issuedBy = signedBy;, +      return this;, +    }, +, +    /**, +     * Set this certificate to be a certificate authority, with up to {@code maxIntermediateCas}, +     * intermediate certificate authorities beneath it.]
[+++ b/pom.xml, +        <junit.version>3.8.2</junit.version>, +++ b/pom.xml, +        <junit.version>3.8.2</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responeHeaders,, +        String credentials = getCredentials(responeHeaders, challengeHeader, proxy, url);, +++ b/pom.xml, +        <junit.version>3.8.2</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responeHeaders,, +        String credentials = getCredentials(responeHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +public final class HttpDate {, +++ b/pom.xml, +        <junit.version>3.8.2</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responeHeaders,, +        String credentials = getCredentials(responeHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +public final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static final String getDefaultUserAgent() {, +++ b/pom.xml, +        <junit.version>3.8.2</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responeHeaders,, +        String credentials = getCredentials(responeHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +public final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static final String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int posn) {, +        return delegate.getHeaderFieldKey(posn);, +++ b/pom.xml, +        <junit.version>3.8.2</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responeHeaders,, +        String credentials = getCredentials(responeHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +public final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static final String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int posn) {, +        return delegate.getHeaderFieldKey(posn);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RequestHeaders.java, +public final class RequestHeaders {, +++ b/pom.xml, +        <junit.version>3.8.2</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responeHeaders,, +        String credentials = getCredentials(responeHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +public final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static final String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int posn) {, +        return delegate.getHeaderFieldKey(posn);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RequestHeaders.java, +public final class RequestHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/ResponseHeaders.java, +public final class ResponseHeaders {, +++ b/pom.xml, +        <junit.version>3.8.2</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responeHeaders,, +        String credentials = getCredentials(responeHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +public final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static final String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int posn) {, +        return delegate.getHeaderFieldKey(posn);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RequestHeaders.java, +public final class RequestHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/ResponseHeaders.java, +public final class ResponseHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RouteSelector.java, +public final class RouteSelector {, +++ b/pom.xml, +        <junit.version>3.8.2</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responeHeaders,, +        String credentials = getCredentials(responeHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +public final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static final String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int posn) {, +        return delegate.getHeaderFieldKey(posn);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RequestHeaders.java, +public final class RequestHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/ResponseHeaders.java, +public final class ResponseHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RouteSelector.java]
[+++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-5.3-all.zip, +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-5.3-all.zip, +++ b/gradlew, +#, +# Copyright 2015 the original author or authors., +#, +# Licensed under the Apache License, Version 2.0 (the "License");, +# you may not use this file except in compliance with the License., +# You may obtain a copy of the License at, +#, +#      http://www.apache.org/licenses/LICENSE-2.0, +#, +# Unless required by applicable law or agreed to in writing, software, +# distributed under the License is distributed on an "AS IS" BASIS,, +# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +# See the License for the specific language governing permissions and, +# limitations under the License., +#, +, +DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"', +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-5.3-all.zip, +++ b/gradlew, +#, +# Copyright 2015 the original author or authors., +#, +# Licensed under the Apache License, Version 2.0 (the "License");, +# you may not use this file except in compliance with the License., +# You may obtain a copy of the License at, +#, +#      http://www.apache.org/licenses/LICENSE-2.0, +#, +# Unless required by applicable law or agreed to in writing, software, +# distributed under the License is distributed on an "AS IS" BASIS,, +# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +# See the License for the specific language governing permissions and, +# limitations under the License., +#, +, +DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"', +++ b/gradlew.bat, +@rem, +@rem Copyright 2015 the original author or authors., +@rem, +@rem Licensed under the Apache License, Version 2.0 (the "License");, +@rem you may not use this file except in compliance with the License., +@rem You may obtain a copy of the License at, +@rem, +@rem      http://www.apache.org/licenses/LICENSE-2.0, +@rem, +@rem Unless required by applicable law or agreed to in writing, software, +@rem distributed under the License is distributed on an "AS IS" BASIS,, +@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +@rem See the License for the specific language governing permissions and, +@rem limitations under the License., +@rem, +, +set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m", +++ b/gradle/wrapper/gradle-wrapper.jar, +++ b/gradle/wrapper/gradle-wrapper.properties, +distributionUrl=https\://services.gradle.org/distributions/gradle-5.3-all.zip, +++ b/gradlew, +#, +# Copyright 2015 the original author or authors., +#, +# Licensed under the Apache License, Version 2.0 (the "License");, +# you may not use this file except in compliance with the License., +# You may obtain a copy of the License at, +#, +#      http://www.apache.org/licenses/LICENSE-2.0, +#, +# Unless required by applicable law or agreed to in writing, software, +# distributed under the License is distributed on an "AS IS" BASIS,, +# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +# See the License for the specific language governing permissions and, +# limitations under the License., +#, +, +DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"', +++ b/gradlew.bat, +@rem, +@rem Copyright 2015 the original author or authors., +@rem, +@rem Licensed under the Apache License, Version 2.0 (the "License");, +@rem you may not use this file except in compliance with the License., +@rem You may obtain a copy of the License at, +@rem, +@rem      http://www.apache.org/licenses/LICENSE-2.0, +@rem, +@rem Unless required by applicable law or agreed to in writing, software, +@rem distributed under the License is distributed on an "AS IS" BASIS,, +@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +@rem See the License for the specific language governing permissions and, +@rem limitations under the License.]
[+++ b/benchmarks/pom.xml, +    <version>3.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.7.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.7.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.7.0</version>, +++ b/okcurl/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.7.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.7.0</version>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    boolean expectContinue = false;, +        expectContinue = true;, +    if (expectContinue && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +    if (contentLength != -1) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    boolean expectContinue = false;, +        expectContinue = true;, +    if (expectContinue && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +    if (contentLength != -1) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.nio.charset.StandardCharsets;, +, +  @Test public void http100Continue() throws Exception {, +    server.enqueue(new MockResponse().setBody("response"));, +, +    URL url = server.url("/").url();, +    HttpURLConnection connection = (HttpURLConnection) url.openConnection();, +    connection.setDoOutput(true);, +    connection.setRequestProperty("Expect", "100-Continue");, +    connection.getOutputStream().write("request".getBytes(StandardCharsets.UTF_8));, +, +    InputStream in = connection.getInputStream();, +    BufferedReader reader = new BufferedReader(new InputStreamReader(in));, +    assertEquals("response", reader.readLine());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("request", request.getBody().readUtf8());, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    boolean expectContinue = false;, +        expectContinue = true;, +    if (expectContinue && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +    if (contentLength != -1) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.nio.charset.StandardCharsets;, +, +  @Test public void http100Continue() throws Exception {, +    server.enqueue(new MockResponse().setBody("response"));, +, +    URL url = server.url("/").url();, +    HttpURLConnection connection = (HttpURLConnection) url.openConnection();, +    connection.setDoOutput(true);, +    connection.setRequestProperty("Expect", "100-Continue");, +    connection.getOutputStream().write("request".getBytes(StandardCharsets.UTF_8));, +, +    InputStream in = connection.getInputStream();, +    BufferedReader reader = new BufferedReader(new InputStreamReader(in));, +    assertEquals("response", reader.readLine());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("request", request.getBody().readUtf8());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/RecordingProxySelector.java, +    failures.add(Util.format("%s %s:%d %s",, +        uri, socketAddress, socketAddress.getPort(), ioe.getMessage()));]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, +    final SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, +    if (expectContinue && socketPolicy == EXPECT_CONTINUE || socketPolicy == CONTINUE_ALWAYS) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, +    final SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, +    if (expectContinue && socketPolicy == EXPECT_CONTINUE || socketPolicy == CONTINUE_ALWAYS) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +  EXPECT_CONTINUE,, +, +  /**, +   * Transmit a {@code HTTP/1.1 100 Continue} response before reading the HTTP request body even, +   * if the client does not send the header {@code Expect: 100-continue} in its request., +   */, +  CONTINUE_ALWAYS, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, +    final SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, +    if (expectContinue && socketPolicy == EXPECT_CONTINUE || socketPolicy == CONTINUE_ALWAYS) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +  EXPECT_CONTINUE,, +, +  /**, +   * Transmit a {@code HTTP/1.1 100 Continue} response before reading the HTTP request body even, +   * if the client does not send the header {@code Expect: 100-continue} in its request., +   */, +  CONTINUE_ALWAYS, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        .setSocketPolicy(SocketPolicy.CONTINUE_ALWAYS));, +    executeSynchronously(request), +        .assertCode(200), +        .assertSuccessful();, +  @Test public void serverRespondsWith100ContinueOnly() throws Exception {, +    server.enqueue(new MockResponse(), +            .setStatus("HTTP/1.1 100 Continue"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build();, +, +    Call call = client.newCall(request);, +    try {, +      call.execute();, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals("abc", recordedRequest.getBody().readUtf8());, +  }, +, +  @Test public void serverRespondsWith100ContinueOnly_HTTP2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    serverRespondsWith100ContinueOnly();, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, +    final SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, +    if (expectContinue && socketPolicy == EXPECT_CONTINUE || socketPolicy == CONTINUE_ALWAYS) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +  EXPECT_CONTINUE,, +, +  /**, +   * Transmit a {@code HTTP/1.1 100 Continue} response before reading the HTTP request body even, +   * if the client does not send the header {@code Expect: 100-continue} in its request., +   */, +  CONTINUE_ALWAYS, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        .setSocketPolicy(SocketPolicy.CONTINUE_ALWAYS));, +    executeSynchronously(request), +        .assertCode(200), +        .assertSuccessful();, +  @Test public void serverRespondsWith100ContinueOnly() throws Exception {, +    server.enqueue(new MockResponse(), +            .setStatus("HTTP/1.1 100 Continue"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build();, +, +    Call call = client.newCall(request);, +    try {, +      call.execute();, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals("abc", recordedRequest.getBody().readUtf8());, +  }, +, +  @Test public void serverRespondsWith100ContinueOnly_HTTP2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    serverRespondsWith100ContinueOnly();, +  }, +]
[+++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], +	path = okhttp-hpacktests/src/test/resources/hpack-test-case, +	url = git://github.com/http2jp/hpack-test-case.git, +++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], +	path = okhttp-hpacktests/src/test/resources/hpack-test-case, +	url = git://github.com/http2jp/hpack-test-case.git, +++ b/okhttp-hpacktests/README.md, +OkHttp HPACK tests, +==================, +, +These tests use the [hpack-test-case][1] project to validate OkHttp's HPACK, +implementation.  The HPACK test cases are in a separate git submodule, so to, +initialize them, you must run:, +, +    git submodule init, +    git submodule update, +, +When new interop tests are available, you should update, +HpackDecodeInteropGoodTest#GOOD_INTEROP_TESTS with the directory name., +, +TODO, +----, +, + * Add maven goal to avoid manual call to git submodule init., + * Make hpack-test-case update itself from git, and run new tests., + * Add maven goal to generate stories and a pull request to hpack-test-case, +   to have others validate our output., +, +[1]: https://github.com/http2jp/hpack-test-case , +++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], +	path = okhttp-hpacktests/src/test/resources/hpack-test-case, +	url = git://github.com/http2jp/hpack-test-case.git, +++ b/okhttp-hpacktests/README.md, +OkHttp HPACK tests, +==================, +, +These tests use the [hpack-test-case][1] project to validate OkHttp's HPACK, +implementation.  The HPACK test cases are in a separate git submodule, so to, +initialize them, you must run:, +, +    git submodule init, +    git submodule update, +, +When new interop tests are available, you should update, +HpackDecodeInteropGoodTest#GOOD_INTEROP_TESTS with the directory name., +, +TODO, +----, +, + * Add maven goal to avoid manual call to git submodule init., + * Make hpack-test-case update itself from git, and run new tests., + * Add maven goal to generate stories and a pull request to hpack-test-case, +   to have others validate our output., +, +[1]: https://github.com/http2jp/hpack-test-case , +++ b/okhttp-hpacktests/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.0.1-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-hpacktests</artifactId>, +  <name>OkHttp HPACK Tests</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <!--  Gson: Java to Json conversion -->, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +      <version>2.2.4</version>, +      <scope>compile</scope>]
[+++ b/README.md, +  <version>2.0.0</version>, +or Gradle:, +```groovy, +compile 'com.squareup.okhttp:okhttp:2.0.0', +```, +  <version>2.0.0</version>, +or Gradle:, +```groovy, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', +```, +, +++ b/README.md, +  <version>2.0.0</version>, +or Gradle:, +```groovy, +compile 'com.squareup.okhttp:okhttp:2.0.0', +```, +  <version>2.0.0</version>, +or Gradle:, +```groovy, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', +```, +, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", 2);, +++ b/README.md, +  <version>2.0.0</version>, +or Gradle:, +```groovy, +compile 'com.squareup.okhttp:okhttp:2.0.0', +```, +  <version>2.0.0</version>, +or Gradle:, +```groovy, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', +```, +, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", 2);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void headerSplitWithDate() {, +    Request request = fromArgs("-H", "If-Modified-Since: Mon, 18 Aug 2014 15:16:06 GMT",, +        "http://example.com").createRequest();, +    assertEquals("Mon, 18 Aug 2014 15:16:06 GMT", request.header("If-Modified-Since"));, +  }, +, +++ b/README.md, +  <version>2.0.0</version>, +or Gradle:, +```groovy, +compile 'com.squareup.okhttp:okhttp:2.0.0', +```, +  <version>2.0.0</version>, +or Gradle:, +```groovy, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', +```, +, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", 2);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void headerSplitWithDate() {, +    Request request = fromArgs("-H", "If-Modified-Since: Mon, 18 Aug 2014 15:16:06 GMT",, +        "http://example.com").createRequest();, +    assertEquals("Mon, 18 Aug 2014 15:16:06 GMT", request.header("If-Modified-Since"));, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    for (int i = 302; i <= 307; ++i) {, +    assertCached(true, 308);, +++ b/README.md, +  <version>2.0.0</version>, +or Gradle:, +```groovy, +compile 'com.squareup.okhttp:okhttp:2.0.0', +```, +  <version>2.0.0</version>, +or Gradle:, +```groovy, +testCompile 'com.squareup.okhttp:mockwebserver:2.0.0', +```, +, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +        String[] parts = header.split(":", 2);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void headerSplitWithDate() {, +    Request request = fromArgs("-H", "If-Modified-Since: Mon, 18 Aug 2014 15:16:06 GMT",, +        "http://example.com").createRequest();, +    assertEquals("Mon, 18 Aug 2014 15:16:06 GMT", request.header("If-Modified-Since"));, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    for (int i = 302; i <= 307; ++i) {, +    assertCached(true, 308);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void cancelInFlightBeforeResponseReadThrowsIOE() throws Exception {, +    server.setDispatcher(new Dispatcher() {, +      @Override public MockResponse dispatch(RecordedRequest request) {, +        client.cancel("request");]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +  public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        Thread.sleep(unit.toMillis(duration));, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    });, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +  public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        Thread.sleep(unit.toMillis(duration));, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    });, +    return this;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +  @Test public void fullCallTimeoutAppliesToSetup() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +, +    server.enqueue(new MockResponse(), +        .setHeadersDelay(500, TimeUnit.MILLISECONDS));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(new AsyncRequestBody()), +        .build();, +, +    Call call = client.newCall(request);, +    call.timeout().timeout(250, TimeUnit.MILLISECONDS);, +    try {, +      call.execute();, +      fail();, +    } catch (IOException e) {, +      assertEquals("timeout", e.getMessage());, +      assertTrue(call.isCanceled());, +    }, +  }, +, +  @Test public void fullCallTimeoutDoesNotApplyOnceConnected() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +, +    MockDuplexResponseBody mockDuplexResponseBody = enqueueResponseWithBody(, +        new MockResponse(), +            .clearHeaders(),, +        new MockDuplexResponseBody(), +            .sendResponse("response A\n"), +            .sleep(750, TimeUnit.MILLISECONDS), +            .sendResponse("response B\n"), +            .receiveRequest("request C\n"), +            .exhaustResponse(), +            .exhaustRequest());, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(new AsyncRequestBody()), +        .build();, +, +    Call call = client.newCall(request);, +    call.timeout().timeout(500, TimeUnit.MILLISECONDS); // Long enough for the first TLS handshake., +, +    try (Response response = call.execute()) {, +      BufferedSink requestBody = ((AsyncRequestBody) call.request().body()).takeSink();, +, +      BufferedSource responseBody = response.body().source();, +      assertEquals("response A", responseBody.readUtf8Line());, +      assertEquals("response B", responseBody.readUtf8Line());, +, +      requestBody.writeUtf8("request C\n");, +      requestBody.close();, +      assertNull(responseBody.readUtf8Line());, +    }, +, +    mockDuplexResponseBody.awaitSuccess();, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +  public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        Thread.sleep(unit.toMillis(duration));, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    });, +    return this;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +  @Test public void fullCallTimeoutAppliesToSetup() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java, +import okhttp3.JavaNetAuthenticator;, +    assertEquals(1, client.client().getConnectionPool().getMultiplexedConnectionCount());, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java, +import okhttp3.JavaNetAuthenticator;]
[+++ b/.github/CONTRIBUTING.md, +Some general advice, +, +- Don’t change public API lightly, avoid if possible, and include your reasoning in the PR if essential.  It causes pain for developers who use OkHttp and sometimes runtime errors., +- Favour a working external library if appropriate.  There are many examples of OkHttp libraries that can sit on top or hook in via existing APIs., +- Get working code on a personal branch with tests before you submit a PR., +- OkHttp is a small and light dependency.  Don't introduce new dependencies or major new functionality., +- OkHttp targets the intersection of RFC correct *and* widely implemented.  Incorrect implementations that are very widely implemented e.g. a bug in Apache, Nginx, Google, Firefox should also be handled., +, +++ b/.github/CONTRIBUTING.md, +Some general advice, +, +- Don’t change public API lightly, avoid if possible, and include your reasoning in the PR if essential.  It causes pain for developers who use OkHttp and sometimes runtime errors., +- Favour a working external library if appropriate.  There are many examples of OkHttp libraries that can sit on top or hook in via existing APIs., +- Get working code on a personal branch with tests before you submit a PR., +- OkHttp is a small and light dependency.  Don't introduce new dependencies or major new functionality., +- OkHttp targets the intersection of RFC correct *and* widely implemented.  Incorrect implementations that are very widely implemented e.g. a bug in Apache, Nginx, Google, Firefox should also be handled., +, +++ b/bom/pom.xml, +  <version>3.13.0-SNAPSHOT</version>, +++ b/.github/CONTRIBUTING.md, +Some general advice, +, +- Don’t change public API lightly, avoid if possible, and include your reasoning in the PR if essential.  It causes pain for developers who use OkHttp and sometimes runtime errors., +- Favour a working external library if appropriate.  There are many examples of OkHttp libraries that can sit on top or hook in via existing APIs., +- Get working code on a personal branch with tests before you submit a PR., +- OkHttp is a small and light dependency.  Don't introduce new dependencies or major new functionality., +- OkHttp targets the intersection of RFC correct *and* widely implemented.  Incorrect implementations that are very widely implemented e.g. a bug in Apache, Nginx, Google, Firefox should also be handled., +, +++ b/bom/pom.xml, +  <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/okhttp3/internal/duplex/MwsDuplexAccess.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.duplex;, +, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.internal.duplex.DuplexResponseBody;, +, +/**, + * Internal access to MockWebServer APIs. Don't use this, don't use internal, these APIs are not, + * stable., + */, +public abstract class MwsDuplexAccess {, +  public static MwsDuplexAccess instance;, +, +  public abstract void setBody(MockResponse mockResponse, DuplexResponseBody duplexResponseBody);, +}, +++ b/.github/CONTRIBUTING.md, +Some general advice, +, +- Don’t change public API lightly, avoid if possible, and include your reasoning in the PR if essential.  It causes pain for developers who use OkHttp and sometimes runtime errors., +- Favour a working external library if appropriate.  There are many examples of OkHttp libraries that can sit on top or hook in via existing APIs., +- Get working code on a personal branch with tests before you submit a PR., +- OkHttp is a small and light dependency.  Don't introduce new dependencies or major new functionality., +- OkHttp targets the intersection of RFC correct *and* widely implemented.  Incorrect implementations that are very widely implemented e.g. a bug in Apache, Nginx, Google, Firefox should also be handled., +, +++ b/bom/pom.xml, +  <version>3.13.0-SNAPSHOT</version>, +++ b/mockwebserver/src/main/java/okhttp3/internal/duplex/MwsDuplexAccess.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.duplex;, +, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.internal.duplex.DuplexResponseBody;, +, +/**, + * Internal access to MockWebServer APIs. Don't use this, don't use internal, these APIs are not, + * stable., + */, +public abstract class MwsDuplexAccess {, +  public static MwsDuplexAccess instance;, +]
[+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +import okhttp3.internal.ws.WebSocketRecorder.MessageDelegate;, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +import okhttp3.internal.ws.WebSocketRecorder.MessageDelegate;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.ws;, +, +import java.io.IOException;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.TimeUnit;, +import okhttp3.MediaType;, +import okhttp3.Response;, +import okhttp3.ResponseBody;, +import okhttp3.WebSocket;, +import okhttp3.WebSocketListener;, +import okio.Buffer;, +, +import static okhttp3.WebSocket.BINARY;, +import static okhttp3.WebSocket.TEXT;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +, +public final class WebSocketRecorder implements WebSocketReader.FrameCallback, WebSocketListener {, +  public interface MessageDelegate {, +    void onMessage(ResponseBody message) throws IOException;, +  }, +, +  private final BlockingQueue<Object> events = new LinkedBlockingQueue<>();, +  private MessageDelegate delegate;, +  private Response response;, +, +  /** Sets a delegate for the next call to {@link #onMessage}. Cleared after invoked. */, +  public void setNextMessageDelegate(MessageDelegate delegate) {, +    this.delegate = delegate;, +  }, +, +  @Override public void onOpen(WebSocket webSocket, Response response) {, +  }, +, +  @Override public void onMessage(ResponseBody message) throws IOException {, +    if (delegate != null) {, +      delegate.onMessage(message);, +      delegate = null;, +    } else {, +      Message event = new Message(message.contentType());, +      message.source().readAll(event.buffer);, +      message.close();, +      events.add(event);, +    }, +  }, +, +  @Override public void onPing(Buffer buffer) {, +    events.add(new Ping(buffer));, +  }, +, +  @Override public void onPong(Buffer buffer) {, +    events.add(new Pong(buffer));, +  }, +, +  @Override public void onClose(int code, String reason) {, +    events.add(new Close(code, reason));, +  }, +, +  @Override public void onFailure(IOException e, Response response) {, +    events.add(e);, +    this.response = response;]
[+++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons., + * It uses a local connection to a MockWebServer to measure how many identical, + * requests per second can be carried over a fixed number of threads., +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons., + * It uses a local connection to a MockWebServer to measure how many identical, + * requests per second can be carried over a fixed number of threads., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons., + * It uses a local connection to a MockWebServer to measure how many identical, + * requests per second can be carried over a fixed number of threads., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, + * This benchmark is fake, but may be useful for certain relative comparisons., + * It uses a local connection to a MockWebServer to measure how many identical, + * requests per second can be carried over a fixed number of threads., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +import java.io.IOException;, +import java.util.concurrent.TimeUnit;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSession;, +import javax.net.ssl.SSLSocketFactory;, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java, +import okhttp3.HttpUrl;, +import okhttp3.internal.SslContextBuilder;, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +import okhttp3.HttpUrl;, +import okhttp3.Protocol;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;]
[+++ b/okhttp-tests/src/test/java/okhttp3/CipherSuiteTest.java, +import static org.junit.Assert.assertArrayEquals;, +   * On the Oracle JVM some older cipher suites have the "SSL_" prefix and others have the "TLS_", +   * prefix. On the IBM JVM all cipher suites have the "SSL_" prefix., +   *, +   * <p>Prior to OkHttp 3.3.1 we accepted either form and consider them equivalent. And since OkHttp, +   * 3.7.0 this is also true. But OkHttp 3.3.1 through 3.6.0 treated these as different., +    assertEquals(, +    assertEquals(, +    assertEquals(, +, +  @Test public void applyIntersectionRetainsSslPrefixes() throws Exception {, +    FakeSslSocket socket = new FakeSslSocket();, +    socket.setEnabledProtocols(new String[] { "TLSv1" });, +    socket.setSupportedCipherSuites(new String[] { "SSL_A", "SSL_B", "SSL_C", "SSL_D", "SSL_E" });, +    socket.setEnabledCipherSuites(new String[] { "SSL_A", "SSL_B", "SSL_C" });, +, +    ConnectionSpec connectionSpec = new ConnectionSpec.Builder(true), +        .tlsVersions(TlsVersion.TLS_1_0), +        .cipherSuites("TLS_A", "TLS_C", "TLS_E"), +        .build();, +    connectionSpec.apply(socket, false);, +, +    assertArrayEquals(new String[] { "SSL_A", "SSL_C" }, socket.enabledCipherSuites);, +  }, +, +  @Test public void applyIntersectionRetainsTlsPrefixes() throws Exception {, +    FakeSslSocket socket = new FakeSslSocket();, +    socket.setEnabledProtocols(new String[] { "TLSv1" });, +    socket.setSupportedCipherSuites(new String[] { "TLS_A", "TLS_B", "TLS_C", "TLS_D", "TLS_E" });, +    socket.setEnabledCipherSuites(new String[] { "TLS_A", "TLS_B", "TLS_C" });, +, +    ConnectionSpec connectionSpec = new ConnectionSpec.Builder(true), +        .tlsVersions(TlsVersion.TLS_1_0), +        .cipherSuites("SSL_A", "SSL_C", "SSL_E"), +        .build();, +    connectionSpec.apply(socket, false);, +, +    assertArrayEquals(new String[] { "TLS_A", "TLS_C" }, socket.enabledCipherSuites);, +  }, +, +  @Test public void applyIntersectionAddsSslScsvForFallback() throws Exception {, +    FakeSslSocket socket = new FakeSslSocket();, +    socket.setEnabledProtocols(new String[] { "TLSv1" });, +    socket.setSupportedCipherSuites(new String[] { "SSL_A", "SSL_FALLBACK_SCSV" });, +    socket.setEnabledCipherSuites(new String[] { "SSL_A" });, +, +    ConnectionSpec connectionSpec = new ConnectionSpec.Builder(true), +        .tlsVersions(TlsVersion.TLS_1_0), +        .cipherSuites("SSL_A"), +        .build();, +    connectionSpec.apply(socket, true);, +, +    assertArrayEquals(new String[] { "SSL_A", "SSL_FALLBACK_SCSV" }, socket.enabledCipherSuites);, +  }, +, +  @Test public void applyIntersectionAddsTlsScsvForFallback() throws Exception {, +    FakeSslSocket socket = new FakeSslSocket();, +    socket.setEnabledProtocols(new String[] { "TLSv1" });, +    socket.setSupportedCipherSuites(new String[] { "TLS_A", "TLS_FALLBACK_SCSV" });, +    socket.setEnabledCipherSuites(new String[] { "TLS_A" });, +, +    ConnectionSpec connectionSpec = new ConnectionSpec.Builder(true), +        .tlsVersions(TlsVersion.TLS_1_0), +        .cipherSuites("TLS_A"), +        .build();, +    connectionSpec.apply(socket, true);, +, +    assertArrayEquals(new String[] { "TLS_A", "TLS_FALLBACK_SCSV" }, socket.enabledCipherSuites);, +  }, +, +  @Test public void applyIntersectionToProtocolVersion() throws Exception {, +    FakeSslSocket socket = new FakeSslSocket();, +    socket.setEnabledProtocols(new String[] { "TLSv1", "TLSv1.1", "TLSv1.2" });, +    socket.setSupportedCipherSuites(new String[] { "TLS_A" });, +    socket.setEnabledCipherSuites(new String[] { "TLS_A" });, +, +    ConnectionSpec connectionSpec = new ConnectionSpec.Builder(true), +        .tlsVersions(TlsVersion.TLS_1_1, TlsVersion.TLS_1_2, TlsVersion.TLS_1_3), +        .cipherSuites("TLS_A"), +        .build();, +    connectionSpec.apply(socket, false);, +, +    assertArrayEquals(new String[] { "TLSv1.1", "TLSv1.2" }, socket.enabledProtocols);, +  }, +, +  static final class FakeSslSocket extends DelegatingSSLSocket {, +    private String[] enabledProtocols;, +    private String[] supportedCipherSuites;, +    private String[] enabledCipherSuites;, +, +    FakeSslSocket() {, +      super(null);, +    }, +, +    @Override public String[] getEnabledProtocols() {, +      return enabledProtocols;, +    }, +, +    @Override public void setEnabledProtocols(String[] enabledProtocols) {]
[+++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +   * Returns the system property, or {@code defaultValue} if the system property is null or]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +  @Test public void idleCallbackInvokedWhenIdle() throws Exception {, +    @Override public boolean awaitTermination(long timeout, TimeUnit unit) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +  @Test public void idleCallbackInvokedWhenIdle() throws Exception {, +    @Override public boolean awaitTermination(long timeout, TimeUnit unit) {, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +    public Exception takeException() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +  @Test public void idleCallbackInvokedWhenIdle() throws Exception {, +    @Override public boolean awaitTermination(long timeout, TimeUnit unit) {, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +    public Exception takeException() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/TestLogHandler.java, +  public String take() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +  @Test public void idleCallbackInvokedWhenIdle() throws Exception {, +    @Override public boolean awaitTermination(long timeout, TimeUnit unit) {, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +    public Exception takeException() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/TestLogHandler.java, +  public String take() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +  public static void awaitGarbageCollection() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +          throw new AssertionError(e);, +          throw new AssertionError(e);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +      public MockResponse dispatch(RecordedRequest request) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectRequestHalfway() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +  @Test public void idleCallbackInvokedWhenIdle() throws Exception {, +    @Override public boolean awaitTermination(long timeout, TimeUnit unit) {, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +    public Exception takeException() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/TestLogHandler.java, +  public String take() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +  public static void awaitGarbageCollection() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java]
[+++ b/CHANGELOG.md, +Version 1.2 *(2013-08-10)*, +----------------------------, +, + * New APIs on OkHttpClient to set default timeouts for connect and read., + * Fix bug when caching SPDY responses., + * Fix a bug with SPDY plus half-closed streams. (thanks kwuollett), + * Fix a bug in `Content-Length` reporting for gzipped streams in the Apache, +   HTTP client adapter. (thanks kwuollett), + * Work around the Alcatel `getByInetAddress` bug (thanks k.kocel), + * Be more aggressive about testing pooled sockets before reuse. (thanks, +   warpspin), + * Include `Content-Type` and `Content-Encoding` in the Apache HTTP client, +   adapter. (thanks kwuollett), + * Add a media type class to OkHttp., + * Change custom header prefix:, +```, +    X-Android-Sent-Millis is now OkHttp-Sent-Millis, +    X-Android-Received-Millis is now OkHttp-Received-Millis., +    X-Android-Response-Source is now OkHttp-Response-Source., +    X-Android-Selected-Transport is now OkHttp-Selected-Transport., +```, + * Improve cache invalidation for POST-like requests., + * Bring MockWebServer into OkHttp and teach it SPDY., +, +++ b/CHANGELOG.md, +Version 1.2 *(2013-08-10)*, +----------------------------, +, + * New APIs on OkHttpClient to set default timeouts for connect and read., + * Fix bug when caching SPDY responses., + * Fix a bug with SPDY plus half-closed streams. (thanks kwuollett), + * Fix a bug in `Content-Length` reporting for gzipped streams in the Apache, +   HTTP client adapter. (thanks kwuollett), + * Work around the Alcatel `getByInetAddress` bug (thanks k.kocel), + * Be more aggressive about testing pooled sockets before reuse. (thanks, +   warpspin), + * Include `Content-Type` and `Content-Encoding` in the Apache HTTP client, +   adapter. (thanks kwuollett), + * Add a media type class to OkHttp., + * Change custom header prefix:, +```, +    X-Android-Sent-Millis is now OkHttp-Sent-Millis, +    X-Android-Received-Millis is now OkHttp-Received-Millis., +    X-Android-Response-Source is now OkHttp-Response-Source., +    X-Android-Selected-Transport is now OkHttp-Selected-Transport., +```, + * Improve cache invalidation for POST-like requests., + * Bring MockWebServer into OkHttp and teach it SPDY., +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +/** Handler for mock server requests. */, +++ b/CHANGELOG.md, +Version 1.2 *(2013-08-10)*, +----------------------------, +, + * New APIs on OkHttpClient to set default timeouts for connect and read., + * Fix bug when caching SPDY responses., + * Fix a bug with SPDY plus half-closed streams. (thanks kwuollett), + * Fix a bug in `Content-Length` reporting for gzipped streams in the Apache, +   HTTP client adapter. (thanks kwuollett), + * Work around the Alcatel `getByInetAddress` bug (thanks k.kocel), + * Be more aggressive about testing pooled sockets before reuse. (thanks, +   warpspin), + * Include `Content-Type` and `Content-Encoding` in the Apache HTTP client, +   adapter. (thanks kwuollett), + * Add a media type class to OkHttp., + * Change custom header prefix:, +```, +    X-Android-Sent-Millis is now OkHttp-Sent-Millis, +    X-Android-Received-Millis is now OkHttp-Received-Millis., +    X-Android-Response-Source is now OkHttp-Response-Source., +    X-Android-Selected-Transport is now OkHttp-Selected-Transport., +```, + * Improve cache invalidation for POST-like requests., + * Bring MockWebServer into OkHttp and teach it SPDY., +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +/** Handler for mock server requests. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Util;, +/** A scripted response to be replayed by the mock web server. */, +  /** Creates a new mock response with an empty body. */, +  /** Returns the HTTP response line, such as "HTTP/1.1 200 OK". */, +  /** Returns the HTTP headers, such as "Content-Length: 0". */, +   * Adds {@code header} as an HTTP header. For well-formed HTTP {@code header}, +   * should contain a name followed by a colon and a value., +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name., +  /** Removes all headers named {@code name}. */, +  /** Returns the raw HTTP payload, or null if this response is streamed. */, +  /** Returns an input stream containing the raw HTTP payload. */, +  /** Sets the response body to the UTF-8 encoded bytes of {@code body}. */, +   * Sets the response body to {@code body}, chunked every {@code maxChunkSize}, +   * bytes., +        bytesOut.write(Integer.toHexString(chunkSize).getBytes(Util.US_ASCII));, +        bytesOut.write("\r\n".getBytes(Util.US_ASCII));, +        bytesOut.write("\r\n".getBytes(Util.US_ASCII));, +      bytesOut.write("0\r\n\r\n".getBytes(Util.US_ASCII)); // Last chunk + empty trailer + crlf., +   * Sets the response body to the UTF-8 encoded bytes of {@code body}, chunked]
[+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +      ConnectException ce = new ConnectException("Failed to connect to " + route.socketAddress());, +      ce.initCause(e);, +      throw ce;]
[+++ b/CHANGELOG.md, +## Version 3.8.0, +, +_2017-05-13_, +, +, + *  **OkHttp now uses `@Nullable` to annotate all possibly-null values.** We've, +    added a compile-time dependency on the JSR 305 annotations. This is a, +    [provided][maven_provided] dependency and does not need to be included in, +    your build configuration, `.jar` file, or `.apk`. We use, +    `@ParametersAreNonnullByDefault` and all parameters and return types are, +    never null unless explicitly annotated `@Nullable`., +, + *  **Warning: this release is source-incompatible for Kotlin users.**, +    Nullability was previously ambiguous and lenient but now the compiler will, +    enforce strict null checks., +, + *  New: The response message is now non-null. This is the "Not Found" in the, +    status line "HTTP 404 Not Found". If you are building responses, +    programmatically (with `new Response.Builder()`) you must now always supply, +    a message. An empty string `""` is permitted. This value was never null on, +    responses returned by OkHttp itself, and it was an old mistake to permit, +    application code to omit a message., +, + *  The challenge's scheme and realm are now non-null. If you are calling, +    `new Challenge(scheme, realm)` you must provide non-null values. These were, +    never null in challenges created by OkHttp, but could have been null in, +    application code that creates challenges., +, + *  New: The `TlsVersion` of a `Handshake` is now non-null. If you are calling, +    `Handshake.get()` with a null TLS version, you must instead now provide a, +    non-null `TlsVersion`. Cache responses persisted prior to OkHttp 3.0 did not, +    store a TLS version; for these unknown values the handshake is defaulted to, +    `TlsVersion.SSL_3_0`., +, + *  New: Upgrade to Okio 1.13.0., +, +     ```xml, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.13.0</version>, +     </dependency>, +, +     com.squareup.okio:okio:1.13.0, +     ```, +, + *  Fix: gracefully recover when Android 7.0's sockets throw an unexpected, +    `NullPointerException`., +, +++ b/CHANGELOG.md, +## Version 3.8.0, +, +_2017-05-13_, +, +, + *  **OkHttp now uses `@Nullable` to annotate all possibly-null values.** We've, +    added a compile-time dependency on the JSR 305 annotations. This is a, +    [provided][maven_provided] dependency and does not need to be included in, +    your build configuration, `.jar` file, or `.apk`. We use, +    `@ParametersAreNonnullByDefault` and all parameters and return types are, +    never null unless explicitly annotated `@Nullable`., +, + *  **Warning: this release is source-incompatible for Kotlin users.**, +    Nullability was previously ambiguous and lenient but now the compiler will, +    enforce strict null checks., +, + *  New: The response message is now non-null. This is the "Not Found" in the, +    status line "HTTP 404 Not Found". If you are building responses, +    programmatically (with `new Response.Builder()`) you must now always supply, +    a message. An empty string `""` is permitted. This value was never null on, +    responses returned by OkHttp itself, and it was an old mistake to permit, +    application code to omit a message., +, + *  The challenge's scheme and realm are now non-null. If you are calling, +    `new Challenge(scheme, realm)` you must provide non-null values. These were, +    never null in challenges created by OkHttp, but could have been null in, +    application code that creates challenges., +, + *  New: The `TlsVersion` of a `Handshake` is now non-null. If you are calling, +    `Handshake.get()` with a null TLS version, you must instead now provide a, +    non-null `TlsVersion`. Cache responses persisted prior to OkHttp 3.0 did not, +    store a TLS version; for these unknown values the handshake is defaulted to, +    `TlsVersion.SSL_3_0`., +, + *  New: Upgrade to Okio 1.13.0., +, +     ```xml, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.13.0</version>, +     </dependency>, +, +     com.squareup.okio:okio:1.13.0, +     ```, +, + *  Fix: gracefully recover when Android 7.0's sockets throw an unexpected, +    `NullPointerException`., +]
[+++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.11.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.11.0-SNAPSHOT</version>]
[+++ b/deploy_website.sh, +# Download the latest javadoc to directories like 'javadoc' or 'javadoc-urlconnection'., +for DOCUMENTED_ARTIFACT in okhttp okhttp-urlconnection okhttp-apache, +do, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +  JAVADOC_DIR="javadoc${DOCUMENTED_ARTIFACT//okhttp/}", +  mkdir $JAVADOC_DIR, +  unzip javadoc.zip -d $JAVADOC_DIR, +  rm javadoc.zip, +done, +, +# Download the 1.6.0 javadoc to '1.x/javadoc'., +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +mkdir -p 1.x/javadoc, +unzip javadoc.zip -d 1.x/javadoc, +++ b/deploy_website.sh, +# Download the latest javadoc to directories like 'javadoc' or 'javadoc-urlconnection'., +for DOCUMENTED_ARTIFACT in okhttp okhttp-urlconnection okhttp-apache, +do, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +  JAVADOC_DIR="javadoc${DOCUMENTED_ARTIFACT//okhttp/}", +  mkdir $JAVADOC_DIR, +  unzip javadoc.zip -d $JAVADOC_DIR, +  rm javadoc.zip, +done, +, +# Download the 1.6.0 javadoc to '1.x/javadoc'., +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +mkdir -p 1.x/javadoc, +unzip javadoc.zip -d 1.x/javadoc, +++ b/okhttp-apache/pom.xml, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +            <link>http://hc.apache.org/httpcomponents-client-4.3.x/httpclient/apidocs/</link>, +            <link>https://hc.apache.org/httpcomponents-core-4.3.x/httpcore/apidocs/</link>, +          </links>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/deploy_website.sh, +# Download the latest javadoc to directories like 'javadoc' or 'javadoc-urlconnection'., +for DOCUMENTED_ARTIFACT in okhttp okhttp-urlconnection okhttp-apache, +do, +  curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +  JAVADOC_DIR="javadoc${DOCUMENTED_ARTIFACT//okhttp/}", +  mkdir $JAVADOC_DIR, +  unzip javadoc.zip -d $JAVADOC_DIR, +  rm javadoc.zip, +done, +, +# Download the 1.6.0 javadoc to '1.x/javadoc'., +curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +mkdir -p 1.x/javadoc, +unzip javadoc.zip -d 1.x/javadoc, +++ b/okhttp-apache/pom.xml, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +            <link>http://hc.apache.org/httpcomponents-client-4.3.x/httpclient/apidocs/</link>, +            <link>https://hc.apache.org/httpcomponents-core-4.3.x/httpcore/apidocs/</link>, +          </links>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +++ b/okhttp-urlconnection/pom.xml, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <configuration>, +          <excludePackageNames>com.squareup.okhttp.internal.*</excludePackageNames>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +          </links>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>]
[+++ b/.github/CONTRIBUTING.md, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      writeResponse(stream, response);, +      if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, +    private void writeResponse(Http2Stream stream, MockResponse response) throws IOException {, +      boolean closeStreamAfterHeaders = body != null || !response.getPushPromises().isEmpty();, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +      pushPromises(stream, response.getPushPromises());, +      } else if (closeStreamAfterHeaders) {, +    private void pushPromises(Http2Stream stream, List<PushPromise> promises) throws IOException {, +        writeResponse(pushedStream, pushPromise.response());, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      writeResponse(stream, response);, +      if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, +    private void writeResponse(Http2Stream stream, MockResponse response) throws IOException {, +      boolean closeStreamAfterHeaders = body != null || !response.getPushPromises().isEmpty();, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +      pushPromises(stream, response.getPushPromises());, +      } else if (closeStreamAfterHeaders) {, +    private void pushPromises(Http2Stream stream, List<PushPromise> promises) throws IOException {, +        writeResponse(pushedStream, pushPromise.response());, +++ /dev/null, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      writeResponse(stream, response);, +      if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, +    private void writeResponse(Http2Stream stream, MockResponse response) throws IOException {, +      boolean closeStreamAfterHeaders = body != null || !response.getPushPromises().isEmpty();, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +      pushPromises(stream, response.getPushPromises());, +      } else if (closeStreamAfterHeaders) {, +    private void pushPromises(Http2Stream stream, List<PushPromise> promises) throws IOException {, +        writeResponse(pushedStream, pushPromise.response());, +++ /dev/null, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +    logWithTime("secureConnectEnd");, +++ b/.github/CONTRIBUTING.md, +++ b/bom/pom.xml, +  <parent>, +    <artifactId>parent</artifactId>, +  </parent>, +, +  <artifactId>okhttp-bom</artifactId>, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      writeResponse(stream, response);, +      if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, +    private void writeResponse(Http2Stream stream, MockResponse response) throws IOException {, +      boolean closeStreamAfterHeaders = body != null || !response.getPushPromises().isEmpty();]
[+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketHttpTest.java, +import java.util.concurrent.atomic.AtomicInteger;, +import static okhttp3.TestUtil.repeat;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +    serverListener.assertBinaryMessage(ByteString.of(new byte[] {'H', 'e', 'l', 'l', 'o', '!'}));, +  @Test public void webSocketAndApplicationInterceptors() throws IOException {, +    final AtomicInteger interceptedCount = new AtomicInteger();, +, +    client = client.newBuilder(), +        .addInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            assertNull(chain.request().body());, +            Response response = chain.proceed(chain.request());, +            assertEquals("Upgrade", response.header("Connection"));, +            assertTrue("", response.body().source().exhausted());, +            interceptedCount.incrementAndGet();, +            return response;, +          }, +        }).build();, +, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +, +    WebSocket webSocket = newWebSocket();, +    clientListener.assertOpen();, +    assertEquals(1, interceptedCount.get());, +    webSocket.close(1000, null);, +, +    WebSocket server = serverListener.assertOpen();, +    server.close(1000, null);, +  }, +, +  @Test public void webSocketAndNetworkInterceptors() throws IOException {, +    client = client.newBuilder(), +        .addNetworkInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            throw new AssertionError(); // Network interceptors don't execute., +          }, +        }).build();, +, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +, +    WebSocket webSocket = newWebSocket();, +    clientListener.assertOpen();, +    webSocket.close(1000, null);, +, +    WebSocket server = serverListener.assertOpen();, +    server.close(1000, null);, +  }, +, +  @Test public void overflowOutgoingQueue() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +, +    WebSocket webSocket = newWebSocket();, +    clientListener.assertOpen();, +, +    // Send messages until the client's outgoing buffer overflows!, +    ByteString message = ByteString.of(new byte[1024 * 1024]);, +    int messageCount = 0;, +    while (true) {, +      boolean success = webSocket.send(message);, +      if (!success) break;, +, +      messageCount++;, +      long queueSize = webSocket.queueSize();, +      assertTrue(queueSize >= 0 && queueSize <= messageCount * message.size());, +      assertTrue(messageCount < 32); // Expect to fail before enqueueing 32 MiB., +    }, +, +    // Confirm all sent messages were received, followed by a client-initiated close., +    WebSocket server = serverListener.assertOpen();, +    for (int i = 0; i < messageCount; i++) {, +      serverListener.assertBinaryMessage(message);, +    }, +    serverListener.assertClosing(1001, "");, +, +    // When the server acknowledges the close the connection shuts down gracefully., +    server.close(1000, null);, +    clientListener.assertClosing(1000, "");, +    clientListener.assertClosed(1000, "");, +    serverListener.assertClosed(1001, "");, +  }, +, +  @Test public void closeReasonMaximumLength() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +, +    String clientReason = repeat('C', 123);, +    String serverReason = repeat('S', 123);, +, +    WebSocket webSocket = newWebSocket();, +    WebSocket server = serverListener.assertOpen();, +, +    clientListener.assertOpen();, +    webSocket.close(1000, clientReason);, +    serverListener.assertClosing(1000, clientReason);, +, +    server.close(1000, serverReason);, +    clientListener.assertClosing(1000, serverReason);, +    clientListener.assertClosed(1000, serverReason);, +]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +  @Test public void dataFrameNotAssociateWithStream() throws IOException {, +    byte[] payload = new byte[] {0x01, 0x02};, +, +    writeMedium(frame, payload.length);, +    frame.writeByte(Http2.TYPE_DATA);, +    frame.writeByte(Http2.FLAG_NONE);, +    frame.writeInt(0);, +    frame.write(payload);, +, +    try {, +      reader.nextFrame(false, new BaseTestHandler());, +      fail();, +    } catch (IOException e) {, +      assertEquals("PROTOCOL_ERROR: TYPE_DATA streamId == 0", e.getMessage());, +    }, +  }, +, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +  @Test public void dataFrameNotAssociateWithStream() throws IOException {, +    byte[] payload = new byte[] {0x01, 0x02};, +, +    writeMedium(frame, payload.length);, +    frame.writeByte(Http2.TYPE_DATA);, +    frame.writeByte(Http2.FLAG_NONE);, +    frame.writeInt(0);, +    frame.write(payload);, +, +    try {, +      reader.nextFrame(false, new BaseTestHandler());, +      fail();, +    } catch (IOException e) {, +      assertEquals("PROTOCOL_ERROR: TYPE_DATA streamId == 0", e.getMessage());, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Address.java, +    if (other instanceof Address) {, +      Address that = (Address) other;, +      return this.url.equals(that.url), +          && this.dns.equals(that.dns), +          && this.proxyAuthenticator.equals(that.proxyAuthenticator), +          && this.protocols.equals(that.protocols), +          && this.connectionSpecs.equals(that.connectionSpecs), +          && this.proxySelector.equals(that.proxySelector), +          && equal(this.proxy, that.proxy), +          && equal(this.sslSocketFactory, that.sslSocketFactory), +          && equal(this.hostnameVerifier, that.hostnameVerifier), +          && equal(this.certificatePinner, that.certificatePinner);, +    }, +    return false;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +  @Test public void dataFrameNotAssociateWithStream() throws IOException {, +    byte[] payload = new byte[] {0x01, 0x02};, +, +    writeMedium(frame, payload.length);, +    frame.writeByte(Http2.TYPE_DATA);, +    frame.writeByte(Http2.FLAG_NONE);, +    frame.writeInt(0);, +    frame.write(payload);, +, +    try {, +      reader.nextFrame(false, new BaseTestHandler());, +      fail();, +    } catch (IOException e) {, +      assertEquals("PROTOCOL_ERROR: TYPE_DATA streamId == 0", e.getMessage());, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Address.java, +    if (other instanceof Address) {, +      Address that = (Address) other;, +      return this.url.equals(that.url), +          && this.dns.equals(that.dns), +          && this.proxyAuthenticator.equals(that.proxyAuthenticator), +          && this.protocols.equals(that.protocols), +          && this.connectionSpecs.equals(that.connectionSpecs), +          && this.proxySelector.equals(that.proxySelector), +          && equal(this.proxy, that.proxy), +          && equal(this.sslSocketFactory, that.sslSocketFactory), +          && equal(this.hostnameVerifier, that.hostnameVerifier), +          && equal(this.certificatePinner, that.certificatePinner);, +    }, +    return false;, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +  /** Returns a recycled connection to {@code address}, or null if no such connection exists. */, +  RealConnection get(Address address, StreamAllocation streamAllocation) {, +      if (connection.isEligible(address)) {, +      if (connection.isEligible(address), +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +  @Test public void dataFrameNotAssociateWithStream() throws IOException {, +    byte[] payload = new byte[] {0x01, 0x02};, +, +    writeMedium(frame, payload.length);, +    frame.writeByte(Http2.TYPE_DATA);]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/HeldCertificate.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.mockwebserver;, +, +import java.io.IOException;, +import java.math.BigInteger;, +import java.security.GeneralSecurityException;, +import java.security.KeyPair;, +import java.security.KeyPairGenerator;, +import java.security.PrivateKey;, +import java.security.PublicKey;, +import java.security.SecureRandom;, +import java.security.Security;, +import java.security.cert.CertificateEncodingException;, +import java.security.cert.X509Certificate;, +import java.util.ArrayList;, +import java.util.Date;, +import java.util.List;, +import java.util.UUID;, +import java.util.concurrent.TimeUnit;, +import javax.security.auth.x500.X500Principal;, +import okio.ByteString;, +import org.bouncycastle.asn1.ASN1Encodable;, +import org.bouncycastle.asn1.DERSequence;, +import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;, +import org.bouncycastle.asn1.x509.BasicConstraints;, +import org.bouncycastle.asn1.x509.GeneralName;, +import org.bouncycastle.asn1.x509.X509Extensions;, +import org.bouncycastle.jce.provider.BouncyCastleProvider;, +import org.bouncycastle.x509.X509V3CertificateGenerator;, +, +import static okhttp3.internal.Util.verifyAsIpAddress;, +, +/**, + * A certificate and its private key., + *, + * <p>Typically the certificate and private key combination would be used by MockWebServer (or, + * another HTTPS server) to identify itself in the TLS handshake. The certificate alone can be used, + * by OkHttp (or another HTTPS client) to verify the identity of that server., + *, + * <p>The trust challenge is reversed for mutual auth. In this case the client has both the private, + * key and the certificate, and the server has a certificate only., + *, + * <p>In addition to the TLS handshake, a held certificate can be used to sign a different, + * certificate. In such cases the held certificate represents a certificate authority., + *, + * <p>This class is intended to be used for testing. It uses small keys (1024 bit RSA) because they, + * are quick to generate., + */, +public final class HeldCertificate {, +  private final X509Certificate certificate;, +  private final KeyPair keyPair;, +, +  private HeldCertificate(X509Certificate certificate, KeyPair keyPair) {, +    this.certificate = certificate;, +    this.keyPair = keyPair;, +  }, +, +  public X509Certificate certificate() {, +    return certificate;, +  }, +, +  public KeyPair keyPair() {, +    return keyPair;, +  }, +, +  /**, +   * Returns the certificate encoded in <a href="https://tools.ietf.org/html/rfc7468">PEM, +   * format</a>., +   */, +  public String certificatePem() {, +    try {, +      StringBuilder result = new StringBuilder();, +      result.append("-----BEGIN CERTIFICATE-----\n");, +      encodeBase64Lines(result, ByteString.of(certificate.getEncoded()));, +      result.append("-----END CERTIFICATE-----\n");, +      return result.toString();, +    } catch (CertificateEncodingException e) {, +      throw new AssertionError(e);, +    }, +  }, +, +  /**, +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   */]
[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.text.ParseException;, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import okhttp3.internal.Util;, +import org.junit.Ignore;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +, +public class CookieTest {, +  HttpUrl url = HttpUrl.parse("http://example.com/");, +, +  @Test public void test() throws Exception {, +    Cookie cookie = Cookie.parse(url, "SID=31d4d96e407aad42");, +    assertEquals("SID=31d4d96e407aad42", cookie.toString());, +  }, +, +  @Test public void noEqualsSign() throws Exception {, +    assertNull(Cookie.parse(url, "foo"));, +    assertNull(Cookie.parse(url, "foo; Path=/"));, +  }, +, +  @Test public void emptyName() throws Exception {, +    assertNull(Cookie.parse(url, "=b"));, +    assertNull(Cookie.parse(url, " =b"));, +    assertNull(Cookie.parse(url, "\r\t \n=b"));, +  }, +, +  @Test public void trimLeadingAndTrailingWhitespaceFromName() throws Exception {, +    assertEquals("a", Cookie.parse(url, " a=b").name());, +    assertEquals("a", Cookie.parse(url, "a =b").name());, +    assertEquals("a", Cookie.parse(url, "\r\t \na\n\t \n=b").name());, +  }, +, +  @Test public void emptyValue() throws Exception {, +    assertEquals("", Cookie.parse(url, "a=").value());, +    assertEquals("", Cookie.parse(url, "a= ").value());, +    assertEquals("", Cookie.parse(url, "a=\r\t \n").value());, +  }, +, +  @Test public void trimLeadingAndTrailingWhitespaceFromValue() throws Exception {, +    assertEquals("", Cookie.parse(url, "a= ").value());, +    assertEquals("b", Cookie.parse(url, "a= b").value());, +    assertEquals("b", Cookie.parse(url, "a=b ").value());, +    assertEquals("b", Cookie.parse(url, "a=\r\t \nb\n\t \n").value());, +  }, +, +  @Test public void maxAge() throws Exception {, +    assertEquals(51000L,, +        Cookie.parse(50000L, url, "a=b; Max-Age=1").expiresAt());, +    assertEquals(9223372036854774000L,, +        Cookie.parse(50000L, url, "a=b; Max-Age=9223372036854724").expiresAt());, +    assertEquals(9223372036854775000L,, +        Cookie.parse(50000L, url, "a=b; Max-Age=9223372036854725").expiresAt());, +    assertEquals(Long.MAX_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=9223372036854726").expiresAt());, +    assertEquals(9223372036854774807L,, +        Cookie.parse(9223372036854773807L, url, "a=b; Max-Age=1").expiresAt());, +    assertEquals(Long.MAX_VALUE,, +        Cookie.parse(9223372036854773807L, url, "a=b; Max-Age=2").expiresAt());, +    assertEquals(Long.MAX_VALUE,, +        Cookie.parse(9223372036854773807L, url, "a=b; Max-Age=3").expiresAt());, +    assertEquals(Long.MAX_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=10000000000000000000").expiresAt());, +  }, +, +  @Test public void maxAgeNonPositive() throws Exception {, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=-1").expiresAt());, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=0").expiresAt());, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=-9223372036854775808").expiresAt());, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=-9223372036854775809").expiresAt());, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=-10000000000000000000").expiresAt());, +  }, +]
[+++ b/okhttp-protocols/pom.xml, +    <dependency>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <version>1.10</version>, +      <optional>true</optional>, +    </dependency>, +++ b/okhttp-protocols/pom.xml, +    <dependency>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <version>1.10</version>, +      <optional>true</optional>, +    </dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, +  void emitCompleteSegments(Deadline deadline) throws IOException {, +++ b/okhttp-protocols/pom.xml, +    <dependency>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>animal-sniffer-annotations</artifactId>, +      <version>1.10</version>, +      <optional>true</optional>, +    </dependency>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, +  void emitCompleteSegments(Deadline deadline) throws IOException {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/DeflaterSink.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.bytes;, +, +import java.io.IOException;, +import java.util.zip.Deflater;, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;, +, +import static com.squareup.okhttp.internal.Util.checkOffsetAndCount;, +, +/**, + * A sink that uses <a href="http://tools.ietf.org/html/rfc1951">DEFLATE</a> to, + * compress data written to another source., + *, + * <h3>Sync flush</h3>, + * Aggressive flushing of this stream may result in reduced compression. Each, + * call to {@link #flush} immediately compresses all currently-buffered data;, + * this early compression may be less effective than compression performed, + * without flushing., + *, + * <p>This is equivalent to using {@link Deflater} with the sync flush option., + * This class does not offer any partial flush mechanism. For best performance,, + * only call {@link #flush} when application behavior requires it., + */, +public final class DeflaterSink implements Sink {, +  private final BufferedSink sink;, +  private final Deflater deflater;, +, +  public DeflaterSink(Sink sink, Deflater deflater) {, +    this.sink = new BufferedSink(sink);, +    this.deflater = deflater;, +  }, +, +  @Override public void write(OkBuffer source, long byteCount, Deadline deadline), +      throws IOException {, +    checkOffsetAndCount(source.byteCount, 0, byteCount);, +    while (byteCount > 0) {, +      // Share bytes from the head segment of 'source' with the deflater., +      Segment head = source.head;, +      int toDeflate = (int) Math.min(byteCount, head.limit - head.pos);, +      deflater.setInput(head.data, head.pos, toDeflate);, +, +      // Deflate those bytes into sink., +      deflate(deadline, false);, +, +      // Mark those bytes as read., +      source.byteCount -= toDeflate;, +      head.pos += toDeflate;, +      if (head.pos == head.limit) {, +        source.head = head.pop();, +        SegmentPool.INSTANCE.recycle(head);, +      }, +, +      byteCount -= toDeflate;, +    }, +  }, +, +  @IgnoreJRERequirement, +  private void deflate(Deadline deadline, boolean syncFlush) throws IOException {, +    while (true) {, +      Segment s = sink.buffer.writableSegment(1);]
[+++ /dev/null, +++ /dev/null, +++ b/COPYING, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the, +      Work or Derivative Works thereof in any medium, with or without, +      modifications, and in Source or Object form, provided that You, +      meet the following conditions:, +, +      (a) You must give any other recipients of the Work or, +          Derivative Works a copy of this License; and, +]
[+++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], +	path = okhttp-hpacktests/src/test/resources/hpack-test-case, +	url = git://github.com/http2jp/hpack-test-case.git, +++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], +	path = okhttp-hpacktests/src/test/resources/hpack-test-case, +	url = git://github.com/http2jp/hpack-test-case.git, +++ b/okhttp-hpacktests/README.md, +OkHttp HPACK tests, +==================, +, +These tests use the [hpack-test-case][1] project to validate OkHttp's HPACK, +implementation.  The HPACK test cases are in a separate git submodule, so to, +initialize them, you must run:, +, +    git submodule init, +    git submodule update, +, +When new interop tests are available, you should update, +HpackDecodeInteropGoodTest#GOOD_INTEROP_TESTS with the directory name., +, +TODO, +----, +, + * Add maven goal to avoid manual call to git submodule init., + * Make hpack-test-case update itself from git, and run new tests., + * Add maven goal to generate stories and a pull request to hpack-test-case, +   to have others validate our output., +, +[1]: https://github.com/http2jp/hpack-test-case , +++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], +	path = okhttp-hpacktests/src/test/resources/hpack-test-case, +	url = git://github.com/http2jp/hpack-test-case.git, +++ b/okhttp-hpacktests/README.md, +OkHttp HPACK tests, +==================, +, +These tests use the [hpack-test-case][1] project to validate OkHttp's HPACK, +implementation.  The HPACK test cases are in a separate git submodule, so to, +initialize them, you must run:, +, +    git submodule init, +    git submodule update, +, +When new interop tests are available, you should update, +HpackDecodeInteropGoodTest#GOOD_INTEROP_TESTS with the directory name., +, +TODO, +----, +, + * Add maven goal to avoid manual call to git submodule init., + * Make hpack-test-case update itself from git, and run new tests., + * Add maven goal to generate stories and a pull request to hpack-test-case, +   to have others validate our output., +, +[1]: https://github.com/http2jp/hpack-test-case , +++ b/okhttp-hpacktests/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp</groupId>, +    <artifactId>parent</artifactId>, +    <version>2.0.1-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-hpacktests</artifactId>, +  <name>OkHttp HPACK Tests</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +    <!--  Gson: Java to Json conversion -->, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +      <version>2.2.4</version>, +      <scope>compile</scope>]
[+++ b/pom.xml, +    <groupId>com.squareup</groupId>]
[+++ b/LICENSE.txt, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise, +      designated in writing by the copyright owner as "Not a Contribution.", +, +      "Contributor" shall mean Licensor and any individual or Legal Entity, +      on behalf of whom a Contribution has been received by Licensor and, +      subsequently incorporated within the Work., +, +   2. Grant of Copyright License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      copyright license to reproduce, prepare Derivative Works of,, +      publicly display, publicly perform, sublicense, and distribute the, +      Work and such Derivative Works in Source or Object form., +, +   3. Grant of Patent License. Subject to the terms and conditions of, +      this License, each Contributor hereby grants to You a perpetual,, +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable, +      (except as stated in this section) patent license to make, have made,, +      use, offer to sell, sell, import, and otherwise transfer the Work,, +      where such license applies only to those patent claims licensable, +      by such Contributor that are necessarily infringed by their, +      Contribution(s) alone or by combination of their Contribution(s), +      with the Work to which such Contribution(s) was submitted. If You, +      institute patent litigation against any entity (including a, +      cross-claim or counterclaim in a lawsuit) alleging that the Work, +      or a Contribution incorporated within the Work constitutes direct, +      or contributory patent infringement, then any patent licenses, +      granted to You under this License for that Work shall terminate, +      as of the date such litigation is filed., +, +   4. Redistribution. You may reproduce and distribute copies of the, +      Work or Derivative Works thereof in any medium, with or without, +      modifications, and in Source or Object form, provided that You, +      meet the following conditions:, +, +      (a) You must give any other recipients of the Work or, +          Derivative Works a copy of this License; and, +, +      (b) You must cause any modified files to carry prominent notices, +          stating that You changed the files; and]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.platform;, +, +import android.os.Build;, +import android.util.Log;, +import java.io.IOException;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.net.InetSocketAddress;, +import java.net.Socket;, +import java.security.NoSuchAlgorithmException;, +import java.security.cert.Certificate;, +import java.security.cert.TrustAnchor;, +import java.security.cert.X509Certificate;, +import java.util.List;, +import javax.annotation.Nullable;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLPeerUnverifiedException;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.X509TrustManager;, +import okhttp3.Protocol;, +import okhttp3.internal.Util;, +import okhttp3.internal.tls.BasicTrustRootIndex;, +import okhttp3.internal.tls.CertificateChainCleaner;, +import okhttp3.internal.tls.TrustRootIndex;, +, +import static java.nio.charset.StandardCharsets.UTF_8;, +, +/** Android 5+. */, +class AndroidPlatform extends Platform {, +  private static final int MAX_LOG_LENGTH = 4000;, +, +  private final Class<?> sslParametersClass;, +  private final Class<?> sslSocketClass;, +  private final Method setUseSessionTickets;, +  private final Method setHostname;, +  private final Method getAlpnSelectedProtocol;, +  private final Method setAlpnProtocols;, +, +  private final CloseGuard closeGuard = CloseGuard.get();, +, +  AndroidPlatform(Class<?> sslParametersClass, Class<?> sslSocketClass, Method setUseSessionTickets,, +      Method setHostname, Method getAlpnSelectedProtocol, Method setAlpnProtocols) {, +    this.sslParametersClass = sslParametersClass;, +    this.sslSocketClass = sslSocketClass;, +    this.setUseSessionTickets = setUseSessionTickets;, +    this.setHostname = setHostname;, +    this.getAlpnSelectedProtocol = getAlpnSelectedProtocol;, +    this.setAlpnProtocols = setAlpnProtocols;, +  }, +, +  @Override public void connectSocket(Socket socket, InetSocketAddress address,, +      int connectTimeout) throws IOException {, +    try {, +      socket.connect(address, connectTimeout);, +    } catch (AssertionError e) {, +      if (Util.isAndroidGetsocknameError(e)) throw new IOException(e);, +      throw e;, +    } catch (ClassCastException e) {, +      // On android 8.0, socket.connect throws a ClassCastException due to a bug, +      // see https://issuetracker.google.com/issues/63649622, +      if (Build.VERSION.SDK_INT == 26) {, +        throw new IOException("Exception in connect", e);, +      } else {, +        throw e;, +      }, +    }, +  }, +, +  @Override protected @Nullable X509TrustManager trustManager(SSLSocketFactory sslSocketFactory) {, +    Object context = readFieldOrNull(sslSocketFactory, sslParametersClass, "sslParameters");, +    if (context == null) {, +      // If that didn't work, try the Google Play Services SSL provider before giving up. This, +      // must be loaded by the SSLSocketFactory's class loader., +      try {, +        Class<?> gmsSslParametersClass = Class.forName(, +            "com.google.android.gms.org.conscrypt.SSLParametersImpl", false,, +            sslSocketFactory.getClass().getClassLoader());, +        context = readFieldOrNull(sslSocketFactory, gmsSslParametersClass, "sslParameters");, +      } catch (ClassNotFoundException e) {, +        return super.trustManager(sslSocketFactory);]
[+++ b/okhttp/src/test/java/okhttp3/KotlinSourceCompatibilityTest.kt, +@Suppress("UNUSED_VARIABLE"), +++ b/okhttp/src/test/java/okhttp3/KotlinSourceCompatibilityTest.kt, +@Suppress("UNUSED_VARIABLE"), +++ b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +    data.write(ByteString.decodeHex("0a00")); // Empty pong., +    data.write(ByteString.decodeHex("ca00")); // Empty pong, flag 1 set., +    data.write(ByteString.decodeHex("aa00")); // Empty pong, flag 2 set., +    data.write(ByteString.decodeHex("9a00")); // Empty pong, flag 3 set.]
[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import static java.util.Arrays.asList;, +, +      return bootstrapDnsHosts(asList(bootstrapDnsHosts));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import static java.util.Arrays.asList;, +, +      return bootstrapDnsHosts(asList(bootstrapDnsHosts));, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +    assertThat(result).contains(address("157.240.1.18"));, +    assertThat(result).contains(address("2a03:2880:f029:11:face:b00c:0:2"));, +    assertThat(asList(request1.getPath(), request2.getPath())).containsExactlyInAnyOrder(, +        "/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AAAEAAQ",, +        "/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AABwAAQ");, +      assertThat(cause).isInstanceOf(IOException.class);, +      assertThat(cause).hasMessage("response size exceeds limit (65536 bytes): 65537 bytes");, +      assertThat(ioe).hasMessage("google.com");, +      assertThat(ioe.getCause()).isInstanceOf(RuntimeException.class);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import static java.util.Arrays.asList;, +, +      return bootstrapDnsHosts(asList(bootstrapDnsHosts));, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +    assertThat(result).contains(address("157.240.1.18"));, +    assertThat(result).contains(address("2a03:2880:f029:11:face:b00c:0:2"));, +    assertThat(asList(request1.getPath(), request2.getPath())).containsExactlyInAnyOrder(, +        "/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AAAEAAQ",, +        "/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AABwAAQ");, +      assertThat(cause).isInstanceOf(IOException.class);, +      assertThat(cause).hasMessage("response size exceeds limit (65536 bytes): 65537 bytes");]
[+++ b/okhttp/build.gradle, +      'okhttp3.OkHttpClient$Builder#addInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#addNetworkInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#authenticator(okhttp3.Authenticator)',, +      'okhttp3.OkHttpClient$Builder#build()',, +      'okhttp3.OkHttpClient$Builder#cache(okhttp3.Cache)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#certificatePinner(okhttp3.CertificatePinner)',, +      'okhttp3.OkHttpClient$Builder#connectionPool(okhttp3.ConnectionPool)',, +      'okhttp3.OkHttpClient$Builder#connectionSpecs(java.util.List)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#cookieJar(okhttp3.CookieJar)',, +      'okhttp3.OkHttpClient$Builder#dispatcher(okhttp3.Dispatcher)',, +      'okhttp3.OkHttpClient$Builder#dns(okhttp3.Dns)',, +      'okhttp3.OkHttpClient$Builder#eventListener(okhttp3.EventListener)',, +      'okhttp3.OkHttpClient$Builder#eventListenerFactory(okhttp3.EventListener$Factory)',, +      'okhttp3.OkHttpClient$Builder#followRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#followSslRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#hostnameVerifier(javax.net.ssl.HostnameVerifier)',, +      'okhttp3.OkHttpClient$Builder#interceptors()',, +      'okhttp3.OkHttpClient$Builder#networkInterceptors()',, +      'okhttp3.OkHttpClient$Builder#pingInterval(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#pingInterval(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#protocols(java.util.List)',, +      'okhttp3.OkHttpClient$Builder#proxy(java.net.Proxy)',, +      'okhttp3.OkHttpClient$Builder#proxyAuthenticator(okhttp3.Authenticator)',, +      'okhttp3.OkHttpClient$Builder#proxySelector(java.net.ProxySelector)',, +      'okhttp3.OkHttpClient$Builder#readTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#readTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#retryOnConnectionFailure(boolean)',, +      'okhttp3.OkHttpClient$Builder#socketFactory(javax.net.SocketFactory)',, +      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory)',, +      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory, javax.net.ssl.X509TrustManager)',, +      'okhttp3.OkHttpClient$Builder#writeTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#writeTimeout(java.time.Duration)',, +++ b/okhttp/build.gradle, +      'okhttp3.OkHttpClient$Builder#addInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#addNetworkInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#authenticator(okhttp3.Authenticator)',, +      'okhttp3.OkHttpClient$Builder#build()',, +      'okhttp3.OkHttpClient$Builder#cache(okhttp3.Cache)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#certificatePinner(okhttp3.CertificatePinner)',, +      'okhttp3.OkHttpClient$Builder#connectionPool(okhttp3.ConnectionPool)',, +      'okhttp3.OkHttpClient$Builder#connectionSpecs(java.util.List)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#cookieJar(okhttp3.CookieJar)',, +      'okhttp3.OkHttpClient$Builder#dispatcher(okhttp3.Dispatcher)',, +      'okhttp3.OkHttpClient$Builder#dns(okhttp3.Dns)',, +      'okhttp3.OkHttpClient$Builder#eventListener(okhttp3.EventListener)',, +      'okhttp3.OkHttpClient$Builder#eventListenerFactory(okhttp3.EventListener$Factory)',, +      'okhttp3.OkHttpClient$Builder#followRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#followSslRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#hostnameVerifier(javax.net.ssl.HostnameVerifier)',, +      'okhttp3.OkHttpClient$Builder#interceptors()',, +      'okhttp3.OkHttpClient$Builder#networkInterceptors()',, +      'okhttp3.OkHttpClient$Builder#pingInterval(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#pingInterval(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#protocols(java.util.List)',, +      'okhttp3.OkHttpClient$Builder#proxy(java.net.Proxy)',, +      'okhttp3.OkHttpClient$Builder#proxyAuthenticator(okhttp3.Authenticator)',, +      'okhttp3.OkHttpClient$Builder#proxySelector(java.net.ProxySelector)',, +      'okhttp3.OkHttpClient$Builder#readTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#readTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#retryOnConnectionFailure(boolean)',, +      'okhttp3.OkHttpClient$Builder#socketFactory(javax.net.SocketFactory)',, +      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory)',, +      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory, javax.net.ssl.X509TrustManager)',, +      'okhttp3.OkHttpClient$Builder#writeTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#writeTimeout(java.time.Duration)',, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, + * Factory for [calls][Call], which can be used to send HTTP requests and read their responses., + * OkHttpClients Should Be Shared, + * ------------------------------, + * OkHttp performs best when you create a single `OkHttpClient` instance and reuse it for all of, + * your HTTP calls. This is because each client holds its own connection pool and thread pools., + * Reusing connections and threads reduces latency and saves memory. Conversely, creating a client, + * for each request wastes resources on idle pools., + *, + *, + * Customize Your Client With newBuilder(), + * ---------------------------------------, + * You can customize a shared OkHttpClient instance with [newBuilder]. This builds a client that, + * shares the same connection pool, thread pools, and configuration. Use the builder methods to, + * configure the derived client for a specific purpose., + *, + * Shutdown Isn't Necessary, + * ------------------------, + * The threads and connections that are held will be released automatically if they remain idle. But, + * if you are writing a application that needs to aggressively release unused resources you may do, + * so., + * Shutdown the dispatcher's executor service with [shutdown()][ExecutorService.shutdown]. This will, + * also cause future calls to the client to be rejected., + *, + * Clear the connection pool with [evictAll()][ConnectionPool.evictAll]. Note that the connection, + * pool's daemon thread may not exit immediately.]
[+++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.1.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.1.0-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/crawler/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.1.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.1.0-SNAPSHOT</version>]
[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, +  /** Synthetic response header: the local time when the request was sent. */, +  private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, +  /** Synthetic response header: the local time when the response was received. */, +  private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +, +        .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(SENT_MILLIS)) {, +        if (name.equals(RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, +  /** Synthetic response header: the local time when the request was sent. */, +  private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, +  /** Synthetic response header: the local time when the response was received. */, +  private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +, +        .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(SENT_MILLIS)) {, +        if (name.equals(RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, +  /** Synthetic response header: the local time when the request was sent. */, +  private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, +  /** Synthetic response header: the local time when the response was received. */, +  private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +, +        .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(SENT_MILLIS)) {, +        if (name.equals(RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import static okhttp3.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, +  /** Synthetic response header: the local time when the request was sent. */, +  private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, +  /** Synthetic response header: the local time when the response was received. */, +  private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +, +        .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(SENT_MILLIS)) {, +        if (name.equals(RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import static okhttp3.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java, +import okhttp3.internal.huc.OkHttpURLConnection;, +import okhttp3.internal.huc.OkHttpsURLConnection;, +    if (protocol.equals("http")) return new OkHttpURLConnection(url, copy, urlFilter);, +    if (protocol.equals("https")) return new OkHttpsURLConnection(url, copy, urlFilter);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, +  /** Synthetic response header: the local time when the request was sent. */, +  private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, +  /** Synthetic response header: the local time when the response was received. */, +  private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +, +        .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(SENT_MILLIS)) {, +        if (name.equals(RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);]
[+++ b/CHANGELOG.md, +## Version 3.0.1, +, +_2016-01-14_, +, + *  Rollback OSGi support. This was causing library jars to include more classes, +    than expected, which interfered with Gradle builds., +, +, +## Version 3.0.0, +, +_2016-01-13_, +, +This release commits to a stable 3.0 API. Read the 3.0.0-RC1 changes for advice, +on upgrading from 2.x to 3.x., +, + *  **The `Callback` interface now takes a `Call`**. This makes it easier to, +    check if the call was canceled from within the callback. When migrating, +    async calls to this new API, `Call` is now the first parameter for both, +    `onResponse()` and `onFailure()`., + *  Fix: handle multiple cookies in `JavaNetCookieJar` on Android., + *  Fix: improve the default HTTP message in MockWebServer responses., + *  Fix: don't leak file handles when a conditional GET throws., + *  Fix: Use charset specified by the request body content type in OkHttp's, +    logging interceptor., + *  Fix: Don't eagerly release pools on cache hits., + *  New: Make OkHttp OSGi ready., + *  New: Add already-implemented interfaces Closeable and Flushable to the cache., +, +++ b/CHANGELOG.md, +## Version 3.0.1, +, +_2016-01-14_, +, + *  Rollback OSGi support. This was causing library jars to include more classes, +    than expected, which interfered with Gradle builds., +, +, +## Version 3.0.0, +, +_2016-01-13_, +, +This release commits to a stable 3.0 API. Read the 3.0.0-RC1 changes for advice, +on upgrading from 2.x to 3.x., +, + *  **The `Callback` interface now takes a `Call`**. This makes it easier to, +    check if the call was canceled from within the callback. When migrating, +    async calls to this new API, `Call` is now the first parameter for both, +    `onResponse()` and `onFailure()`., + *  Fix: handle multiple cookies in `JavaNetCookieJar` on Android., + *  Fix: improve the default HTTP message in MockWebServer responses., + *  Fix: don't leak file handles when a conditional GET throws., + *  Fix: Use charset specified by the request body content type in OkHttp's, +    logging interceptor., + *  Fix: Don't eagerly release pools on cache hits., + *  New: Make OkHttp OSGi ready., + *  New: Add already-implemented interfaces Closeable and Flushable to the cache., +, +++ b/README.md, +  <version>3.0.1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.1', +  <version>3.0.1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.1', +++ b/CHANGELOG.md, +## Version 3.0.1, +, +_2016-01-14_, +, + *  Rollback OSGi support. This was causing library jars to include more classes, +    than expected, which interfered with Gradle builds., +, +, +## Version 3.0.0, +, +_2016-01-13_, +, +This release commits to a stable 3.0 API. Read the 3.0.0-RC1 changes for advice, +on upgrading from 2.x to 3.x., +, + *  **The `Callback` interface now takes a `Call`**. This makes it easier to, +    check if the call was canceled from within the callback. When migrating, +    async calls to this new API, `Call` is now the first parameter for both, +    `onResponse()` and `onFailure()`., + *  Fix: handle multiple cookies in `JavaNetCookieJar` on Android., + *  Fix: improve the default HTTP message in MockWebServer responses., + *  Fix: don't leak file handles when a conditional GET throws., + *  Fix: Use charset specified by the request body content type in OkHttp's, +    logging interceptor., + *  Fix: Don't eagerly release pools on cache hits., + *  New: Make OkHttp OSGi ready., + *  New: Add already-implemented interfaces Closeable and Flushable to the cache., +, +++ b/README.md, +  <version>3.0.1</version>, +compile 'com.squareup.okhttp3:okhttp:3.0.1', +  <version>3.0.1</version>, +testCompile 'com.squareup.okhttp3:mockwebserver:3.0.1', +++ b/benchmarks/pom.xml, +    <version>3.1.0-SNAPSHOT</version>, +++ b/CHANGELOG.md]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.util.logging.Level;, +import java.util.logging.SimpleFormatter;, +import static okhttp3.TestUtil.awaitGarbageCollection;, +    response.body().close();, +  @Test public void leakedResponseBodyLogsStackTrace() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("This gets leaked."));, +, +    client = new OkHttpClient.Builder(), +        .connectionPool(new ConnectionPool(0, 10, TimeUnit.MILLISECONDS)), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Level original = logger.getLevel();, +    logger.setLevel(Level.FINE);, +    logHandler.setFormatter(new SimpleFormatter());, +    try {, +      client.newCall(request).execute(); // Ignore the response so it gets leaked then GC'd., +      awaitGarbageCollection();, +, +      String message = logHandler.take();, +      assertTrue(message.contains("WARNING: A connection to " + server.url("/") + " was leaked.", +          + " Did you forget to close a response body?"));, +      assertTrue(message.contains("okhttp3.RealCall.execute("));, +      assertTrue(message.contains("okhttp3.CallTest.leakedResponseBodyLogsStackTrace("));, +    } finally {, +      logger.setLevel(original);, +    }, +  }, +, +  @Test public void asyncLeakedResponseBodyLogsStackTrace() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("This gets leaked."));, +, +    client = new OkHttpClient.Builder(), +        .connectionPool(new ConnectionPool(0, 10, TimeUnit.MILLISECONDS)), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Level original = logger.getLevel();, +    logger.setLevel(Level.FINE);, +    logHandler.setFormatter(new SimpleFormatter());, +    try {, +      final CountDownLatch latch = new CountDownLatch(1);, +      client.newCall(request).enqueue(new Callback() {, +        @Override public void onFailure(Call call, IOException e) {, +          fail();, +        }, +, +        @Override public void onResponse(Call call, Response response) throws IOException {, +          // Ignore the response so it gets leaked then GC'd., +          latch.countDown();, +        }, +      });, +      latch.await();, +      // There's some flakiness when triggering a GC for objects in a separate thread. Adding a, +      // small delay appears to ensure the objects will get GC'd., +      Thread.sleep(200);, +      awaitGarbageCollection();, +, +      String message = logHandler.take();, +      assertTrue(message.contains("WARNING: A connection to " + server.url("/") + " was leaked.", +          + " Did you forget to close a response body?"));, +      assertTrue(message.contains("okhttp3.RealCall.enqueue("));, +      assertTrue(message.contains("okhttp3.CallTest.asyncLeakedResponseBodyLogsStackTrace("));, +    } finally {, +      logger.setLevel(original);, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.util.logging.Level;, +import java.util.logging.SimpleFormatter;, +import static okhttp3.TestUtil.awaitGarbageCollection;, +    response.body().close();, +  @Test public void leakedResponseBodyLogsStackTrace() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("This gets leaked."));, +, +    client = new OkHttpClient.Builder(), +        .connectionPool(new ConnectionPool(0, 10, TimeUnit.MILLISECONDS)), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Level original = logger.getLevel();, +    logger.setLevel(Level.FINE);, +    logHandler.setFormatter(new SimpleFormatter());, +    try {, +      client.newCall(request).execute(); // Ignore the response so it gets leaked then GC'd., +      awaitGarbageCollection();]
[+++ b/samples/guide/pom.xml, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>okhttp-tls</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/samples/guide/pom.xml, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.squareup.okhttp3</groupId>, +      <artifactId>okhttp-tls</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +++ b/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.recipes;, +, +import java.net.InetAddress;, +import okhttp3.Call;, +import okhttp3.OkHttpClient;, +import okhttp3.Request;, +import okhttp3.Response;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.tls.HandshakeCertificates;, +import okhttp3.tls.HeldCertificate;, +, +/**, + * Create an HTTPS server with a self-signed certificate that OkHttp trusts., + */, +public class HttpsServer {, +  public void run() throws Exception {, +    String localhost = InetAddress.getByName("localhost").getCanonicalHostName();, +    HeldCertificate localhostCertificate = new HeldCertificate.Builder(), +        .addSubjectAlternativeName(localhost), +        .build();, +, +    HandshakeCertificates serverCertificates = new HandshakeCertificates.Builder(), +        .heldCertificate(localhostCertificate), +        .build();, +    MockWebServer server = new MockWebServer();, +    server.useHttps(serverCertificates.sslSocketFactory(), false);, +    server.enqueue(new MockResponse());, +, +    HandshakeCertificates clientCertificates = new HandshakeCertificates.Builder(), +        .addTrustedCertificate(localhostCertificate.certificate()), +        .build();, +    OkHttpClient client = new OkHttpClient.Builder(), +        .sslSocketFactory(clientCertificates.sslSocketFactory(), clientCertificates.trustManager()), +        .build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    System.out.println(response.handshake().tlsVersion());, +  }, +, +  public static void main(String... args) throws Exception {, +    new HttpsServer().run();, +  }, +}]
[+++ b/benchmarks/pom.xml, +    <version>3.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.4.0</version>, +++ b/benchmarks/pom.xml, +    <version>3.4.0</version>, +++ b/mockwebserver/pom.xml, +    <version>3.4.0</version>, +++ b/okcurl/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.4.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.4.0</version>]
[+++ b/bom/pom.xml, +        <artifactId>logging-interceptor</artifactId>, +++ b/bom/pom.xml, +        <artifactId>logging-interceptor</artifactId>, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    serverListener.assertOpen();, +    // TODO: fix connection leak, +    serverListener.assertOpen();, +    // TODO: fix connection leak, +    // TODO: fix connection leak, +    // TODO: fix connection leak, +    newWebSocket();, +    // TODO: fix connection leak, +    // TODO: fix connection leak, +    server.close(1000, null);, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +, +    // TODO: fix connection leak, +    newWebSocket();, +    // TODO: fix connection leak, +    // TODO: fix connection leak, +    // TODO: fix connection leak, +    newWebSocket();, +   // TODO: fix connection leak, +    serverListener.assertOpen();]
[+++ b/okhttp/src/main/java/okhttp3/CacheControl.java, + * <p>See <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC 7234, 5.2</a>., +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, + * <p>See <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC 7234, 5.2</a>., +++ b/okhttp/src/main/java/okhttp3/Protocol.java, +   * <p>This version of OkHttp implements <a href="https://tools.ietf.org/html/rfc7230">RFC, +   * 7230</a>, and tracks revisions to that spec., +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, + * <p>See <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC 7234, 5.2</a>., +++ b/okhttp/src/main/java/okhttp3/Protocol.java, +   * <p>This version of OkHttp implements <a href="https://tools.ietf.org/html/rfc7230">RFC, +   * 7230</a>, and tracks revisions to that spec., +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +  /** Combines cached headers with a network headers as defined by RFC 7234, 4.3.4. */, +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, + * <p>See <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC 7234, 5.2</a>., +++ b/okhttp/src/main/java/okhttp3/Protocol.java, +   * <p>This version of OkHttp implements <a href="https://tools.ietf.org/html/rfc7230">RFC, +   * 7230</a>, and tracks revisions to that spec., +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +  /** Combines cached headers with a network headers as defined by RFC 7234, 4.3.4. */, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java, +     * 7234, 4.2.3 Calculating Age., +++ b/okhttp/src/main/java/okhttp3/CacheControl.java, + * <p>See <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC 7234, 5.2</a>., +++ b/okhttp/src/main/java/okhttp3/Protocol.java, +   * <p>This version of OkHttp implements <a href="https://tools.ietf.org/html/rfc7230">RFC, +   * 7230</a>, and tracks revisions to that spec., +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +  /** Combines cached headers with a network headers as defined by RFC 7234, 4.3.4. */, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java, +     * 7234, 4.2.3 Calculating Age., +++ b/okhttp/src/main/java/okhttp3/internal/http/HttpDate.java, +          // Date format specified by RFC 7231 section 7.1.1.1., +          // specified by RFC 7231.]
[+++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +          throw new AssertionError("unsupported hashAlgorithm: " + pin.hashAlgorithm);, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +          throw new AssertionError("unsupported hashAlgorithm: " + pin.hashAlgorithm);, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +        throw new AssertionError("Invalid IPv6 address: '" + percentDecoded + "'");, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +          throw new AssertionError("unsupported hashAlgorithm: " + pin.hashAlgorithm);, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +        throw new AssertionError("Invalid IPv6 address: '" + percentDecoded + "'");, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import static okhttp3.internal.Util.assertionError;, +      throw assertionError("No System TLS", e); // The system has no TLS. Just give up., +      throw assertionError("No System TLS", e); // The system has no TLS. Just give up., +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +          throw new AssertionError("unsupported hashAlgorithm: " + pin.hashAlgorithm);, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +        throw new AssertionError("Invalid IPv6 address: '" + percentDecoded + "'");, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import static okhttp3.internal.Util.assertionError;, +      throw assertionError("No System TLS", e); // The system has no TLS. Just give up., +      throw assertionError("No System TLS", e); // The system has no TLS. Just give up., +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +, +  public static AssertionError assertionError(String message, Exception e) {, +    return (AssertionError) new AssertionError(message).initCause(e);, +  }, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +          throw new AssertionError("unsupported hashAlgorithm: " + pin.hashAlgorithm);, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +        throw new AssertionError("Invalid IPv6 address: '" + percentDecoded + "'");, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import static okhttp3.internal.Util.assertionError;, +      throw assertionError("No System TLS", e); // The system has no TLS. Just give up., +      throw assertionError("No System TLS", e); // The system has no TLS. Just give up., +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +, +  public static AssertionError assertionError(String message, Exception e) {, +    return (AssertionError) new AssertionError(message).initCause(e);, +  }, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +import static okhttp3.internal.Util.assertionError;, +, +      throw assertionError("unable to determine cleartext support", e);, +        throw assertionError("unable to get issues and signature", e);, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +          throw new AssertionError("unsupported hashAlgorithm: " + pin.hashAlgorithm);, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +        throw new AssertionError("Invalid IPv6 address: '" + percentDecoded + "'");, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import static okhttp3.internal.Util.assertionError;, +      throw assertionError("No System TLS", e); // The system has no TLS. Just give up., +      throw assertionError("No System TLS", e); // The system has no TLS. Just give up., +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +, +  public static AssertionError assertionError(String message, Exception e) {, +    return (AssertionError) new AssertionError(message).initCause(e);, +  }, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +import static okhttp3.internal.Util.assertionError;, +, +      throw assertionError("unable to determine cleartext support", e);, +        throw assertionError("unable to get issues and signature", e);, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.java, +import static okhttp3.internal.Util.assertionError;, +, +      throw assertionError("unable to set ssl parameters", e);, +      throw assertionError("unable to get selected protocols", e);, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +          throw new AssertionError("unsupported hashAlgorithm: " + pin.hashAlgorithm);, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +        throw new AssertionError("Invalid IPv6 address: '" + percentDecoded + "'");, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import static okhttp3.internal.Util.assertionError;, +      throw assertionError("No System TLS", e); // The system has no TLS. Just give up., +      throw assertionError("No System TLS", e); // The system has no TLS. Just give up., +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +, +  public static AssertionError assertionError(String message, Exception e) {, +    return (AssertionError) new AssertionError(message).initCause(e);, +  }, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +import static okhttp3.internal.Util.assertionError;, +, +      throw assertionError("unable to determine cleartext support", e);, +        throw assertionError("unable to get issues and signature", e);, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.java, +import static okhttp3.internal.Util.assertionError;, +, +      throw assertionError("unable to set ssl parameters", e);, +      throw assertionError("unable to get selected protocols", e);, +++ b/okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java, +import static okhttp3.internal.Util.assertionError;, +, +      throw assertionError("unable to set alpn", e);, +    } catch (IllegalAccessException | InvocationTargetException e) {, +      throw assertionError("unable to remove alpn", e);, +      throw assertionError("unable to get selected protocol", e);]
[+++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ /dev/null, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    final int SOCKET_BUFFER_SIZE = 4 * 1024;, +      byte[] data = new byte[2 * 1024 * 1024]; // 2 MiB., +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    final int SOCKET_BUFFER_SIZE = 4 * 1024;, +      byte[] data = new byte[2 * 1024 * 1024]; // 2 MiB., +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, + * is <strong>not</strong> used to indicate not whether this URLConnection is, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    final int SOCKET_BUFFER_SIZE = 4 * 1024;, +      byte[] data = new byte[2 * 1024 * 1024]; // 2 MiB., +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, + * is <strong>not</strong> used to indicate not whether this URLConnection is, +++ /dev/null, +++ b/mockwebserver/README.md, +  URL baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ /dev/null]
[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, +    Logger logger = Logger.getLogger(Http20Draft15.class.getName());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, +    Logger logger = Logger.getLogger(Http20Draft15.class.getName());, +++ /dev/null, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, +    Logger logger = Logger.getLogger(Http20Draft15.class.getName());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft15Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.http;, +, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.PushPromise;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import java.util.Arrays;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class HttpOverHttp20Draft15Test extends HttpOverSpdyTest {, +, +  public HttpOverHttp20Draft15Test() {, +    super(Protocol.HTTP_2);, +    this.hostHeader = ":authority";, +  }, +, +  @Test public void serverSendsPushPromise_GET() throws Exception {, +    MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet"), +        .withPush(new PushPromise("GET", "/foo/bar", Arrays.asList("foo: bar"),, +            new MockResponse().setBody("bar").setStatus("HTTP/1.1 200 Sweet")));, +    server.enqueue(response);, +    server.play();, +, +    connection = client.open(server.getUrl("/foo"));, +    assertContent("ABCDE", connection, Integer.MAX_VALUE);, +    assertEquals(200, connection.getResponseCode());, +    assertEquals("Sweet", connection.getResponseMessage());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /foo HTTP/1.1", request.getRequestLine());, +    assertContains(request.getHeaders(), ":scheme: https");, +    assertContains(request.getHeaders(), hostHeader + ": ", +        + server.getHostName() + ":" + server.getPort());, +, +    RecordedRequest pushedRequest = server.takeRequest();, +    assertEquals("GET /foo/bar HTTP/1.1", pushedRequest.getRequestLine());, +    assertEquals(Arrays.asList("foo: bar"), pushedRequest.getHeaders());, +  }, +, +  @Test public void serverSendsPushPromise_HEAD() throws Exception {, +    MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet"), +        .withPush(new PushPromise("HEAD", "/foo/bar", Arrays.asList("foo: bar"),, +            new MockResponse().setStatus("HTTP/1.1 204 Sweet")));, +    server.enqueue(response);, +    server.play();, +, +    connection = client.open(server.getUrl("/foo"));, +    assertContent("ABCDE", connection, Integer.MAX_VALUE);, +    assertEquals(200, connection.getResponseCode());, +    assertEquals("Sweet", connection.getResponseMessage());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /foo HTTP/1.1", request.getRequestLine());, +    assertContains(request.getHeaders(), ":scheme: https");, +    assertContains(request.getHeaders(), hostHeader + ": ", +        + server.getHostName() + ":" + server.getPort());, +, +    RecordedRequest pushedRequest = server.takeRequest();, +    assertEquals("HEAD /foo/bar HTTP/1.1", pushedRequest.getRequestLine());, +    assertEquals(Arrays.asList("foo: bar"), pushedRequest.getHeaders());, +  }, +}, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft15;, +    Logger logger = Logger.getLogger(Http20Draft15.class.getName());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft15Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");]
[+++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.2.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.2.0-SNAPSHOT</version>]
[+++ /dev/null, +++ /dev/null, +++ b/okio/src/main/java/okio/ByteString.java, +import java.io.EOFException;, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +  /** A singleton empty {@code ByteString}. */, +  public static final ByteString EMPTY = ByteString.of();, +, +  ByteString(byte[] data) {, +    this.data = data; // Trusted internal constructor doesn't clone data., +  }, +  public static ByteString read(InputStream in, int byteCount) throws IOException {, +    byte[] result = new byte[byteCount];, +    for (int offset = 0, read; offset < byteCount; offset += read) {, +      read = in.read(result, offset, byteCount - offset);, +      if (read == -1) throw new EOFException();, +    }, +, +  @Override public String toString() {, +    if (data.length == 0) {, +      return "ByteString[size=0]";, +    }, +, +    if (data.length <= 16) {, +      return String.format("ByteString[size=%s data=%s]", data.length, hex());, +    }, +, +    try {, +      return String.format("ByteString[size=%s md5=%s]", data.length,, +          ByteString.of(MessageDigest.getInstance("MD5").digest(data)).hex());, +    } catch (NoSuchAlgorithmException e) {, +      throw new AssertionError();, +    }, +  }, +++ /dev/null, +++ b/okio/src/main/java/okio/ByteString.java, +import java.io.EOFException;, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +  /** A singleton empty {@code ByteString}. */, +  public static final ByteString EMPTY = ByteString.of();, +, +  ByteString(byte[] data) {, +    this.data = data; // Trusted internal constructor doesn't clone data., +  }, +  public static ByteString read(InputStream in, int byteCount) throws IOException {, +    byte[] result = new byte[byteCount];, +    for (int offset = 0, read; offset < byteCount; offset += read) {, +      read = in.read(result, offset, byteCount - offset);, +      if (read == -1) throw new EOFException();, +    }, +, +  @Override public String toString() {, +    if (data.length == 0) {, +      return "ByteString[size=0]";, +    }, +, +    if (data.length <= 16) {, +      return String.format("ByteString[size=%s data=%s]", data.length, hex());, +    }, +, +    try {, +      return String.format("ByteString[size=%s md5=%s]", data.length,, +          ByteString.of(MessageDigest.getInstance("MD5").digest(data)).hex());, +    } catch (NoSuchAlgorithmException e) {, +      throw new AssertionError();, +    }, +  }, +++ b/okio/src/main/java/okio/OkBuffer.java, +  @Override public boolean equals(Object o) {, +    if (!(o instanceof OkBuffer)) return false;, +    OkBuffer that = (OkBuffer) o;, +    if (byteCount != that.byteCount) return false;, +    if (byteCount == 0) return true; // Both buffers are empty., +, +    Segment sa = this.head;, +    Segment sb = that.head;, +    int posA = sa.pos;, +    int posB = sb.pos;, +, +    for (long pos = 0, count; pos < byteCount; pos += count) {, +      count = Math.min(sa.limit - posA, sb.limit - posB);, +, +      for (int i = 0; i < count; i++) {, +        if (sa.data[posA++] != sb.data[posB++]) return false;, +      }, +, +      if (posA == sa.limit) {, +        sa = sa.next;, +        posA = sa.pos;, +      }, +, +      if (posB == sb.limit) {, +        sb = sb.next;, +        posB = sb.pos;, +      }, +    }, +, +    return true;]
[+++ b/okcurl/pom.xml, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +++ b/okcurl/pom.xml, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.logging.HttpLoggingInterceptor;, +import okhttp3.logging.LoggingEventListener;, +  @Option(, +      name = {"-v", "--verbose"},, +      description = "Makes " + NAME + " verbose during the operation"), +  public boolean verbose;, +, +    if (verbose) {, +      HttpLoggingInterceptor.Logger logger =, +          new HttpLoggingInterceptor.Logger() {, +            @Override, +            public void log(String message) {, +              System.out.println(message);, +            }, +          };, +      builder.eventListenerFactory(new LoggingEventListener.Factory(logger));, +    }, +++ b/okcurl/pom.xml, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.logging.HttpLoggingInterceptor;, +import okhttp3.logging.LoggingEventListener;, +  @Option(, +      name = {"-v", "--verbose"},, +      description = "Makes " + NAME + " verbose during the operation"), +  public boolean verbose;, +, +    if (verbose) {, +      HttpLoggingInterceptor.Logger logger =, +          new HttpLoggingInterceptor.Logger() {, +            @Override, +            public void log(String message) {, +              System.out.println(message);, +            }, +          };, +      builder.eventListenerFactory(new LoggingEventListener.Factory(logger));, +    }, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.logging;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.Proxy;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +import javax.annotation.Nullable;, +import okhttp3.Call;, +import okhttp3.Connection;, +import okhttp3.EventListener;, +import okhttp3.Handshake;, +import okhttp3.OkHttpClient;, +import okhttp3.Protocol;, +import okhttp3.Request;, +import okhttp3.Response;, +, +/**, + * An OkHttp EventListener, which logs call events. Can be applied as an, + * {@linkplain OkHttpClient#eventListenerFactory() event listener factory}., + *, + * <p>The format of the logs created by this class should not be considered stable and may change, + * slightly between releases. If you need a stable logging format, use your own event listener., + */, +public final class LoggingEventListener extends EventListener {, +  private final HttpLoggingInterceptor.Logger logger;, +  private long startNs;, +, +  private LoggingEventListener(HttpLoggingInterceptor.Logger logger) {]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +      bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +      bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +      bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +      bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Test public void malformedChunkSize() throws IOException {, +    server.enqueue(new MockResponse().setBody("5:x\r\nABCDE\r\n0\r\n\r\n"), +        .clearHeaders(), +        .addHeader("Transfer-encoding: chunked"));, +, +    URLConnection connection = client.open(server.getUrl("/"));, +    try {, +      readAscii(connection.getInputStream(), Integer.MAX_VALUE);, +      fail();, +    } catch (IOException e) {, +    }, +  }, +, +  @Test public void extensionAfterChunkSize() throws IOException {, +    server.enqueue(new MockResponse().setBody("5;x\r\nABCDE\r\n0\r\n\r\n"), +        .clearHeaders(), +        .addHeader("Transfer-encoding: chunked"));, +, +    HttpURLConnection connection = client.open(server.getUrl("/"));, +    assertContent("ABCDE", connection);, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +      bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Test public void malformedChunkSize() throws IOException {, +    server.enqueue(new MockResponse().setBody("5:x\r\nABCDE\r\n0\r\n\r\n"), +        .clearHeaders(), +        .addHeader("Transfer-encoding: chunked"));, +, +    URLConnection connection = client.open(server.getUrl("/"));, +    try {, +      readAscii(connection.getInputStream(), Integer.MAX_VALUE);, +      fail();, +    } catch (IOException e) {, +    }, +  }, +, +  @Test public void extensionAfterChunkSize() throws IOException {, +    server.enqueue(new MockResponse().setBody("5;x\r\nABCDE\r\n0\r\n\r\n"), +        .clearHeaders(), +        .addHeader("Transfer-encoding: chunked"));, +, +    HttpURLConnection connection = client.open(server.getUrl("/"));, +    assertContent("ABCDE", connection);, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +      sink.writeDecimalLong(varyHeaders.size());, +      sink.writeDecimalLong(responseHeaders.size());, +        sink.writeDecimalLong(certificates.size());, +      long result = source.readDecimalLong();, +      String line = source.readUtf8LineStrict();, +      if (result < 0 || result > Integer.MAX_VALUE || !line.isEmpty()) {, +        throw new IOException("expected an int but was \"" + result + line + "\"");, +      }, +      return (int) result;, +      throw new IOException(e.getMessage());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +      bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Test public void malformedChunkSize() throws IOException {, +    server.enqueue(new MockResponse().setBody("5:x\r\nABCDE\r\n0\r\n\r\n"), +        .clearHeaders(), +        .addHeader("Transfer-encoding: chunked"));, +, +    URLConnection connection = client.open(server.getUrl("/"));, +    try {]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +, +  @Test public void partAccessors() throws IOException {, +    MultipartBody body = new MultipartBody.Builder(), +        .addPart(Headers.of("Foo", "Bar"), RequestBody.create(null, "Baz")), +        .build();, +    assertEquals(1, body.parts().size());, +, +    Buffer part1Buffer = new Buffer();, +    MultipartBody.Part part1 = body.part(0);, +    part1.body().writeTo(part1Buffer);, +    assertEquals(Headers.of("Foo", "Bar"), part1.headers());, +    assertEquals("Baz", part1Buffer.readUtf8());, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +public final class MockWebServer implements TestRule {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java, +, +  @Test public void partAccessors() throws IOException {, +    MultipartBody body = new MultipartBody.Builder(), +        .addPart(Headers.of("Foo", "Bar"), RequestBody.create(null, "Baz")), +        .build();, +    assertEquals(1, body.parts().size());, +, +    Buffer part1Buffer = new Buffer();, +    MultipartBody.Part part1 = body.part(0);, +    part1.body().writeTo(part1Buffer);, +    assertEquals(Headers.of("Foo", "Bar"), part1.headers());, +    assertEquals("Baz", part1Buffer.readUtf8());, +  }, +++ b/okhttp/src/main/java/okhttp3/MultipartBody.java, +    final Headers headers;, +    final RequestBody body;, +, +    public Headers headers() {, +      return headers;, +    }, +, +    public RequestBody body() {, +      return body;, +    }]
[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, +      assertTrue(Thread.interrupted());, +      assertTrue(Thread.interrupted());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, +      assertTrue(Thread.interrupted());, +      assertTrue(Thread.interrupted());, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +          Thread.interrupted(); // Temporarily clear the interrupted state., +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java, +      assertTrue(Thread.interrupted());, +      assertTrue(Thread.interrupted());, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +          Thread.interrupted(); // Temporarily clear the interrupted state., +++ b/pom.xml, +    <okio.version>1.15.0</okio.version>]
[+++ b/benchmarks/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/pom.xml, +  <version>2.0.0-RC2</version>, +    <tag>parent-2.0.0-RC2</tag>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/pom.xml, +  <version>2.0.0-RC2</version>, +    <tag>parent-2.0.0-RC2</tag>, +++ b/samples/crawler/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okcurl/pom.xml, +    <version>2.0.0-RC2</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-RC2</version>]
[+++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1"), +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = Objects.hashCode(id);, +    result = 31 * result + Objects.hashCode(type);, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = Objects.hashCode(id);, +    result = 31 * result + Objects.hashCode(type);, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    try (Response response = client.newCall(request).execute()) {, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.12.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1"), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {]
[+++ b/pom.xml, +                    <consoleOutput>true</consoleOutput>, +++ b/pom.xml, +                    <consoleOutput>true</consoleOutput>, +++ b/src/main/java/libcore/net/http/HttpsURLConnectionImpl.java, +            // Get a connection. This may return a pooled connection!, +            // If the TLS connection is ready, use it., +            // The TLS connection isn't ready. Build a tunnel if necessary and then handshake., +            if (connection.getAddress().requiresTunnel()) {, +                makeTunnel(policy, connection, getRequestHeaders());, +            }, +++ b/pom.xml, +                    <consoleOutput>true</consoleOutput>, +++ b/src/main/java/libcore/net/http/HttpsURLConnectionImpl.java, +            // Get a connection. This may return a pooled connection!, +            // If the TLS connection is ready, use it., +            // The TLS connection isn't ready. Build a tunnel if necessary and then handshake., +            if (connection.getAddress().requiresTunnel()) {, +                makeTunnel(policy, connection, getRequestHeaders());, +            }, +++ b/src/test/java/libcore/net/http/URLConnectionTest.java, +    public void testProxyWithConnectionReuse() throws IOException {, +        SSLSocketFactory socketFactory = sslContext.getSocketFactory();, +        RecordingHostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, +, +        server.useHttps(socketFactory, true);, +        server.enqueue(new MockResponse(), +                .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +                .clearHeaders());, +        server.enqueue(new MockResponse().setBody("response 1"));, +        server.enqueue(new MockResponse().setBody("response 2"));, +        server.play();, +, +        URL url = new URL("https://android.com/foo");, +        OkHttpsConnection connection1 = (OkHttpsConnection) openConnection(, +                url, server.toProxyAddress());, +        connection1.setSSLSocketFactory(socketFactory);, +        connection1.setHostnameVerifier(hostnameVerifier);, +        assertContent("response 1", connection1);, +, +        OkHttpsConnection connection2 = (OkHttpsConnection) openConnection(, +                url, server.toProxyAddress());, +        connection2.setSSLSocketFactory(socketFactory);, +        connection2.setHostnameVerifier(hostnameVerifier);, +        assertContent("response 2", connection2);, +    }, +]
[+++ b/okhttp/src/main/java/okhttp3/Headers.java, +      if (value == null) throw new NullPointerException("value for name " + name + " == null");, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +      if (value == null) throw new NullPointerException("value for name " + name + " == null");, +++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_131</id>, +      <activation>, +        <jdk>1.8.0_131</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +    client = new OkHttpClient.Builder(), +        .setProtocols(benchmark.protocols), +        .build();, +      client = new OkHttpClient.Builder(), +          .setSslSocketFactory(socketFactory), +          .setHostnameVerifier(hostnameVerifier), +          .build();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +    client = new OkHttpClient.Builder(), +        .setProtocols(benchmark.protocols), +        .build();, +      client = new OkHttpClient.Builder(), +          .setSslSocketFactory(socketFactory), +          .setHostnameVerifier(hostnameVerifier), +          .build();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +    client = new OkHttpClient.Builder(), +        .setProtocols(benchmark.protocols), +        .setDispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,, +            benchmark.concurrencyLevel, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>()))), +        .build();, +      client = client.newBuilder(), +          .setSslSocketFactory(socketFactory), +          .setHostnameVerifier(hostnameVerifier), +          .build();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +    client = new OkHttpClient.Builder(), +        .setProtocols(benchmark.protocols), +        .build();, +      client = new OkHttpClient.Builder(), +          .setSslSocketFactory(socketFactory), +          .setHostnameVerifier(hostnameVerifier), +          .build();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +    client = new OkHttpClient.Builder(), +        .setProtocols(benchmark.protocols), +        .setDispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,, +            benchmark.concurrencyLevel, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>()))), +        .build();, +      client = client.newBuilder(), +          .setSslSocketFactory(socketFactory), +          .setHostnameVerifier(hostnameVerifier), +          .build();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +    OkHttpClient.Builder builder = new OkHttpClient.Builder();, +    builder.setFollowSslRedirects(followRedirects);, +      builder.setConnectTimeout(connectTimeout, SECONDS);, +      builder.setReadTimeout(readTimeout, SECONDS);, +      builder.setSslSocketFactory(createInsecureSslSocketFactory());, +      builder.setHostnameVerifier(createInsecureHostnameVerifier());, +    return builder.build();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +    client = new OkHttpClient.Builder(), +        .setProtocols(benchmark.protocols), +        .build();, +      client = new OkHttpClient.Builder(), +          .setSslSocketFactory(socketFactory), +          .setHostnameVerifier(hostnameVerifier), +          .build();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +    client = new OkHttpClient.Builder(), +        .setProtocols(benchmark.protocols), +        .setDispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,, +            benchmark.concurrencyLevel, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>()))), +        .build();, +      client = client.newBuilder(), +          .setSslSocketFactory(socketFactory), +          .setHostnameVerifier(hostnameVerifier), +          .build();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +    OkHttpClient.Builder builder = new OkHttpClient.Builder();, +    builder.setFollowSslRedirects(followRedirects);, +      builder.setConnectTimeout(connectTimeout, SECONDS);, +      builder.setReadTimeout(readTimeout, SECONDS);, +      builder.setSslSocketFactory(createInsecureSslSocketFactory());, +      builder.setHostnameVerifier(createInsecureHostnameVerifier());, +    return builder.build();, +++ b/okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java, +    OkHttpClient.Builder builder = okUrlFactory.client().newBuilder();, +      builder.setCache(okCacheContainer.getCache());, +      builder.setInternalCache(responseCache != null ? new CacheAdapter(responseCache) : null);, +    okUrlFactory.setClient(builder.build());, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java, +    client = new OkHttpClient.Builder(), +        .setProtocols(benchmark.protocols), +        .build();, +      client = new OkHttpClient.Builder(), +          .setSslSocketFactory(socketFactory), +          .setHostnameVerifier(hostnameVerifier), +          .build();, +++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java, +    client = new OkHttpClient.Builder(), +        .setProtocols(benchmark.protocols), +        .setDispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,, +            benchmark.concurrencyLevel, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>()))), +        .build();, +      client = client.newBuilder(), +          .setSslSocketFactory(socketFactory), +          .setHostnameVerifier(hostnameVerifier)]
[+++ b/okhttp/src/main/java/okhttp3/Headers.java, +    this.namesAndValues = builder.namesAndValues.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +    this.namesAndValues = builder.namesAndValues.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +    return result.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +    this.namesAndValues = builder.namesAndValues.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +    return result.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +    for (Entry entry : lruEntries.values().toArray(new Entry[0])) {, +    for (Entry entry : lruEntries.values().toArray(new Entry[0])) {, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +    this.namesAndValues = builder.namesAndValues.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +    return result.toArray(new String[0]);, +++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java, +    for (Entry entry : lruEntries.values().toArray(new Entry[0])) {, +    for (Entry entry : lruEntries.values().toArray(new Entry[0])) {, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +        streamsToClose = streams.values().toArray(new Http2Stream[0]);, +            streamsToNotify = streams.values().toArray(new Http2Stream[0]);, +        streamsCopy = streams.values().toArray(new Http2Stream[0]);]
[+++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.1-SNAPSHOT</version>, +    <tag>HEAD</tag>, +++ b/samples/crawler/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>2.0.1-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.1-SNAPSHOT</version>]
[+++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, +  1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., +  2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, +  1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., +  2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/pom.xml, +  <build>, +    <plugins>, +    <plugin>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>exec-maven-plugin</artifactId>, +      <executions>, +        <execution>, +          <goals>, +            <goal>java</goal>, +          </goals>, +        </execution>, +      </executions>, +      <configuration>, +        <executable>java</executable>, +        <arguments>, +          <argument>-Xms512m</argument>, +          <argument>-Xmx512m</argument>, +          <commandlineArgs>-Xbootclasspath/p:${settings.localRepository}/org/mortbay/jetty/npn/npn-boot/${npn.version}/npn-boot-${npn.version}.jar</commandlineArgs>, +          <argument>-classpath</argument>, +          <classpath/>, +          <argument>com.squareup.okhttp.benchmarks.Benchmark</argument>, +        </arguments>, +      </configuration>, +    </plugin>, +    </plugins>, +  </build>, +++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, +  1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., +  2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/pom.xml, +  <build>, +    <plugins>, +    <plugin>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>exec-maven-plugin</artifactId>, +      <executions>, +        <execution>, +          <goals>, +            <goal>java</goal>, +          </goals>, +        </execution>, +      </executions>, +      <configuration>, +        <executable>java</executable>, +        <arguments>, +          <argument>-Xms512m</argument>, +          <argument>-Xmx512m</argument>, +          <commandlineArgs>-Xbootclasspath/p:${settings.localRepository}/org/mortbay/jetty/npn/npn-boot/${npn.version}/npn-boot-${npn.version}.jar</commandlineArgs>, +          <argument>-classpath</argument>, +          <classpath/>, +          <argument>com.squareup.okhttp.benchmarks.Benchmark</argument>, +        </arguments>, +      </configuration>, +    </plugin>, +    </plugins>, +  </build>, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setNpnProtocols(protocols);, +++ b/benchmarks/README.md, +OkHttp Benchmarks, +=======================================, +, +This module allows you to test the performance of HTTP clients., +, +### Running, +  1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`., +  2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark., +++ b/benchmarks/pom.xml, +  <build>, +    <plugins>, +    <plugin>, +      <groupId>org.codehaus.mojo</groupId>, +      <artifactId>exec-maven-plugin</artifactId>, +      <executions>, +        <execution>]
[+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +import java.net.SocketAddress;, +  final String connectionName;, +    connectionName = builder.connectionName;, +        Util.threadFactory(Util.format("OkHttp %s Writer", connectionName), false));, +        Util.threadFactory(Util.format("OkHttp %s Push Observer", connectionName), true));, +      writerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", connectionName, streamId) {, +          new NamedRunnable("OkHttp Window Update %s stream %d", connectionName, streamId) {, +      super("OkHttp %s ping %08x%08x", connectionName, payload1, payload2);, +    String connectionName;, +      SocketAddress remoteSocketAddress = socket.getRemoteSocketAddress();, +      String connectionName = remoteSocketAddress instanceof InetSocketAddress, +          ? ((InetSocketAddress) remoteSocketAddress).getHostName(), +          : remoteSocketAddress.toString();, +      return socket(socket, connectionName,, +        Socket socket, String connectionName, BufferedSource source, BufferedSink sink) {, +      this.connectionName = connectionName;, +      super("OkHttp %s", connectionName);, +          listenerExecutor.execute(new NamedRunnable(, +              "OkHttp %s stream %d", connectionName, streamId) {, +                Platform.get().log(, +                    INFO, "Http2Connection.Listener failure for " + connectionName, e);, +        listenerExecutor.execute(new NamedRunnable("OkHttp %s settings", connectionName) {, +        writerExecutor.execute(new NamedRunnable("OkHttp %s ACK Settings", connectionName) {, +      pushExecutorExecute(new NamedRunnable(, +          "OkHttp %s Push Request[%s]", connectionName, streamId) {, +      pushExecutorExecute(new NamedRunnable(, +          "OkHttp %s Push Headers[%s]", connectionName, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Data[%s]", connectionName, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Reset[%s]", connectionName, streamId) {, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +import java.net.SocketAddress;, +  final String connectionName;, +    connectionName = builder.connectionName;, +        Util.threadFactory(Util.format("OkHttp %s Writer", connectionName), false));, +        Util.threadFactory(Util.format("OkHttp %s Push Observer", connectionName), true));, +      writerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", connectionName, streamId) {, +          new NamedRunnable("OkHttp Window Update %s stream %d", connectionName, streamId) {, +      super("OkHttp %s ping %08x%08x", connectionName, payload1, payload2);, +    String connectionName;, +      SocketAddress remoteSocketAddress = socket.getRemoteSocketAddress();, +      String connectionName = remoteSocketAddress instanceof InetSocketAddress, +          ? ((InetSocketAddress) remoteSocketAddress).getHostName(), +          : remoteSocketAddress.toString();, +      return socket(socket, connectionName,, +        Socket socket, String connectionName, BufferedSource source, BufferedSink sink) {, +      this.connectionName = connectionName;, +      super("OkHttp %s", connectionName);, +          listenerExecutor.execute(new NamedRunnable(, +              "OkHttp %s stream %d", connectionName, streamId) {, +                Platform.get().log(, +                    INFO, "Http2Connection.Listener failure for " + connectionName, e);, +        listenerExecutor.execute(new NamedRunnable("OkHttp %s settings", connectionName) {, +        writerExecutor.execute(new NamedRunnable("OkHttp %s ACK Settings", connectionName) {, +      pushExecutorExecute(new NamedRunnable(, +          "OkHttp %s Push Request[%s]", connectionName, streamId) {, +      pushExecutorExecute(new NamedRunnable(, +          "OkHttp %s Push Headers[%s]", connectionName, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Data[%s]", connectionName, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Reset[%s]", connectionName, streamId) {, +++ b/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/BlockingUnixSocket.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.unixdomainsockets;, +, +import java.io.File;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.SocketAddress;, +import java.nio.ByteBuffer;, +import java.nio.channels.Channels;, +import java.nio.channels.ReadableByteChannel;, +import java.nio.channels.SelectableChannel;, +import java.nio.channels.WritableByteChannel;, +import jnr.unixsocket.UnixSocket;, +import jnr.unixsocket.UnixSocketAddress;, +import jnr.unixsocket.UnixSocketChannel;, +, +/**, + * Subtype UNIX socket for a higher-fidelity impersonation of TCP sockets., + *, + * <p>This class doesn't pass {@link SelectableChannel} implementations to create input and output, + * streams. Though that type isn't in the public API, if the channel passed in implements that, + * interface then additional synchronization is used. This additional synchronization harms]
[+++ b/benchmarks/pom.xml, +    <version>2.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-tests/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-ws-tests/pom.xml, +    <version>2.5.0</version>, +++ b/benchmarks/pom.xml, +    <version>2.5.0</version>, +++ b/mockwebserver/pom.xml, +    <version>2.5.0</version>, +++ b/okcurl/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-android-support/pom.xml, +    <version>2.5.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.5.0</version>]
[+++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +      HostnameVerifier hostnameVerifier, Proxy proxy) throws UnknownHostException {, +          && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +      HostnameVerifier hostnameVerifier, Proxy proxy) throws UnknownHostException {, +          && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +          boolean credentialsFound = HttpAuthenticator.processAuthHeader(HTTP_PROXY_AUTH,, +              responseHeaders, requestHeaders, route.proxy, url);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +      HostnameVerifier hostnameVerifier, Proxy proxy) throws UnknownHostException {, +          && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +          boolean credentialsFound = HttpAuthenticator.processAuthHeader(HTTP_PROXY_AUTH,, +              responseHeaders, requestHeaders, route.proxy, url);, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +      HostnameVerifier hostnameVerifier, Proxy proxy) throws UnknownHostException {, +          && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +          boolean credentialsFound = HttpAuthenticator.processAuthHeader(HTTP_PROXY_AUTH,, +              responseHeaders, requestHeaders, route.proxy, url);, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +      HostnameVerifier hostnameVerifier, Proxy proxy) throws UnknownHostException {, +          && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +          boolean credentialsFound = HttpAuthenticator.processAuthHeader(HTTP_PROXY_AUTH,, +              responseHeaders, requestHeaders, route.proxy, url);, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/AbstractOutputStream.java, +/*, + * Copyright (C) 2010 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp.internal;, +, +import java.io.IOException;, +import java.io.OutputStream;, +, +/**, + * An output stream for an HTTP request body., + *, + * <p>Since a single socket's output stream may be used to write multiple HTTP, + * requests to the same server, subclasses should not close the socket stream., + */, +public abstract class AbstractOutputStream extends OutputStream {, +  protected boolean closed;, +, +  @Override public final void write(int data) throws IOException {, +    write(new byte[] { (byte) data });, +  }, +, +  protected final void checkNotClosed() throws IOException {, +    if (closed) {, +      throw new IOException("stream closed");, +    }, +  }, +, +  /** Returns true if this stream was closed locally. */, +  public boolean isClosed() {, +    return closed;, +  }, +}, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +      HostnameVerifier hostnameVerifier, Proxy proxy) throws UnknownHostException {, +          && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +          boolean credentialsFound = HttpAuthenticator.processAuthHeader(HTTP_PROXY_AUTH,, +              responseHeaders, requestHeaders, route.proxy, url);, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/AbstractOutputStream.java, +/*, + * Copyright (C) 2010 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]
[+++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull, +++ b/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java, +import okhttp3.internal.annotations.EverythingIsNonNull;, +@EverythingIsNonNull]
[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(null, cipherSuite,, +          nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(null, cipherSuite,, +          nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +    Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(null, cipherSuite,, +          nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +    Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(null, cipherSuite,, +          nullSafeImmutableList(peerCertificates), nullSafeImmutableList(localCertificates));, +      Handshake handshake = Handshake.get(null, cipherSuite, peerCertificates, localCertificates);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +    Handshake handshake = Handshake.get(null, CipherSuite.TLS_RSA_WITH_NULL_MD5,, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  /** Exercise the cache format in OkHttp 2.7 and all earlier releases. */, +  @Test public void testGoldenCacheHttpsResponseOkHttp27() throws Exception {, +    HttpUrl url = server.url("/");, +    String urlKey = Util.md5Hex(url.toString());, +    String entryMetadata = "", +        + "" + url + "\n", +        + "GET\n", +        + "0\n", +        + "HTTP/1.1 200 OK\n", +        + "4\n", +        + "Content-Length: 3\n", +        + "OkHttp-Received-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Sent-Millis: " + System.currentTimeMillis() + "\n", +        + "Cache-Control: max-age=60\n", +        + "\n", +        + "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n", +        + "1\n", +        + "MIIBnDCCAQWgAwIBAgIBATANBgkqhkiG9w0BAQsFADAUMRIwEAYDVQQDEwlsb2NhbGhvc3QwHhcNMTUxMjIyMDEx", +        + "MTQwWhcNMTUxMjIzMDExMTQwWjAUMRIwEAYDVQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ", +        + "AoGBAJTn2Dh8xYmegvpOSmsKb2Os6Cxf1L4fYbnHr/turInUD5r1P7ZAuxurY880q3GT5bUDoirS3IfucddrT1Ac", +        + "AmUzEmk/FDjggiP8DlxFkY/XwXBlhRDVIp/mRuASPMGInckc0ZaixOkRFyrxADj+r1eaSmXCIvV5yTY6IaIokLj1", +        + "AgMBAAEwDQYJKoZIhvcNAQELBQADgYEAFblnedqtfRqI9j2WDyPPoG0NTZf9xwjeUu+ju+Ktty8u9k7Lgrrd/DH2", +        + "mQEtBD1Ctvp91MJfAClNg3faZzwClUyu5pd0QXRZEUwSwZQNen2QWDHRlVsItclBJ4t+AJLqTbwofWi4m4K8REOl", +        + "593hD55E4+lY22JZiVQyjsQhe6I=\n", +        + "0\n";, +    String entryBody = "abc";, +    String journalBody = "", +        + "libcore.io.DiskLruCache\n", +        + "1\n", +        + "201105\n", +        + "2\n", +        + "\n", +        + "DIRTY " + urlKey + "\n", +        + "CLEAN " + urlKey + " " + entryMetadata.length() + " " + entryBody.length() + "\n";, +    writeFile(cache.getDirectory(), urlKey + ".0", entryMetadata);, +    writeFile(cache.getDirectory(), urlKey + ".1", entryBody);, +    writeFile(cache.getDirectory(), "journal", journalBody);, +    cache.close();, +    cache = new Cache(cache.getDirectory(), Integer.MAX_VALUE, fileSystem);, +    client.setCache(cache);, +, +    Response response = get(url);, +    assertEquals(entryBody, response.body().string());, +    assertEquals("3", response.header("Content-Length"));, +  }, +, +  /** The TLS version is present in OkHttp 3.0 and beyond. */, +  @Test public void testGoldenCacheHttpsResponseOkHttp30() throws Exception {, +    HttpUrl url = server.url("/");, +    String urlKey = Util.md5Hex(url.toString());, +    String entryMetadata = "", +        + "" + url + "\n", +        + "GET\n", +        + "0\n", +        + "HTTP/1.1 200 OK\n", +        + "4\n", +        + "Content-Length: 3\n", +        + "OkHttp-Received-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Sent-Millis: " + System.currentTimeMillis() + "\n", +        + "Cache-Control: max-age=60\n", +        + "\n", +        + "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n", +        + "1\n", +        + "MIIBnDCCAQWgAwIBAgIBATANBgkqhkiG9w0BAQsFADAUMRIwEAYDVQQDEwlsb2NhbGhvc3QwHhcNMTUxMjIyMDEx", +        + "MTQwWhcNMTUxMjIzMDExMTQwWjAUMRIwEAYDVQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ", +        + "AoGBAJTn2Dh8xYmegvpOSmsKb2Os6Cxf1L4fYbnHr/turInUD5r1P7ZAuxurY880q3GT5bUDoirS3IfucddrT1Ac", +        + "AmUzEmk/FDjggiP8DlxFkY/XwXBlhRDVIp/mRuASPMGInckc0ZaixOkRFyrxADj+r1eaSmXCIvV5yTY6IaIokLj1", +        + "AgMBAAEwDQYJKoZIhvcNAQELBQADgYEAFblnedqtfRqI9j2WDyPPoG0NTZf9xwjeUu+ju+Ktty8u9k7Lgrrd/DH2", +        + "mQEtBD1Ctvp91MJfAClNg3faZzwClUyu5pd0QXRZEUwSwZQNen2QWDHRlVsItclBJ4t+AJLqTbwofWi4m4K8REOl", +        + "593hD55E4+lY22JZiVQyjsQhe6I=\n"]
[+++ b/pom.xml, +    <profile>, +      <id>alpn-when-jdk8_131</id>, +      <activation>, +        <jdk>1.8.0_131</jdk>, +      </activation>, +      <properties>, +        <alpn.jdk8.version>8.1.11.v20170118</alpn.jdk8.version>, +      </properties>, +    </profile>]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +  @Test public void newBuilderResolve() throws Exception {, +    // Non-exhaustive tests because implementation is the same as resolve., +    HttpUrl base = HttpUrl.parse("http://host/a/b");, +    assertEquals(HttpUrl.parse("https://host2/"), base.newBuilder("https://host2").build());, +    assertEquals(HttpUrl.parse("http://host2/"), base.newBuilder("//host2").build());, +    assertEquals(HttpUrl.parse("http://host/path"), base.newBuilder("/path").build());, +    assertEquals(HttpUrl.parse("http://host/a/path"), base.newBuilder("path").build());, +    assertEquals(HttpUrl.parse("http://host/a/b?query"), base.newBuilder("?query").build());, +    assertEquals(HttpUrl.parse("http://host/a/b#fragment"), base.newBuilder("#fragment").build());, +    assertEquals(HttpUrl.parse("http://host/a/b"), base.newBuilder("").build());, +    assertEquals(null, base.newBuilder("ftp://b"));, +    assertEquals(null, base.newBuilder("ht+tp://b"));, +    assertEquals(null, base.newBuilder("ht-tp://b"));, +    assertEquals(null, base.newBuilder("ht.tp://b"));, +  }, +, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +  @Test public void newBuilderResolve() throws Exception {, +    // Non-exhaustive tests because implementation is the same as resolve., +    HttpUrl base = HttpUrl.parse("http://host/a/b");, +    assertEquals(HttpUrl.parse("https://host2/"), base.newBuilder("https://host2").build());, +    assertEquals(HttpUrl.parse("http://host2/"), base.newBuilder("//host2").build());, +    assertEquals(HttpUrl.parse("http://host/path"), base.newBuilder("/path").build());, +    assertEquals(HttpUrl.parse("http://host/a/path"), base.newBuilder("path").build());, +    assertEquals(HttpUrl.parse("http://host/a/b?query"), base.newBuilder("?query").build());, +    assertEquals(HttpUrl.parse("http://host/a/b#fragment"), base.newBuilder("#fragment").build());, +    assertEquals(HttpUrl.parse("http://host/a/b"), base.newBuilder("").build());, +    assertEquals(null, base.newBuilder("ftp://b"));, +    assertEquals(null, base.newBuilder("ht+tp://b"));, +    assertEquals(null, base.newBuilder("ht-tp://b"));, +    assertEquals(null, base.newBuilder("ht.tp://b"));, +  }, +, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +  @Test public void newBuilderResolve() throws Exception {, +    // Non-exhaustive tests because implementation is the same as resolve., +    HttpUrl base = HttpUrl.parse("http://host/a/b");, +    assertEquals(HttpUrl.parse("https://host2/"), base.newBuilder("https://host2").build());, +    assertEquals(HttpUrl.parse("http://host2/"), base.newBuilder("//host2").build());, +    assertEquals(HttpUrl.parse("http://host/path"), base.newBuilder("/path").build());, +    assertEquals(HttpUrl.parse("http://host/a/path"), base.newBuilder("path").build());, +    assertEquals(HttpUrl.parse("http://host/a/b?query"), base.newBuilder("?query").build());, +    assertEquals(HttpUrl.parse("http://host/a/b#fragment"), base.newBuilder("#fragment").build());, +    assertEquals(HttpUrl.parse("http://host/a/b"), base.newBuilder("").build());, +    assertEquals(null, base.newBuilder("ftp://b"));, +    assertEquals(null, base.newBuilder("ht+tp://b"));, +    assertEquals(null, base.newBuilder("ht-tp://b"));, +    assertEquals(null, base.newBuilder("ht.tp://b"));, +  }, +, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +      int segmentEnd = delimiterOffset(url, i, pathEnd, "/");, +    int queryEnd = delimiterOffset(url, queryStart + 1, url.length(), "#");, +  /**, +   * Returns the URL that would be retrieved by following {@code link} from this URL, or null if, +   * the resulting URL is not well-formed., +   */, +    Builder builder = newBuilder(link);, +    return builder != null ? builder.build() : null;, +   * Returns a builder for the URL that would be retrieved by following {@code link} from this URL,, +   * or null if the resulting URL is not well-formed., +   */, +  public Builder newBuilder(String link) {, +    Builder builder = new Builder();, +    Builder.ParseResult result = builder.parse(this, link);, +    return result == Builder.ParseResult.SUCCESS ? builder : null;, +  }, +, +  /**, +                    input, pos, componentDelimiterOffset, ":");, +        int queryDelimiterOffset = delimiterOffset(input, pos, limit, "#");, +     * Increments {@code pos} until {@code input[pos]} is not ASCII whitespace. Stops at {@code, +     * limit}., +     */, +    private int skipLeadingAsciiWhitespace(String input, int pos, int limit) {, +      for (int i = pos; i < limit; i++) {, +        switch (input.charAt(i)) {, +          case '\t':, +          case '\n':, +          case '\f':, +          case '\r':, +          case ' ':, +            continue;, +          default:, +            return i;, +        }, +      }, +      return limit;, +    }, +, +    /**, +     * Decrements {@code limit} until {@code input[limit - 1]} is not ASCII whitespace. Stops at, +     * {@code pos}.]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/FormBodyTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import java.io.IOException;, +import okio.Buffer;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public final class FormBodyTest {, +  @Test public void urlEncoding() throws Exception {, +    FormBody body = new FormBody.Builder(), +        .add("a+=& b", "c+=& d"), +        .add("space, the", "final frontier"), +        .add("%25", "%25"), +        .build();, +, +    assertEquals(3, body.size());, +, +    assertEquals("a%2B%3D%26%20b", body.encodedName(0));, +    assertEquals("space%2C%20the", body.encodedName(1));, +    assertEquals("%2525", body.encodedName(2));, +, +    assertEquals("a+=& b", body.name(0));, +    assertEquals("space, the", body.name(1));, +    assertEquals("%25", body.name(2));, +, +    assertEquals("c%2B%3D%26%20d", body.encodedValue(0));, +    assertEquals("final%20frontier", body.encodedValue(1));, +    assertEquals("%2525", body.encodedValue(2));, +, +    assertEquals("c+=& d", body.value(0));, +    assertEquals("final frontier", body.value(1));, +    assertEquals("%25", body.value(2));, +, +    assertEquals("application/x-www-form-urlencoded", body.contentType().toString());, +, +    String expected = "a%2B%3D%26%20b=c%2B%3D%26%20d&space%2C%20the=final%20frontier&%2525=%2525";, +    assertEquals(expected.length(), body.contentLength());, +, +    Buffer out = new Buffer();, +    body.writeTo(out);, +    assertEquals(expected, out.readUtf8());, +  }, +, +  @Test public void addEncoded() throws Exception {, +    FormBody body = new FormBody.Builder(), +        .addEncoded("a+=& b", "c+=& d"), +        .addEncoded("e+=& f", "g+=& h"), +        .addEncoded("%25", "%25"), +        .build();, +, +    String expected = "a+%3D%26%20b=c+%3D%26%20d&e+%3D%26%20f=g+%3D%26%20h&%25=%25";, +    Buffer out = new Buffer();, +    body.writeTo(out);, +    assertEquals(expected, out.readUtf8());, +  }, +, +  @Test public void encodedPair() throws Exception {, +    FormBody body = new FormBody.Builder(), +        .add("sim", "ple"), +        .build();, +, +    String expected = "sim=ple";, +    assertEquals(expected.length(), body.contentLength());, +, +    Buffer buffer = new Buffer();, +    body.writeTo(buffer);, +    assertEquals(expected, buffer.readUtf8());, +  }, +, +  @Test public void encodeMultiplePairs() throws Exception {, +    FormBody body = new FormBody.Builder(), +        .add("sim", "ple"), +        .add("hey", "there"), +        .add("help", "me"), +        .build();, +, +    String expected = "sim=ple&hey=there&help=me";, +    assertEquals(expected.length(), body.contentLength());, +, +    Buffer buffer = new Buffer();, +    body.writeTo(buffer);, +    assertEquals(expected, buffer.readUtf8());, +  }]
[+++ b/okhttp-sse/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <version>3.0.2</version>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.sse</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ b/okhttp-sse/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <version>3.0.2</version>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.sse</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ /dev/null, +++ b/okhttp-sse/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <version>3.0.2</version>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.sse</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ /dev/null, +++ /dev/null, +++ b/okhttp-sse/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <version>3.0.2</version>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.sse</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-sse/pom.xml, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-jar-plugin</artifactId>, +        <version>3.0.2</version>, +        <configuration>, +          <archive>, +            <manifestEntries>, +              <Automatic-Module-Name>okhttp3.sse</Automatic-Module-Name>, +            </manifestEntries>, +          </archive>, +        </configuration>, +      </plugin>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +import okhttp3.MediaType;, +import okhttp3.sse.EventSource;, +import okhttp3.sse.EventSourceListener;, +    try {, +      if (!response.isSuccessful()) {, +        listener.onFailure(this, null, response);, +        return;, +      }, +, +      MediaType contentType = response.body().contentType();, +      if (!isEventStream(contentType)) {, +        listener.onFailure(this,, +            new IllegalStateException("Invalid content-type: " + contentType), response);, +        return;, +      }, +, +      response = response.newBuilder().body(Util.EMPTY_RESPONSE).build();, +    } finally {, +      response.close();, +    }, +  }, +, +  private static boolean isEventStream(@Nullable MediaType contentType) {, +    return contentType != null && contentType.type().equals("text") && contentType.subtype(), +        .equals("event-stream");]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.BINARY;, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.TEXT;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.BINARY;, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.TEXT;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +, +      @Override public Call newCall(OkHttpClient client, Request request) {, +        return new Call(client, request);, +      }, +, +      @Override public Response callGetResponse(Call call, boolean forWebSocket), +          throws IOException {, +        return call.getResponse(forWebSocket);, +      }, +, +      @Override public void callEngineReleaseConnection(Call call) throws IOException {, +        call.engine.releaseConnection();, +      }, +, +      @Override public Connection callEngineGetConnection(Call call) {, +        return call.engine.getConnection();, +      }, +, +      @Override public boolean connectionClearOwner(Connection connection) {, +        return connection.clearOwner();, +      }, +, +      @Override public void connectionSetOwner(Connection connection, Object owner) {, +        connection.setOwner(owner);, +      }, +, +      @Override public void connectionCloseIfOwnedBy(Connection connection, Object owner), +          throws IOException {, +        connection.closeIfOwnedBy(owner);, +      }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.BINARY;, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.TEXT;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +, +      @Override public Call newCall(OkHttpClient client, Request request) {, +        return new Call(client, request);, +      }, +, +      @Override public Response callGetResponse(Call call, boolean forWebSocket), +          throws IOException {, +        return call.getResponse(forWebSocket);, +      }, +, +      @Override public void callEngineReleaseConnection(Call call) throws IOException {, +        call.engine.releaseConnection();, +      }, +, +      @Override public Connection callEngineGetConnection(Call call) {, +        return call.engine.getConnection();, +      }, +, +      @Override public boolean connectionClearOwner(Connection connection) {, +        return connection.clearOwner();, +      }, +, +      @Override public void connectionSetOwner(Connection connection, Object owner) {, +        connection.setOwner(owner);, +      }, +, +      @Override public void connectionCloseIfOwnedBy(Connection connection, Object owner), +          throws IOException {, +        connection.closeIfOwnedBy(owner);, +      }, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.BINARY;, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.TEXT;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +, +      @Override public Call newCall(OkHttpClient client, Request request) {]
[+++ b/okhttp/pom.xml, +, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-assembly-plugin</artifactId>, +        <configuration>, +          <descriptorRefs>, +            <descriptorRef>jar-with-dependencies</descriptorRef>, +          </descriptorRefs>, +        </configuration>, +        <executions>, +          <execution>, +            <phase>package</phase>, +            <goals>, +              <goal>single</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>]
[+++ b/mockwebserver/pom.xml, +    <version>1.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp/pom.xml, +    <version>1.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp/pom.xml, +    <version>1.2.0</version>, +++ b/pom.xml, +  <version>1.2.0</version>, +    <tag>parent-1.2.0</tag>, +++ b/mockwebserver/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp/pom.xml, +    <version>1.2.0</version>, +++ b/pom.xml, +  <version>1.2.0</version>, +    <tag>parent-1.2.0</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp/pom.xml, +    <version>1.2.0</version>, +++ b/pom.xml, +  <version>1.2.0</version>, +    <tag>parent-1.2.0</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2.0</version>, +++ b/samples/pom.xml, +    <version>1.2.0</version>, +++ b/mockwebserver/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp-apache/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp-protocols/pom.xml, +    <version>1.2.0</version>, +++ b/okhttp/pom.xml, +    <version>1.2.0</version>, +++ b/pom.xml, +  <version>1.2.0</version>, +    <tag>parent-1.2.0</tag>, +++ b/samples/guide/pom.xml, +    <version>1.2.0</version>, +++ b/samples/pom.xml, +    <version>1.2.0</version>, +++ b/samples/simple-client/pom.xml, +    <version>1.2.0</version>]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      // 17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0',, +  private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, +              transport = Transport.HTTP_20_DRAFT_06;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, +            builder.http20Draft06();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      // 17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0',, +  private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, +              transport = Transport.HTTP_20_DRAFT_06;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, +            builder.http20Draft06();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java, + * Read and write HPACK v03., + * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-03, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      // 17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0',, +  private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, +              transport = Transport.HTTP_20_DRAFT_06;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, +            builder.http20Draft06();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java, + * Read and write HPACK v03., + * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-03, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      // 17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0',, +  private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, +              transport = Transport.HTTP_20_DRAFT_06;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, +            builder.http20Draft06();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java, + * Read and write HPACK v03., + * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-03, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft06.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.spdy;, +, +import com.squareup.okhttp.internal.Util;, +import java.io.ByteArrayOutputStream;, +import java.io.DataInputStream;, +import java.io.DataOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.io.UnsupportedEncodingException;, +import java.util.Arrays;, +import java.util.List;, +, +/**, + * Read and write http/2 v06 frames., + * http://tools.ietf.org/html/draft-ietf-httpbis-http2-06, + */, +final class Http20Draft06 implements Variant {, +  private static final byte[] CONNECTION_HEADER;, +  static {, +    try {, +      CONNECTION_HEADER = "PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n".getBytes("UTF-8");, +    } catch (UnsupportedEncodingException e) {, +      throw new AssertionError();, +    }, +  }, +, +  static final int TYPE_DATA = 0x0;, +  static final int TYPE_HEADERS = 0x1;, +  static final int TYPE_PRIORITY = 0x2;, +  static final int TYPE_RST_STREAM = 0x3;, +  static final int TYPE_SETTINGS = 0x4;, +  static final int TYPE_PUSH_PROMISE = 0x5;, +  static final int TYPE_PING = 0x6;, +  static final int TYPE_GOAWAY = 0x7;, +  static final int TYPE_WINDOW_UPDATE = 0x9;, +  static final int TYPE_CONTINUATION = 0xa;]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +import okio.BufferedSource;, +/** Test caching with {@link OkUrlFactory}. */, +  private final OkHttpClient client = new OkHttpClient();, +    client.setCache(cache);, +    MockResponse mockResponse = new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +      mockResponse.addHeader("Proxy-Authenticate: Basic realm=\"protected area\"");, +      mockResponse.addHeader("WWW-Authenticate: Basic realm=\"protected area\"");, +    server.enqueue(mockResponse);, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +    Response response = client.newCall(request).execute();, +    assertEquals(responseCode, response.code());, +    // Exhaust the content stream., +    response.body().string();, +    Response cached = cache.get(request);, +   * Skipping bytes in the input stream caused ResponseCache corruption., +    MockResponse mockResponse = new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +    transferKind.setBody(mockResponse, "I love puppies but hate spiders", 1);, +    server.enqueue(mockResponse);, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    Response response1 = client.newCall(request).execute();, +, +    BufferedSource in1 = response1.body().source();, +    assertEquals("I love ", in1.readUtf8("I love ".length()));, +    in1.skip("puppies but hate ".length());, +    assertEquals("spiders", in1.readUtf8("spiders".length()));, +    assertTrue(in1.exhausted());, +    in1.close();, +    Response response2 = client.newCall(request).execute();, +    BufferedSource in2 = response2.body().source();, +        in2.readUtf8("I love puppies but hate spiders".length()));, +    assertEquals(200, response2.code());, +    assertEquals("Fantastic", response2.message());, +    assertTrue(in2.exhausted());, +    in2.close();, +    server.enqueue(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +    client.setSslSocketFactory(sslContext.getSocketFactory());, +    client.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    Response response1 = client.newCall(request).execute();, +    BufferedSource in = response1.body().source();, +    assertEquals("ABC", in.readUtf8());, +    String suite = response1.handshake().cipherSuite();, +    List<Certificate> localCerts = response1.handshake().localCertificates();, +    List<Certificate> serverCerts = response1.handshake().peerCertificates();, +    Principal peerPrincipal = response1.handshake().peerPrincipal();, +    Principal localPrincipal = response1.handshake().localPrincipal();, +    Response response2 = client.newCall(request).execute(); // Cached!, +    assertEquals("ABC", response2.body().source().readUtf8());, +    assertEquals(suite, response2.handshake().cipherSuite());, +    assertEquals(localCerts, response2.handshake().localCertificates());, +    assertEquals(serverCerts, response2.handshake().peerCertificates());, +    assertEquals(peerPrincipal, response2.handshake().peerPrincipal());, +    assertEquals(localPrincipal, response2.handshake().localPrincipal());, +    server.enqueue(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    Response response1 = client.newCall(request).execute();, +    assertEquals("ABC", response1.body().string());, +    Response response2 = client.newCall(request).execute(); // Cached!, +    assertEquals("ABC", response2.body().string());, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_MOVED_PERM), +    server.enqueue(new MockResponse(), +        .setBody("DEF"));, +    Request request1 = new Request.Builder().url(server.getUrl("/foo")).build();, +    Response response1 = client.newCall(request1).execute();, +    assertEquals("ABC", response1.body().string());, +    RecordedRequest recordedRequest1 = server.takeRequest();, +    assertEquals("GET /foo HTTP/1.1", recordedRequest1.getRequestLine());, +    assertEquals(0, recordedRequest1.getSequenceNumber());, +    Request request2 = new Request.Builder().url(server.getUrl("/bar")).build();, +    Response response2 = client.newCall(request2).execute();, +    assertEquals("ABC", response2.body().string());, +    RecordedRequest recordedRequest2 = server.takeRequest();, +    assertEquals("GET /bar HTTP/1.1", recordedRequest2.getRequestLine());, +    assertEquals(1, recordedRequest2.getSequenceNumber());, +    Request request3 = new Request.Builder().url(server.getUrl("/baz")).build();, +    Response response3 = client.newCall(request3).execute();, +    assertEquals("DEF", response3.body().string());, +    RecordedRequest recordedRequest3 = server.takeRequest();, +    assertEquals("GET /baz HTTP/1.1", recordedRequest3.getRequestLine());, +    assertEquals(2, recordedRequest3.getSequenceNumber());, +    server.enqueue(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +    server.enqueue(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +    client.setSslSocketFactory(sslContext.getSocketFactory());, +    client.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);, +    Response response1 = get(server.getUrl("/"));, +    assertEquals("ABC", response1.body().string());, +    assertNotNull(response1.handshake().cipherSuite());]
[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelTagImmediatelyAfterEnqueue() throws Exception {, +        .tag("request"), +    client.cancel("request");, +        client.cancel("request");, +    Request request = new Request.Builder().url(server.url("/a")).tag("request").build();, +      client.newCall(request).execute();, +        client.cancel("request B");, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    client.newCall(requestA).enqueue(callback);, +    Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();, +    client.newCall(requestB).enqueue(callback);, +, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    Request request = new Request.Builder().url(server.url("/a")).tag("request A").build();, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelTagImmediatelyAfterEnqueue() throws Exception {, +        .tag("request"), +    client.cancel("request");, +        client.cancel("request");, +    Request request = new Request.Builder().url(server.url("/a")).tag("request").build();, +      client.newCall(request).execute();, +        client.cancel("request B");, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    client.newCall(requestA).enqueue(callback);, +    Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();, +    client.newCall(requestB).enqueue(callback);, +, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    Request request = new Request.Builder().url(server.url("/a")).tag("request A").build();, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +    client.newCall(newRequest("http://a/1", "tag1")).enqueue(callback);, +    client.newCall(newRequest("http://a/2")).enqueue(callback);, +    dispatcher.cancel("tag1");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelTagImmediatelyAfterEnqueue() throws Exception {, +        .tag("request"), +    client.cancel("request");, +        client.cancel("request");, +    Request request = new Request.Builder().url(server.url("/a")).tag("request").build();, +      client.newCall(request).execute();, +        client.cancel("request B");, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    client.newCall(requestA).enqueue(callback);, +    Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();, +    client.newCall(requestB).enqueue(callback);, +, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    Request request = new Request.Builder().url(server.url("/a")).tag("request A").build();, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +    client.newCall(newRequest("http://a/1", "tag1")).enqueue(callback);, +    client.newCall(newRequest("http://a/2")).enqueue(callback);, +    dispatcher.cancel("tag1");, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import okio.Buffer;, +import okio.BufferedSource;, +import okio.Okio;, +import okio.Source;, +import okio.Timeout;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public final class ResponseTest {, +  @Test public void peekShorterThanResponse() throws Exception {, +    Response response = newResponse(responseBody("abcdef"));, +    ResponseBody peekedBody = response.peekBody(3);, +    assertEquals("abc", peekedBody.string());, +    assertEquals("abcdef", response.body().string());, +  }, +, +  @Test public void peekLongerThanResponse() throws Exception {, +    Response response = newResponse(responseBody("abc"));, +    ResponseBody peekedBody = response.peekBody(6);, +    assertEquals("abc", peekedBody.string());, +    assertEquals("abc", response.body().string());, +  }, +, +  @Test public void peekAfterReadingResponse() throws Exception {, +    Response response = newResponse(responseBody("abc"));, +    assertEquals("abc", response.body().string());]
[+++ b/CHANGELOG.md, +## Version 3.14.0, +, +_RELEASE TBD_, +, + *  **This release deletes the long-deprecated `OkUrlFactory` and `OkApacheClient` APIs.** These, +    facades hide OkHttp's implementation behind another client's API. If you still need this please, +    copy and paste [ObsoleteUrlFactory.java][obsolete_url_factory] or, +    [ObsoleteApacheClient.java][obsolete_apache_client] into your project., +, + *  **OkHttp now supports duplex calls over HTTP/2.** With normal HTTP calls the request must finish, +    before the response starts. With duplex, request and response bodies are transmitted, +    simultaneously. This can be used to implement interactive conversations within a single HTTP, +    call., +, +    Create duplex calls by overriding the new `RequestBody.isDuplex()` method to return true., +    This simple option dramatically changes the behavior of the request body and of the entire, +    call., +, +    The `RequestBody.writeTo()` method may now retain a reference to the provided sink and, +    hand it off to another thread to write to it after `writeTo` returns., +, +    The `EventListener` may now see requests and responses interleaved in ways not previously, +    permitted. For example, a listener may receive `responseHeadersStart()` followed by, +    `requestBodyEnd()`, both on the same call. Such events may be triggered by different threads, +    even for a single call., +, +    Interceptors that rewrite or replace the request body may now inadvertently interfere with, +    duplex request bodies. Such interceptors should check `RequestBody.isDuplex()` and avoid, +    accessing the request body when it is., +, +    Duplex calls require HTTP/2. If HTTP/1 is established instead the duplex call will fail. The, +    most common use of duplex calls is [gRPC][grpc_http2]., +, + *  New: Prevent OkHttp from retransmitting a request body by overriding `RequestBody.isOneShot()`., +    This is most useful when writing the request body is destructive., +, + *  New: We've added `requestFailed()` and `responseFailed()` methods to `EventListener`. These, +    are called instead of `requestBodyEnd()` and `responseBodyEnd()` in some failure situations., +    They may also be fired in cases where no event was published previously. In this release we did, +    an internal rewrite of our event code to fix problems where events were lost or unbalanced., +, + *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`, +    callback., +, + *  Fix: Apply call timeouts when connecting duplex calls, web sockets, and server-sent events., +    Once the streams are established no further timeout is enforced., +, + *  Fix: Retain the `Route` when a connection is reused on a redirect or other follow-up. This was, +    causing some `Authenticator` calls to see a null route when non-null was expected., +, + *  Fix: Use the correct key size in the name of `TLS_AES_128_CCM_8_SHA256` which is a TLS 1.3, +    cipher suite. We accidentally specified a key size of 256, preventing that cipher suite from, +    being selected for any TLS handshakes. We didn't notice because this cipher suite isn't, +    supported on Android, Java, or Conscrypt., +, +    We removed this cipher suite and `TLS_AES_128_CCM_SHA256` from the restricted, modern, and, +    compatible sets of cipher suites. These two cipher suites aren't enabled by default in either, +    Firefox or Chrome., +, +    See our [TLS Configuration History][tls_configuration_history] tracker for a log of all changes, +    to OkHttp's default TLS options., +, + *  New: Upgrade to Conscrypt 2.0.0. OkHttp works with other versions of Conscrypt but this is the, +    version we're testing against., +, +    ```kotlin, +    implementation("org.conscrypt:conscrypt-openjdk-uber:2.0.0"), +    ```, +, + *  New: Update the embedded public suffixes list., +, +, + [obsolete_apache_client]: https://gist.github.com/swankjesse/09721f72039e3a46cf50f94323deb82d, + [obsolete_url_factory]: https://gist.github.com/swankjesse/dd91c0a8854e1559b00f5fc9c7bfae70, + [tls_configuration_history]: https://github.com/square/okhttp/wiki/TLS-Configuration-History, + [grpc_http2]: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md, +++ b/CHANGELOG.md, +## Version 3.14.0, +, +_RELEASE TBD_, +, + *  **This release deletes the long-deprecated `OkUrlFactory` and `OkApacheClient` APIs.** These, +    facades hide OkHttp's implementation behind another client's API. If you still need this please, +    copy and paste [ObsoleteUrlFactory.java][obsolete_url_factory] or, +    [ObsoleteApacheClient.java][obsolete_apache_client] into your project., +, + *  **OkHttp now supports duplex calls over HTTP/2.** With normal HTTP calls the request must finish, +    before the response starts. With duplex, request and response bodies are transmitted, +    simultaneously. This can be used to implement interactive conversations within a single HTTP, +    call., +, +    Create duplex calls by overriding the new `RequestBody.isDuplex()` method to return true., +    This simple option dramatically changes the behavior of the request body and of the entire, +    call., +, +    The `RequestBody.writeTo()` method may now retain a reference to the provided sink and, +    hand it off to another thread to write to it after `writeTo` returns., +, +    The `EventListener` may now see requests and responses interleaved in ways not previously]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-urlconnection/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ /dev/null, +++ b/okhttp-urlconnection/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  /** Lazily created (with synthetic headers) on first call to getHeaders(). */, +  private Headers responseHeaders;, +  private Headers getHeaders() throws IOException {, +    if (responseHeaders == null) {, +      Response response = getResponse().getResponse();, +      Headers headers = response.headers();, +, +      responseHeaders = headers.newBuilder(), +          .add(Platform.get().getPrefix() + "-Response-Source", responseSourceHeader(response)), +          .build();, +    }, +    return responseHeaders;, +  }, +, +  private static String responseSourceHeader(Response response) {, +    if (response.networkResponse() == null) {, +      if (response.cacheResponse() == null) {, +        return "NONE";, +      }, +      return "CACHE " + response.code();, +    }, +    if (response.cacheResponse() == null) {, +      return "NETWORK " + response.code();, +    }, +    return "CONDITIONAL_CACHE " + response.networkResponse().code();, +  }, +, +      return getHeaders().value(position);, +          ? StatusLine.get(getResponse().getResponse()).toString(), +          : getHeaders().get(fieldName);, +      return getHeaders().name(position);, +      return OkHeaders.toMultimap(getHeaders(),, +          StatusLine.get(getResponse().getResponse()).toString());, +  @Override public void setFixedLengthStreamingMode(long contentLength) {, +++ /dev/null, +++ b/okhttp-urlconnection/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  /** Lazily created (with synthetic headers) on first call to getHeaders(). */, +  private Headers responseHeaders;, +  private Headers getHeaders() throws IOException {, +    if (responseHeaders == null) {, +      Response response = getResponse().getResponse();, +      Headers headers = response.headers();, +, +      responseHeaders = headers.newBuilder(), +          .add(Platform.get().getPrefix() + "-Response-Source", responseSourceHeader(response)), +          .build();, +    }, +    return responseHeaders;, +  }, +, +  private static String responseSourceHeader(Response response) {, +    if (response.networkResponse() == null) {, +      if (response.cacheResponse() == null) {, +        return "NONE";, +      }, +      return "CACHE " + response.code();, +    }, +    if (response.cacheResponse() == null) {, +      return "NETWORK " + response.code();, +    }, +    return "CONDITIONAL_CACHE " + response.networkResponse().code();, +  }, +, +      return getHeaders().value(position);, +          ? StatusLine.get(getResponse().getResponse()).toString(), +          : getHeaders().get(fieldName);, +      return getHeaders().name(position);, +      return OkHeaders.toMultimap(getHeaders(),, +          StatusLine.get(getResponse().getResponse()).toString());, +  @Override public void setFixedLengthStreamingMode(long contentLength) {, +++ b/okhttp-urlconnection/src/test/java/com/squareup/okhttp/OkUrlFactoryTest.java, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;]
[+++ b/benchmarks/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-logging-interceptor/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-testing-support/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-tests/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-urlconnection/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/benchmarks/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okcurl/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-android-support/pom.xml, +    <version>3.5.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>3.5.0-SNAPSHOT</version>]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/**, + * What should be done with the incoming socket., + *, + * <p>Be careful when using values like {@link #DISCONNECT_AT_END}, {@link #SHUTDOWN_INPUT_AT_END}, + * and {@link #SHUTDOWN_OUTPUT_AT_END} that close a socket after a response, and where there are, + * follow-up requests. The client is unblocked and free to continue as soon as it has received the, + * entire response body. If and when the client makes a subsequent request using a pooled socket the, + * server may not have had time to close the socket. The socket will be closed at an indeterminate, + * point before or during the second request. It may be closed after client has started sending the, + * request body. If a request body is not retryable then the client may fail the request, making, + * client behavior non-deterministic. Add delays in the client to improve the chances that the, + * server has closed the socket before follow up requests are made., + */, +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/**, + * What should be done with the incoming socket., + *, + * <p>Be careful when using values like {@link #DISCONNECT_AT_END}, {@link #SHUTDOWN_INPUT_AT_END}, + * and {@link #SHUTDOWN_OUTPUT_AT_END} that close a socket after a response, and where there are, + * follow-up requests. The client is unblocked and free to continue as soon as it has received the, + * entire response body. If and when the client makes a subsequent request using a pooled socket the, + * server may not have had time to close the socket. The socket will be closed at an indeterminate, + * point before or during the second request. It may be closed after client has started sending the, + * request body. If a request body is not retryable then the client may fail the request, making, + * client behavior non-deterministic. Add delays in the client to improve the chances that the, + * server has closed the socket before follow up requests are made., + */, +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +import com.squareup.okhttp.CipherSuite;, +      String cipherSuiteString = httpsUrlConnection.getCipherSuite();, +      CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);, +      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, +, +      String cipherSuiteString = javaSecureCacheResponse.getCipherSuite();, +      CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);, +      Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +          return handshake != null ? handshake.cipherSuite().javaName() : null;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/**, + * What should be done with the incoming socket., + *, + * <p>Be careful when using values like {@link #DISCONNECT_AT_END}, {@link #SHUTDOWN_INPUT_AT_END}, + * and {@link #SHUTDOWN_OUTPUT_AT_END} that close a socket after a response, and where there are, + * follow-up requests. The client is unblocked and free to continue as soon as it has received the, + * entire response body. If and when the client makes a subsequent request using a pooled socket the, + * server may not have had time to close the socket. The socket will be closed at an indeterminate, + * point before or during the second request. It may be closed after client has started sending the, + * request body. If a request body is not retryable then the client may fail the request, making, + * client behavior non-deterministic. Add delays in the client to improve the chances that the, + * server has closed the socket before follow up requests are made., + */, +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +import com.squareup.okhttp.CipherSuite;, +      String cipherSuiteString = httpsUrlConnection.getCipherSuite();, +      CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);, +      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, +, +      String cipherSuiteString = javaSecureCacheResponse.getCipherSuite();, +      CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);, +      Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +          return handshake != null ? handshake.cipherSuite().javaName() : null;, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java, +import com.squareup.okhttp.CipherSuite;, +        return "SSL_RSA_WITH_NULL_MD5";, +    assertNotNullAndEquals(CipherSuite.TLS_RSA_WITH_NULL_MD5, handshake.cipherSuite());, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +        Arrays.<Certificate>asList(SERVER_CERT), Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals("SSL_RSA_WITH_NULL_MD5", httpsUrlConnection.getCipherSuite());, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +        Arrays.<Certificate>asList(SERVER_CERT), Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals(handshake.cipherSuite().javaName(), javaCacheResponse.getCipherSuite());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        // See warnings associated with these socket policies in SocketPolicy.]
[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +  /** Response headers start, then the entire request body, then response headers end. */, +  @Test public void expectContinueStartsResponseHeadersEarly() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.EXPECT_CONTINUE));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.get("text/plain"), "abc")), +        .build();, +, +    Call call = client.newCall(request);, +    call.execute();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, +        "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "RequestBodyStart", "RequestBodyEnd", "ResponseHeadersEnd",, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +  /** Response headers start, then the entire request body, then response headers end. */, +  @Test public void expectContinueStartsResponseHeadersEarly() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.EXPECT_CONTINUE));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.get("text/plain"), "abc")), +        .build();, +, +    Call call = client.newCall(request);, +    call.execute();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, +        "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "RequestBodyStart", "RequestBodyEnd", "ResponseHeadersEnd",, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +  public void responseHeadersStart() {, +  }, +, +  public @Nullable Response.Builder readResponseHeaders(boolean expectContinue) throws IOException {, +    try {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +  /** Response headers start, then the entire request body, then response headers end. */, +  @Test public void expectContinueStartsResponseHeadersEarly() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.EXPECT_CONTINUE));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.get("text/plain"), "abc")), +        .build();, +, +    Call call = client.newCall(request);, +    call.execute();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, +        "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "RequestBodyStart", "RequestBodyEnd", "ResponseHeadersEnd",, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +  public void responseHeadersStart() {, +  }, +, +  public @Nullable Response.Builder readResponseHeaders(boolean expectContinue) throws IOException {, +    try {, +++ b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java, +    boolean responseHeadersStarted = false;, +        responseHeadersStarted = true;, +        exchange.responseHeadersStart();, +    if (!responseHeadersStarted) {, +      exchange.responseHeadersStart();, +    }, +]
[+++ b/pom.xml, +    <groupId>com.squareup.okhttp</groupId>, +                <groupId>org.apache.maven.plugins</groupId>, +                <artifactId>maven-source-plugin</artifactId>, +                <executions>, +                    <execution>, +                        <id>attach-sources</id>, +                        <phase>verify</phase>, +                        <goals><goal>jar-no-fork</goal></goals>, +                    </execution>, +                </executions>, +            </plugin>, +            <plugin>, +                <groupId>org.apache.maven.plugins</groupId>, +                <artifactId>maven-javadoc-plugin</artifactId>, +                <executions>, +                    <execution>, +                        <id>attach-javadocs</id>, +                        <goals><goal>jar</goal></goals>, +                    </execution>, +                </executions>, +            </plugin>, +            <plugin>]
[+++ b/okhttp-sse/pom.xml, +          <excludePackageNames>okhttp3.internal:okhttp3.internal.*</excludePackageNames>, +++ b/okhttp-sse/pom.xml, +          <excludePackageNames>okhttp3.internal:okhttp3.internal.*</excludePackageNames>, +++ b/okhttp-tls/pom.xml, +          <excludePackageNames>okhttp3.tls.internal:okhttp3.tls.internal.*</excludePackageNames>]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        duplexResponseBody.onRequest(request, source, sink);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        duplexResponseBody.onRequest(request, source, sink);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/DuplexResponseBody.java, +import okio.BufferedSink;, +  void onRequest(, +      BufferedSink responseBodySink) throws IOException;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        duplexResponseBody.onRequest(request, source, sink);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/DuplexResponseBody.java, +import okio.BufferedSink;, +  void onRequest(, +      BufferedSink responseBodySink) throws IOException;, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReference;, +import okhttp3.internal.duplex.MwsDuplexAccess;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, +import okhttp3.mockwebserver.internal.duplex.DuplexResponseBody;, +import okhttp3.tls.HandshakeCertificates;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TestRule;, +import org.junit.rules.Timeout;, +, +import static junit.framework.TestCase.assertTrue;, +import static okhttp3.TestUtil.defaultClient;, +import static okhttp3.tls.internal.TlsUtil.localhost;, +import static org.junit.Assert.assertEquals;, +, +public final class DuplexTest {, +  @Rule public final TestRule timeout = new Timeout(30_000, TimeUnit.MILLISECONDS);, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  private HandshakeCertificates handshakeCertificates = localhost();, +  private OkHttpClient client = defaultClient();, +, +  @Test public void clientReadsHeadersDataTrailers() throws IOException {, +    final LatchParty latchParty = new LatchParty();, +    MockResponse mockResponse = new MockResponse(), +        .clearHeaders(), +        .addHeader("h1", "v1"), +        .addHeader("h2", "v2"), +        .setTrailers(Headers.of("trailers", "boom"));, +    MwsDuplexAccess.instance.setBody(mockResponse, new DuplexResponseBody() {, +      @Override public void onRequest(RecordedRequest request,, +          BufferedSource requestBodySource, BufferedSink responseBodySink) throws IOException {, +, +        latchParty.step(1);, +        responseBodySink.writeUtf8("ok");, +        responseBodySink.flush();, +, +        latchParty.step(3);, +        responseBodySink.writeUtf8("taco");, +        responseBodySink.flush();, +, +        latchParty.step(5);, +        responseBodySink.close();, +      }, +    });, +    server.enqueue(mockResponse);, +    enableProtocol(Protocol.HTTP_2);, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .duplex("POST"), +        .build());, +, +    Response response = call.execute();, +, +    assertEquals(Headers.of("h1", "v1", "h2", "v2"), response.headers());, +, +    latchParty.step(2);, +    BufferedSource source = response.body().source();, +    assertEquals("ok", source.readUtf8(2));, +]
[+++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/samples/guide/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/samples/guide/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/samples/guide/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/mockwebserver/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-apache/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp-protocols/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/okhttp/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/pom.xml, +  <version>2.0.0-SNAPSHOT</version>, +++ b/samples/guide/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/samples/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/samples/simple-client/pom.xml, +    <version>2.0.0-SNAPSHOT</version>, +++ b/samples/static-server/pom.xml, +    <version>2.0.0-SNAPSHOT</version>]
[+++ b/mockwebserver/pom.xml]
[+++ b/pom.xml, +    <version>20120723</version>, +            <plugin>, +                <!--, +                  OkHttp requires with javac >= 1.7 for syncFlush on DeflaterOutputStream., +                  Its language version must be <= 1.6 for dx., +, +                  Running this code on Java 6 or earlier will fail at runtime due to the missing, +                  syncFlush API., +, +                  Dalvik's core library includes syncFlush, but with an @hide tag so that it doesn't, +                  show up in the documentation or the android.jar stubs. This code works fine on, +                  Dalvik., +                -->, +                <groupId>org.apache.maven.plugins</groupId>, +                <artifactId>maven-enforcer-plugin</artifactId>, +                <executions>, +                    <execution>, +                        <id>enforce-java</id>, +                        <goals>, +                            <goal>enforce</goal>, +                        </goals>, +                        <configuration>, +                            <rules>, +                                <requireJavaVersion>, +                                    <version>[1.7.0,)</version>, +                                </requireJavaVersion>, +                            </rules>, +                        </configuration>, +                    </execution>, +                </executions>, +            </plugin>]
[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffer;, +      OkBuffer body = new OkBuffer();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffer;, +      OkBuffer body = new OkBuffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.OkBuffer;, +      OkBuffer buffer = new OkBuffer();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffer;, +      OkBuffer body = new OkBuffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.OkBuffer;, +      OkBuffer buffer = new OkBuffer();, +++ b/okhttp-tests/pom.xml, +      <version>${project.version}</version>, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffer;, +      OkBuffer body = new OkBuffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.OkBuffer;, +      OkBuffer buffer = new OkBuffer();, +++ b/okhttp-tests/pom.xml, +      <version>${project.version}</version>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +import okio.OkBuffer;, +    OkBuffer buffer = new OkBuffer();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffer;, +      OkBuffer body = new OkBuffer();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.OkBuffer;, +      OkBuffer buffer = new OkBuffer();, +++ b/okhttp-tests/pom.xml, +      <version>${project.version}</version>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +import okio.OkBuffer;, +    OkBuffer buffer = new OkBuffer();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft09Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.http;, +, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.PushPromise;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import java.util.Arrays;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class HttpOverHttp20Draft09Test extends HttpOverSpdyTest {, +, +  public HttpOverHttp20Draft09Test() {, +    super(Protocol.HTTP_2);, +    this.hostHeader = ":authority";, +  }, +, +  @Test public void serverSendsPushPromise_GET() throws Exception {, +    MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet"), +        .withPush(new PushPromise("GET", "/foo/bar", Arrays.asList("foo: bar"),, +            new MockResponse().setBody("bar").setStatus("HTTP/1.1 200 Sweet")));, +    server.enqueue(response);, +    server.play();, +, +    connection = client.open(server.getUrl("/foo"));, +    assertContent("ABCDE", connection, Integer.MAX_VALUE);, +    assertEquals(200, connection.getResponseCode());, +    assertEquals("Sweet", connection.getResponseMessage());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /foo HTTP/1.1", request.getRequestLine());, +    assertContains(request.getHeaders(), ":scheme: https");, +    assertContains(request.getHeaders(), hostHeader + ": " + hostName + ":" + server.getPort());, +, +    RecordedRequest pushedRequest = server.takeRequest();, +    assertEquals("GET /foo/bar HTTP/1.1", pushedRequest.getRequestLine());, +    assertEquals(Arrays.asList("foo: bar"), pushedRequest.getHeaders());, +  }, +, +  @Test public void serverSendsPushPromise_HEAD() throws Exception {, +    MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet"), +        .withPush(new PushPromise("HEAD", "/foo/bar", Arrays.asList("foo: bar"),, +            new MockResponse().setStatus("HTTP/1.1 204 Sweet")));, +    server.enqueue(response);]
[+++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/.gitignore, +.classpath, +.project, +.settings, +eclipsebin, +, +bin, +gen, +build, +out, +lib, +, +target, +pom.xml.*, +release.properties, +, +.idea, +*.iml, +classes, +, +obj, +, +.DS_Store, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/CONTRIBUTING.md, +Contributing, +============, +, +If you would like to contribute code to OkHttp you can do so through GitHub by, +forking the repository and sending a pull request., +, +When submitting code, please make every effort to follow existing conventions, +and style in order to keep the code as readable as possible. Please also make, +sure your code compiles by running `mvn clean verify`. Checkstyle failures, +during compilation indicate errors in your style and can be viewed in the, +`checkstyle-result.xml` file., +, +Before your code can be accepted into the project you must also sign the, +[Individual Contributor License Agreement (CLA)][1].]
[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    Headers okHeaders = extractOkResponseHeaders(httpUrlConnection);, +    Headers okHeaders = extractOkHeaders(javaResponse);, +      Headers headers = extractOkHeaders(requestHeaders);, +    final Headers headers = response.headers();, +  private static Headers extractOkHeaders(CacheResponse javaResponse) throws IOException {, +    return extractOkHeaders(javaResponseHeaders);, +  private static Headers extractOkResponseHeaders(HttpURLConnection httpUrlConnection) {, +    return extractOkHeaders(javaResponseHeaders);, +   * entry (one with a {@code null} key) is discarded., +  static Headers extractOkHeaders(Map<String, List<String>> javaHeaders) {, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    Headers okHeaders = extractOkResponseHeaders(httpUrlConnection);, +    Headers okHeaders = extractOkHeaders(javaResponse);, +      Headers headers = extractOkHeaders(requestHeaders);, +    final Headers headers = response.headers();, +  private static Headers extractOkHeaders(CacheResponse javaResponse) throws IOException {, +    return extractOkHeaders(javaResponseHeaders);, +  private static Headers extractOkResponseHeaders(HttpURLConnection httpUrlConnection) {, +    return extractOkHeaders(javaResponseHeaders);, +   * entry (one with a {@code null} key) is discarded., +  static Headers extractOkHeaders(Map<String, List<String>> javaHeaders) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Headers okHeaders = JavaApiConverter.extractOkHeaders(javaResponseHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    Headers okHeaders = extractOkResponseHeaders(httpUrlConnection);, +    Headers okHeaders = extractOkHeaders(javaResponse);, +      Headers headers = extractOkHeaders(requestHeaders);, +    final Headers headers = response.headers();, +  private static Headers extractOkHeaders(CacheResponse javaResponse) throws IOException {, +    return extractOkHeaders(javaResponseHeaders);, +  private static Headers extractOkResponseHeaders(HttpURLConnection httpUrlConnection) {, +    return extractOkHeaders(javaResponseHeaders);, +   * entry (one with a {@code null} key) is discarded., +  static Headers extractOkHeaders(Map<String, List<String>> javaHeaders) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java, +    Headers okHeaders = JavaApiConverter.extractOkHeaders(javaResponseHeaders);, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Platform.get().log(message);, +    Response response = chain.proceed(request);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    Headers okHeaders = extractOkResponseHeaders(httpUrlConnection);, +    Headers okHeaders = extractOkHeaders(javaResponse);, +      Headers headers = extractOkHeaders(requestHeaders);, +    final Headers headers = response.headers();, +  private static Headers extractOkHeaders(CacheResponse javaResponse) throws IOException {, +    return extractOkHeaders(javaResponseHeaders);, +  private static Headers extractOkResponseHeaders(HttpURLConnection httpUrlConnection) {, +    return extractOkHeaders(javaResponseHeaders);, +   * entry (one with a {@code null} key) is discarded.]
[+++ b/okhttp-sse/README.md, +OkHttp Server-Sent Events, +=========================, +, +Experimental support for server-sent events., +API is not considered stable and may change at any time., +++ b/okhttp-sse/README.md, +OkHttp Server-Sent Events, +=========================, +, +Experimental support for server-sent events., +API is not considered stable and may change at any time., +++ b/okhttp-sse/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3</groupId>, +    <artifactId>parent</artifactId>, +    <version>3.11.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-sse</artifactId>, +  <name>OkHttp Server-Sent Events</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>com.google.code.findbugs</groupId>, +      <artifactId>jsr305</artifactId>, +      <scope>provided</scope>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp-testing-support</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +, +  <build>, +    <plugins>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-javadoc-plugin</artifactId>, +        <version>2.10.4</version>, +        <configuration>, +          <links>, +            <link>http://square.github.io/okhttp/javadoc/</link>, +          </links>, +        </configuration>, +      </plugin>, +    </plugins>, +  </build>, +</project>, +++ b/okhttp-sse/README.md, +OkHttp Server-Sent Events, +=========================, +, +Experimental support for server-sent events., +API is not considered stable and may change at any time., +++ b/okhttp-sse/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +, +  <parent>, +    <groupId>com.squareup.okhttp3</groupId>, +    <artifactId>parent</artifactId>, +    <version>3.11.0-SNAPSHOT</version>, +  </parent>, +, +  <artifactId>okhttp-sse</artifactId>, +  <name>OkHttp Server-Sent Events</name>, +, +  <dependencies>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>okhttp</artifactId>, +      <version>${project.version}</version>, +    </dependency>]
[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +  @Test public void conditionalCacheHit() throws Exception {, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +  @Test public void conditionalCacheMiss() throws Exception {, +    server.enqueue(new MockResponse().setBody("A").addHeader("ETag: v1"));, +    server.enqueue(new MockResponse().setBody("B"));, +    server.play();, +, +    client.setOkResponseCache(cache);, +, +    Request request1 = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +    client.enqueue(request1, receiver);, +    receiver.await(request1.url()).assertCode(200).assertBody("A");, +    assertNull(server.takeRequest().getHeader("If-None-Match"));, +, +    Request request2 = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +    client.enqueue(request2, receiver);, +    receiver.await(request2.url()).assertCode(200).assertBody("B");, +    assertEquals("v1", server.takeRequest().getHeader("If-None-Match"));, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +  @Test public void conditionalCacheHit() throws Exception {, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +  @Test public void conditionalCacheMiss() throws Exception {, +    server.enqueue(new MockResponse().setBody("A").addHeader("ETag: v1"));, +    server.enqueue(new MockResponse().setBody("B"));, +    server.play();, +, +    client.setOkResponseCache(cache);, +, +    Request request1 = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +    client.enqueue(request1, receiver);, +    receiver.await(request1.url()).assertCode(200).assertBody("A");, +    assertNull(server.takeRequest().getHeader("If-None-Match"));, +, +    Request request2 = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +    client.enqueue(request2, receiver);, +    receiver.await(request2.url()).assertCode(200).assertBody("B");, +    assertEquals("v1", server.takeRequest().getHeader("If-None-Match"));, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingReceiver.java, +import java.util.Iterator;, +      for (Iterator<RecordedResponse> i = responses.iterator(); i.hasNext(); ) {, +        RecordedResponse recordedResponse = i.next();, +          i.remove();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +  @Test public void conditionalCacheHit() throws Exception {, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +  @Test public void conditionalCacheMiss() throws Exception {, +    server.enqueue(new MockResponse().setBody("A").addHeader("ETag: v1"));, +    server.enqueue(new MockResponse().setBody("B"));, +    server.play();, +, +    client.setOkResponseCache(cache);, +, +    Request request1 = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +    client.enqueue(request1, receiver);, +    receiver.await(request1.url()).assertCode(200).assertBody("A");, +    assertNull(server.takeRequest().getHeader("If-None-Match"));, +, +    Request request2 = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +    client.enqueue(request2, receiver);, +    receiver.await(request2.url()).assertCode(200).assertBody("B");, +    assertEquals("v1", server.takeRequest().getHeader("If-None-Match"));, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingReceiver.java, +import java.util.Iterator;, +      for (Iterator<RecordedResponse> i = responses.iterator(); i.hasNext(); ) {, +        RecordedResponse recordedResponse = i.next();, +          i.remove();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SyncApiTest.java, +  @Test public void conditionalCacheHit() throws Exception {, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +  @Test public void conditionalCacheMiss() throws Exception {, +    server.enqueue(new MockResponse().setBody("A").addHeader("ETag: v1"));, +    server.enqueue(new MockResponse().setBody("B"));, +    server.play();]
[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java, +import okhttp3.JavaNetAuthenticator;, +    assertEquals(1, client.client().getConnectionPool().getMultiplexedConnectionCount());, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java, +import okhttp3.JavaNetAuthenticator;]
[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody implements DuplexRequestBody {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody implements DuplexRequestBody {, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +      CipherSuite.TLS_AES_256_CCM_8_SHA256, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody implements DuplexRequestBody {, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +      CipherSuite.TLS_AES_256_CCM_8_SHA256, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  private OkHttpClient client = defaultClient();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody implements DuplexRequestBody {, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +      CipherSuite.TLS_AES_256_CCM_8_SHA256, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  private OkHttpClient client = defaultClient();, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java]
[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.internal.Internal;, +    listener.forbidLock(Internal.instance.realConnectionPool(client.connectionPool()));, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.internal.Internal;, +    listener.forbidLock(Internal.instance.realConnectionPool(client.connectionPool()));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.connection;, +, +import java.net.InetSocketAddress;, +import java.net.Proxy;, +import java.net.ProxySelector;, +import java.net.Socket;, +import java.util.Collections;, +import java.util.concurrent.TimeUnit;, +import javax.net.SocketFactory;, +import okhttp3.Address;, +import okhttp3.Call;, +import okhttp3.ConnectionPool;, +import okhttp3.Dns;, +import okhttp3.OkHttpClient;, +import okhttp3.Request;, +import okhttp3.Route;, +import okhttp3.internal.Internal;, +import okhttp3.internal.RecordingOkAuthenticator;, +import okhttp3.internal.Transmitter;, +import org.junit.Test;, +, +import static okhttp3.TestUtil.awaitGarbageCollection;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +, +public final class ConnectionPoolTest {, +  private final Address addressA = newAddress("a");, +  private final Route routeA1 = newRoute(addressA);, +  private final Address addressB = newAddress("b");, +  private final Route routeB1 = newRoute(addressB);, +  private final Address addressC = newAddress("c");, +  private final Route routeC1 = newRoute(addressC);, +, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +  @Test public void connectionsEvictedWhenIdleLongEnough() throws Exception {, +    RealConnectionPool pool = new RealConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +, +    RealConnection c1 = newConnection(pool, routeA1, 50L);, +, +    // Running at time 50, the pool returns that nothing can be evicted until time 150., +    assertEquals(100L, pool.cleanup(50L));, +    assertEquals(1, pool.connectionCount());, +    assertFalse(c1.socket().isClosed());, +, +    // Running at time 60, the pool returns that nothing can be evicted until time 150., +    assertEquals(90L, pool.cleanup(60L));, +    assertEquals(1, pool.connectionCount());, +    assertFalse(c1.socket().isClosed());, +, +    // Running at time 149, the pool returns that nothing can be evicted until time 150., +    assertEquals(1L, pool.cleanup(149L));, +    assertEquals(1, pool.connectionCount());, +    assertFalse(c1.socket().isClosed());, +, +    // Running at time 150, the pool evicts., +    assertEquals(0, pool.cleanup(150L));, +    assertEquals(0, pool.connectionCount());, +    assertTrue(c1.socket().isClosed());, +, +    // Running again, the pool reports that no further runs are necessary., +    assertEquals(-1, pool.cleanup(150L));, +    assertEquals(0, pool.connectionCount());, +    assertTrue(c1.socket().isClosed());, +  }, +, +  @Test public void inUseConnectionsNotEvicted() throws Exception {, +    ConnectionPool poolApi = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +    RealConnectionPool pool = Internal.instance.realConnectionPool(poolApi);, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +]
[+++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTest.java, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java, +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTest.java, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java, +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +  /** Returns total number of connections in the pool. */, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTest.java, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java, +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +  /** Returns total number of connections in the pool. */, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  /** Default call timeout (in milliseconds). */, +  /** Default connect timeout (in milliseconds). */, +  /** Default read timeout (in milliseconds). */, +  /** Default write timeout (in milliseconds). */, +  /** Web socket ping interval (in milliseconds). */, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTest.java, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java, +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +  /** Returns total number of connections in the pool. */, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  /** Default call timeout (in milliseconds). */, +  /** Default connect timeout (in milliseconds). */, +  /** Default read timeout (in milliseconds). */, +  /** Default write timeout (in milliseconds). */, +  /** Web socket ping interval (in milliseconds). */, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.java, + * <p>Supported on OpenJDK 7+, + * <p>Supported on OpenJDK 8 via the JettyALPN-boot library., + * <p>Supported on OpenJDK 9+ via SSLParameters and SSLSocket features., +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTest.java, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java, +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +  /** Returns total number of connections in the pool. */, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  /** Default call timeout (in milliseconds). */, +  /** Default connect timeout (in milliseconds). */, +  /** Default read timeout (in milliseconds). */, +  /** Default write timeout (in milliseconds). */, +  /** Web socket ping interval (in milliseconds). */, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.java, + * <p>Supported on OpenJDK 7+, + * <p>Supported on OpenJDK 8 via the JettyALPN-boot library., + * <p>Supported on OpenJDK 9+ via SSLParameters and SSLSocket features., +++ b/pom.xml, +    <java.version>1.8</java.version>, +            <id>sniff-java18</id>, +                <artifactId>java18</artifactId>, +                <version>1.0</version>, +          </execution>, +          <execution>, +            <id>sniff-android5</id>, +            <phase>test</phase>, +            <goals>, +              <goal>check</goal>, +            </goals>, +            <configuration>, +              <signature>, +                <groupId>net.sf.androidscents.signature</groupId>, +                <artifactId>android-api-level-21</artifactId>, +                <version>5.0.1_r2</version>, +              </signature>, +            </configuration>, +          </execution>, +        </executions>, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTest.java, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java, +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +  @IgnoreJRERequirement // Should only be invoked on Java 8+ or Android API 24+., +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +  /** Returns total number of connections in the pool. */, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  /** Default call timeout (in milliseconds). */, +  /** Default connect timeout (in milliseconds). */, +  /** Default read timeout (in milliseconds). */]
[+++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/README.md, +```java, +```java, +```java, +```java, +```xml, +++ b/CHANGELOG.md, +## VERSION 2.1.0, +, +_2014-11-11_, +, + *  New: Typesafe APIs for interacting with cipher suites and TLS versions., + *  Fix: Don't crash when mixing authorization challenges with upload retries., +, +, +++ b/README.md, +  <version>2.1.0</version>, +compile 'com.squareup.okhttp:okhttp:2.1.0', +  <version>2.1.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.1.0', + [3]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=okhttp&v=LATEST, + [4]: https://search.maven.org/remote_content?g=com.squareup.okhttp&a=mockwebserver&v=LATEST, +++ b/deploy_website.sh, +  curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$DOCUMENTED_ARTIFACT&v=LATEST&c=javadoc" > javadoc.zip, +curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=1.6.0&c=javadoc" > javadoc.zip, +++ b/mockwebserver/README.md, +```java, +```java, +```java, +```java, +```xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import javax.net.ServerSocketFactory;, +  private ServerSocketFactory serverSocketFactory = ServerSocketFactory.getDefault();, +  public void setServerSocketFactory(ServerSocketFactory serverSocketFactory) {, +    if (serverSocketFactory == null) throw new IllegalArgumentException("null serverSocketFactory");, +    this.serverSocketFactory = serverSocketFactory;]
[+++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  /** Returns true if there is a failure that retrying might fix. */, +  boolean hasStreamFailure() {, +      return hasStreamFailure;, +    }, +  }, +  /** Returns true if a current route is still good or if there are routes we haven't tried yet. */, +  boolean hasRouteToTry() {, +    synchronized (connectionPool) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  /** Returns true if there is a failure that retrying might fix. */, +  boolean hasStreamFailure() {, +      return hasStreamFailure;, +    }, +  }, +  /** Returns true if a current route is still good or if there are routes we haven't tried yet. */, +  boolean hasRouteToTry() {, +    synchronized (connectionPool) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (sameConnection(this.request.url(), request.url()) && exchangeFinder.hasRouteToTry()) {, +        return; // Already ready., +      }, +    return exchangeFinder.hasStreamFailure() && exchangeFinder.hasRouteToTry();, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  /** Returns true if there is a failure that retrying might fix. */, +  boolean hasStreamFailure() {, +      return hasStreamFailure;, +    }, +  }, +  /** Returns true if a current route is still good or if there are routes we haven't tried yet. */, +  boolean hasRouteToTry() {, +    synchronized (connectionPool) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (sameConnection(this.request.url(), request.url()) && exchangeFinder.hasRouteToTry()) {, +        return; // Already ready., +      }, +    return exchangeFinder.hasStreamFailure() && exchangeFinder.hasRouteToTry();, +++ b/okhttp/src/test/java/okhttp3/CallTest.java, +  /** https://github.com/square/okhttp/issues/4875 */, +  @Test public void interceptorRecoversWhenRoutesExhausted() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));, +    server.enqueue(new MockResponse());, +, +    client = client.newBuilder(), +        .addInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            try {, +              chain.proceed(chain.request());, +              throw new AssertionError();, +            } catch (IOException expected) {, +              return chain.proceed(chain.request());, +            }, +          }, +        }), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    executeSynchronously(request), +        .assertCode(200);, +  }, +]
[+++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okcurl/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okcurl/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okcurl/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okcurl/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okcurl/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okhttp-logging-interceptor/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okhttp-testing-support/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/benchmarks/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/mockwebserver/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okcurl/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okhttp-android-support/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okhttp-apache/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">, +    <version>3.0.0-RC1</version>, +++ b/okhttp-logging-interceptor/pom.xml]
[+++ b/CHANGELOG.md, +## Version 3.4.0-RC1, +, +_2016-07-02_, +, + *  **We’ve rewritten HttpURLConnection and HttpsURLConnection.** Previously we, +    shared a single HTTP engine between two frontend APIs: `HttpURLConnection`, +    and `Call`. With this release we’ve rearranged things so that the, +    `HttpURLConnection` frontend now delegates to the `Call` APIs internally., +    This has enabled substantial simplifications and optimizations in the OkHttp, +    core for both frontends., +, +    For most HTTP requests the consequences of this change will be negligible., +    If your application uses `HttpURLConnection.connect()`,, +    `setFixedLengthStreamingMode()`, or `setChunkedStreamingMode()`, OkHttp will, +    now use a async dispatcher thread to establish the HTTP connection., +, +    We don’t expect this change to have any behavior or performance, +    consequences. Regardless, please exercise your `OkUrlFactory` and, +    `HttpURLConnection` code when applying this update., +, + *  **Cipher suites may now have arbitrary names.** Previously `CipherSuite` was, +    a Java enum and it was impossible to define new cipher suites without first, +    upgrading OkHttp. With this change it is now a regular Java class with, +    enum-like constants. Application code that uses enum methods on cipher, +    suites (`ordinal()`, `name()`, etc.) will break with this change., +, + *  Fix: `CertificatePinner` now matches canonicalized hostnames. Previously, +    this was case sensitive. This change should also make it easier to configure, +    certificate pinning for internationalized domain names., + *  Fix: Don’t crash on non-ASCII `ETag` headers. Previously OkHttp would reject, +    these headers when validating a cached response., + *  Fix: Don’t allow remote peer to arbitrarily size the HPACK decoder dynamic, +    table., + *  Fix: Honor per-host configuration in Android’s network security config., +    Previously disabling cleartext for any host would disable cleartext for all, +    hosts. Note that this setting is only available on Android 24+., + *  New: HPACK compression is now dynamic. This should improve performance when, +    transmitting request headers over HTTP/2., + *  New: `Dispatcher.setIdleCallback()` can be used to signal when there are no, +    calls in flight. This is useful for [testing with, +    Espresso][okhttp_idling_resource]., + *  New: Upgrade to Okio 1.9.0., +, +     ```xml, +     <dependency>, +       <groupId>com.squareup.okio</groupId>, +       <artifactId>okio</artifactId>, +       <version>1.9.0</version>, +     </dependency>, +     ```, +, +, + [okhttp_idling_resource]: https://github.com/JakeWharton/okhttp-idling-resource, +++ b/CHANGELOG.md, +## Version 3.4.0-RC1, +, +_2016-07-02_, +, + *  **We’ve rewritten HttpURLConnection and HttpsURLConnection.** Previously we, +    shared a single HTTP engine between two frontend APIs: `HttpURLConnection`, +    and `Call`. With this release we’ve rearranged things so that the, +    `HttpURLConnection` frontend now delegates to the `Call` APIs internally., +    This has enabled substantial simplifications and optimizations in the OkHttp, +    core for both frontends., +, +    For most HTTP requests the consequences of this change will be negligible., +    If your application uses `HttpURLConnection.connect()`,, +    `setFixedLengthStreamingMode()`, or `setChunkedStreamingMode()`, OkHttp will, +    now use a async dispatcher thread to establish the HTTP connection., +, +    We don’t expect this change to have any behavior or performance, +    consequences. Regardless, please exercise your `OkUrlFactory` and, +    `HttpURLConnection` code when applying this update., +, + *  **Cipher suites may now have arbitrary names.** Previously `CipherSuite` was, +    a Java enum and it was impossible to define new cipher suites without first, +    upgrading OkHttp. With this change it is now a regular Java class with, +    enum-like constants. Application code that uses enum methods on cipher, +    suites (`ordinal()`, `name()`, etc.) will break with this change., +, + *  Fix: `CertificatePinner` now matches canonicalized hostnames. Previously, +    this was case sensitive. This change should also make it easier to configure, +    certificate pinning for internationalized domain names., + *  Fix: Don’t crash on non-ASCII `ETag` headers. Previously OkHttp would reject, +    these headers when validating a cached response., + *  Fix: Don’t allow remote peer to arbitrarily size the HPACK decoder dynamic, +    table., + *  Fix: Honor per-host configuration in Android’s network security config., +    Previously disabling cleartext for any host would disable cleartext for all, +    hosts. Note that this setting is only available on Android 24+., + *  New: HPACK compression is now dynamic. This should improve performance when, +    transmitting request headers over HTTP/2., + *  New: `Dispatcher.setIdleCallback()` can be used to signal when there are no, +    calls in flight. This is useful for [testing with, +    Espresso][okhttp_idling_resource]., + *  New: Upgrade to Okio 1.9.0., +, +     ```xml, +     <dependency>]
