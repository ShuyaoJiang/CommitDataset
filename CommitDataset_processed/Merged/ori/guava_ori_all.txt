Guava issue 1337: fix potential race with Cache.refresh.
Fix tiny Javadoc problems.
Fix errors in @GuardedBy annotations.
JDiff update
Improve error messaging in EqualsTester.
Fail setFuture(null) immediately under GWT (as it already does under plain Java) to avoid going into an inconsistent state.

Hide MapMaker.removalListener() internally.
Add a .gitattributes file to control line ending normalization, which is otherwise a mess that depends on each git client's settings. (See http://schacon.github.io/git/gitattributes.html and http://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/ for more about that.)
fix build

Add Java Checksums (CRC32, Adler32) to Hashing.
Make some changes to MultimapBuilderTest to make it build in GWT (2.5.0-rc1, which Guava is using currently).
Change StatsAccumulator.addAll(Stats) to use a more Knuth-like calculation for the mean. I claim that this is more accurate in the cases we care about.
Replace old 'simple' Strings.repeat with more complex, but faster implementation based on binary exponentiation. Add benchmark to compare with old method.
Suppress exceptions raised from argument's toString methods during lenient formatting - take 2.
Add ImmutableListCreationBenchmark to help evaluate the utility of pre-sized builders.
Replace usages of deprecated IterableSubject.iteratesOverSequence(...) with iteratesAs(...)
Move Graphs.selfLoopPredicate() to GraphsTest.java
Add Maps.filter{Keys,Values,Entries}(NavigableMap, Predicate), since we added Sets.filter(NavigableSet, Predicate).
More reformatting.
Use "null" for null entries when joining.
Explain the relationship with java.util.Optional, in some detail.
Don't frontload CharMatcher.toString() computation, that's silly.
ImmutableIntArray is serializable.
Rollback of controversial c423bec3cc53 ("Trim gratuitous code from ImmutableList implementations").
Add missing @Nullable annotations on the fields in the reflect package.
Update travis-ci for new container based infrastructure and maven caching.
Add c.g.common.math.DoubleUtils#ensureNonNegative
Shuffling from internal-only change.
Add benchmarks to determine the overhead of the various stats calculation algorithms.
google-java-format the rest of util.concurrent.
Eliminate most uses of non-Unicode whitespace in com.google.common tests.
Add @CheckReturnValue to the entire c.g.c.hash package.
open-source AtomicLong
Delete GenericMapMaker parent class now that generic parameterization is no longer needed (caching APIs are gone).
Remove unnecessary 'unused' variables thanks to an update in the @CheckReturnValue checker.
Reconcile @GwtIncompatible (and @GoogleInternal) annotations with the build-system lists of GWT-compatible (and GWT-compatible emulated) files.
TypeParameter reshuffling.
Remove doc references to the deprecated service methods.
Fix bug in TreeRangeMap.asMapOfRanges().get(absentRange)
Queues was released in 11.0 but is missing from package-info.
Betafy
Fix a wrong description in CharMatcher.
Change MultiInputStream and MultiReader to work with ByteSource and CharSource rather than InputSuppliers. Change Byte/CharSource#concat to no longer delegate to Byte/CharStreams#join and change join to delegate to concat instead.
Optimize ImmutableList,Set,SortedSet builders.  In particular, uniquify
trigger refresh on Cache.getIfPresent
Add DiscreteDomain.bigIntegers(), which was in fact already implemented and tested.
Give a removal date for PrimitiveSink.putString(CS).
This CL fixes usage of equality operators for subclasses of java.lang.Number. Comparing numeric objects using "==" tests for reference equality, when most likely value equality is intended. This an automated fix using error-prone.
Miscellaneous cleanups:

Restore import for java.util.Formatter.
Change return type of openBufferedStream() on ByteSource, ByteSink and CharSink to the base stream type rather than the Buffered* type to allow implementations to avoid unnecessarily adding additional buffering to streams that do not benefit from it.
Widen Multisets.removeOccurrences to accept Iterables.
Remove inaccurate claim of GWT compatibility.

Turn on linksource when generating javadoc -- why didn't we do this sooner?
properly adjust size/weight on clear calls without a removal listener
Migrate the remaining Multiset.entrySet() tests from AbstractMultisetTest to MultisetEntrySetTester, fixing a few genuine bugs encountered in the process.
Only get values from Map in Maps.immutableEnumMap once.  Fixes https://github.com/google/guava/issues/2854 .
Fix a test not marked @Test
In Java 8 branch, fall back to j.u.HashMap based implementation in ImmutableMap if hash flooding appears probable.  (Partially motivated by external feature requests, partially by []
Add Iterable#toString implementation for Splitter#split.
Fix Error Prone errors in GWT code.
Remove Futures.chain internally, though it will go out in Guava r11 before being removed in r12.
Clean up usages of deprecated Truth has() Collection methods:
Make Guava tests pass under Java 10.
Renamed {Successor,Predecessor}Graph to {Successors,Predecessors}Function.
migrate from AtomicLong to LongAdder
Rewrite the ImmutableSortedMultiset implementation for improved efficiency and reduced memory consumption.
Eliminate Iterators.unmodifiableListIterator, which was package-private but never used.
MOE strip the "public" from SortedLists' member enums.
Remove unnecessary mocking of a data structure.
Add new UnsignedLong methods that we will shortly migrate to.
Add a tester for ConcurrentMap.replace(K, V).
Simplify the implementation of RemovalNotification by extending AbstractMap.SimpleImmutableEntry.
Overhaul Android {Hash,LinkedHash}Multiset to operate much more directly on ObjectCountHashMap, eliminating many unnecessary classes, allocations, and even calls to hashCode on the elements.
Delete the NodeConnections interface. As an implementation detail we previously took advantage of the shared interface, but that is no longer the case, and such a trivial interface doesn't seem worth keeping around.
Stop stripping @LazyInit annotations.
Add RandomAccess implementations for Lists.{equals,indexOf,lastIndexOf}Impl, to eliminate allocation of the iterator.
Roll back most of the rest of CL 100047098 (the javatests/... parts, since I got java/... in 100850485).
Add some toString tests for CharMatcher.anyOf().
GWTifies Futures#transform().
Internal GWT change
Change AbstractListeningExecutorService to extend AbstractExecutorService.

Make MultisetNavigationTester.totalSize static.
Add c.g.common.base.Optional#transform(Function)

exclude base.internal from javadoc
Changed ClassSanityTester to not to attempt to instantiate the class if no instance method needs to be tested for nulls. This avoids unnecessary test failures for classes that don't need null check after all.
Remove duplicate Stopwatch tests.
Fix modifier order
Internally, use PatternCompiler from Doubles.tryParse.
Use getBytes(Charset) instead of getBytes(String) now that we require a new enough version of GWT.
Implement a new Service base class for services that need to execute some functionality periodically.
Deprecated Throwables.propagateIfInstanceOf() and propagateIfPossible().
Break up Collection test suites and put tests for a class in...the tests for that class.
cleanup stats collection workarounds from MapMaker
Add Eclipse .metadata/ folder to .gitignore.
Update imports ordering to the new java import order.
emulate CacheBuilder in GWT, gwtifying all requistie dependencies
Point from Function to Functions and from Predicate to Predicates.
Convert GWT-only tests into normal tests.
Added more memory benchmarks for collections.
Use the type annotation version of @Nullable in the Java 8 branch
Update Guava versions to 18.0-SNAPSHOT.
Correct code example in Funnel Javadoc, that uses the old deprecated-then-removed PrimitiveSink#putString(String) method.
Ensure the correct removal notification is published.
Use GcFinalization.
Warn Android users that default Stopwatch behavior may be bad for their health.
common.graph PackageSanityTests: specify a default object for EndpointPair inputs.
Update example code snippet slightly (existing one doesn't techincally compile).
Graduate Verify and VerifyException from Beta as requested here:
massive manual sync
externally remove methods scheduled for deletion in release 11.0
Move ComputingMapAdapter to MapMaker.
Ignore CacheLoadingTest.testExpandDuringRefresh in open-source.
Suppress test under Android.
Remove MapMaker removal notification queue and removal listener support.
- have Cache.size() return a long
Remove @CanIgnoreReturnValue from Listening*ExecutorService.
Update the Public Suffix files.
Internal change
Automated g4 rollback of changelist 35973933.
Release base escaper classes, HTML escapers, XML escapers, and URL escapers into Guava.

Fix 6-year-old test bug.
Make some more helper methods static, as suggested.
More extensive testing for murmur hashing (in prep for shortcut speedups).
allow Cache.asMap().get(Object) to count as an access wrt eviction
Use diamond operator in collect
Rollback of: Add @CheckReturnValue to Optional
Detect HtmlUnit's broken sorting, and skip our tests that depend on proper sorting, at least when running our GWT tests in the open-source build.
Add Ordering.greatestOf(Iterator, int) overload, and fix the doc.
Migrate tests for Multimap.keySet() from AbstractMultimapTest to MultimapTestSuiteBuilder.
Applied package sanity tests to common/base
Suppress new CollectionIncompatibleType Error Prone check by casting
Fix nonpublic identifiers and documentation that use "whitelist" or "blacklist" to use less problematic terms.
Bring over some API documentation from []
Update Public Suffix data.
Rollback of changelist 64659484 ("Make common.reflect build and pass tests against both Java 7 and Java 8").
Optimize Ascii#toUpperCase and Ascii#toLowerCase. Don't recreate a String if the input String is already upper-cased/lower-cased.
- rename ComputingCache to LocalCache
Make annotation dependencies non-optional.
Create a Guava BOM.
Document that the compact collections aren't universal wins.
standardize test modules
Change ByteStreams.asByteSource calls to ByteSource.wrap and deprecate it.
Update hasPublicSuffix javadoc
Remove some methods that are scheduled for removal in 23.0, along with one that was apparently scheduled for removal in 21.0.
Add the methods Graphs.reachableNodes() and Graphs.transitiveClosure(). Three teams have already implemented similar logic! Also, looking through the remaining uses of the legacy Digraph, the only thing preventing many from being converted to common.graph is the lack of transitive closure. So I'd say there's very high demand for this.
Remove specification of behavior when the number of arguments does not match the number of "%s" in the format string from Preconditions javadoc.
Stop recommending the use of delimiters when hashing strings.
Fix ByteArrayByteSource.slice to handle the case where offset + length > Long.MAX_VALUE.
Remove Unsigned{Integer,Long}#asUnsigned from Guava 15.0.
ValueGraph.edgeValue*: change from
Provide concurrency-safe toArray() implementations for Android VMs (at least Gingerbread, probably others) that need it.
Switch FluentFuture and AbstractFuture in inheritance chain
Document that the memory increases appear to be necessary for Travis only (and that they do appear to solve the problem there).
updated POMs for maven builds.
Update misleading comment in RegularImmutableList; it is used even for lists
Better documentation for an Android test suppression.
Update Public Suffix List.
Add missing @Nullable annotation to ForwardingSortedSet.unsafeCompare(Object, Object).
Document compare() methods to point out their JDK equivalents.
Deprecate mutator methods on immutable/unmodifiable classes in common.collect.  It can't possibly be correct to invoke a method that mutates a collection on an immutable object and this will help catch those errors at compile time.  It also has the benefit that IDEs set up to filter deprecated methods from the auto-complete suggestions will filter out the unsupported methods.
Migrate calls of to-be-deprecated Futures.get to equivalent Futures.getChecked.
Automated rollback of dfc51048f549.
FluentFuture.
Rewrite ImmutableSortedMultiset.Builder on Android to avoid using TreeMultiset, which allocates a ton of objects and also uses a ton of code.
Skip GWT tests by default.
Disable PackageSanityTests null-pointer testing for LongAdder, as we don't want to patch Striped64 to include @Nullable annotations.
Put @NullableDecl last in lists of annotations
introduce Cache.putAll
Bring @GwtCompatible annotations into line with reality.

Specify source level 1.6 for GWT.
Changed NullPointerTester to test inherited methods.
Mark HashFunction @Immutable.
remove NullCache, now that we support immediate eviction
Copy c.g.c.collect.AbstractIterator to c.g.c.base as a package-private class.
Add support for Travis CI.
Add GWT tests for cache and labs.concurrent.
introduce AtomicLongMap
Make MediaType more lenient when parsing whitespace.
Update Guava pom.xml files to version 16.0-SNAPSHOT.
Make Endpoints implement Iterable.
Add explicit type parameters in FilteredMultimapValues to make JDK6 happy.
Expand BiMap test suite for forcePut operation, and fix a newly revealed bug in the HashBiMap status quo.
Deprecate DoubleMath.mean.
Add GWT compilation test.

Reduce default values per key for LinkedHashMultimap from 8 to 2.
Use HashFunction#hashObject shortcut.
Don't construct thousands of strings.

Clean up the javadoc for the mutable graph interfaces.
Change to some TODOs caused by some internal change.
Automated g4 rollback of changelist 94571347.
Further LongMath.sqrt optimizations, to show that a simple truncation is in fact sufficient.  (This actually simplifies the proof.)
Run common.testing tests under GWT
It was senseless to hold these nifty collectors back from Guava (sorry).
Remove @Beta from:
Bump jsr305 version.
Fix initialCapacity calculation for a maximum size over Integer.MAX_VALUE.
Moved TimeLimiter's class-level documentation to newProxy() and replaced it with more general info.
Delete unused methods in ConfigurableMutable*.
Add a custom gwt serializer for the Range object
Make Ints.tryParse available under GWT.
split configuration out of execution so it will apply to other executions
Eagerly check for an appropriate exceptionClass constructor during calls to Futures.getChecked.
GWTifies Futures#combine().
Mark RemovalListener and Weigher as Java 8 FunctionalInterfaces
Better phrasing of Throwables.getCauseAs() documentation.
Update AsyncFunction javadoc to point to a non-deprecated method.
Fix b/80241237 to correctly *not* change segment weight, nor report an eviction, when a compute() call does not change the present value.
Convert all @GwtIncompatible.reason values to implementation comments.
This change replaces usages of static final fields on CharMatcher, e.g. CharMatcher.WHITESPACE, with the equivalent static factory method, e.g. CharMatcher.whitespace().
Add toJavaUtil instance method, which is handier and also doesn't have to be
Rewrite ImmutableMultiset on Java 7 in terms of the guts of HashMultiset, taking ruthless advantage of its property that it retains insertion order in the absence of removals.
Speed up notably slow math tests for GWT's sake.
Add reference to Funnels from Funnel javadocs.
Shuffling from internal-only change.
Add an example to the javadocs for ThreadFactoryBuilder#setNameFormat
Revert hack introduced in []
Restore LocalCache.LocalManualCache.{apply,get,getUnchecked} to fix Guava compilation.
Move many implementations out of Futures.java (https://github.com/google/guava/issues/2091).
Migrate from deprecated Guava APIs to replacements:
Finish open-sourcing tests for Monitor.
Spray @SuppressUnderAndroid on everything related to suite builders and nested test classes.
Fix documentation error in DoubleMath.
Improve an error message.
Annotate Graph and Network with @CompatibleWith as appropriate.
Add nullness annotations on the field in CompactLinkedHashMap.java
Carry @CanIgnoreReturnValue over to new methods.
Add tests for inserting null values into a Multimap.
Add tester to MultimapTestSuiteBuilder for Multimap.putAll(Multimap)
Allow atomic removal of 0 values from AtomicLongMap
Add Booleans.{true,false}First.
Use diamond operator for all test targets except 'collect'
Don't expect java.ext.dirs under Java 9.
Remove @Beta from:
Make AtomicLongMap tests work under GWT.
Deprecate softValues.
Shuffling from internal-only change.
Add @since to RangeMap.putCoalescing().
Add flatteningToMultimap collectors.

Make KNOWN_ORDER significant for Map tests.
Begin migrating methods from Navigable{Maps,Sets} to {Maps,Sets}.
Updating Javadoc and removing commented-out lines
Remove unneeded JSNI from Objects.equals

Carry @CanIgnoreReturnValue over to new methods.
Extracted part of NullPointerTester and Stub into NullValues;
Increase timeout for each open-source GWT test method from 5 minutes to 10.
Change @since on some methods in reflect.Parameter to 18.0 since the changes didn't make it in to 17.0.
Add one or two missing tests.
Add @CheckReturnValue to the com.google.common.io package. This forces the caller of these APIs to "do something" with the result of the call.
Add nullness annotations on the fields in CompactLinkedHashSet.java
Rename ConfigurableNetwork->ConfigurableMutableNetwork and ConfigurableGraph->ConfigurableMutableGraph. A followup CL will rename AbstractConfigurableNetwork->ConfigurableNetwork and AbstractConfigurableGraph->ConfigurableGraph (this is being done in two seperate CLs otherwise critique doesn't understand it's a rename). The above mentioned classes are not actually abstract, so calling them Abstract* is wrong.
Remove Platform.clone(), along with various supersource versions.
Open source lots of Caliper benchmarks!
Added test for addAllImpl.
Add some missing @Nullable annotations.
Suppress testGoodFastHash32 under Android, as it is flaky there.
Cleaning up JavaDoc copy-and-paste errors
Provide JDK sources when generating Javadoc.
Added TimeLimiter.{call,run}WithTimeout() methods with improved exception behavior and more readable method signature.
Add missing @since tags.
Remove incorrect Javadoc.

Fix Iterables.removeIfFromRandomAccessList to handle Lists for which set() throws IAE (for example, if the list disallows duplicate elements).
Fix typo.
Migrate callers of caliper.Runner to caliper.runner.CaliperMain directly.
Update failureaccess dep to 1.0.1, which includes OSGi metadata.
First round of adding tests for the Lists.*Impl package-private methods.
Remove unnecessary null checks.
Add a benchmark for [Google-internal -- this CL will be rolled back in Guava] isPrime on positive inputs.  The input distribution is logarithmic.
Move <p> tags to the beginning of the line.
Annotate com.google.common.base.Converter reverse field with @LazyInit.
Removed {Successor,Predecessor}Graph.nodes().
Make the tests for Quantiles use up-to-date Truth technology. My main motiviation here is to stop using hasValuesWithin, which is going away. While I'm at it, let's start using comparingValuesUsing for the Map assertions to avoid the unpleasant loop, and inline the helpers, which aren't really useful now that we've done that.
Use Collections.newSetFromMap directly.
Fix DoubleMath rounding bug identified in Guava issue 2509.
Add more validation to AbstractFuture when cancellation causes are enabled, so that it matches the behavior when they are disabled.
Applied missing Apache license stuff to the files I forgot in previous round (oops)
Super source Strings#isNullOrEmpty to improve JS performance.
Use AssertionError for default case.
Make a slight tweak to the way we calculate means in StatsAccumulator. We pull out a variable for (value - mean) instead of computing it twice. This also means that we no longer need the old mean to compute the change in sumOfSquaresOfDeltas, we only need the new mean, so we can update mean directly instead of storing nextMean. We end up with the same number of temporary variables and the same calculation but one subtraction fewer and (perhaps more importantly) we do the computations in a more natural order.
Adds to PairedStats toByteArray() and fromByteArray() to facilitate (faster) serialization.
Fix low-hanging rawtypes warnings in javatests.
Fix ByteArrayDataInput javadoc (GitHub pull request #1874).
Open source HashingInputStream and HashingOutputStream.
Implement Lists.cartesianProduct.indexOf efficiently.
Make generic type <E extends Comparable> instead of <E> for priority
Allow a max size of 0 for EvictingQueue

Remove methods scheduled for removal in Guava 18.0.
Update Truth dep to 0.23. (https://code.google.com/p/guava-libraries/issues/detail?id=1830)
Establish RangeMap iteration order, as per Guava issue 1842.

Make EvictingQueue GWT compatible.
Address issue 952 on public guava: don't make spaces in parameters mandatory.

refactor literal to named constant
Mark the two deprecated digesting methods as @GoogleInternal.
Guava issue 1001: stop reimplementing Sets.newSetFromMap, now that the backport is in place.
Loosen the tests around the regex: It's OK for the regex to match something that turns out to be invalid.
Added a test for copyOf when the collection is an EnumSet.  In the process generalized the abstract classes so that we could call copy of.
Remove unnecessary method type parameter.
Add @SafeVarargs to Predicates.and(Predicate<? super T>...).
Migrate users from c.g.c.base.Objects to MoreObjects.
Predicates.subtypeOf, a correctly-named duplicate of Predicates.assignableFrom. Deprecate the latter. Add javadoc.
Automated g4 rollback of changelist 174865821.
Fix parameter name in Javadoc
Update test sizes per feedback from []
Making exception more descriptive when someone tries to proxy a class
Mozilla TLD update.
Add Funnels#unencodedCharsFunnel (and deprecate Funnels#stringFunnel()).
Don't use recursion in MultiInputStream.read().
Finish migrating Multiset.remove() (and removeAll, and retainAll) tests to MultisetTestSuiteBuilder.
Use GWT's provided Arrays.copyOf and Arrays.copyOfRange where
Add nullness annotations on the fields in CompactHashSet.java


Give people who have never used UnmodifiableIterator before a hint.
Bump GWT to a non-snapshot dependency, so Guava is unblocked for release.
Instead of suppressing iterator().remove() tests, make iterator.remove() support an independent property of a collection implementation.
Propagate close for to the inputs of Streams.zip and Streams.mapWithIndex
Stop scrubbing some more usernames (MOE update?).
Put scary doc on hashString and less scary doc on hashUnencodedChars.
Add overloads to the Preconditions.check(NotNull|State|Argument) varargs

test for minimum when the minimum is not the first element in the array
Add RangeMap.putCoalescing() in order to support coalesced RangeMap entries.
Make Truth accessible to all of testlib, not just its tests, now that it's used by the collection-suite builders.
Convert much of Guava to Truth by using Refaster.
Support for empty ArrayTable.
Fix javadoc typo: wrapTask
Add @CheckReturnValue to BinaryPredicates and Defaults.
Delete AndroidInteger.
Migrate the remaining Multimap.values() tests from AbstractMultimap to MultimapTestSuiteBuilder, and delete AbstractMultimapTest, which no longer contains any tests.
Add the TestSuiteBuilder for Multimap.values(), and fix Multimaps.filterXXX to pass those tests properly.
Implement Maps.asMap(Set, Function) view.
Introduce AbstractGraph. This is a bare-bones base class that all Graph implementations should be able to extend (analogous to e.g. AbstractSet for Sets). It ensures there is consistent equals()/hashCode() across different Graph implementations. Additionally, this CL drops the requirement that two graphs have to have "the same type" to be equal.
Add and use helper methods like assertDone() in tests.
Whitespace changes from MOE release?
Replace constants (static final CONSTANT_CASE) declaration type which use the general collection interface (e.g. List) with an immutable type (e.g. ImmutableList).

Automated g4 rollback of changelist 113559037.
Methods that take an edge as parameter now take type E instead of Object.
Remove an unneeded dependency.
remove maven parallel tree for sub-artifacts... they won't break down this way necessarily, and guava is small enough to be a single dependency.  we'll just ship monolithic, per the mailing list conversation.
Fix LongMath.checkedPow to correctly error out on large negative inputs, and fix LongMathTest to test a full range of long inputs.  See https://github.com/google/guava/issues/2036 .
Suppress ConcurrentHashMap.entrySet().add() tests, which fail now that JDK8 permits those calls.
Benchmark Splitter#on char vs String length==1, char wins by a bit
Clone of Louis's UnsignedLong(s) documentation CL.
Delete tests from AbstractListMultimapTest that duplicate ListTestSuiteBuilder tests automatically generated by MultimapTestSuiteBuilder
Filling in test coverage on several methods
Add some javadoc stating that immutable graphs are thread safe.
Remove tests of Multiset.entrySet() from AbstractMultisetTest that just duplicate tests from the entrySet() SetTestSuite generated by MultisetTestSuiteBuilder.
3 days of pent-up improvements:
Replace constants (static final CONSTANT_CASE) declaration type which use the general collection interface (e.g. List) with an immutable type (e.g. ImmutableList).
Update poms to support properly generated OSGI metadata and signing with GPG
Change failureaccess packaging to bundle so the OSGi metadata actually gets included.
Replace instances of StringBuilder.append(String.substring/CharSequence.subsequence) with the append overload that takes a substring range. Plus another minor change.
Migrate Multiset.remove() tests from AbstractMultisetTest to MultisetRemoveTester, split off from MultisetWritesTester, as part of the MultisetTestSuiteBuilder.
Increase test coverage for common.graph. Ensure properties besides just those covered by Graphs.equivalent() are copied over as well.
- Update links to URL and HTML specs where necessary.
Second try at adding MoreExecutors.platformThreadFactory().
Add documentation indicating that the builder mutators returns the same builder object.
Fix the formatting of the javadoc in j/c/g/c/util/concurrent/Service.  Rewrap everything to 100 cols.
Add @MonotonicNonNullDecl to UnmodifiableSortedMultiset.
Remove obsolete TODO from CharMatcher.
Expose {Int,Long}Math.isPrime to external users.
Remove some TODOs I added a while ago that probably shouldn't be TODONE.
Rename SimpleEdgesConnecting to EdgesConnecting to be consistent with our naming pattern for NetworkConnections (*NetworkConnections and *MultiNetworkConnections).
Add c.g.common.base.Enums#getIfPresent(MyEnum.class, "FOO") -> Optional
Ignore files from within a git/svn bridge client.
Improve mod javadoc even more.
Restore accidentally removed Util.gwt.xml.
Add nullness annotations on the fields in MapMaker.java
add softKeys scare text
Fix UnsignedLongs/UnsignedInts join method.

Network.java: fork edgeConnecting() for java7/Android:
Revert unintended Objects->MoreObjects migrations.
Add testConstructors(), testStaticMethods(), testInstanceMethods() that take a
ValueGraph.java: remove bogus @since 23.0 on edgeValueOrDefault.
Remove "SetView" from all graph implementations. See [] for why it should be killed with fire. In particular, it made the returned Sets have O(N) (in both time and memory) size() and contains() methods, and in one case, O(N^2) iteration!
Move implementations from Objects methods into MoreObjects.
Allow HashCode#padToLong to work with hashs that have <32 bits.
Remove the array copy from Fingerprint2011.hashBytes(byte[], int, int) method.
Rewrite TreeMultiset in terms of a traditional AVL tree, significantly increasing speed and reducing allocation.
Remove @Beta from Queues (and all of the static factory methods).
Include the key in the recursive load exception, to make debugging easier.
@since tweaks:
Add toString to DeadEvent.
Add AbstractTable, a skeleton implementation-agnostic Table implementation, and factor out code in common between Table implementations.
applied package sanity tests to common.hash
Rename orderNodes() to nodeOrder() and orderEdges() to edgeOrder().
Widen presentInstances parameter type to Iterable<? extends Optional<? extends T>>.
Updated the main interfaces javadoc snippet to reflect the new interfaces {Successor,Predecessor}Graph.

Add annotations on the fields in GeneralRange.java
guava-src-r03.zip is a better name than src-r03.zip.
s,(){,() {,g in {java,javatests}/com/google/common/...
Automated g4 rollback of changelist 125826869.
Copy ByteStreams.asByteSource(byte[]) to ByteSource.wrap(byte[]).
Followup to "Let PackageSanityTests run over the entire package (and stop special casing)."
Add CollectionFeature.SUPPORTS_ITERATOR_REMOVE to MapTestSuiteBuilder for MutableTypeToInstanceMap.
add escapers back to Guava
Javadoc improvement(?) pass to Function/Functions. To be continued.
Fixes incorrectly-ordered arguments to calls to assertEquals
Among the Futures methods that run user callbacks, those that don't take an Executor will be deleted.  This CL migrates them to the counterparts that take MoreExecutors.directExecutor() as such Executor in the parameter list, exactly the way that the old method works.
Add missing modules.
Shuffling from internal-only change.
Adds the @Immutable annotation to InternetDomainName.java.
Stop depending on an ImmutableSortedSet quirk in getTypes():

specify that asMap never auto-loads entries
Don't issue a warning for the lack of srcs in the "main" guava-tests jar.
Eliminate our custom emulations of java.nio.charset.Charset and java.nio.charset.StandardCharsets.
Minor javadoc cleanup.
Optimize BigIntegerMath.sqrt(BigInteger, CEILING), which needs to test if the square root is exactly an integer, by doing a quick check in int arithmetic first.
Link to wiki.
Allow Service to transition from STARTING to TERMINATED. Add a new "doCancelStart" method that is called when a service is stopped while still starting. This gives implementations a chance to abort code which may be preventing the service from starting.
Remove @ThreadSafe and @NotThreadSafe annotations.
Remove deprecated methods that had been hanging around without specified removal dates / Guava versions:
Add a tester for ConcurrentMap.remove(key, value).
Release common.math package.
Allow ignoring Constructors in NullPointerTester
split LoadingCache out of Cache interface
Added missing tests to ImmutableList.sortedCopyOf() (using natural order).
Replace calls to deprecated Throwables.propagate() with "throwIfUnchecked(e)" (if it is possibly unchecked) and "throw new RuntimeException(e)".
Deprecate UnsignedInteger methods that have been renamed.
Add @since tags to some nested types.
Preserve SortedSet-ness of value collections across serialization.
Handle InheritableThreadLocals correctly on Java 9.
Update the suffix patterns.
Add documentation that SetMultimap and mutable values don't get along, as per Guava issue 357.  https://code.google.com/p/guava-libraries/issues/detail?id=357
Delete the unused Graphs.parallelEdges(). Promote Graphs.adjacentEdges (back) to interface method, with a default impl in AbstractNetwork.
Let PackageSanityTests run over the entire package (and stop special casing).
Reimplement inCompletionOrder() (courtesy lukes@).

Graph.java: fix typo in documentation
Add a test for passing ListenableFuture<?> instances to whenAllComplete.
Remove trailing whitespace.
Add putUninterruptibly and takeUninterruptibly, and use them in the implementation of chain().
Open-source missing .gwt.xml and TestModuleEntryPoint files.
Clean up the last Multimap.entries() test in AbstractMultimapTest
Add Futures.transformAsync() to replace the AsyncFunction overloads of transform().
Migrate off of deprecated Truth methods (created using Refaster)
Add Ordering.min(Iterator) and Ordering.max(Iterator).
Two quick followups to take (minor) advantage of the new setFuture implementation
Open source MultimapBuilder.
Delete tests from AbstractMultimapTest that duplicate tests in MultimapSizeTester.
directory reorganization in preparation for deeper maven integration
Change the HostAndPort.java to support case like "hostname:"

Encourage users to use framworks instead of chaining things together manually.
Add notes for external Guava users re. JDK 7 APIs.
Optimize UnsignedBytes.lexicographicalComparator() by using Long.numberOfTrailingZeros instead of an explicit binary search to identify the first byte where the two inputs differ.
Delete MapMaker.maximumSize(), including it's evictionQueue.

Make SerializableTester.reserialize a no-op under GWT so that test authors can use it as part of larger test methods.
Fix external bug #2751.
Update public suffix list.
The number of bits can reach Integer.MAX_VALUE now, rather than Integer.MAX_VALUE/64
Replace Multimap.putAll(K, Iterable) tests from AbstractMultimapTest with more exhaustive tests in MultimapPutIterableTester
Static import all Feature values (except sizes) when no names in the file are ambiguous.
Attempt to increase max heap space for Travis builds, since the new test for BloomFilters with a large number of insertions is currently running out of space.
Add empty array and enum handling to NullPointerTester; I can also clean up the 'throws Exception' though is it better to do it in a separate CL?
Use MessageDigest#clone() instead of MessageDigest#getInstance().
Add throwIfUnchecked and throwIfInstanceOf.
Add NullPointerTester.acceptIllegalArgumentException().
Ensure Cache.get expands hash table appropriately
Fix Splitter to handle patterns that have empty matches, like boundaries and look-behind/ahead patterns, without exploding.
Fix typo in Javadoc of DiscreteDomain.distance.
Switching to non-power-of-2 bloom filter sizes, and making serialization more
Another flaky test.
Remove javax.inject from OSGi package imports and from dependencyManagement in guava-parent.
Roll-forward of: Change CountingInputStream and CountingOutputStream to require a non-null delegate stream, as reported in...
Add notes about Java8 to UnsignedBytes, UnsignedInts, and UnsignedLongs.
I believe our snapshots should be called 13.0-SNAPSHOT now.
Add explicit <p> at the start of paragraphs following an </ol> or </ul> tag in com/google/common javadoc. JDK7 javadoc without the <p> does not show a blank line after the list.
Prepare for release 25.0.
Update references to guava-libraries.googlecode.com to the Github location in pom.xml files.
Fix typo
Fix a race:
Recognize @NullableDecl in NullPointerTester and friends.
Update Javadoc plugin to a version that understands the Java 9 version scheme:
Move some javadoc out of the graph implementation classes (where we don't really expect people to be poking their noses). Mention briefly in the graph interfaces.
add warning to Ticker
google-java-format common.escape.
Automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174e.
Remove @Beta from Escaper and UrlEscapers.
Correct documentation for Splitter#withKeyValueSeparator(Splitter)
Never return a (Sorted|Navigable|Bi)(Map|Set) from the plain (Map|Set) overloads.
Create TreeTraverser.using().
Use diamond operator in base+cache+concurrent.
Release MediaType into Guava as @Beta.
Add default clause to every switch statement in our code.
More reformatting.
Rewrite Multimaps.filter implementations, factoring out a significantly more efficient Multimaps.filterKeys implementation in the process.

Make common.reflect build and pass tests against both Java 7 and Java 8.
Warn a little more about weakKeys resulting in == key comparisons, even in the asMap view.
Change name of Animal Sniffer run.
On second thought, back out a few diamond operators in the mainline when they don't also work with Java 7 type inference.
grow the destination buffer more aggressively to avoid excessive array copying in escapeSlow
Fix two bugs in MinMaxPriorityQueue (introduced in [] First is a bug in removeAt(int) that sometimes causes the wrong element to be removed. Second is a bug that sometimes causes certain elements to be iterated over more than once if elements were removed during iteration.
Introduce Futures.transform overloads that accept an AsyncFunction in preparation for eliminating Futures.chain.
Replace evictionQueue and expirationQueue with accessQueue and writeQueue.
Delete MapMaker.expireAfterAccess(), including it's recencyQueue.
Add tests for common aliases of SHA1.
Provide a default subList() implementation in ImmutableList.
Complete several TODOs, and introduce TransformedIterator, which simplifies and reduces the overhead of package-internal iterator transformations.
Added PackageSanityTest to common/primitive
Prepare Stats et al and Quantiles for beta release in Guava 20.0.
Add missing @since NEXTs.
Enhance toString() for futures returned from ExecutionSequencer.
This CL fixes method calls that incorrectly ignore the return
Work around Android toArray() bug by doing what we arguably should have done in the first place -- calling containsElementsIn(...).inOrder() instead of converting both arguments to List.
Assorted cleanup:
Optimize BaseEncoding by removing GwtWorkarounds and using an implementation without streams
Move GraphProperties.isCyclic() to Graphs, delete the GraphProperties class. Rename method to hasCycle(), because isCyclic() implies that it might be O(1). Also to be consistent if we ever add other "has" methods (e.g. hasSelfLoop(), hasTriangleSubgraph(), etc.).
Eliminate most holder classes from c.g.c.hash.Hashing, but still keep those constants lazily generated -- e.g. moving the static constant to its own implementation class.
Add toString() to some Future subclasses.
Remove unused imports.
Split SortedMap tests out of NavigableMap tests in preparation for running the former under GWT.
Make LongAdder and SimpleStatsCounter final.
Fix links to JSR305, and start linking to JDK 9.
The number of bits can reach Integer.MAX_VALUE now, rather than Integer.MAX_VALUE/64
Added some Unit Tests
Fix calls to deprecated Stopwatch.elapsedTime(TimeUnit) by inlining that method's implementation ("elapsed(TimeUnit)").
Fix a bug with CharStreams.copy not clearing its buffer after reading.
Adds (unused) method to Utf8Test as part of internal change.
Make effectively final fields final
Rename SuppressUnderAndroid to "AndroidIncompatible," since we treat it just like GwtIncompatible: stripping, not @Suppress-style suppression.
Run "normal" GWT tests in public Guava.
Swap Preconditions and Verify over to Strings.lenientFormat.
Typo fix.
Make our code a little closer to obeying the "every switch must have a default" rule.
Indent continued @tag lines 4 spaces instead of aligning them with the second word of the first line.
Merge DiscreteDomains into DiscreteDomain, in advance of migration.
Prepare common.graph for GWT/j2cl usage.
Replace CharMatcher.WHITESPACE by a much faster implementation as it doesn't deserve to be slowed down by division.
ByteProcessor does not operate on lines.
Add a few final(?) tests.
Introduce tryParse function to Longs which accepts radix parameter. This makes it consistent to Ints which support this function as well.
Delete GuavaAsserts.checkEqualsAndHashCodeMethods, replacing its one use with EqualsTester.
Marginally improve what Maven prints for javac errors (by upgrading maven-compiler-plugin).
- Eliminate serialization warning on TreeMultiset by marking AbstractSortedMultiset.comparator as @GwtTransient: http://code.google.com/p/guava-libraries/issues/detail?id=871
Make nonCancellationPropagating available to GWT.
Don't allow repeated calls to hash() on a MessageDigest-based hasher.
Strip ImmutableSortedMultiset from package-info, and un-strip ForwardingNavigable*.
Add more validation to AbstractFuture when cancellation causes are enabled, so that it matches the behavior when they are disabled.
Avoid reference to PeekingIterator in RegularImmutableSortedSet.containsAll, inlining that logic instead of pulling in the extra class.
Import Map.Entry almost everywhere.
Some additional Multimap doc clarifications in re: Guava issue 1458:
Suppress the main flaky tests we've seen since running Guava-Android tests.
Preconditions.java: reword the section on Performance to clarify what aspects of performance are actually expected to be an issue in practice.
Rewrite CacheBuilder removalListener docs a bit, removing some stale
Remove javacomp_package
Update the javadoc for the MutableGraph/Network interfaces. Update three things:
Map *Benchmark.java files into guava-tests/benchmark (they aren't buildable externally yet, but will be some day).
check that forAllPublicStaticMethods() at least covers one method, ot avoid the case that user forgets to add public static modifiers to the factory methods.
Move configuration to the constructor.
Fix some random Error Prone warnings.
GWT-related shuffling from internal change.
Another flaky test.
Make CacheLoader.UnsupportedLoadingOperationException and RemovalNotification's constructor public.
Start measuring DoubleMath's ProGuard retention, and optimize it by inlining some things: LongMath.isPowerOfTwo, and DoubleUtils.ONE_BITS.
Change HostAndPort equals() and hashCode() to stop depending on whether brackets were included
Add publicApiOnly (shuffling resulting from internal-only change).
In com.google.common.reflect.Types, make the Method objects that are used as part of Java compatibility accessible.
Don't use Preconditions.checkArgument in primitives checkedCast methods, as it boxes for what should be a very fast method.
Rewrite AbstractFuture to fix the following issues
Fix a typo in CacheBuilder's docs.
Automated g4 rollback of changelist 110542459.
Migrate users calling new LinkedHashMap(int) to
Update Public Suffix List.
Add ValueGraphBuilder.immutable().
Rewrite the ImmutableCollection.toArray() methods in terms of a package-private "copyIntoArray" method, which also lets e.g. ImmutableMultimap.values().toArray() use arraycopies, etc.
Open source Hashing#sipHash24() and Hashing#sipHash24(long, long).
Add DoubleMath.fuzzyEquals and DoubleMath.fuzzyCompare (Guava issue 725).
Add subRangeMap to the RangeMap interface, and an implementation for TreeRangeMap.
Tiny clarification to Queues#drain
ValueGraphTest.java: add a few checks to make sure that we're properly exercising both null and non-null default values.
Fix up a few odd style nits in the UnsignedLongsTest.
Update to GWT 2.8.0-rc3.
Remove Spliterator characteristic SIZED after a trySplit operation in CollectSpliterators.flatMap.

Introduce Multimap convenience methods (k0, v0, etc.), and migrate to them.
Update the handling of gwt.xml files.
Document that bug affecting LongMathTest.testDivNonZeroExact() has been fixed in recent versions of Android.
Add TreeRangeSet.create(RangeSet) "copy factory method"
Convert GWT-only tests into normal tests.
Migrate AbstractMultimapTest tests for Multimap.asMap() to much more exhaustive and detailed MultimapTestSuiteBuilder testers.
Graduate Sets.filter (SortedSet overload) from @Beta.
Partial rollback of changelist 151480429.
Remove mvn-deploy.sh and jdiff.jar, which aren't really needed.
Rollback
Add more thorough tests to MultimapTestSuiteBuilder
Enforce that various iterators are unmodifiable to prevent potential bugs.
Fix BaseEncodingTest#testBase16UpperCaseIsNoOp to actually test what it's meant to test.
Remove reference to UTF_16LE equivalence.
Move Byte/CharStreams.concat into Byte/CharSource.
Flatten the Graph->Network hierarchy. In other words, it's no longer true that a Network IS A Graph. Instead, provide an asGraph() method that allows for viewing a Network as a Graph. Also, update a lot of code that should have been using Graph (instead of Network) to use Graph.
Change version number in pom files from 24.0 to HEAD(-jre/android-SNAPSHOT).
Suppress another flaky test.
Compile Guava GWT tests with -strict.
Use whichever version of nextDown is available.
Add Futures.getDone().
Adding wml media type.
Supersource nullToEmpty and emptyToNull in Strings.java to native JS.

ImmutableLongArray. Regenerated the int-based classes using it as the model.
more carefully bound the segment count by maximum size/weight
Increase the symmetry of the Javadoc changes to Multimap.hashCode().
Use murmur32 for hashing when coercing IPv6 addresses into IPv4 addresses.
Migrate from easymock to mockito in javatests/com/google/common/io
Add JDK11 to the Travis config.
Adding [HTTP2-Settings] HTTP header.
Annotate lazily iniatialized fields of immutable collections with @LazyInit
Automated g4 rollback of changelist 41959970.
Open source base.MoreObjects and add appropriate @since tags.
Reformat file to 100 columns, except the class docs which will be completely
Add private constructor (pointed out by Louis).
Update to GWT 2.8.0
Make startUp and shutdown non-abstract on AbstractScheduledService.
Fix iteration+removal bug for reference-equal objects
Fix LocalCache.asMap().values() to not implement Set.
Among the Futures methods that run user callbacks, those that don't take an Executor will be deleted.  This CL migrates them to the counterparts that take MoreExecutors.directExecutor() as such Executor in the parameter list, exactly the way that the old method works.
Rewrite TreeRangeSet.complement() to be implemented in the same way as TreeRangeSet itself -- as a NavigableMap<Cut<C>, Range<C>> mapping lower bounds to ranges.
Override HashFunction#toString() where possible.
Add even more toString details to Futures.
Update Guava to use Truth 0.41.
Clarify some docs on Ordering+Comparators
Issue 972: Ordering.allEqual().
Update isCyclic() to work on both directed and undirected graphs. This is part of the effort to move it to Graphs (which I'll do in a followup CL), so we can delete the GraphProperties class!
Change allowsSelfLoops() to default to false for Graph/NetworkBuilder.
Actually fix tearDown handling that was made worse in CL 50062431.
Update public suffix list.
Add MoreFiles.equal() - Files/MoreFiles feature parity.
Create an htmlescapers target for people who want to avoid the bulk of i18n identifiers and ICU4J.
Slightly discourage the use of the <long, TimeUnit> overloads on CacheBuilder.
Add documentation to all versions of Lists.newArrayList methods to discourage their usage; all the other collection factory methods to follow (Sets.newHashSet, etc.). Tweak verbiage of other obsoleted-by-Java7 methods to match.
Update tests to cope with the fact that "google" is now a public suffix. This fixes today's test failures.
Remove unnecessary code from *Immutable*Map implementations
Actually, LocalCache.getIfPresent _does_ increment the hits counter.
fix cache links
Add Multisets.union.
Fix indentation.
Added ForwardingWrapperTester to test forwarders. It lacks guava annotations. Please advise. Thanks
Revert base.Objects -> j.u.Objects deprecations until we do the bulk of the migrations ourselves (blocked: see bug).
Cast null to make sure to select the right Collection.toArray(). In JDK 11 there's a new default method that takes a different parameter.
Fix CacheBuilderSpecTest (issue 6453130)
fix spacing
De-@Beta Stopwatch.
fix toString, which was missing maximumSize (reported by François Vinassac)
Service rewrite!  Add new methods to service so that we can move users away from the confusing ListenableFuture based methods.

Add @CheckReturnValue to Optional
Update javadocs to suggest using a PQ or MMPQ if the entire iterator
Eliminate checkNotNulls where they're clearly they're not necessary (i.e. when we dereference the variable on the immediately following line). Also remove the "variableName" message in some of them, particularly when they're internal variables.
Another another flaky test.
Update removal target for APIs that should be removed in 20.0 but which actually won't be.
Add mising nullness annotations to the fields in the io package in guava.
Run nested classes for real this time.
Some minor common.graph tweaks to avoid equals() checks when unnecessary.
add CacheBuilder.recordStats
Google Collections -> Guava
Strip some internal-only GWT modules.
Trivial cleanups:
Clarify the behavior of Map.size() in a MapMaker-built Map with weak or soft references, borrowing phrasing from CacheBuilder.
Replace constants (static final CONSTANT_CASE) declaration type which use the general collection interface (e.g. List) with an immutable type (e.g. ImmutableList).
Fixing the issue of XmlWriter not escaping \t, \n and \r in the
Update tests broken by CL 69197766's update to the public-suffix list.
Remove @Beta from Strings.common{Pre,Suf}fix.
Add a state transition listening mechanism to Service and implement in AbstractService.
Add Report-To header.
Replace unnecessary StringBuilder calls with String concat
Add @GI to failureCause overrides.
Optimize BigIntegerMath.sqrt.
Small formatting change from internal change.
Fallout from MOE update:
Rollback [] for AtomicDouble(Array) that added jdk5 support.
Fix some typos in guava-[gwt,testlib,tests]/*
Reduce the memory consumption of undirected graphs by storing the incident nodes explicitly in an "UnirectedIncidentNodes" class, rather than in a Set.
Add the method Network.edgeConnecting().
Update Guava versions to 19.0-SNAPSHOT.
Fix typo in ValueGraphBuilder.
Add Futures.catching{,Async} to replace Futures.withFallback.
Remove JAVA_WHITESPACE.
Document the retention of listeners added to Guava implementations of ListenableFuture.
Make Optional GWT serializable.
Add sorting methods for the unsigned primitives in common.primitives.
Avoid importing classes that don't exist in GWT.
Fill in some missing javadoc. Only checked a small number of files.
Guava issue 783: Fix handler finder w.r.t. subclasses and interfaces.
Allow slicing a ByteSource starting at an offset that is >= the source's total size.
Reformat with google-java-format
Migrate from easymock to mockito in javatests/com/google/common/util/concurrent
Update publix suffix data.
Fixed bug/532.
Update Public Suffix data.
Allow for the possibility of the CacheLoader load not taking enough time for the system clock to tick in LocalLoadingCacheTest.
Open source base.Verify in Guava 17.0
Swap out truth 0.7 (and older source version) and swap in 0.10 with gwt support
Fix compile-time constant expression overflows
Update the Public Suffix List.
Fix the extra space that shows up in ValueGraph's javadoc summary.
Add the notion of RegistrySuffix to InternetDomainName.
Reformat common.primitives with google-java-format.
Expose {Int,Long}Math.mean in Guava 14.0.

Add a new BF strategy. The old one is subtly broken. For more information, see: https://code.google.com/p/guava-libraries/issues/detail?id=1119
Applied package sanity tests to common.util.concurrent
Rename ValueGraph to Graph.
Fix buggy test identified by CollectionIncompatibleType.
Avoid generating garbage while evaluating and() and or() predicates.
Run g4 fix on all the files in common.graph.
Typo
Steer users away from ListenableFutureTask.
Use @Nullable on public *methods* consistently for Guava classes of common.base
Optimize DoubleMath rounding implementations, avoiding branches and expensive floor/ceiling operations where possible.
Specify that EvictingQueue is FIFO.
Add @CheckReturnValue to c.g.common.primitives.
Add nullness annotations on the field in AbsatractIterator.java


Change toString() methods of returned Predicate instances to consistently use the "code-like" style.
Release permutations()-based test.
More reformatting.
Add parsing test that caught a regression in overflow detection.
Update Truth version to 0.18.
Improve exception message for Stopwatch start() and stop().
Eliminate the hacks that we needed in order to use ClassValue and Unsafe on Android.
Test rejectionPropagatingExecutor under GWT.
Fix more Guava copyright headers.

Fix calls to contains(Object) and get(Object) that pass a value of apparently the wrong type.
Use SortedMapTestSuiteBuilder and NavigableMapTestSuiteBuilder more widely.
Fix a few formatting nits
Stop stripping lowasser's username.
Test setValue(null) (both success and failure cases).
Work around GWT overflow problems in IntMathTest.
Prepare for Java-8-specific changes to common.hash.

Fix a call to checkArgument in SimpleTimeLimiter.newProxy to use string substitution.
- discuss segment behavior in concurrencyLevel
Recognize that the reason for an early completion might be cancellation rather than exception.
Rephrase the equals() javadoc in Graph. Remove same statement from Network since there currently are no subinterfaces of Network. Clean up a reference to "relation" (that's impressive it snuck in considering we ditched that name long before we actually checked in any code!).

Automated g4 rollback of changelist 185433235.
Add .DS_Store to .gitignore.
Rewrite TreeRangeSet implementation to use its own, smarter complement implementation.  Most notably, complement().encloses(Range) is now a logarithmic-time operation.
Getting jdiff working more completely, so that a report can always be viewed of
take core cache classes out of Beta
Suppress tests under Android.
I was reading through the class-level javadoc (which could use some cleaning up, but I think jrtom said he's working on that), and this passage struck me. The latter two options don't seem like something that would actually happen. For example, we allow nodes of any type, so an impl where the nodes store the topology and cannot be shared across graphs doesn't really make sense.
Guava issue 1049: minor optimizations for CharMatcher
Enable command-line filtering of tests with, e.g., -Dtest.include=**/ClassPathTest.java
Many small improvements in common.collect.
- Use newFastestQueue in ConsumingQueueIterator so that we get ArrayDeque instead of LinkedList on the server.
Under Java 8, use Math.nextDown instead of FpUtils.nextDown.
Upgrade GWT version to 2.8.2, plus:
Optimize GCD implementation to use fewer branches for ~25% speedup.

Better SerializableTester Javadoc.	Strip reference to internal SerializationChecker from Guava.
Migrate from @MonotonicNonNullDecl to @MonotonicNonNull
Add method to parse a prefixed unsigned long, e.g. 0xHEX, decimal, #HEX, and 0octal
Reduce redundant iterator creation in Multimap.putAll(K, Iterable<? extends V>)
Fix typo in UsingToStringOrdering javadocs.
Enable goodtime-api for Guava (with some exceptions).
Eliminate some duplicated code.
Assign otherwise ignored Future return values to local variables. This change is part of [] which will eventually make it an error to ignore the return value of methods that return Future.
This change replaces usages of static final fields on CharMatcher, e.g. CharMatcher.WHITESPACE, with the equivalent static factory method, e.g. CharMatcher.whitespace().
Fixing missing dep in concurrent.
Suppress warning from comparing Object to itself. This was identified using Error Prone.
Ensure that Lists.transform preserves IndexOutOfBoundsExceptions thrown by the transform function.
Small simplifications to LocalCache to extend AbstractReferenceEntry where possible.
Rewrite the LongMath.SIEVE_30 constant in a more readable form. The new form is not numerically equivalent but the difference is only in the ignored bits 30 and 31.
Adding missing dependency.

Fix UnsignedInteger documentation.
Reduce sizes of exhaustive/random MinMaxPriorityQueue tests; they're taking way too long.
Rename otherNode() to adjacentNode() in Endpoints.
Mark the Queues methods that deal with ArrayDeque and LinkedBlockingDeque as internal only (they are JDK6 only).
Skip GWT tests on Travis.
google-java-format Stopwatch (and test) to minimize diffs introduced by
Use static import for Character char constants.
Update Truth location from org.truth0 to com.google.common.truth.
Add LocalCache.getOrDefault implementation.
Work around breakage in which release builds run maven-javadoc-plugin 2.7 in child poms, even though pluginManagement tells them to use 3.0.0.
Use assertNotSame(x, y) in place of assertTrue(x != y)
Makes copyNodes() and copyEdges() @GoogleInternal. kevinb mentioned earlier that he thinks those methods should be @GoogleInternal for now.
Test suite checking for fail-fast iterators.
hasEdge(): rename to hasEdgeConnecting(), remove @GoogleInternal annotation, and add to Network as well.
Make some of Throwables available under GWT.
6799892: Add FinalizableReferenceQueue.close method.
use isFinite instead of getExponent, from Louis
Remove unused HTML dependency.
Re-enable compilation of benchmarks in Guava now that caliper 1.0-beta-2 is out.
Add @CheckReturnValue to Lists, Maps, Multimaps, Multisets, Queues, Sets, and Tables.
common.graph: create (package-protected) ForwardingValueGraph and ForwardingNetwork classes, and use those (and ForwardingGraph) to simplify the implementation of the Transposed* inner classes in Graphs.
Added testEquals() to AbstractPackageSanityTests.
Add BaseEncoding.canDecode(CharSequence).

Add @CheckReturnValue to c.g.c.hash APIs
Improve performance of nested calls to Iterables.concat() and Iterators.concat() *without* using any additional memory. This CL brings the runtime from O(D^3) to O(D^2), where D is the nesting depth of concatenation.
Delete TestGraphBuilder/TestNetworkBuilder. Remove the testing subpackage from common.graph.
Fixed a tiny Javadoc typo. You might be asking yourself: why is he
Make Javadoc output quieter.
Add guarantee of insertion-based order to HashBiMap.
Add ByteSource.empty() and CharSource.empty().
Promote EvictingQueue from labs.
Give removal dates for Stopwatch ctors.
Add koeln TLD.
Minor re-ordering of gwt module declarations
Further CharMatcher optimizations, eliminating more unused code and especially identifying when the negation is better to precompute than the matcher directly.
woops.  remove dummy distributionManagement which is in the parent google pom.
Some documentation improvements for Ascii.truncate.
Overrides of synchronized methods should be synchronized
Fix bug in InetAddresses and performance problem in InternetDomainName (changed
add javadoc generation
This CL fixes method calls that incorrectly ignore the return
Shuffling from internal-only change.
Clarify the impact of having a synchronous refresh implementation.
Add Guava copyright header to files that were missing it.
Minor javadoc tweak.
Make CaseFormat.converterTo(), Enums.stringConverter(), and Maps.asConverter()
Remove public constructors from SimpleTimeLimiter.
Remove redirectTestOutputToFile from guava-testlib configuration.
Add RangeMap.span().
When \FFFE, \FFFF, or ASCII control characters are found in the input, replace them with \FFFD.
Remove @Beta from UnsignedInteger and UnsignedLong.
Propagate cancellation for Futures.inCompletionOrder
Update public suffix patterns
More assorted cleanup:
Add MoreExecutors.platformThreadFactory(), an AppEngine-aware version of Executors#defaultThreadFactory.
Improve some javadoc in Preconditions.
Remove c.g.c.base.Stopwatch#toString(int).
Deprecate InputSupplier, OutputSupplier and all public methods in common.io that use either type. Also release methods on Byte/CharSource that take ByteProcessor and LineProcessor so that the equivalent methods in Byte/CharStreams can be deprecated reasonably.
Remove a redundant RegularImmutableSortedSet workaround for comparators that are inconsistent with equals().
Add Longs.tryParse.
Add static factory methods to CharMatcher equivalent to the existing constants.
manual sync
- add cache cleanup
Delegate the Ranges implementations to Range.  (I don't know why I didn't do this in the first place.)  Also clean up common.collect code to use Range and update the docs throughout.
Fix for Android crash caused by mis-aligned call of Unsafe.getLong on a 4-byte aligned field offset.
Clean up usages of deprecated Truth has() Collection methods:
Update edgesConnecting().size() and edgesConnecting().isEmpty() to be more efficient for Networks with parallel edges. In particular, take advantage of the cached successor multisets. Currently the methods are always O(D). This will also be O(D) if successors hasn't been invoked, but will be O(1) for future calls. For example, with something like:
Remove deprecated appendTo(Object&Iterable&Iterator) overloads.
Add a value-merging collector for ImmutableTable.
Making Queues#drain calls timeouts more accurate, by potentially adding a System.nanoTime() call.
Fixed signature compatibility issue.
Added min, max, lexicographicalComparator tests
Next gigantic code drop.
Fix lastIndexOf reference in BooleansTest.
Delete the common.graph.algorithms subpackage. Move the... unusual retainWithTransity() method into the same package as its only caller. Move inducedSubgraph() into Graphs (dropped the "get" prefix) and tried to apply some sense of ordering to the class.
Deprecate old UnsignedLong methods
Add a test for hashInt() vs. a loop w/ putByte().
Expand Javadoc of Multimap to clarify unusual hashCode implementations, as per Guava issue 1722.
Hashing.consistentHash: Add more tests to test that the C++ and Java implementations are equivalent.

Fix https://github.com/google/guava/issues/2804 issues with nested Iterators.concats on partially advanced iterators.
Add Multisets.sum and Multisets.difference.
Enable tests that are newly runnable under GWT:
Strip mentions of soft references from Guava.
Graph.java: clarifying the requirements around node/edge objects.
Remove the use of static, shared buffers for skipping/discarding data.
A few small cleanups to Reflection.
Fix typos in UnsignedInts docs
Add @GoogleInternal propagateCancellation to Futures.
Use string substitution for MapMaker checkNotNull.
Add ByteSteams.exhaust(InputStream) and CharStreams.exhaust(Readable).
Add @CheckReturnValue to ListMultimap and SetMultimap. This forces the caller of these APIs to "do something" with the result of the call.
Address comments left on CL 28921581 and CL 28923961.
Fix a deadlock in the new addListener implementation and also tweak the docs on stopAndWait which are out of sync with reality.
Update Public Suffix List.
Add notes about circular buffer to EvictingQueue javadocs.
Don't silently swallow Errors.
Change HashBasedTable to be backed by LinkedHashMaps so iteration order is deterministic.
Standardize that Functions.foo().toString() returns "Functions.foo()." (I've preserved two existing exceptions: compose(b, a) (which returns "b(a)") and forMap(map, default) (which returns "Functions.forMap(map, defaultValue=default)"). I don't know whether that's ideal, but it doesn't feel worth spending too much time worrying about.)
More tests for ObjectArrays.
Add tests that the custom hash table implementations expand correctly.
Import publicsuffix.org's test data.
Reduce iterations of testBuilder_bruteForce under GWT.
Rollback of: Change CountingInputStream and CountingOutputStream to require a non-null delegate stream, as reported in Guava issue #1869.
Make Charsets GWT-compatible now that Charset is emulated.
Add ImmutableList.sortedCopyOf.
Shuffling from internal-only change.
Add DoubleMath.mean. (Includes a few drive-by lint fixes on DoubleMathTest.)
De-@Betaify Optional.
Address https://github.com/google/guava/issues/2008 by discarding references to iterators in Iterators.concat after they have been iterated over.
Remove the jsr-330 annotations from ServiceManager and remove javax.inject from
add osgi metadata

For constant field declarations, you should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List). This communicates to your callers important semantic guarantees.
Delete the unused, @GoogleInternal copy* methods (in particular, copyNodes, copyEdges, and their Predicate-based counterparts). We're missing the ValueGraph version for all of these, and in the copyEdges case, also the Graph version. The Predicate-based methods have the obvious issue that we'd want to release with the Java-8 Predicate, not the Guava Predicate. copyNodes() and copyEdges() have the unfortunate issue of there not being an obvious correct answer for the whether the source or destination should come first in the parameters. And finally, copyEdges() requires us to decide what to do in the event that the destination graph doe not contain the incident nodes (and neither option is particularly intuitive). Overall, we'd rather not have to support these methods at this point.
Update Public Suffix data.

Write tests to verify that HashFunction shortcuts are equivalent to the long forms.  Then fix the legacy hashing implementations to unbreak them.
Simplify ImmutableSortedMap, reducing memory consumption and simplifying code.
Optimize Ascii toUpperCase/toLowerCase for generic charsequences

Applied package sanity tests to common.eventbus
Check that size and iteration are consistent with isEmpty after map.clear().  BiMapTestSuiteBuilder failed to catch an error of this type in HashBiMap, though other tests fortunately caught it.
Drop in SortedTreeMultiset in place of TreeMultiset.

Fix #1190
Update README to reference 19.0 as the latest release.
Roll-forward:
manual git sync
Make ImmutableTable serializable.
Fixing bug in NullPointerTester, where it fails spuriously for methods with no default value for @Nullable parameters.
Partial rollback of changelist 150805495.
Make some methods in guava-tests static.
Inline BaseHolder interface into Holder and Optional. It was causing issues to	Scala users and didn't really serve any purpose anyway. This also makes it	easier to start selectively eliminating some of the methods from Holder if we	want to do that.

Make smear() produce accurate results under GWT, hopefully.
More reformatting.
Make MapTestSuiteBuilder (also BiMapTestSuiteBuilder) work under GWT, and then use it there (as well as the non-GWT ImmutableSortedMapTest, where it should have been used already).
Fix bug in statistics benchmarks implementation of Knuth algorithms.

Add c.g.c.net.MediaType#TIFF
A few miscellaneous changes.
Test Collection.clear() to ensure that iteration and size() are consistent with isEmpty().
Fix tiny javadoc syntax mistake.
18 months from Guava 15 will be September, not August.
Set all @since NEXT to @since 23.3.
add Kevinb to the developers' section.
Set default GWT log level to WARN.
Fix another non-fatal GWT compile error I introduced:
Include method name and parameters in the message of the ArithmeticException during overflows.
Introduce the SubscriberExceptionHandler.
Javadoc generation fixes
Fold RegularImmutableSortedMap into ImmutableSortedMap, since that is now the only implementation.
java/com/google/common: CL generated with data from dead-code analysis
Document that regex bug has been fixed in recent versions of Android.
Automated g4 rollback of changelist 197588491.
ValueGraph implementation.
Switch BiMap tests all the way over to BiMapTestSuiteBuilder.
Redesign of MapMakerInternalMap with the motivation of saving a lot of memory by not wastefully having stuff that's unneeded. The algorithm (the j.u.concurrent.ConcurrentHashMap-inspired segments of hash tables) is untouched.

Add a test to demonstrate that hashBytes(Ints.toByteArray(i)) ==
Add SuppressWarnings for a couple places where a return value that shouldn't normally be ignored is ignored.
Migrate off of deprecated Truth methods (created using Refaster)
Make WrappingScheduledExecutorService's constructor protected, rather than package-private. (This is consistent with WrappingExecutorService.)
Clean up misuses of Truth where proposition values are passed into ASSERT.that() instead of the object under test.  This leads to patterns like:
Apply a handful of automated "returns @Nullable" suggestions.

Add ValueGraph.edgeValues(). Remove ValueGraph.edgeValueOrDefault(node, node).
Add tests for Lists.lastIndexOfImpl (Also removed one warning from ListsTest).
Complete the migration of static analysis annotations to Error Prone
Suppress @GuardedBy errors.
Reduce ProGuard retained code from usages of Multimaps.synchronizedXYZMultimap.
Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66
Adds a small clarifying comment to the Javadoc of common.cache.RemovalListener.
Add some test coverage for removeEdge().
Defer overlap checking in ImmutableRange{Set,Map}.Builder to the build() call, which matches the behavior in ImmutableMap.Builder and allows significantly faster handling of the case where ranges are inserted in predictable order.
Migrate tests for Multiset.add from AbstractMultimapTest to MultisetAddTester, split off from MultisetWriteTester as part of MultisetTestSuiteBuilder.
Prepare for release 26.0.
Roll-forward addition of ExecutionSequencer.
Shuffling from internal-only change.
Guava issue 1012: Sets.filter for NavigableSet
A few small cleanups to the murmur3 hash functions.
Move toString() implementation for graphs to Graphs.java. This is similar to how Graphs.equal() is implemented, and will allow Graph implementations to get toString() for "free".
Delete the TODO to "try creating an abstract superclass that NetworkBuilder and GraphBuilder could derive from."
Give removal dates (releases) for HashFunction#hashString(CS) and
- More carefully guard all of loadFuture's functionality inside the try block
Eliminate TestConcurrentMapGenerator, which isn't really buying us anything.
Add calls to flush() after writing to streams in ByteSink and CharSink.
Delete MapMaker.softValues().
#intFunnel() and #longFunnel() funnels, and a PrimitiveSink --> OutputStream
Fix a URL.
Avoid using inotify, which is causing problem under JDK10.
Copy static factory methods from HashCodes to HashCode.
Update Public Suffix List.
Add createConstant and createConstantUtf8 static methods. This avoids a lot of the weird initiaization ordering issues and allows us to consistently use create everywhere instead of having to rely on the constructor in some places.
Some minor improvements to FeatureUtil in the hope of speeding up c.g.c.collect tests.
Remove wildcard imports.
Move @CheckReturnValue to package-info.java so it applies to all of
Refactor AbstractMultimap into a separate AbstractMultimap and AbstractMapBasedMultimap.
Have Cache.stats() warn that stats might be untracked (zero). Addresses Guava
Add @Nullable annotations to computing map/cache implementations to satisfy Findbugs.
I remember why I did the parallel edge check before the self-loop check now! In the MutableGraph case, it's actually more efficient, because we can return early (rather than just throw an exception) in that case. And I have the same order in MutableNetwork just for consistency.
Fix particularly unfortunate typo in ValueGraph javadoc.
Don't require an exception to be thrown on a no-op putIfAbsent if put is unsupported.
Do not require an exception to be thrown on a no-op putIfAbsent if null is unsupported.
Add documentation of the happens-before guarantees of ListenableFuture.addListener.
Allow linear white space before ';' character in MediaType.
Prepare for release 23.6.
Broken people using c.g.c.base.Strings in Android (1.5?)
LinkedHashMultimap rewrite
Shuffling from internal-only change.
Specify the behavior of Hashers after Hasher#hash() has been called.
Make UnsignedLong final.
Release Futures.whenAllComplete and whenAllSucceed as @Beta.
Set explicit -Xmx for Guava tests in pom.xml.

Changing ImmutableList.of(E[]) and ImmutableSet.of(E[]) to be non-public. Callers should have been changed already to call .copyOf(E[]).
Extract CollectPreconditions with some common checks.
Updates.

Don't depend on the precise format of the failure message, only that it contains the expected string.
Rollback of changelist 56906311.
Scope an (internal) return type to UnmodifiableIterator.
Trivial cleanup.
Automated g4 rollback of changelist 131198531.
Upgrade Truth to 0.22
Add @CheckReturnValue annotation to Objects.equal() so that error-prone
Update Public Suffix List.
Remove GWT emulations that are no longer needed as of GWT 2.8.2.
Advertise Comparators.least/greatest collectors from TopKSelector.
Standardise message format for "duplicate key" IllegalArgumentException thrown from ImmutableTable.Builder.build().
Change TypeResolver to not construct new TypeResolver when all the bounds remain the same. This is to work round the change in JDK TypeVariableImpl.equals().
Scythe //java/com/google/common again.
Automated g4 rollback of changelist 69842250.
Added null check from NullPointerTester-generated proxies.
Reduce unnecessary code in Multisets and Multimaps
remove escapers from Guava for now
point build.xml at new
Migrate SortedMaps.transform{Values,Entries} to Maps
Replace new Stopwatch().start() with Stopwatch.createStarted().
Make BloomFilter concurrent.
Add an InternetDomainName test that confirms proper behavior when "under" TLD patterns overlap.
allow all write operations on asMap view
Total rewrite of emulated CacheBuilder to emulated LocalCache. Features added include recordStats, expireAfterAccess, ticker, and removalListener.
Don't release guava-tests to Maven Central
Export more guava-testlib tests to Guava, and move already-exported guava-testlib tests under guava-testlib.
Formal testing of null server and client in TeredoInfo
Make TreeRangeSet Serializable.
Fix embarrassing forEachEntry bug in ImmutableSortedMultiset.
Use j2objc-annotations instead of local annotations.
Make RegularImmutableSet extend ImmutableSet directly, not ImmutableSet.Indexed.
New implementation of Objects.ToStringHelper:

Reorganize methods between UnsignedLongs and UnsignedLong.	Make clear in the Javadoc the reasons to use each.
Remove extraneous semicolon.
Migrate benchmarks from SimpleBenchmark to Benchmark and update the runner to accept Benchmark.
Cleans up HashingTest.

Set version numbers to 24.0-jre-SNAPSHOT.
Incorporate latest mozilla tld changes.

Graduate Striped out of labs
un-deprecate FinalizableReferenceQueue and friends
Add ImmutableBiMap.Builder.put(Entry) overload, which had previously not been overridden from ImmutableMap.Builder.  Now, it correctly returns ImmutableBiMap.Builder.
Test ImmutableIntArray under GWT.
Quiesce the continuous integration builds a bit by running maven in batch mode (reducing chatter from download progress logging)
Open source com.google.common.graph into Guava.
Rename CleanPathTest to FilesSimplifyPathTest.
Remove more unnecessary @CheckReturnValues on APIs now that these packages are
Added SuccessorGraph/PredecessorGraph.
Automated (partial) g4 rollback of changelist 100047098.
Remove @Beta from APIs:
Update Guava's dependency on Truth to 0.35.
Add Annotations to a gwt.xml file.
Automated g4 rollback of changelist 97776570.
Rename addEdgeV2() to addEdge().
Implement ancient TODO to use EqualsTester. Use reserialize() with it to prove that absent() still equals itself after a round-trip.
Implement DescendingImmutableSortedSet, a skeleton implementation of ImmutableSortedSet.descendingSet().
Use MoreObjects.firstNonNull instead of Objects.firstNonNull.
Add the same overloads that Preconditions has in Verify.
Removing unused, untested non-public no-args constructor
Rename guava-complete to just guava per a conversation with kevinb regarding older naming decisions.
For public Guava only, rely on the GWT compiler's built-in @GwtIncompatible stripping instead of our custom stripping.
Automated g4 rollback of changelist 113583321.
Add Crc8HashFunction to compute the CRC8.

Eliminate references to ObjectArrays in the closure of ImmutableSet and ImmutableMap.
Group annotation dependencies at the top.
Added min, max, lexicographical comparator tests to primitives.UnsignedInts
Add @NullableDecl on the field in TopKSelector.java
Remove @CanIgnoreReturnValue from c.g.c.base.Ticker
Add the method Graphs.endpoints() that does what you expect: returns the endpoints corresponding to each edge in a graph. The whole "we print every edge in an undirected graph's toString() twice, and that's a feature not a bug *wink*" annoyed me. Also there's other cases, such as copyOf() and and getWeaklyConnectedComponents(), where we don't want to process each edge twice. In those particular cases they happen to be no-ops, but for cases where it's not, or where you do something computationally expensive, doubling up on undirected edges is bad :(
Remove the isDirected() method from Endpoints. Also remove Graphs.addEdge(), which was only used inside Graphs, and I wasn't a huge fan of (it's super easy to implement yourself if you need the functionality).
Deprecate GenericMapMaker.
Noninvasive patch for negative results from size().  See https://github.com/google/guava/issues/2108 for more details.
Louis's changes to remove JDK6-isms from DoubleMath
Provide serialization for UnsignedLong
Add @CheckReturnValue to Stopwatch
add Cache.get(K, Callable<V>)
Implement ImmutableRangeMap.subRangeMap(Range)
Add more consistency checks to AbstractGraphTest.
Pass a Locale to String.format calls.
Delete DiscreteDomains for Guava 15.
Stop using now-internally-deprecated Truth APIs (which are not yet pushed to open-source Truth), and leave a todo to migrate to the newer Truth apis once they are released to maven, or after Guava 18 is released and we can rely on snapshots.
Remove closing </li> tags.
Add Funnels.sequentialFunnel, an Iterable funnel wrapper, to Funnels.
Add @CheckReturnValue to the following classes: EvictingQueue, FluentIterable, and Ordering.
Some more cleanup of javadoc. Add specific language regarding undirected graphs since I feel the behavior there is non-obvious.

Fix presidential history, a.k.a. - the Multimap javadoc.
Add some missing dependencies in a GWT module.

Remove hardcoded graph toString() tests. Instead, simply verify that every node and edge appears in the graph's string representation. This is done for a few reasons:
Fix "Feburary" typo.
Remove references to on-demand computation of values.
Change TypeToken.method() and TypeToken.constructor() equals implementation such that List<Integer>.get() is unequal to List<String>.get() and List.get()
Reduce the memory usage of Networks by roughly 20%. Delete the IncidentNodes class. Remove (unused) equals/hashcode impl from NodeConnections. Additionally, removeEdge() is now O(1) in all cases (used to be O(D) for networks with parallel edges). edgesConnecting() is now O(1) for networks that don’t allow parallel edges (used to be O(D), even though a network without parallel edges cannot return > 1 edge for this method).
Restore documentation that Futures.catching is available under GWT but with some caveats.
Replace constants (static final CONSTANT_CASE) declaration type which use the general collection interface (e.g. List) with an immutable type (e.g. ImmutableList).
Add ImmutableMap.Builder.orderEntriesByValue.
Expand BiMapTestSuiteBuilder's tests for setValue calls on entries (which get run on both forward and backward BiMaps).
Fix Maven warning from duplicate Animal Sniffer reference:
Add a single parity test with known output from SMHasher (python).
Optimization of RegularImmutableMap.
Reformatting.
Reduce memory consumption of ImmutableSortedMultiset by eliminating the count array.
Log the default charset once during Charsets class initialization.
Prefer TODO with bug number over alias, plus add a couple TODOs re: graphs with parallel edges.
Add MediaType matching according to the model defined in the HTTP/1.1 Accept header.
ValueGraph.java: restore edgeValueOrNull() to edgeValueOrDefault().
Swap the nodes of an unordered EndpointPair to prevent callers from relying on the "ordering" of an unordered pair. Remove some superfluous "this." prefixes in ElementOrder (we generally only include "this." when assigning to a member variable).
bump version to r08-SNAPSHOT
Add @since 20.0 to the {ceiling,floor}PowerOfTwo methods.

Stop scaring Cache.asMap() users away from new Java 8 methods, which Louis made
Stop using MapSubject.hasKey() and .lacksKey().
Add missing @since 19.0.
isPrime: try to improve javadoc
Make some changes to generics so the Android branch can compile externally with -source 7 -target 7
Add overloaded primitive methods to ToStringHelper to avoid autoboxing
Run Animal Sniffer on guava-testlib and guava-test in addition to guava itself.
Support owner type subtype relationship in TypeToken.isSubtypeOf() and TypeToken.getSubtype()
Make SortedMapTestSuiteBuilder work under GWT.
Run more tests against MutableClassToInstanceMap by defining a type that implements 5 interfaces.
Fix SafeTreeSet so delegate.tailSet() is wrapped by a new SafeTreeSet as is headSet() and subSet()
Rollback gwt.xml change.
Fix edge case in EnumMultiset.remove
Temporarily avoid scrubbing cgdecker's username.
manual sync
Correct gender off-by-one error. :)
Make Graphs.oppositeNode() slightly more efficient. It performs the same number of equals checks (1 in self-loop case, 2 otherwise) but without the additional call to contains() - while still providing the incidence check.
Stop toString() on Stats and PairedStats throwing when the count is zero.
Test no-arg get() on pending Futures, even in a non-GWT setting.
Update Mockito version to 2.1.0-RC.1
Adds content security policy (CSP) headers, which are used by older user agents.
Add the most basic portion of our testing infrastructure required to make the Guava tests pass, and add a replacement for Assert.* so we can have the assertions available to the tests in this core library, without forcing a dependency on JUnit or any other testing framework.  The tests, themselves, of course, can remain dependent on JUnit.
Automated g4 rollback of changelist 158168944.

Remove the deprecated Service methods.
Add missing test case for emptiesLast.
Assorted cleanup:
Add @CheckReturnValue to more BaseEncoding APIs.
Reformat much of util.concurrent.
Remove com.google.common.labs.reflect.Signature. It has not gained any uses in
Change Hashing.smear to use MurmurHash3's mixK1, which appears slightly faster and more effective for use in open-addressed hash tables.
Small javadoc tweaks to Stopwatch based on external Guava issue #1492.
Add AsyncLoadingCache internally.
Added tests for Lists.IndexOfImpl
Add Multimaps.toMultimap(keyFunction, valueFunction, multimapSupplier) collector.
Add some performance enhancements to Striped:
Fixed a typo in the Predicates class documentation.
Move ForwardingBlockingDeque into c.g.c.u.c.
Update Public Suffix List.
Migrate all remaining Multimap.replaceValues tests from AbstractMultimapTest to MultimapReplaceAllTester
add missing @since tags, per the jdiff report
Stop claiming that Guava has only one dependency.

Make ImmutableTable serializable.

Improve docs.
Include java.lang.Lang from java.util.Util.
Update guava-gwt version to 23.0-SNAPSHOT; missed this last time since it isn't under current.
Micro-optimize, especially for runs of ASCII.
Make TreeMultimap.asMap() and keySet() return NavigableMap/NavigableSet, falling back to SortedMap/SortedSet on GWT.
Annotate AsyncFunction parameter as @Nullable.
rename MapMakerTests to MapMakerTest for Guava's sake
Added new API to allow filtering methods by return types:
Update Public Suffix List.
Shuffling from internal-only change.
Skip Map+Multimap toString() tests if NON_STANDARD_TOSTRING is specified.
Eliminate SingletonImmutableSet, partially folding it into RegularImmutableSet.
Make it so ValueGraph no longer extends Graph. Instead, provide a ValueGraph.asGraph() method. In a followup change, this will allow us to handle equals()/hashCode() "normally" and delete the Graphs.equivalent() methods.
Remove unnecessary string concatenation
- For a Collection<T> parameter that we don't know how to generate, fail the test. Previously, we would sometimes generate a Collection<String>, since the value is usually used only for equals() and hashCode() testing. (All this also applies to most other JDK and Guava collection types.) http://code.google.com/p/guava-libraries/issues/detail?id=1665
Migrate from jsr305's @CheckReturnValue to Error Prone's.


Fix bug in Helpers.isEmpty.
Fix a minor oversight in using a constant in LongMath for its intended purpose.
Migrate remaining Multiset.elementSet() tests to MultisetTestSuiteBuilder.
More reformatting.
Batch of 18 days' worth of changes, which I should be itemizing (sorry).
Add reverse methods to all primitive arrays in common.primitives.
add Cache.getAll and CacheLoader.loadAll
Make MediaType fully GWT-compatible.
Add @CheckReturnValue to the com.google.common.{escape|xml|html} packages and subpackages. This forces the caller of these APIs to "do something" with the result of the call.
Add NetworkBuilder.immutable().
Run nested classes in the open-source build.
Fix Guava Javadoc warnings.
Update the travis configurations to only build the "master" branch or any branches prefixed with "release" in order to reduce the duplicate use of build bots on travis for pull requests based on non-user-fork-originated branches.
Removing MoreAsserts call
Change bitCount from int to long.
Move the invokeAny implementation to a static method that can be used by ListentingExecutorService that don't extend AbstractListeningExecutorService.
Small refactor of AbstractGraph.edges() (move to inner class instead of anonymous class).
Deprecate CheckedFuture.
Expose collectors for Multisets accepting per-element counts
Support interface static methods and default methods for NullPointerTester.
Implement HashFunction#hashLong shortcut for murmur3_32
Add fragment escaper.
Added AbstractPackageSanityTests to apply automated sanity tests for an entire package.
Update Guava to Truth 0.24
Add @CheckReturnValue to the com.google.common.util.concurrent package. This forces the caller of these APIs to "do something" with the result of the call.
Define equality for Graphs so that a Graph never equals a ValueGraph. This allows ValueGraphs to have the expected behavior when you query valueGraphA.equals(valueGraphB) (i.e. values are taken into account as well).
Make GWT less spammy for Travis CI builds by changing its log level to INFO.
Deprecate the constructors in com.google.common.base.Stopwatch and Stopwatch#elapsedMillis and #elapsedTime.
Add some missing @Beta's for new stuff in 20.0.
Update definitions of equals() and hashCode() for Graph/Network. The new hashCode() shouldn't change any behavior (of course) but should be more efficient for directed graphs. equals() does change behavior in certain corner cases (see [] but it was arguably broken before. To keep things simple, we now flat out say directed != undirected.
- Stop manually stripping @MediumTest. MOE has stripped it automatically for a while. Remove end-of-line comments that were interfering with stripping in this particular case.
Minor collections cleanups.
Document RFC 1123 host label digit prefix mandate
Add more class-level documentation and examples for RangeSet.
Migrate from jsr305 @Nullable to Checker Framework @NullableDecl.
Add missing @Nullable to Preconditions.
deprecated/remove LoadingCache methods from Cache
Make TreeMultiset.elementSet() return a NavigableSet (albeit not in GWT).  Dependent on cl/36499908.
Add a new HostAndPort.fromHost() factory, which behaves like fromParts()
Clarify docs on UnsignedLong.fromLongBits/UnsignedInteger.fromIntBits.  Add UnsignedLong.valueOf(long), which rejects nonnegative values.
Fix the tests in primitives for tryParse not to generate their own NPEs.
Simplify the implementation of LongMath.sqrt.
Provide information about which parameter we were passing null for and what values we used for the other parameters -- even if another exception was thrown.
Inline checkNotNull call.
Add UnsignedInts.{checked,saturated}Cast.
Remove @Beta annotations from definitely stable standardXXX methods from ForwardingXXX classes.
Added null tests against return values of MoreExecutors and Futures
Open source Comparators.
Adds a ForwardingDeque.
Add a fallback in Ordering.leastOf to ensure the worst case of the quickselect component is bounded to O(k log k).
Fix an ancient bug in Iterators.cycle: Once we spawn a second iterator, we shouldn't remove from the first one.
Add ConcurrentNavigableMapTestSuiteBuilder, which also applies the ConcurrentMap testers to the sub-map views.
Add scheduled deletion date of June 2016 to deprecated methods in Objects.
Minor changes to TearDownStack:
Mark DoubleMath as @GwtCompatible, allowing these methods to be used from GWT code:
Simplify ImmutableList and its implementations.
ignores.
Make Ints.{to,from}ByteArray GWT compatible.
Removes java/util GWT emul dependency
Add @GwtIncompatible annotations to top-level classes.
Add caliper as a dependency.
Remove the *degree() methods from the Graph/Network interfaces. In a followup CL, we'll add a (correct) implementation of degree() as a static utility method in Graphs. But I'd like to get the client-affecting changes (i.e. ones where the longer I wait the more merge conflicts I get) out ASAP.
Add javadoc and test coverage stating that non-hypergraph edges are always incident to either one or two nodes.
{*Graph, Network}.java: change documentation of allowsSelfLoops() and allowsParallelEdges() to correct the type of exception that is thrown when one attempts to modify them in a way that the constraint prevents (e.g., adding a self-loop to a graph that doesn't allow them).

Add Stopwatch.elapsed() which returns a java.time.Duration
Add collectors for ImmutableRangeSet and ImmutableRangeMap.
Replace http://errorprone.info with https://errorprone.info since that site
Add submitAsync and scheduleAsync methods, to ease the deprecation of Futures.dereference
Expanding test coverage on several methods
Implement GraphBuilder.immutable().
Remove JUnit4 @Test annotations from JUnit 3 tests, where they're no-ops.
Add toString() overloads for all of the singleton enums in c.g.common.primitives
Refactor tests for BiMaps to use BiMapTestSuiteBuilder.
Optimize CharMatcher as described in Guava issue 1223.
Remove TODO, which is no longer an issue now that we're committing to GWT 2.8.0.
Improve initial approximation to sqrt(x) when x.doubleValue() == Double.POSITIVE_INFINITY (x >= 2^1024).
Tiny simplifications to HashBiMap.
Rewrite HashBiMap to share entries between the forward and backward maps, yielding ~38% savings on memory.
Move Network validation into a static method (will be useful for adding Network coverage to MutationTest later).
Link to one templating system as an example.
Add Ints.tryParse. The implementation is based off that of Android's java.lang.Integer#parseInt.
Add nullness annotations on the fields in AbstractSortedMultiset.java
Mark Hashing#weightedConsistentHash tests as @GoogleInternal
Add convenience methods for samples.e0(), etc., and migrate to them.
Created BiMapTestSuiteBuilder.
Remove tests from AbstractMultimapTest that overlap with MultimapRemoveTester and MultimapRemoveAllTester in MultimapTestSuiteBuilder.
Push down logic of AbstractMapBasedMultimap.createKeySet into subtypes.
Fix SingletonImmutableSet's isHashCodeFast(), and slightly reduce its memory footprint.
Remove unused imports and warnings.
Warn not to call any default methods on the map returned by Cache.asMap().
specify 1.6 as source/target for maven-compiler-plugin
Fix range typo in comments of subRangeMap.
Add the following method to the Graph interface:
Implement Range.isContiguousWith(Range), which defines the conditions under which two ranges will be coalesced in RangeSet.
Added filter(SortedSet) to allow for the creation of a filtered SortedSet
Fix a bug in AbstractFuture.setFuture
Release Java 8 changes to Guava.
Remove oraclejdk10 from Travis build.
Add missing @Override annotations
Make ListenableScheduledFuture GwtCompatible.
Take steps to fix Cache.refresh race condition.  Specifically, do a racy check outside the lock to see if the value is already being refreshed, and do an optional check inside the lock to eliminate the race condition entirely.
Improve ImmutableCollection.asList(), making more asList views delegate contains() queries to the backing collection.
move LocalCache into LocalCacheInternalMap, then rename LocalCacheInternalMap to LocalCache
Shuffling from internal change.
remove build.xml, and unneeded libs
implement basic serializability for ComputingCache
Open source Converter and friends in Guava 16.0
Add ClassPath#getClassesRecursive().
Clarify what does and doesn't count as a lookup in CacheStats.
Use ArrayDeque and PriorityQueue under GWT (where they're newly available), and provide synchronizedQueue, synchronizedDeque, and MinMaxPriorityQueue there.
Deprecate implementations of Function.apply that should never be invoked directly.
Changed AbstractInvocationHandler#equals() and hashCode() to delegate to the invocation handler, to allow customization. I needed it to create dynamic proxies that works for SerializableTester.reserializeAndAssert().
Fix generics in Cache which are breaking the MOE build.
Open-source known hashes for crc32, triggered by our new automated test that expects to find them.
Move a comment that had become out of place.
common.graph: fix formatting error in Graph/ValueGraph/Network Javadoc.
GWT/Guava maintenance:
Add @CheckReturnValue to MapMaker.
Remove tests for Multimap.get from AbstractMultimapTest that duplicate tests in MultimapTestSuiteBuilder
Fix JSR305 links yet again.
Add a "constrainToRange" method to constrain a value to a closed interval.

Add @CheckReturnValue to more classes in common.base.
Add DecodingException and decodeChecked to BaseEncoding
Add Hasher#putUnencodedChars and HashFunction#hashUnencodedChars.
Add nullness annotations on the fields in NaturalOrdering.
Make EvictingQueue serializable.
Add oraclejdk8 to the build matrix for Guava on Travis CI.
Remove unneeded "emulated=true" to fix open-source GWT tests.
Make FindBugs marginally happier.
rename CustomConcurrentHashMap to MapMakerInternalMap
Add Google-internal ManualRateLimiter and (as part of that work) public Uninterruptibles.tryAcquireUninterruptibly.
Update google collections dependency to rc3.
Split testFuzzyCompare(), which seems to be the main test to time out recently.
Optimize {Int,Long}Math.log10 with techniques from Hacker's Delight.
Migrate users from HostAndPort.getHostText() to HostAndPort.getHost().
Replace SingletonImmutableMap with SingletonImmutableBiMap
Add ConcurrentHashMultiset.create(ConcurrentMap).
Add nullness annotations on the field in AbstractSequentialIterator.java
Add Ascii.truncate methods, which truncate a string to a maximum length, appending a string such as "..." as an indicator if the resulting string was truncated.
Fix bad Javadoc tags.
Migrate AbstractMultimapTest tests for Multimap.entries() to a MultimapTestSuiteBuilder tester.
Add ImmutableList.builderWithExpectedSize API.
Add Uninterruptibles methods for Condition.
Prepare for Public Suffic List update, which removes the '!' rule that this file was using.
Add @Nullable to AbstractSequentialIterator's computeNext() method return value so that [] doesn't complain
Applied package sanity test to common.cache. I had to add some checkNotNull() to LocalCache and CacheLoader, based on my understanding of the javadoc. Though it does change the contract: some didn't throw NPE on null, some threw UncheckedExecutionException.
Use compact data structures in ImmutableMultimap builders.
Add missing @throws tags to Verify.
Continue migrating to type annotations for @Nullable
Release more Queues methods: newAD, newLBD
Make ArrayTable gwt compatible.
Use com.google.caliper.legacy.Benchmark instead of com.google.caliper.Benchmark. This CL facilitates the move from a superclass-based API to an annotation-based API. Benchmark and legacy.Benchmark are equivalent classes, so this is NOT a behavior changing CL.
Split CloseablesTest into CloseablesTest and FlushablesTest.
Bump Checker Framework annotations version to 2.5.2.
Tiny cleanups after cl 35973933. Fixed a spurious character that snuck in and extra spacing.
Use a binary release of Truth.
Update public suffix list.
Promise at least weakly consistent iteration for asMap().
Sort and removed unused imports in com/google/common.

Rename MutableGraph.addEdge(N, N) to MutableGraph.putEdge(N, N) (to indicate that Graphs do not support parallel edges and for consistency with the upcoming ValueGraph interface). Change the order of parameters in MutableNetwork.addEdge(E, N, N) to MutableNetwork.addEdge(N, N, E).
Manually reject leading plus signs since JDK7 won't.
Group overloads together.
Add a constructor to VerifyException to permit a cause to provided alongside a message.
Document the weird problem with Optional<? extends T> along with its workaround.
One last (?) round of presizing builders where possible in common.collect.
Rewrite the Tld Pattern generator.
Add Maps.asMap(NavigableMap, Function) to complete the set of asMap views.
Fix buggy advice.

Add example anti-pattern to getCauseAs() Javadoc.
Clarify purpose of CacheBuilder.newBuilder's function signature.
Remove assorted unused fields and variables.
Hasher#putString(CharSequence) to Hasher#putUnencodedChars(CharSequence)
Fix LocalCache.compute deadlock issue, also added unittests.
Replace a couple usages of Iterators.emptyIterator().
Add the methods Graph.hasEdge() and ValueGraph.hasEdge(). Also add some test coverage for ValueGraph.asGraph().

Release HostAndPortTest.
Major refactoring of EventBus, in preparation for further changes.
This CL fixes method calls that incorrectly ignore the return
Instead of using the SortedLists utility class, go straight to Collections.binarySearch in the implementation of RegularImmutableSortedSet.
Big code drop in prep for cutting r04 next week.
Upgrade Truth to 0.33.
Make ListenableFutureTask non-final but not subclassable externally.
Expand on "question 3" from the graph/network javadoc, which I felt was a little hard to parse. Also some misc. javadoc cleanup.
Add .intersects() to RangeSet.
More test coverage!
Accidentally removed -use and -linksource from javadoc task.
Move SortedMaps.difference to Maps
CharMatcher space improvements (Small = same trick used for Whitespace, Medium = traditional hash table, large = what we do now).
reorganize hash tests
Add another test for Iterables.removeIf.
Add @since tags and nitpick Javadoc formatting from CL 52250001.
Internal GWT change.

Add MediaType.withParameters(String attribute, Iterable<String> values)
Start ConcurrentMapTestSuiteBuilder, adding a tester for putIfAbsent.
Have more helpful error messages.
Make the copying done for guava-gwt not verbose.
call newBuilder
Test that changes to an Iterator are reflected in the backing collection.
Add a method to Uri that allows us to get the port (via HostAndPort).
Polishing
To generate random hashable things, use Random instead of Object hash codes.
Add @CheckReturnValue to Joiner, Objects, and Splitter.
Change some javadoc to reference node U and V in the context of connectivity (to be consistent with methods on EndpointPair).
Make AbstractFuture#done protected & rename it #afterDone to decrease chance of collision with existing subclasses.
Remove the redundant (inherited from Graph) adjacentNodes() method from Network, as well as some other javadoc cleanup I missed in []
Remove unneeded and unavailable inherits from testModule.gwt.xml files.
Some javadoc tweaking to NullPointerTester. Please comment away, I have absolutely no confidence in my wordsmithing
Deprecate Stopwatch#elapsedTime, Stopwatch#elapsedMillis, and Range#asSet.
Get rid of usages of TestUtil from common.io test classes and open source most of FilesTest.
Update public suffix list.
Add c.g.c.net.HttpHeaders to Guava (since 11.0).
Some small fixes for Guava (methods called were @GI).
Implement Object#equals() and #hashCode() for stateful HashFunctions.
Change all instances of encoded.subSequence() to use a simple start index offset, which reduces the Java memory footprint for TrieParser by at at least 130 MBs. This is because the original call to subSequence() would generate a new String on the heap for each call, where as just using an offset avoids the need to generate a new String all together.
@GoogleInternal a helper method that's only used by an @GoogleInternal test.
Return to scrubbing cgdecker's username, which we temporarily stopped doing in 69045357f5b4.
Just cleaning up old @since tags.
Among the Futures methods that run user callbacks, those that don't take an Executor will be deleted.  This CL migrates them to the counterparts that take MoreExecutors.directExecutor() as such Executor in the parameter list, exactly the way that the old method works.
Just a little reformatting.
Ensure that AbstractIterator does not hold onto its next reference after it has been returned by next().
Change the return type of Network.incidentNodes() from Set<N> to Endpoints<N>. This also replaces the source() and target() methods on Network and moves them to Endpoints.
Migrate users of the deprecated HashFunction#hashString(CharSequence) to HashFunction#hashUnencodedChars(CharSequence).
Introduce Strings.lenientFormat(), copied from Preconditions.format(). Rewrote documentation but the method body remains unchanged.
Avoid allocating for Multimap.removeAll(absentKey) implementations.
HashIterator fix for LocalCache
Increase GWT test timeout.
Automated g4 rollback of changelist 57771110.
Refactor the three places in common.collect that we convert a List<E> to an ImmutableMap<E, Integer>.
Link pages to the wiki.
Major refactoring of the com.google.common.graph APIs (including updates to client code):
Make ListeningScheduledExecutorService.schedule* return a ListenableFuture
Some tweaks to the Endpoints class:
1. Omit sun.security.* methods from our Android tests.

Support reflection-less atomic updates in AggregateFutureState and InterruptibleTask as in AbstractFuture.
Delete Multimap.contains{Key,Value} tests from AbstractMultimapTest that are redundant with MultimapContains{Key,Value}Tester.
Initial release of the escapers into Guava.
Expose Hashing.concatenating() in Guava.
don't allow garbage collected values to be "copied"
Add Immutable{Map,BiMap}.builderWithExpectedSize API.

Update javadoc. The previous sample code was not actually doing what the comment describes. In particular, it was calling adjacentNodes() instead of successors(). The comment says "all nodes reachable from node", but adjacentNodes() will also travel AGAINST the direction of the edge (not necessarily "reachable" in the directed case).
Also benchmark creating SortedSets, which predictably fare worst, but at least
Update the hashing benchmark to include all of the different hash

Fix bug in Optional#presentInstances.
[guava concurrent] Renamed SerializingExecutor to SequentialExecutor. Turned SerializingExecutor into a proxy to SequentialExecutor so two Components classes that directly use it have a chance to catch up.
Fixes deadlocks in LocalCache.asMap().compute() if the Function throws
Open source the HMAC hashing libraries (@since 20.0).
Prepare for release 25.1.
Fix indentation.
Throw IllegalArgumentException if a loop in the causal chain is detected in Throwables.getCausalChain() and Throwables.getRootCause().
Use J2ObjC's @RetainedWith annotation to prevent leaks resulting from reference
Remove support for deprecated GWT Dev Mode (but continue to support Super Dev Mode).
Link to https://github.com/google/guava/wiki/Why-we-deprecated-Throwables.propagate
Run StreamsTest and ComparatorsTest under GWT.
Use given throwable as the cause for the IAE that's thrown during loop
Remove null boilerplate from Converter subclasses.
bump maven version.
Update Guava version to 14.0-SNAPSHOT.
Improve allocation behavior of ImmutableMultiset.Builder.addAll(Multiset).
Eliminate Platform#unsafeArrayCopy
Implement ImmutableEnumMap
Fix a few typos in the javadocs of Queues#synchronizedQueue
Specify that behavior is undefined for non-ASCII input.
Correct the spelling of the Range class.
Guava publicsuffix .gwt.xml fixes:
Remove more possible static-init deadlocks (https://github.com/google/guava/issues/1977).
- new @Beta classes for Guava 12.0
Make effectively final fields final
Inline some test logic to support some torturous internal build cases.
De-Betaify a slew of APIs in math, net and util/concurrent.
Update Public Suffix data.
Nuke 85 lines of code in Collections2 by adopting common.math. Which apparently fixed a size calculation bug that wasn't found due to a bad test that thought C(34,14) > MAX_VALUE.  (?)
Remove ancient `@Beta` annotations, making these APIs "final".
Simplify EqualsTester/EquivalenceTester/RelationshipTester by pulling the common assertions up into RelationshipTester.
Make findbugs a provided dependency to avert dep conflicts when using findbugs 2.0.
Trim lots of unused and redundant code.  In particular,
Add Java8-specific methods: copyOf(Stream), Builder.addAll(Stream), stream(), forEach(IntConsumer). (w/lowasser)
Fix name spelling in pom.xml.
Use normal, compile-time @GwtIncompatible stripping instead of unusual, runtime UOE throwing for getMethod calls.
Add base.StandardSystemProperties
rename CacheBuilder.refreshInterval to refreshAfterWrite
Super source Objects to have Objects#equal(String, String) to improve JS performance.
Update the public suffix list.
Add @SafeVarargs to Predicates.or(Predicate<? super T>...).
make NullPointerTester.isNullable() use @CheckForNull too
Adds Queues.synchronizedQueue (@Beta)
Migrate IRangeMap into RangeMap's position.
Update public-suffix list.
add Cache.refresh
Change travis config to not try to build on JDK7.
Reformat parts of util.concurrent that I had mostly already reformatted.
Rename com.google.common.io.Io-gwt to "com.google.common.io.Io" to follow the pattern used in our other packages.
Fix calls to deprecated Stopwatch.elapsedMillis() by inlining that method's implementation ("elapsed(MILLISECONDS)").
Deprecated NPT.ignore(Member); added ignore(Method) overload as the new preferred method. No one ignores constructor in []. And the code to ignore constructor would read less meaningful.
Fix ForwardingMultimapTest
Admit that the TestSuiteBuilder classes aren't *really* GWT-compatible, despite our hacks to make them appear so.
Implement Sets.cartesianProduct to iterate in lexicographical order.  In the process, Lists.cartesianProduct has been implemented on a package-private basis.
Add a simple unit test for AbstractCache#aggregate.
Rollback
Remove no-longer-needed suppression method.
Use Map convenience methods in a few more places.
Omit some unnecessary parens
Clean up most usages of Input/OutputSupplier in tests in common.io.
Remove HostAndPort.getHostText() (scheduled for removal in 22.0).
Make GWT's LocalCache.values() not be a Set, since it may contain duplicate values.
drop spurious '?' in UnsignedInts.toLong() javadoc
Improve Throwables.propagate javadoc
Migrate users of deprecated Range#asSet(DiscreteDomain) to
Fix CollectionFeature.ALLOWS_NULL_QUERIES to MapFeature.ALLOWS_NULL_KEY_QUERIES.
Add nullWriter(), a Writer that discards everything written to it.
Fix a couple of issues with JDK7 javadoc style by using a slightly customized version of the default stylesheet in Guava. Specific issues this fixes:
Add BaseEncoding benchmarks for decode and stream methods
Automated g4 rollback of changelist 177586281.

Update Public Suffix List.
AbstractLinkedIterator -> AbstractSequentialIterator.
Fix ImmutableMap.copyOf's null checking on a singleton map with a null key or value.
Continue type annotation preparations in NullPointerTester
RegularImmutableSet extends ImmutableSet.Indexed.
Document Predicate vs. Java 8 issues.
Fix tests for IntMath.isPowerOfTwo and LongMath.isPowerOfTwo. The existing tests copied the implementation
Throws UOE in MutableTypeToInstanceMap Entry#set()
Optimize Utf8.encodedLength even more, at the cost of increased complexity.
Add overloads to Preconditions checkState,checkArgument and checkNotNull to avoid boxing and varargs for the most common parameter combinations.

Try out @OverridingMethodsMustInvokeSuper, and remove some unnecessary work in AbstractMapTester.
Re-run google-java-format on //java[tests]/com/google/common/ (up to escape) now that some
Fix cases where GWT sometimes couldn't infer which types are serialized.
test updates
Fix InternetDomainName case normalization (only ASCII characters are to be normalized to lowercase).
Remove unused methods from c/g/common/collect
Used UncheckedThrowingFuture in another place.
Remove the following methods from
Make TearDownStack thread-safe
Implement UnsignedInts.decode, corresponding with UnsignedLongs.decode.
Shuffling from internal-only change.
Include failing parameter index in exception - useful for inherited classes where it's
Add RangeSet.asDescendingSetOfRanges() and RangeMap.asDescendingMapOfRanges().
Update to Truth 0.20 to match the internal version and to eliminate non-fatal compile errors. (AbstractArraySubject used Pattern and Matcher from java.util.regex.)
Add @since 23.0 to new (or with new return type) edgeValue methods in ValueGraph.
Suppress warnings from existing nested futures.
Remove "SetView" from all graph implementations. See [] for why it should be killed with fire. In particular, it made the returned Sets have O(N) (in both time and memory) size() and contains() methods, and in one case, O(N^2) iteration!
I tripped and rewrote HashBiMap in the fully compact form, with no redundant code or storage, like I had assumed was too much work.

De-@Betaify AtomicDouble and AtomicDoubleArray.
Optimize BigIntegerMath.binomial to use long arithmetic for as much as possible.
Update truth to 0.11
Remove most of our uses of <code>.

*Graph.java: add @since NEXT to incidentEdges(), and retire the use of @inheritDoc in favor of just copying the documentation over wholesale.  (This preserves the @throws tags in the subinterfaces.)
Fix javadoc warnings.
Remove or hide APIs scheduled for deletion in Guava 16.
Add a test that ensures any new HashFunctions must have an entry in
Add tests:
Move htmlEscaper to the top.
Apply test.include to testlib tests as well as main tests.
Migrate usages of Truth's Subject.is(Object) to isEqualTo(Object). The former is being removed.
Addded reference of TypeToInstanceMap to ClassToInstanceMap javadoc.
Make Collections2.orderedPermutations work under GWT again.
Use diamond operator for rest.
Move ExecutionSequencer into guava as @Beta.
Fix 2 bugs in the AbstractService implementation of listeners.
Minor readability and coverage improvements to Utf8Test:
Use byte[]/short[]/int[] for hashtable depending on size
Fix a minor issue in TypeToInstanceMap javadoc.
Add a bootstrap JVM class replacement that overcomes an incompatibility between JDK5/6.  This allows us to compile in such a way that our concurrency code works in J2SE 5 and 6.
Don't rely on MessageDigest.isEqual() for constant-time evaluation in HashCode.
JavaDoc grammar fix.
Prepare for release 27.1.
GWTify Futures#withFallback and its tests.
Migrate tests for Multimap.keys() from AbstractMultimapTest to MultimapTestSuiteBuilder.
Delete AbstractListMultimapTest, which no longer has any tests not already part of ListMultimapTestSuiteBuilder.
Implementation of Sets.combinations(Set, int), approved by []
Javadoc improvements:
Include all source files as resources in guava-gwt jar.
Strip <resource> lines from .gwt.xml. They are not yet supported by a release version of GWT. (Support was added in internal CL 62367280, which imported <https://gwt.googlesource.com/gwt/+/f39e11150ef0ea635a7f7d30154221907775efc6>. I'm not sure when our build was changed to generate the new elements.)

Document the requirement that, for directed graphs, incidentNodes iterates as source then target. Move other directed graph specific documentation into DirectedGraph.
Pick up a whole lot of TLD changes.
(w/lowasser) Streams.forEachPair()
Suppress log output from tests in the console by redirecting it to files.
Avoid importing ImmutableList from Ordering.
ValueGraph.java: modify edgeValues() Javadoc to clarify that the behavior of get() if passed an EndpointPair not in the graph is different from the behavior of edgeValue() if passed two nodes not connected in the graph.
Change Splitter#on(String) to Splitter#on(char) for single character strings
Move poms to the proper directory.
Demote Network.adjacentEdges() from an interface to a utility method.
Begin adding "most common element" operations to Multisets.
Avoid generating calls to GWT-incompatible setUp or tearDown methods.
directExecutor() scaretext, take 152.
ImmutableDoubleArray
Add @CheckReturnValue to the entire c.g.c.graph package (by adding it to package-info.java).
deprecate MapMaker's caching methods in favor of CacheBuilder
Removes java/util GWT emul dependency

Seperate tests for GoogleInternal methods into their own class
Reformat with google-java-format (a few hand corrections necessary).
Remove @SuppressWarning for "CheckReturnValue" and "CanIgnoreReturnValue" in
Migrate from jsr305's @Immutable to Error Prone's.
Shuffling from internal-only change.
Link to JDK7 Javadoc instead of JDK6.
Automated g4 rollback of changelist 108345794.
Many Javadoc fixes, including fixes for public issues:
MOE stripping fixes:
Add static factory methods to Stopwatch: createStarted() and
Minor changes to Utf8 as part of internal change.
Add FileBackedOutputStream.asByteSource(), a ByteSource-returning method to replace getSupplier().
Add a microbenchmark for c.g.common.base.Joiner and other common implementations.
Add MoreFiles.fileTraverser().
Migrate off of deprecated Truth methods (created using Refaster)
Miscellaneous documentation fixes and internal cleanups.
Remove get().subList() tests from AbstractListMultimapTest that are redundant with ListSubListTester in the derived test suite for ListMultimapTestSuiteBuilder
Add streaming encoding and decoding to BaseEncoding.
Trivial fallout from internal-only change.

Change BaseEncoding.toString() to return "withPadChar('=')" instead of "withPadChar(=)". This is more consistent with how the string literals are printed for the alphabet.
Fix the serialization of sparse immutable tables.
Simplify ImmutableMultiset implementations.
Update to new Truth package.
Give date-based deletions a stay of execution (24 months, not 18).

Add testers for ConcurrentMap.replace(K, V, V).


Add MultisetEqualsTester to MultisetTestSuiteBuilder.
Adopt getDone() and getDoneFromTimeoutOverload() in other Future tests.
Use diamond operator.
Add convenience methods for e0().getKey(), etc., and migrate to them.
Include test.txt in Guava to fix ClassPathTest.
Clean up some exceptions. In general, the pattern we try to follow is that if the user provides an invalid argument (e.g. a node not in a graph), we throw an IllegalStateException with a detailed error message. If it's an internal method and something is wrong on our end, we throw an IllegalStateException (and don't usually bother with an error message).
Deprecate ComparisonChain#compare(Boolean, Boolean).
Remove an unused import.
Update README to point to 20.0 as the latest release and update version numbers to 21.0-SNAPSHOT.
Remove Google specific headers from HttpHeaders.
Test Android code on Travis with two different environments to hopefully avoid timeouts
- throw InterruptedException from CacheLoader methods
Add a service provider for the regex library used by common.base (e.g. Splitter.onPattern).
Mark the new Service methods as final in AbstractService,
Print the actual output of failed tests.
specify missing version numbers
Update Public Suffix data.
Deprecated SimpleTimeLimiter's constructors and added a static factory method.
Slightly update wording on Graph.equals() javadoc.
Add more null values to NullValues, and rename to ArbitraryInstances.
Fix typo in GraphBuilder.nodeOrder() javadoc.
Just reduce the default expectedValuesPerKey for HashMultimap from 8 to 2,
Add @CheckReturnValue to com.google.common.reflect. This forces the caller of these APIs to "do something" with the result of the call.
Wrap the Method.setAccessible call in Types.TypeVariableInvocationHandler in try/catch so that it is not an error for it to fail.

Add Queues.synchronizedDeque(Deque<E>).
Rewrite the Tld Pattern generator, take 2.
Overhaul of the Queues javadocs on the static factory methods.
Improve Hasher docs about Hasher.putChar('a').putChar('b').hash() being
Update truth, animal sniffer, error prone annotations, and JUnit
Use StringBuilder.reverse() instead of reimplementing it.
Remove use of JDK 7 language feature from a Guava benchmark. Guava hasn't
manual sync
Update Preconditions overloads that were added in 20.0 to have @since 20.0 and new Verify overloads to have @since NEXT.
Fix Striped.lazyWeakReadWriteLock so that holding on to just the read or just the write lock will not allow the ReadWriteLock to be garbage collected, which many users find surprising.
Provide better documentation for the state transitions that are legal/illegal for a Service to make.  Also change the behavior of service.start() such that it will now throw exceptions when trying to start a TERMINATED or FAILED service.
Make all AbstractFutures behave like TrustedFutures under GWT.
test when resetOnFinalize==true
Remove Stopwatch.elapsedTime and elaspedMillis
It's January 2013!
Add JDK Deque implementations to Queue tests.
Final tweaks for r03 and rebuild javadoc.
Further Javadoc changes.
Fix medium-hanging rawtypes warnings.
Avoid the fragile assumption in SortedMapTestSuiteBuilder that all tested maps are Map<String, String>
Add TestingExecutors.noOpScheduledExecutor to common/util/concurrent/testing.
Add missing nullable annotations on the fields in the cache package.
Add tryParse implementation for Doubles and Floats.
Correct two typos in IDN doc.
Increase test coverage for Networks. Add clarifying statement in javadoc for inEdges() and outEdges(). Modify the sanityCheck method to also check that a set is equals() to its ImmutableSet copy (this will also make sure the set doesn't have duplicate elements).
Make Enums.getIfPresent ~16 times faster for 80% hit rate, ~72 times faster for 20% hit rate.
Marks the methods in Longs regarding byte array conversions as GWT compatible,
Add lazyStackTrace.
Enable GoodTime API checker for guava-testlib.
Doc-only changes to the InternetDomainName family clarifying validation options and fixing some references to deprecated methods.
Change the definition of hashcode for Networks (map of edges to endpoints) to more closely mirror hashcode for Graphs (map of edges to value). Also the map we're basing the hashcode on is now half the size for undirected networks, which is nice (a downside is that isolated nodes don't affect the hashcode, but I'm not too worried about that).
add CacheBuilder.refreshInterval
A few small hash changes.
Add "et" as an effective TLD.
Update public suffix list.
Start running the tests for guava-testlib under Android.
Open-source RangeSet/RangeMap classes so that Louis can rebase his http://code.google.com/r/wassermanlouis-guava/source/detail?r=fb106087948b2c0da9f5f6ed610d2df3ebb0240a&name=rangemap on top of them.
Multicatch!
Change javadoc to refer to Mutable* interfaces. Technically, Graph/Network don't dictate anything when adding edges, because they don't have methods for adding edges.
Add @CheckReturnValue to UnsignedBytes, UnsignedInts, and UnsignedLongs (except for parse methods and methods that throw exceptions that people may reasonably want to catch).
Forbid empty ranges in ImmutableRangeMap.Builder.
Suppress another test that's flaky on Android.
Remove now-unused dependency on the Checker Framework compatibility annotations
Applied package sanity tests to common.io
Publish j2objc cycle_whitelist.txt to the public Guava repo.
Fix Guava GWT module:
AbstractNetwork: add a functionally correct (if not super-efficient) implementation of edgesConnecting(), because it's easy to do wrong.
Update GWT deps to 2.8.0-rc2.
Integrate common.math into common.collect.
remove from Guava methods which were scheduled for deletion in release 12.0
Use maven-javadoc-plugin 3.0.1.
Add nullness annotations on the fields in MapMakerInternalMap.java.
Delete AbstractCollectionTest, which is now only being used in multiset implementation tests, and which has no remaining tests that aren't already part of MultisetTestSuiteBuilder.
Small fixes to some incorrect @since tags.
Add @Beta to Optional#or(Supplier) and Optional#or(Optional).

Create TrustedListenableFutureTask so that our listener executor services can produce futures compatible with the new setFuture optimization.
Shuffling from internal-only change.
Automated g4 rollback of changelist 151172294.
Plug a bunch of unit testing holes in common.net.
Make LittleEndianDataOutputStream final (like LittleEndianDataInputStream).
Rephrase to stop suggesting that there are only two overloads of transform().
Dummy change to test something.

Open source Splitter#splitToList.
Add AtomicDouble and friends.
Add HashCode.padToLong() to replace Hashing.padToLong(HashCode).
Improve invalid character exceptions from BaseEncoding
Mark Utf8 as emulated, since it has @GwtIncompatible methods.
Move type annotations immediately before the type they apply
Make Charsets.ISO_8859_1 GwtCompatible.
Add tests for https://github.com/google/guava/issues/2238
Some updates to Graph javadoc.
A teensy weensy optimization for the no-self-loops case.
Begin exporting sources of Guava for Android.
Fix bug where ImmutableSortedMap could accept a null key/value pair.
ImmediateFuture.toString() implementation to provide the returned value or exception.
Add java.time.Duration overloads to CacheBuilder:
Give MapMaker the same workaround as Cache for Android's concurrency-unsafe toArray() implementation.
Suppress tests under Android.
Rewrite the AbstractFuture Javadoc.
Update Mozilla public suffix list from 2013-06-06 to 2013-11-07.
Add additional test of existing behavior of Splitter.limit(n)
Add @CheckReturnValue to CaseFormat, Enums, Equivalence, Joiner, MoreObjects, Strings and Suppliers.
Fix OSGI metadata creation in Guava build.
Make degree(node) on directed networks O(1) instead of O(D), at the cost of a teensy bit of memory (a self loop counter). In actuality it doesn't seem to take up any extra memory, perhaps due to how the object is padded/aligned. Additionally, this CL makes iterating through incidentEdges() slightly faster on directed networks if no self-loops are present. In the undirected case, adding and removing self-loop edges is now slightly faster.
Make minor simplifications to WellBehavedMap, and small optimizations to ForwardingSet.

In the FinalizableReferenceQueue code, remove the unnecessary nested exception
Make BaseEncoding @GwtCompatible.
Suppress log output from tests in guava-testlib by redirecting it to files.
Changed NullPointerTester to use Invokable
common.graph: remove j2cl annotations, as no one's using it from j2cl, it has no immediate prospective users, and it doesn't support Network-related capabilities anyway.
Fix https://github.com/google/guava/issues/2125 by having all the AbstractService delegate classes forward their toStrings() to their outer impls.
Update testers to recognize that null may be a restricted element
Changed ClassSanityTester.testEquals() to check against use of == on objects. We assume that the implementations should call equals()
don't unnesessarily constrain type of getIfPresent and getAllPresent parameters
Automated g4 rollback of changelist 146841288.
Add specialized slice support to ByteArrayByteSource.
Redo: Use the context class loader in Resources.getResource(String), instead of
Remove references to SourceCodeEscapers from javadoc.
More reformatting.
Make some minor simplifications in common.base.

Delete tests from AbstractMultimapTest of the multimap views in isolation, that is, tests that initialize the multimap, get the view, and don't reference the multimap afterwards.
Add an Automatic-Module-Name manifest entry.
Delete redundant performance overloads from SingletonImmutableList.
Remove the public equal/hashCode/toString methods from Graphs. There are a variety of reasons for doing this:
Some additional test coverage for undirected graphs + minor cleanup.
Add Files.fileTraverser().
Simplify ImmutableCollection implementation and related code.  Specifically:
Merge GraphErrorMessageUtils into GraphConstants.
Re-fix https://github.com/google/guava/issues/3081.
Output "java.util.Map.Entry" under Java 9, as the JDK does.
Delete WellBehavedMap.
Fix ForwardingList documentation.
common.graph tests: unify some duplicate constructs (enums, methods, constants) and put them in TestUtil.java.
Update Truth dependency to 0.31 and add truth-java8-extension dependency for guava-gwt tests.
Make the shortcut methods in the new hashing API faster by using the legacy implementations.
Fix https://github.com/google/guava/issues/3081.
In Java 8 branch, fall back to j.u.HashMap based implementation in ImmutableBiMap if hash flooding appears probable.  (Partially motivated by external feature requests, partially by []
Adds BloomFilter#mergeWith(BloomFilter).
Irrelevant no-op diff created by internal-only changes.
Add emptiesFirst/Last to Comparators for easily comparing java.util.Optional
Add "stateless and thread-safe" to the HashFunction javadocs.
Make log level for GWT configurable for Maven builds.
Change x == x to equivalent isNaN() in preparation for making it a compile error.
remove escapers from Guava (won't make it for Guava 12)
This change replaces usages of static final fields on CharMatcher, e.g. CharMatcher.WHITESPACE, with the equivalent static factory method, e.g. CharMatcher.whitespace().
Mark a test that uses StringBuilder.appendCodePoint as GwtIncompatible.
Add a validation check to AbstractDirectedGraphTest, opposite to the one in AbstractUndirectedGraphTest:
Migrate from Truth's deprecated iteratesAs(...) to containsExactly(...).inOrder().
Make ImmutableCollection.contains abstract, and fix some embarrassing oversights of where it should have been overridden.
Added code example to AbstractInvocationHandler to suggest users to use Reflection.newProxy().
Specify behavior with self-loops in degree() javadoc.
Remove the "? super" from the return type of the nodeOrder/edgeOrder methods. It doesn't actually provide any additional functionality for the user, just a mild annoyance. Also this is in line with the recommendation here:
Make all "Tester" classes *end* with "Tester," and simplify our exclusions accordingly.
Add *degree() methods back to Graph/Network interfaces, with correct formal definition this time (self-loops count twice).
Remove @CheckReturnValue from individual classes now that it is in
Optimize CharStreams.copy to take advantage of known Readable/Appendable types.
De-betaify c.g.c.annotations.Beta
Improve EvictingQueue.addAll()'s performance by skipping the head of
Use ImmutableSet.of().iterator() instead of Iterators.emptyIterator().
Make CharEscaper.escapeSlow final (as UnicodeEscaper.escapeSlow already is).
Replace usages of deprecated Objects.toStringHelper() with
Don't specify weakValues in a flaky test where it's not required.
(These changes apply ONLY to our Google-internal Android-specific copy of Guava.)
common.graph classes: clean up documentation, change Object references to generic type indicators where possible in the internal implementation classes (this was already done for the public APIs).
Move ClassInSubpackage... actually into a subpackage. This looks to have not been moved correctly when forking common.reflect
Optimize DenseImmutableTable so that it doesn't rebuild rows and columns on the fly.
Add dummy test methods to Compact(Linked)HashSetTest so that the Maven test runner doesn't complain.
Use specialized entry types for ImmutableMap, and use these in the builders to avoid redundant copying of entries.
Remove @Beta from Throwables.throwIfInstanceOf() and throwIfUnchecked().
Remove public constructors from SimpleTimeLimiter.
Document the purpose of the or() compilation tests.
Makes FreshValueGenerator more friendly to collection types especially immutable collection types. This reduces false positives and also reduces the need to set sample instances for collection types.
Update AtomicDouble in Java 7 to use AtomicLong directly instead of AtomicLongFieldUpdater.  This is a relatively simple way of protecting against bugs like the Samsung bug, and clm@ and I agreed that the simplification over what e.g. AbstractFuture has had to do was worth the extra allocation.
Fix up .gwt.xml file as a part of some internal changes.
Implement Multisets.filter(Multiset, Predicate)
Roll back CL 23327883's very broken FeatureSpecificTestSuiteBuilder optimization.
Add note about nodes being valid Map keys to PredecessorsFunction and SuccessorsFunction.
Shuffling from internal-only changes.
Add HashFunction#hashObject() shortcut.
More strictly restrict when fields are added to the set of relevant fields, only supporting non-synthetic String fields.
Change CacheBuilder constructor modifier to private, and
Remove open-source project and code which provides a backported Java6-style ExecutorService for Java5 compatibility, with all the extra build steps involved in using it.
Deprecate Closeables.closeQuietly.
Add elementSet and entrySet tests to MultisetTestSuiteBuilder.
Open source tests for ByteSource.read(ByteProcessor) and CharSource.readLines(LineProcessor).
Fix broken generic types in ElementOrder. Added two tests, neither of which compile with the existing code!
Enable GoodTime API checker for Guava
Add missing GWT emulation of interruptTask().
more gwt test standardization
Fix tests that failed if we couldn't recursively delete securely by using Jimfs and just getting rid of the whole file system each time.
Refactor the test classes from the previous hierarchy:
Collections coming from ImmutableRangeSet.asSet() and ImmutableRangeMap.asMapOfRanges() can now be correctly serialized.
Fix bad line breaks.
Automatically release snapshots to Maven and Javadoc/JDiff to gh-pages on push.

Make some AbstractMapBasedMultimap helper methods static.  (As part of the process, make Sets.unmodifiableNavigableSet GWT-compatible, as NavigableSet is no longer an issue.)
Update link to GWT docs that died with Google Code.
Skip unnecessary presizing.
In EnumsTest, rewrite code that creates a second copy of TestEnum in a second ClassLoader, so that it doesn't try to add instances of the second TestEnum to a Set<TestEnum> (which is a Set of the original TestEnum). In Java 8, apparently this is a little bit less erased so it fails.

Remove some email addresses from @author tags.
Implement expireAfter*(0, *) in terms of maximumSize(0).
Add @CheckReturnValue to Ascii.

Refactorings in util.concurrent so more code can be shared.
Add nullness annotations on the fields in DescendingMultiset.java
Test for resources.toByteArray
Strip out comments pertaining to maximumSize() and expireAfterWrite() (which are no longer public).
Suppress soon to be GoodTime errors ('time' is now considered a keyword).
Change SortedMapTestSuiteBuilder and DerivedCollectionGenerators to correctly handle SortedMaps whose keySet()s are not SortedSets--the spec of SortedMap.keySet() doesn't require that it return a SortedSet, and it apparently didn't at least for TreeMap in JDK5.
Add Multimaps.asMap() helpers that return a Map with more
Catch NoClassDefFoundError and generic Error, the types thrown by JVM8 and by modern versions of Android.
Java6 cleanups for Guava 12.0
Instead of skipping testDivNonZeroExact entirely under Android, skip only the problematic cases.
Annotate checkNotNull's input and output as @NonNull.
Take advantage of new GWT AbstractFuture tests to enhance overall AbstractFuture testing:
Promote StandardSystemProperty to @Beta in 15.0
Reduce allocation in Iterators.concat.
ValueGraph: fix implementation of edgeValueOrDefault().
Enable source artifact generation in all builds on guava, and use that plus other resources to build the Guava-gwt artifact. Then enable the gwt artifact in the aggregate build.
Remove no-op main methods from Caliper benchmarks.
Remove obsolete maven configuration which used to merge in METADATA.MF files into the jar, but no longer needs to, since maven will just scoop up the created METADATA.MF produced by the osgi bundle generator.
Remove @CanIgnoreReturnValue from c.g.c.collect.ClassToInstanceMap.getInstance()
Fix the issue with classes that should only be included in the failureaccess artifact being included in the main Guava jar.
In Java 8 branch, fall back to an ImmutableSet backed by j.u.HashSet (and its binary tree magic) if apparent hash flooding is detected.
Create constants for the SourceMap header
And let's rename Utf8.length() one more time, this time to Utf8.encodedLength().
Implement HashFunction#hashString shortcut for murmur3_32

Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time's Interval.gap when migrating to Java Time which has no Interval class.
Bump version of maven-dependency-plugin.
Deprecated Throwables.propagate()
Make SloppyTearDown.logger private.
Miscellaneous cleanups.
Expire entries at insertion+duration instead of insertion+duration+1 to be consistent with the GWT emulation and, we hope, with common sense.
Add an autoIncrementStep to FakeTicker, similar to the autoIncrementStep in FakeClock
Expand common.hash ByteBuffer support, adding a default AbstractHasher hashBytes implementation and expanding HashTestUtils to test more about the hashing of ByteBuffers.
Automated g4 rollback of changelist 110542265.
Test default Charset.
Reformat common.base with google-java-format, to 100 columns. A few changes by hand as discussed.
Add @CheckReturnValue to Strings.nullToEmpty(). For more information, see attached bug.
Disallow null-returning suppliers in Optional#or
ImmutableRangeMap is now serializable.
Optimize ContiguousSet.asList() for the three built-in DiscreteDomains.
Make sure all public classes/interfaces in common.graph have @Beta and @since.
add Cache.getIfPresent, Cache.put, and CacheBuilder.build()
Fix FunnelsTest to @GI Funnels.sequentialFunnel tests
Explicitly test that BREAKING_WHITESPACE is a subset of WHITESPACE.
Add some validation checks for undirected graphs.
Remove a stray @Beta annotation on a test.
Reduce the number of different ranges TreeRangeMap attempts to test with; these were taking exorbitant amounts of time in Android tests.
Move GenerateTldPatterns to a new directory.

Shuffling from internal-only change. Will be reverted soon.
Prepare for release 24.0.
Deprecate softValues, not weakValues.
Avoid having a static Joiner constant in Predicates.  This typically eliminates both Joiner and the Predicates class itself, which was prevented from being optimized away by the presence of the static constant.
Removes @WeakOuter from AggregateFuture.RunningState and subclasses. The weak
Fix minor bug in setValue method of HashBiMap.inverse().entrySet() entries.
Integration of Justin Sampson's fixes to Monitor and addition of extensive tests.

Revert parts of CL 33393713 that changed Splitter.on(",") tests to redundant Splitter.on(',') tests.
Fix some bugs related to calling Preconditions.checkNotNull on expressions
In Java 7 branch, don't bother using Iterators.forArray in RegularImmutable{List,Set}.  The default ImmutableList.listIterator implementation amounts to the same thing, an AbstractIndexedListIterator delegating to the array.
Sync with latest upstream jsr166e changes.
Implement CharSource.asByteSource(Charset).
Adds ContiguousSet.create(Range, DiscreteDomain).  Follow-up CLs will remove Range.asSet(DiscreteDomain).
Shuffling from internal-only change.
Split MultisetCollectionTest suites into the appropriate test classes
Adding ByteBuffer support to Hashing APIs. Rollforward now that broken user is fixed.
Run some common.collect.testing tests under GWT.


Clarify statement in addListener documentation.
Shuffling from internal-only change.
Add test suites for Multimap.equals to MultimapTestSuiteBuilder
Remove tests of Multimap.get() from AbstractMultimapTest that are duplicated in MultimapGetTester
Allow nulls in GeneralRange.
Migrate from assertContentsAnyOrder() to Truth.
Add LegacyHashing.fprint96() (aka, the first 12 bytes of the SHA-1 hash).
Add UnsignedInts to primitives.
Add CharSource.forEachLine(Consumer).
Update Mockito version to 2.1.0
Use CollectPreconditions.checkNonnegative more widely in common.collect.
Fix overflow issues in LocalCache, as per Guava issue 1761
Fail more clearly when escapers run out of buffer space.
Streams.concat: Propagate close to sources streams
Add MapToStringTester and MultimapToStringTester, and fix ForwardingNavigableMap.StandardDescendingMap.toString() to correctly iterate in descending order.
add Beta disclaimer
- Move close of <pre>{@code} blocks (i.e. "}</pre>") that are on a separate line up to the last line of the block contents, eliminating an extra blank line between the pre block and what follows.
Make "emptiesFirst(naturalOrder())" infer the type more reliably.
Minor improvement to Ascii.truncate implementation.
Add tests for ConcurrentSkipList{Map,Set} and for a TreeMap with no comparator.
Remove unused private nested class from SortedMapInterfaceTest.
Stop erroneously placing the "normal Java" version of TestPlatform under guava-gwt.
Rename methods in the new Utf8 class, rewrite some javadoc, and a few very small code improvements.
Start adding testing for ProGuard and allocation testing for common.hash.

Fixed the javadoc of RangeSet.
Attempt to finish adding Java 8 usage notes to our functional types.
Expand test coverage. Make validateGraph() a static method so ValueGraphTest can use it (a MutableValueGraph is a not MutableGraph so it can't extend AbstactGraphTest directly). Move removeEdge_existingEdge() up in the test hierarchy.
NullPointerTester should not require @Nullable on the param of an equals() override
common.graph: adding new EndpointPair-accepting overloads.

Make Closer public and @Beta. Also, change Closer.rethrow(Throwable) to propagate IOExceptions by default and change all calls to rethrow(e, IOException.class) to rethrow(e). Add a pointer from Closeables.closeQuietly deprecation text to Closer.
Rewrite Ints.tryParse(int) with a copy of the Longs.tryParse implementation, which accepts only ASCII digits.
Do not copy in Immutable{List,Set,SortedSet} construction.
Remove tests from AbstractListMultimapTest that are redundant with ListMultimapPutTester.
Roll forward.
Change all the reference to event handler to event subscriber.
Don't ignore exceptions thrown by tearDown() (unless they would mask exceptions from the test itself).
Added new method omitNullValues() to ToStringHelper.
update scm urls
Add hash flooding protection to ImmutableMultiset, falling back to a JDK HashMap backed implementation when probable flooding is detected.
Make checkedMultiply available under GWT.
A round of promotions/deletions/updates for Guava 11.0.
Removed debug printlines
Release Converter.from(Function, Function) for Guava 17.
Add IntMath.mean and LongMath.mean. It's an efficient implementation resilient to overflow which is useful when computing midpoints.
Strip isPrime benchmarks from Guava, since isPrime itself is @GoogleInternal.
Add Multimaps.filter methods
Remove Closeables.closeQuietly in Guava.

Update maven-javadoc-plugin to 3.0.0.
Update README for Guava 21.0 final and set snapshot version to 22.0-SNAPSHOT.
Delete constraints APIs.
HostAndPort.java: Deprecate getHostText() in favor of getHost().
Migrate BiMap-filtering methods out of Labs.
One missing copyright, one missing @since. Should cherrypick, but not end of world if not.
Resolve "." to "." instead of the empty string.
Update Mozilla PSL.
- clarify CacheBuilder's similarity to MapMaker in the @deprecated messages
Add TestSuiteBuilder tests for Maps.transform*
Reference Futures.get from CheckedFuture
Push down definition of ImmutableSortedSet.createDescendingSet to subclasses, so we don't get DescendingImmutableSortedSet unless we actually have an ImmutableSortedSet implementation that uses it.
Assorted cleanup of cancellation:
Undeprecate Closeables.closeQuietly for the moment. We'll deprecate it on the 14.0 release branch.
Use Splitter instead of String.split, in InternetDomainName.
Some enhancements for Futures.transform and Futures.catching
Fix SlicedByteSource.sizeIfKnown() to work in the case where offset + length > Long.MAX_VALUE.
Fix apparently harmless but still incorrect references to module name.
Delete EmptyImmutableBiMap, instead using a RegularImmutableBiMap with null hash tables.
Make getUnchecked available under GWT.
Remove unused variable declarations that are followed by fail().

This change replaces usages of static final fields on CharMatcher, e.g. CharMatcher.WHITESPACE, with the equivalent static factory method, e.g. CharMatcher.whitespace().
Add function to return the number of boolean values that are true from a variable length boolean input.
Fix: NullPointerException in getAllPresent().
Add {Sets,Maps}.toImmutableEnum{Set,Map} Collectors.
Delete EmptyImmutableList, replacing it with a singleton instance of RegularImmutableList.  This makes the common case for ImmutableList bimorphic instead of trimorphic, resulting in significant improvements to benchmarks.
Document the relationship between Multiset and AtomicLongMap.
Discourage use of CheckedFuture.
Remove unnecessary dependency.  This modules doesn't contain any tests - the tests for this module are in guava-tests, where this is more appropriately specified.
Update an @link in javadoc.
Add EvictingQueue.remainingCapacity().

When a new entry exceeds the segment's maxWeight all by itself, don't bother evicting anything else, only the new one. Still go through all the motions of actually adding and evicting it; otherwise I fear the code complexity will skyrocket.
Suppress exceptions raised from argument's toString methods during lenient formatting.
Remove a few unnecessary casts that were previously required due to the old "? super" signature. Some slight tweaks to AbstractNetwork.toString() method (no behavioral changes).
Add missing @NullableDecl on fields in google common base.
Depend on Truth 0.25.
Branch eventbus, net, and escape for Java 7
Stop ignoring http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6533203 in iterators now that the bug has been fixed in GWT for a while and the JDK for even longer.
Add some test coverage.
More reformatting.
Create TrustedFuture (name TBD) a trusted 'less abstract' subclass of AbstractFuture that we can use to optimize setFuture and try to use it everywhere in util.concurrent.
Copy in the Google Collections 1.0-final sources, unmodified. Next step:
Add extensive tests for simplifyPath that aren't prefixed with /b/c.
I thiiiink there's a chance the current removeEdge() impl could still cause a CME. Either way, I have a change that avoids the issue and is more efficient, by removing the self node from the predecessors/successors before we start iterating through them.
Create sameThreadScheduledExecutor().
Optimize collapseFrom and trimAndCollapseFrom so that they
Verify that the RegularImmutableAsList constructor doesn't check for nulls, to help verify that ImmutableSet.asList() is O(1).
Update to GWT 2.8.0-rc1.
Resurrect SingletonImmutableList on server side only.
Make TestLogHandler GWT-compatible.
clarify verbage regarding the cleanup of entries with reclaimed keys/values (Issue 841)
Refactor RangeSet into an interface and an abstract skeleton
Fix FinalizableReferenceQueue class leak which prevented the
hold strong references to new entries added during testing loops
use 'latest' for non-release version
Adding test for skipFully
Use an anonymous class for AbstractGraph.edges() This was changed recently ([] because of some planned changes we ended up going a different direction with, so now I think it makes more sense inlined.
Migrate from easymock to mockito in javatests/com/google/common/hash
Disambiguate Collection.toArray() call so that the test passes in Java 11 where a new toArray method was added.
Introduce listenablefuture and failureaccess artifacts, plus InternalFutureFailureAccess.
Update MutableGraph javadoc to state in no uncertain terms that there can only be a single edge connecting a pair of nodes. Delete TODOs regarding parallel edges for Graphs, which we will not do.
Filling in coverage for last couple of uncovered branches

Replace Google Code URLs with corresponding GitHub URLs.
Short-circuit null check in Throwables#lazyStackTraceIsLazy
Apply `assertTrue(obj instanceof Class)` -> `assertThat(obj).isInstanceOf(Class.class)` refactorings to c.g.common.
Add @CheckReturnValue to RangeMap and RangeSet. This forces the caller of these
Prepare for the same renamings for UnsignedInteger as in UnsignedLong
Small tweaks to some methods in AbstractGraph/Networks.
Suppress new CollectionIncompatibleType Error Prone check by casting
Try to improve Splitter documentation
bug fix: don't decrement count and send spurious notification when refresh+get are concurrent with invalidate
Miscellaneous cleanups:
Graduate labs.reflect.Invokable and labs.reflect.Parameter.
Clean up usages of deprecated Truth has() Collection methods:
Dump a bunch of GWT support classes out to guava.
Update Public Suffix data.
have CacheLoader.reload return ListenableFuture
Export input file for new CleanPathTest tests.
Add missing nullness annotations to the fields in the concurrent package in
Lower "expected degree" for internal maps, of which we have O(N) per graph/network. This greatly reduces memory consumption for graphs of small average degree, in exchange for a small performance hit for graphs of large average degree.
Create maven metadata for tests and testlib, disable two tests missing testlib support, and add modules for them.
"Fix" Types.toString doc for arrays.
Make ImmutableSortedSet implement NavigableSet.
Add SERIALIZABLE feature to TestSuiteBuilders.
[]
Split off Multimaps.filterXXX overloads for SetMultimap (and filterKeys(ListMultimap)).
Modify recordStats to not accept a value in same manner as setWeakKey
Fixes, standardizations, and noise reduction in Futures tests.

The example is below, not above.
Fix javadoc errors reported by IntelliJ IDEA.
Remove the unnecessary "bulk" operation Features from the TestSuiteBuilders.
Add RangeMap.getEntry method.
Add @CheckReturnValue to com.google.common.collect package. This forces the caller of these APIs to "do something" with the result of the call.
Automated g4 rollback of changelist 56995761.
Bump maven pom versions to r04-SNAPSHOT (where they should be).
Attempt to address https://github.com/google/guava/issues/2131 by removing the if (count != 0) check.
Update imports ordering to the new java import order.
Somewhat trivial cleanups:
Optimize LongMath.isPrime.
ARGHGH, guess I was in the wrong directory when submitting... amateurs...
Upgrade Guava to use Truth 0.28 for its tests.
NullPointerTester hasn't thrown Exception in a while, so stop declaring that all its users throw it.
Add SortedCopyBenchmark and document its findings in the Ordering javadoc.
Improve the javadoc for mod.
Update Verify.java @since NEXT tags to 23.1.
make more tests pass
Add Google-internal memory consumption tests for all top-level Multiset implementations.
common.graph classes: mark types and methods as @GoogleInternal that are not yet ready for release in Guava 22.
Woops - seenExceptions should only be released when the future is done, not on failure!
Remove static map allocation and map lookup in base.Defaults.
Update Public Suffix List.
Rename AbstractExecutionThreadService.getServiceName to serviceName to be more consistent with other Service methods.
Make methods in CycleDetectingLockFactoryBenchmark static
Use ForwardingWrapperTester to simplify a few more Forwarding*Test.
Make comments javadocs so MOE correctly strips them.
Remove reference to done() from documentation.
Add saturated(Add|Subtract|Multiply|Pow) IntMath and LongMath
Trim overrides from SingletonImmutableSet that are just for tiny performance wins.
Added support for days, hours, and minutes to chooseUnit and abbreviate
Write the initial, skeletal BaseEncoding API.
(partial) Automated g4 rollback of changelist 134687034.
*** Reason for rollback ***
Lazily allocate CompactHash backing arrays on first write
Add method to CaseFormat enum instead of using a switch.
Shuffling from internal-only change.
Make SortedMultiset.elementSet() return a NavigableSet outside GWT.
Update Public Suffix List.
Belated nitpicking and comment revisions for TypeResolver change.

Fix documentation for checkArgument and checkState
Automated g4 rollback of changelist 151734490.
Increase timeout.
Object shouldn't be tested for equality with itself. This was identified using Error Prone check.
Test that all MediaType constants are unique.
The documentation of PredecessorsFunction and SuccessorsFunction now makes it clear that null nodes are forbidden.
Mark some of the worst-performing tests on GWT as @GwtIncompatible, to speed up tests slightly.
Extend AbstractCollection where appropriate in common.collect
Automated g4 rollback of changelist 128473677.
MutableGraph.java: fix Javadoc link.
Lots of minor cleanups and simplifications.
Run tests in a deterministic order.
Update class docs of HostAndPort regarding immutability.
add 'oraclejdk10' to Travis build matrix
Explain the segmented nature of maximumWeight better.
Add validation that checks that predecessors, successors, in edges, out edges, and all sorts of other relationships are in sync after every test. Add more test coverage for removing edges. This would have caught the breakage in []
Add cross-references to sibling Preconditions and Verify methods, to aid discoverability.
Promote ReferenceEntry to a top-level class for weird reasons.
Disable cancellation causes by default and make them enableable via a system property.
Run many tests for addCallback and transform under GWT.
Fork common.reflect and remove a few tests from the java7 branch that don't work on Android

Release a couple io test methods.
Use ArrayDeque and PriorityQueue under GWT (where they're newly available), and provide synchronizedQueue, synchronizedDeque, and MinMaxPriorityQueue there.
Multimap is up next in my quest to write new classdocs for every important class we own.
Graph.java: break out mutation- and edge-specific methods into subinterfaces:
Exposing an estimate of how the BF performs (without it, it's hard for the
Make CharMatcher.toString() consistently format characters as \uXXXX.
Open source Hashing.crc32c().
Run fewer iterations of testByteArrayRoundTrips.
test coverage for ready and skip
Deprecate the constants in com.google.common.base.Charsets for internal users. Internal users should prefer the constants in java.nio.charset.StandardCharsets.
use new sonatype parent
javadoc cleanup
Add mapWithIndex overloads mapping IntStream -> Stream, etc.
Shuffling from internal-only change. Will be reverted soon.
Prepare for Java 8.
In forUriString(), check the IP version before giving getByAddress()
Add "X-DNS-Prefetch-Control" header.
Bump Travis timeout. It's still too low, e.g.,
This CL fixes invalid self-referential collection operations (c.addAll(c), c.removeAll(c), c.retainAll(c), and c.containsAll(c)). Such cases are either no-ops, undefined behavior, or unnecessarily complicated, and often reveal bugs. This an automated fix using error-prone.
Add @GwtIncompatible.
Adding equalsIgnoreCase for ASCII only. This exists because there's generally no good reason to use String.equalsIgnoreCase() with non-ASCII data (you should be using proper unicode normalization).
Make protected methods of EventBus package-private, hiding the package-private EventHandler type.
GWTifies Futures#allAsList and friend.
Update Public Suffix list.
Fix mangled Javadocs.
Automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b
Assorted javadoc fixes in com.google.common
Bring documentation of Service.{start,stop}().cancel() in line with reality.
Add @CheckReturnValue to MultimapBuilder.
delete IDEA files, and update .gitignore accordingly
Suppress more flaky tests, plus a few that I'm guessing will also be flaky (because they have nested loops over our integer candidates).
Fix links to javadoc.io for Maven Javadoc Plugin
Use maven-compiler-plugin version 3.8.0.
Suppress error for bad implementations of Comparable

Update error message for calling source/target on endpoints of an undirected edge.
Test the android branch (in TAP for [], and Travis for Github)
Add isEmpty() to ByteSource and CharSource.
Add @CheckReturnValue to ObjectArrays. This forces the caller of these APIs to "do something" with the result of the call.
Add tests to make sure classes don't get exported to JS by accident/mistake.
Fix some typos in guava/*
Change NullPointerTester to work for Stream parameters.
Trim gratuitous code from ImmutableList implementations
catch (SomeException e) {
Update public suffix patterns.
Fix imports in all Guava packages.
Object shouldn't be tested for equality with itself. This was identified using Error Prone check.
Update Guava's J2ObjC dependency to version 1.1. This version includes the
Optimize Ordering.leastOf().
Add boolean parser to cache builder. add flag for record stats.
Fix test that will fail in an upcoming patch to GWT.
Refactor test utility methods to match graph mutation signatures.

Add RangeSet.span()
turn of CacheStats collection by default

Give a more realistic usage example for EqualsTester.
Implemented new TimeLimiter methods in FakeTimeLimiter.
fixes serialization errors when serializing a
Fix some Graph/Network javadoc.
Add @CheckReturnValue to Multimap and Table. This forces the caller of these APIs to "do something" with the result of the call.


Suppress tests on Android.
Shuffling from internal-only change.
Start a README.md and an overview/recipe-book for Stats calculations. Revise Stats.java class docs a bit.
Adding ByteBuffer support to Hashing APIs.
Migrate from jsr305's @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone's.
Add ByteSource, ByteSink, CharSource and CharSink abstract classes and factory methods for creating various implementations of them.
Resolves reference cycles in com.google.common.collect for J2ObjC translation.
Remove the rethrow on failure behavior from all the threaded service implementations.
Conservatively simplify Tables and ImmutableTable implementations.
Update Guava to depend on Truth 0.34.
Tweak Network.edgesConnecting() javadoc so people don't think it returns a path of edges.
Simplify BigIntegerMath.factorial logic.
Make c.g.c.collect.Queues @Beta.
Change Range.toString() to use printable ASCII chars (..) instead of \u2025 (‥)
Run mvn on the android branch without running `cd`, so that we don't mess up base the directory

Rollback MoreExecutors.plaformThreadFactory().
Implement wasInterrupted() under GWT, and use that API to verify that cancel+setFuture passes the correct mayInterruptIfRunning value to the delegate.
Add CharSource.lines().
Replace usages of Truth's deprecated hasMessage() with hasMessageThat() in Guava tests.
- cleanup formatting, and add missing dependencies

Increase GWT timeout again.
Optimize IntMath and LongMath by using a branch-free helper implementation of the expression (foo < bar) ? 1 : 0.
Added tests to cover some forEach code in Iterables. (Which means these tests should not be in the Java7 version).
Clarify the relationship between the two wrapTask methods.
Guava issue 1423: fix TreeMultimap.asMap().headMap to properly register inclusivity argument
Remove unused configuration of load factor

Clarify the wording of the exception messages in Optional subclasses.
Reimplement LinkedHashMultimap with a custom, memory-efficient implementation.
release MultisetNavigationTester
Add Funnels.stringFunnel(Charset) overload.
Fix old pom wording that contains a reference to sub-packages that is a 2 year old woopsie.
copyright and warning cleanup
Delayed fallout from build-system changes of CL 74684238, which adds <resource> elements to some .gwt.xml files.
Update Public Suffix data.
graphs_explained.md: file being added to facilitate reviewed changes to https://github.com/google/guava/wiki/GraphsExplained.
Document that order() is called even without KNOWN_ORDER.
Add hash flooding protection to HashBiMap.
Remove "<add-linker name='std'/>" workaround, which is no longer necessary.
Reorganize abstract HashFunction and Hasher implementations to simplify common.hash and potentially prepare for exposing these skeletal implementations.

Migrate from EasyMock to Mockito.
Add Google-internal memory consumption tests for all top-level Multimap implementation types.
Internally rewrite LexicographicalOrdering to accept a Comparator.
Add Hashing.sha384()
Export files that were missing from Guava.
Rename BloomFilter#mergeWith to #putAll
Throwables#lazyStackTrace unsupported on IBM JDK 6
Rename com.google.common.hash.Sink to PrimitiveSink.
Migrate from easymock to mockito in javatests/com/google/common/collect
rename CustomConcurrentHashMap to LocalCacheAsMap
Implement Stopwatch.toString() under GWT.
fix broken javadoc links, per issues 853 and 855
Adding precise control over types of null queries allowed by MapFeatures.
Add subRangeSet to the RangeSet interface, and add the TreeRangeSet implementation.
Eliminate unneeded Annotations dependency.
Delete the unnecessary DoubleUtils.fastAbs, preferring the JVM-intrinsified Math.abs.
Change CountingInputStream and CountingOutputStream to require a non-null delegate stream, as reported in Guava issue #1869.
@Beta, @since, and hard-coded test seed
ImmutableMultiset:
Expand Ascii.to{Lower,Upper}Case to take a CharSequence instead of a String
Added TypeVisitor to make it easier to navigate type hierarchy, and used it to replace a few code duplications.
remove tests of absent code
Remove the offset and size fields from RegularImmutableList.
More simplification and refactoring of common code in common.collect.
Equivalences -> Equivalence.
Minor changes from internal addition.
Generates fresh value for Range. It was an oversight not adding it in the first place.
Run the tests from the class instead of those from some other class.
Javadoc improvements:

Add automatic subSet tests in {Sorted,Navigable}SetTestSuiteBuilder, and override various SortedMap implementations in common/collect to return SortedSet keySets.
Change Guava wiki links to new GitHub locations.
Applied package sanity test to common/collect. Had to add publicApiOnly() because there are a lot of package-private classes that should either not be tested (the shim classes) or are already covered by another test, like the various *ContiguousSet classes covered by ContiguousSetTest.
Avoid isNotInstanceOf(), which can wrongly succeed under -XdisableClassMetadata.
Make Stopwatch's constructors package private.
Start some simple improvements to multimaps in code size and allocation count.
Add Graphs.transpose() static utility methods for viewing the transpose of a graph. See: https://en.wikipedia.org/wiki/Transpose_graph
Copied from cpovirk's CL 147393681 to submit while cpovirk is OOO.
*Builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.

Use ForwardingWrapperTester in Forwarding*MultimapTest.
Suppress "non-varargs call of varargs method with inexact argument type for last parameter."
Convert all @GwtIncompatible.reason values to implementation comments.
Provide specializations of MapMakerInternalMap's internal data structures, notably InternalEntry, for the case where the value type is a singleton. This is Interners's exact use case.
Disable incorrect @GuardedBy annotations.
Add mutable Table collector to Tables, including a version with a merge function to match Collectors.toMap and ImmutableMap.toImmutableMap.
Remove com.google.common.collect.Ranges (the static methods have been
Migrate calls to Annotation.getClass() to Annotation.annotationType().
Eliminate EmptyImmutableSet, replacing it with a RegularImmutableSet with a null hash table.
Fix a few minor issues in cache javadocs. Some of this patched from fry.
Add iteration order discussion to SortedMultiset doc.
*Builder, graph classes: support element ordering using a new ElementOrder class.
Suppress another flaky test.
Change Ascii.MIN and MAX from ints to chars.
Code cleanup.
No need to disable doclint completely. Disabling high-level
Add a simple test that shows why US_ASCII is usually a bad choice.
Remove the rethrow Error behavior from AbstractFuture.
BloomFilter changes:
Document that we don't forward calls to default methods, except when we do.
Rename "Graph" to "BasicGraph". Flip the inheritance hierarchy. Now, BasicGraph<N> extends ValueGraph<N, Presence>.
Update public suffix patterns.
Fix interruption leak in submitAsync and whenAllComplete().callAsync().
Add benchmark methods to determine efficiency of map iteration using both entry set and key set.
Update MapCacheTest so it's not flaky. Ensure the mapCache is cleared before every test so state is not persisted across tests.
Move @CheckReturnValue to package-info.java so it applies to all of
Add Optional.asSet()

Improve nullability checking for com.google.common.hash.
Fix 2 small typos in common.math Stats classes.
Add @Beta to new method that hasn't yet been API reviewed.
Changes to common.graph. Sorry for the churn, but after this things should be settled down for a while (and we'll be launching v20 soon!). Changes include:
Remove beans.xml from Guava.
Fix deletion date for Objects APIs to be two years since the release of 18.0.
Add tests for known defaults for all HashFunctions.
Added  TypeToken#method() and constructor() to return Invokable<> with types resolved;
Push down AbstractMapBasedMultimap.wrapCollection logic into subtypes.
Move c.g.c.collect.testing.GwtPlatform to guava-gwt.
renames array fields with positive-length values,

Use String.isEmpty() in Strings.isNullOrEmpty().
Kill AbstractMultisetTest.  All its remaining tests are tested elsewhere by MultisetTestSuiteBuilder.
Deprecate name() and make toString() return name of domain.
- allow expireAfterWrite + expireAfterAccess
BigIntegerMath.factorial rewritten to be faster.
Migrate Multimap.clear() tests (and tests to clear Multimap views) to MultimapClearTester.
Update version number, factor out common config, plus a few nits, specifically:
Update some javadoc. Remove old @SuppressWarnings.
Update Network.asGraph()'s edge value methods to be consistent with how they're defined in the interfaces. Update tests to fail with the old implementation.

Now that ValueGraph no longer extends Graph, change all the common.graph interfaces to handle equals()/hashCode() "normally". Deprecate Graphs.equivalent().
Remove Platform.classGetSimpleName() in favor of calling class.getSimpleName() directly.
Update imports ordering to the new java import order.
Add @since to Striped.
Cache the reverse Converter view to avoid allocating every time reverse() is
Cleanup unnecessary gwt.xml's from c/g/common/base and c/g/common/collect.
Stop ignoring http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6529795 in iterators now that the bug has been fixed in the JDK for a while.
Migrate from Truth's deprecated iteratesAs(...) to containsExactly(...).inOrder().
Update PSL to pick up *.uk changes: .uk TLD is now available for public
An optimization for removeNode() on undirected graphs.
Update oss-parent to version 9.
Allow disabling of guava gwt tests from command line.
Use Futures.getDone() internally.

Ensure that CharMatcher.precomputed() doesn't change description.
Add java.util.Optional and its derivatives (OptionalInt, OptionalLong, OptionalDouble) to ArbitraryInstances and FreshValueGenerator.
Add a warning about deadlocks.
Add OSGi Bundle-DocURL to Guava MANIFEST file.
Remove MapMaker#expiration (scheduled for deletion in July 2012).
Hide MapMaker.maximumSize() internally.
Release @Immutable annotations in common.graph.
Add maven metadata and a faux maven project hierarchy for multi-module support to build this as several smaller maven modules, as well as the monolithic jar.
Attempt to fix AbstractInvocationHandler's equals implementation that may fail for JDK type proxies, after reserialization.
Avoid duplication of code in ImmutableValueGraph. Surprised I didn't realize this sooner :-/ the backing graph is a ValueGraph, so we can just call through. This also let's us do some other nice things:
Remove Stopwatch#toString(int) as promised in Guava 15.0.
Avoid loading some javax.annotation classes
Annotate all public AbstractTester subclasses with @Ignore.
add missing dependencies, and fix a few typos
Fix inheriting docs from the JDK.
deprecate throwCause
Add spaces to annotations inside comments to prevent them from being interpreted as real code when the file is parsed by tools that behave like the checker framework (see http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#annotations-in-comments).
Make IntMath @GwtCompatible so that it can be used in common.collect overflow checks.
Remove @GwtCompatible annotations from classes in the hash
Re-write MessageDigestAlgorithmBenchmark using multiple @Params instead
Make AtomicLongMap serializable.
Update code.google.com link to github in Murmur3Hash32Test
Annotate FutureCallback.onSuccess parameter as @Nullable.
fix common.math copyrights
Update Guava README for 23.0 and update snapshot versions.
Init combinedHash to hash1 as per 'Less Hashing, Same Performance:
Add decrement function to InetAddresses
Suppress some Guava tests for c.g.c.base, and update others.
Update Javadoc in Futures and other classes to reference directExecutor or newDirectExecutorService rather than sameThreadExecutor. Also change the references to inline execution or an inline executor to use the term "direct" instead.
Include original input value and RoundingMode in the failure message for MathPreconditions.checkInRange().
Revise CL 103553690's scaretext, and propagate it to Cache.
Add @CheckReturnValue to com.google.common.math. This forces the caller of these APIs to "do something" with the result of the call.
Test the current propagation of cancellation (but non-propagation of interruption) from the input Future to the transformed Future.
Sort imports.
Push down implementation of Multiset.iterator() from AbstractMultiset.
Remove maven-gpg-plugin configuration from Guava's pom.
Removes unnecessary (and unsafe) @Weak annotation that is causing crashes on
Update Guava's JUnit dependencies to 4.11 (the version in [])
Make CompactHash data structures package-private in external Guava.  (Before we didn't expose them at all externally.  This is so they can be used in multimap guts in Android.)
Add @FunctionalInterface to AsyncCallable.
Make Optional.absent().hashCode() different from Optional.of(0).hashCode()
warn that Cache.asMap.get does _not_ automatically load values.
Use @link and @linkplain in Objects.firstNonNull() javadocs.
Delete deprecated Predicates.assignableFrom(Class). Please use Predicates.subtypeOf(Class) instead.
AbstractGraphTest: use Truth-style assertions where possible.
Added TypeToInstanceMap, ImmutableTypeToInstanceMap and MutableTypeToInstanceMap, mirroring ClassToInstanceMap. One major difference, is that put() and putAll() aren't supported. This is because there is no way to check isInstance() for generic types at runtime. In addition:
Basically: sed "s,{ },{},g"
Enable GoodTime-API for c.g.common.cache
If {ByteStreams,CharStreams}.copy fails to close both input and output, it should log one exception while throwing the other.
Make a constructor private.
Adding a new (initially internal, pending API Review) static factory to Striped.
Automated g4 rollback of changelist 128499385.
Disable some tests externally until GWT releases a version with the problematic bug fixed.
Multimap method javadocs: a few improvements. This doesn't by any means complete the job of perfecting all the docs in this interface.
Update .travis.yml encrypted username/password for oss.sonatype.org to use encrypted form of access token, which can be revoked.
Apply IntelliJ-suggested language feature migrations.
Push back deprecated API removals again.
Hide samples.e0, etc. behind methods.
include CacheBuilderSpec example in external javadoc


Ensure that recordStats works on Android, GWT, and environments which may restrict the use of sun.misc.Unsafe, as per Guava issue 1228.
Add missing @Nullable to Finalizer.
Rename NodeConnections to NetworkConnections and NodeAdjacencies to GraphConnections. Have a base interface called "NodeConnections". This change is just cosmetic right now (although we do refer to these things as "connections" everywhere, so it's nice to actually have "NodeConnections" be the base interface), but it will make more sense in the context of ValueGraph (there will be a ValueGraphConnections).
Implement edgeValue() via edgeValueOrDefault() instead of vice versa. For edgeValue() this is the same efficiency, but makes edgeValueOrDefault() perform fewer hash lookups.
Add @CheckReturnValue to Predicates.
Remove org.apache.maven.plugins, which is the default:
introduce maximumWeight
Fix GWT behavior of "opportunistic" ImmutableList subclasses.
Simplify CharStreams.skipFully.
Add ImmutableSet.builderForExpectedSize.  Currently, the implementation is that if and only if a size is specified up front, the builder starts generating the hash table online and deduping elements.
Automated g4 rollback of changelist 105235264.
Migrate guava to directExecutor now that it will be in the next release.
common.graph: add incidentEdges() method to Graph/ValueGraph.
Delete the Ordering.from(Comparator) and Ordering.natural() overrides of sortedCopy and immutableSortedCopy, since benchmarks suggest any speed increases are minimal at best.
Add NetworkMutationTest (parallel to GraphMutationTest).
GWT emulation for some of util.concurrent.
Refer to Network references as "network" instead of "graph". Note that we've already started doing this, but (as you can see) are fairly inconsistent with it.
Assorted followups from past reviews/discussions:
This change replaces usages of static final fields on CharMatcher, e.g. CharMatcher.WHITESPACE, with the equivalent static factory method, e.g. CharMatcher.whitespace().
Add missing @Nullable annotations to Table and BiMap
Re-export testdata files into Guava after CL 36707785.
Move all surefire configuration to the parent pom.
Implement CharSink.writeLines(Stream[, String]).
Clone c.g.protobuf.Utf8 to c.g.common.io.Utf8 and add new utf8Length(String) static method. Callers will be migrated in future changes. It is currently unknown whether protobuf itself will be able to depend on Guava.
Added javadoc to ClassSanityTester about a pattern to test builder equality. Added invokable.setAccessible(true) to allow public factories of non-public classes to be tested.
Link java7 branch javadocs to javase/7, not 8
Abstract common.graph classes: add Javadoc warnings that methods implemented in these classes should not be overridden without cause.
Re-add Multisets.removeOccurrences(Multiset, Multiset).
Added default-value auto generation to NullPointerTester, for interfaces (and
doc cleanup
Support type annotations in NullPointerTester
Reorganize tests for filter methods on Iterables, Collections, Sets, etc.
Comment seemingly-unnecessary bitwise mask in UnsignedInteger.
Optimize LongMath.sqrt.
Automated rollback of commit 8fd7f60484218df9a208df0edf41bdee22d86900
Fixes mismatched parentheses in Graph javadoc.
Try to improve Multimap class docs.
Optimize murmur3_32 hashString(CharSequence, UTF_8) to unroll the Utf8 directly into the hasher rather than converting it to a byte array.

Tweaks from shuffling of internal hash functions.
Graph.java: fix indentation in class-level Javadoc.
Clean up usages of deprecated Truth has() Collection methods:
Copy Reflection.getField(Enum) to Enums.getField().
fix typo
Add useful toString() for BaseEncoding
Delete AbstractSetMultimapTest, whose remaining tests are all covered by SetMultimapTestSuiteBuilder.
Run dereference() tests under GWT.
Add nullness annotations on the fields in ImmutableEntry.java
Make implicit narrowing compound assignments explicit.

Optimize ImmutableSet's hash flooding detection, using an algorithm which allows more false positives (though we calibrate the constant factors to compensate) but runs O(log n) times faster on average.
Remove import for java.util.Formatter since it's needed only for the javadoc.
Fix tests that assume Class.getClassLoader() returns a URLClassLoader so that they can call getURLs() to instead parse the "java.class.path" system property.
Upgrade truth's gwt library to a more recent snapshot and upgrade OptionalTest to verify.
Remove MapMaker: strongKeys(), strongValues(), and valueEquivalence() from MapMaker and friends.
Avoid using "i.e." in first sentence of javadoc so the javadoc generator doesn't prematurely cut off the summary.
Fixes a reference cycle between WeakValueEntry instances and their
Fix Eclipse warning (missing #).
Implement Throwables.getCauseAs(Throwable, Class), which safely casts a Throwable's cause and ensures that the exception thrown on a bad cast has the original exception as its cause.
Small optimization for node/edge containment. It wouldn't be worth it if nodes()/edges() returned they keysets directly, but wrapping in an unmodifiableset involves an extra object creation and subsequent garbage collection.
Implemented new TimeLimiter methods in SimpleTimeLimiter.
Add new RangeSet methods accepting Iterable<Range<C>>.

Remove some superfluous checkNotNulls in NetworkConnections. On the nodes/edges, these are internal classes and those parameters have already been checked. On the calls to super.remove*, they've also already been checked.
new Stopwatch(); -> Stopwatch.createUnstarted();
add support for jdiff generation
Shift the nodeOrder/edgeOrder methods down in the Graph/Network interfaces. These are definitely "properties" of the graph, and should be under the label as such. Note that the AbstractConfigurable* implementation classes already have the methods in this order.
Add Checker Framework to dependencies.
Remove misleading javadoc line (we haven't published microbenchmarks in N
Internally, use PatternCompiler from Doubles.tryParse.
Initial code dump: version 9.09.15
allow jdk6 in Guava

Remove openjdk6 as a platform to build Guava on. It fails due to a weird generics issue.
forbid null return from cache lookups, and null parameter in invalidate
Guava issue 1322: deal with a potential overflow issue in ImmutableTable.
&& -> &
Re-suppress testDivNonZeroExact, which, like testDivNonZero, is too slow.
Update Public Suffix data.
I give up. I can no longer maintain the in-place algorithm. The bugs have defeated me.
Opensource ServiceManager!
Make sure all implementations being tested by SortedMapInterfaceTest are also tested with SortedMapTestSuiteBuilders, and remove tests from SMIT that are redundant with SortedMapNavigationTester.
Publishes the new StatsAccumulator.addAll(Stats) and PairedStatsAccumulator.addAll(PairedStats) methods.
Add a direct dependency from guava-gwt to checker-qual.
Update Public Suffix List.

Delete warning that TimeLimiter might be changed significantly.
Delete Multiset.count() tests from AbstractMultisetTest that are redundant with MultisetCountTester in MultisetTestSuiteBuilder.
Push back removals again.
Remove redundant Multiset.contains() tests from AbstractMultisetTest, which are already covered in CollectionContainsTester as part of MultisetTestSuiteBuilder, and add a couple more multiset-specific tests.
Graph.java: change return type of #degree() methods to int.
[FUTURES] Added Futures.whenAllComplete(..).run(..) to Futures.java
Methods that take a node as parameter now take type N instead of Object.
Add a beans.xml file disabling CDI bean discovery to META-INF/ in the guava jar. See guava issue: https://code.google.com/p/guava-libraries/issues/detail?id=1433
Remove unused methods in c/g/c/{hash,reflect}/...
Adding ForwardingBlockingDeque, as it's a natural fit for Guava and something which is currently missing from the library.
Remove <E extends Enum<E>> from GWT ImmutableEnumMap, reducing code bloat.
Change Service.Listener from an interface to an abstract class with no-op implementations of all the callbacks.
Add @GwtIncompatible annotations to top-level classes.
Add nullness annotations on the fields in MapMakerInternalMap.java
Changed ArbitraryInstances to use public constant instance if present.
GWT: Better error checking, logging, and documentation.
Automated g4 rollback of changelist 94598995.
Link to the things I wrote about our Javadoc link problems.
google-java-format com.google.common.hash

Push of latest guava code which unfortunately includes temporarily backing out
Delete MapMaker.makeComputingMap() and ComputingConcurrentHashMap.
Fix compile-time constant expression overflows
Changes implementation of emulated CacheBuilder and instead emulated LocalCache. Features added include recordStats, expireAfterAccess, ticker, and removalListener. RefreshAfterWrite was implemented but removed due to reliance on reload() and returned futures.
Suppress new CollectionIncompatibleType Error Prone check by casting
Prevent fail() from being ignored by the surrounding catch() block by throwing new Error().
Add a special case for ImmutableSet.copyOf(EnumSet) delegating to Sets.immutableEnumSet.
Source and javadoc update; this will likely be r05.
Short-circuit future.setFuture(TrustedFuture) in GWT, too.
Fix https://github.com/google/guava/issues/3156 by implementing a proper CollectSpliterators.flatMapTo{Int,Long,Double}.
Remove no-op check.
Change ByteSource.concat and CharSource.concat to not blow up on infinite Iterables. This also helps users whose Iterables actually eagerly load data to create sources when iterated, though ideally they shouldn't be doing that.
Allow for arbitrary orderings in tests for lists, rather than assuming insertion order.
Added forwarder tests for various Forwarding* classes in util/concurrent. Added ForwardingObjectTester to test any subclass of ForwardingObject. Since it has to use EasyMock partial mock, I had to place it under javatests/. Along the way, fixed a few oversights in ForwardingWrapperTester.
Lint Javadoc for HTML and syntax, and fix errors.
Fix Escaper.java comment typo.
Properly use the expected-size factory methods in MultimapBuilder, instead of conflating capacity with expected size.
Skip gpg signing by default, which can be overridden on the command-line at release time with -Dgpg.sign=false
Update some javadoc in the graph builders, add sample code. Run g4 fix on the files.
Inline the implementation of DoubleMath.mean rather than using a helper class. This is called inside loops often enough that I think it's worth avoiding the object assignment. Also improve the javadoc.
Allow terminal hyphens on domain parts.
Rollforward [] with the missing dep added.
Move cancellation propagation from cancel() to done().
Implement FarmHash's Fingerprint64 in Java.
bump version number
Improve the performance of addEdge(). This doesn't change the big O runtime (it's already O(1)), but it does eliminate several hash lookups :)
Preliminary ValueGraph interfaces.
In Ascii, define a constant for the character case bitmask, and use it in place of 0x20 and 0x5f throughout the class.
manual sync
Make common.collect spliterators backed by an int-indexed function correctly splittable.
Eliminate test that uses systemNanos() but expects nano precision, which will break on platforms that only have micro precision.  The test isn't really testing anything, so rather than fix it, I'm removing it.
Link from SettableFuture to AbstractFuture, and do some more rewriting and reformatting.
Special-case ImmutableMap.copyOf(EnumMap).
Remove MapMaker.expireAfterAccess() from public API internally. Please use CacheBuilder instead.
Hide Utf8Benchmark, which has taken on some internal-only code.
Annotate some flaky slow tests as @AndroidIncompatible.
Reflect Navigable* support in GWT in TreeMultimap.

Update @since tags to @since 23.1.
Push down logic of AbstractMapBasedMultimap.createAsMap into subtypes.
Deprecate DiscreteDomains.

test for indexOf with two array arguments; isEmpty and other methods of BooleanArrayAsList
Fix @GuardedBy annotations with invalid lock expressions.
Add TODO to use ofElementsIn(expected).
Fixed dropping of CharMatcher description when precomputing.
Manual fix-ups before we google-java-format.
Remove unnecessary "unused" suppressions.
Remove references to AsyncLoadingCache from CacheBuilder docs.
Fix TreeMultiset.subMultiset().size() overflow condition.
Remove non-interface methods from Multimap implementations.
Provide ExecutorService decorators that will rename the threads in which its tasks run for the duration of the task.
Skip cases in which checkedMultiply() fails on Gingerbread (because of an Android bug that has since been fixed).
Fix @since for EscaperAsserts.
Add a test case to EnumsTest that ensures that the Enums.getIfPresent method doesn't cause a reference to the Enum class parameter to be held indefinitely.
Avoid referencing any Ordering methods except natural() in ImmutableSortedSet.
Optimize PairedStatsAccumulator.addAll(PairedStats). If we update the xStats before we update sumOfProductsOfDeltas, instead of after, so that we use the new value of (values.xStats().mean() - xStats.mean()) instead of the old value, then we absorb two of the factors in the product, and save ourselves a multiplication and a division.
Introduce a package-private BaseGraph interface and AbstractBaseGraph class. This allows us to remove a large amount of code duplication. It also gives us a small reduction in constant overhead for Graphs.
Test and document LoadingCache's behavior in the face of InterruptedException (mostly by linking to the new <http://code.google.com/p/guava-libraries/wiki/CachesExplained#Interruption>).
Introduce MultimapTestSuiteBuilder, hoping to eventually migrate from AbstractMultimapTest.
Schedule assignableFrom for deletion.
Hide Downloading/Downloaded lines from output.
Suppress warning for modification of immutable collections
More strictly restrict when fields are added to the set of relevant fields, only supporting non-synthetic String fields.
Open source some more benchmarks.

Change the behavior of Service.Listener and ServiceManager.Listener such that we guarantee that listener callbacks (for a single listener) will never be called concurrently.  Previously, the only semantics we guaranteed was about the order in which callbacks were submitted to executor.execute.  This significantly strengthens those guarantees.

Optimize LongMath.binomial by accumulating into separate numerator and denominator variables whenever overflow is known to be impossible, as in the BigIntegerMath implementation.
fix version numbers on Guava for non-release trunk to fit with maven version numbering standards.
Update public suffix list.

Fix bug where Multiset.elementSet.remove did not propagate changes to Multiset.size.
Applied package sanity tests to common.math
Fix Travis build (hopefully) by setting max heap in the same <argLine> that sets the user language/country.
More reformatting.
Add size-related methods to Byte/CharSource:
Yet another flaky test.
For APIs that require Java 7, strip them from Guava-Android entirely, not just from our internal copy of Guava-Android.
Graduate Queues.synchronized{Que,Deq}ue from @Beta.

CHANGE: Make HostAndPort GwtCompatible by getting rid of a regex.
Fix up javadocs to say "{@link Foo} instances" instead of "{@link Foo}s".
Fix another typo in javadoc.
Add a TODO; inadvertently update some copyright dates.
Make MutableClassToInstanceMap serializable.
Document the simplest way to get a List<ListenableFuture> from ListeningExecutorService.invokeAll.
Eliminate EmptyImmutableSortedSet, while we're at it.
Fixed a FreshValueGenerator bug that causes failure in generating fresh values recursively when there are finite number of distinct values provided by user.
Add missing common.primitives to Guava for Android.
Explain relationship with juf.Function.
Remove JDK5 hack now that Guava is on JDK6.
Fix minor spelling errors in tests.
Fix typo in comment about where test constant came from.
Add tests for ConcatenatedHashFunction.
Improve exception messages for HostAndPort.fromParts
Automatically add <inherits> for java.* emulations to Guava.
Depend on checker-compat-qual instead of checker-qual.
Remove Multiset.iterator() tests redundant with the CollectionIteratorTester tests from MultisetTestSuiteBuilder.
Fix a typo.
Assorted cleanup:
Remove usage of Truth from Guava Testlib.
Export TestingExecutorsTest to Guava.
Update open-source Guava to Truth 0.13, and tighten up tests from allOf->exactly and allFrom->exactlyAs.
Make HostAndPort serializable.
Cache Ordering.natural().nulls{First,Last}(), since those are very commonly used. https://github.com/google/guava/issues/1451
Fix Ordering.leastOf for very large k
Add Apache header to BloomFilterStrategies
Eliminate some CollectionIncompatibleType errors that were suppressed by CL 106598613.
- Cache.get(K, Callable<V>) => get(K, Callable<? extends V>)
manual sync
Internal GWT change
Link to the new spec instead of the old one, and do so more concisely.
Remove unnecessary Type parameter
Stop using assertSeededHashFunctionEquals for goodFastHash.
Forwarding classes out of @Beta (except standardFoo() methods).
Migrate from deprecated InternetDomainName.name() to equivalent toString().
Automated rollback of changelist f380040f0041f94c83d24623c10f32de58d436c4
Miscellaneous cleanup.
Replace MoreAsserts calls so that code compiles in Guava.
Mutable{Graph, Network, ValueGraph}.java: tighten the contract for the edge-adding methods.  The contract now states that if the specified nodes are not already present in the graph, they are silently added.  (Removes the option of throwing in this case.)
Extracted FreshValueGenerator from ForwardingWrapperTester to a stand-alone class so it can be reused for automated equals testing.
Make equals/hashcode methods in AbstractGraph/Network final, since changing the behavior of these while still implementing the interface is incorrect.
Remove removal dates for non-@Beta deprecations.
remove spurious new method
Make the load factor for "inner" (per node/edge) hash maps and sets 1.0. Note that non-multi networks use HashBiMaps, which already have an unmodifiable load factor of 1.0.
Remove NullPointerTester#ignore(Member).

Add @since for RangeSet.intersects.
Factor out common logic in ImmutableMultiset.EntrySet implementations
Prepare common.graph for Java-8-specific changes.
Refactor out some common functionality in the HttpHeadersTest.
Copy factory methods from Ranges to Range.
Add more test coverage for Immutable graphs/networks.
Add paragraph to javadoc for Network.edgesConnecting().
Fix non-fatal GWT compilation errors:
Fix Javadoc breakage under JDK11 canary.
Completely overhaul top-level javadoc for common.graph interfaces in light of the new interface hierarchy. Spend a lot of time answering what I think will be the #1 question users have: should I use a Graph or a Network? Spend a lot less time defining graph theory terms, that's what wikipedia is for :) plus the method-level javadoc defines terms as necessary. Overall, make it a lot more concise. Javadoc that's too long for anyone to bother reading is just as good as javadoc that doesn't exist!
Add a bit of test coverage for value graphs.
Fall back to countByReading if InputStream available always returns zero.
doc cleanup
Update Guava version to 17.0-SNAPSHOT.
Huge new source dump for source release 3, which will also become our first
Implement ByteSource.asCharSource(charset).read() using the decoding string constructor instead of streaming the contents into a StringBuilder.

Fix arrayListValues(int) in MultimapBuilder to actually throw IAE when expectedValuesPerKey is negative.
Shuffling from internal-only change.
Delete EmptyImmutableTable, which isn't clearly worth the code complexity.
Add parseUnsignedByte, toString, and MAX_VALUE to UnsignedBytes.
Avoid boxing ints in ConcurrentHashMultiset Preconditions checks
Replace unnecessary StringBuilder calls with String concat
Reduce iterations for MinMaxPriorityQueueTest under GWT.
Update the handling of gwt.xml files.
Delete unused SingletonImmutableBiMap(Entry) constructor.
Add @CheckReturnValue to SortedLists. This forces the caller of these APIs to "do something" with the result of the call.
Add a third AtomicHelper strategy to abstract future
Migrate Caliper benchmarks from the old, superclass-based API to the new, annotation-based API.
Mark methods in Graphs that take a Predicate as @GoogleInternal until we can migrate to JDK 8's Predicate. Rename the merge*From() methods to copy*(). Change the behavior of copyEdges from copying over all edges (and adding incident nodes as necessary) to only copying over edges where the incident nodes are already present (and thus not adding any additional nodes), as was discussed in API review.

Remove compare(boolean, boolean), which has been renamed to compareFalseFirst.
Introduce InternerBuilder, which allows tweaking of the concurrency level of the to-be-built Interner.
Move the static "constructor" methods in ElementOrder above the class methods (as done in e.g. Endpoints). Also, remove "final" from the static methods, since it's not standard practice to include on static methods (and the class itself is final).
Update Public Suffix data.

Remove tests of Multiset.elementSet() that are redundant with the SetTestSuite generated for Multiset.elementSet() by MultisetTestSuiteBuilder.  (Some tests will still need to be migrated.)

Mark AtomicLongMap @GwtCompatible.
Remove APIs to be deleted for Guava 20.0.
Add edgeValueOrDefault() method to ValueGraph interface, and remove Map-returning edgeValues() for now. This CL effectively rolls back []
specify plugin versions
Disable compilation of benchmarks, which have been updated to require a version of Caliper that has not been publicly packaged.
Use the renamingDecorator to ensure that Services always run in appropriately named threads.
Avoid garbage allocation in simple hashBytes calls with Murmur3.
More reformatting.
Changed Invokable to always return the source-view of parameters, even for non-static inner class constructors.
Reformat with google-java-format
Fix cycles com.google.common.cache.
Add Vector tests to guava-testlib's TestsForListsInJavaUtil
Add javadoc of common ways to obtain a non-public-constructable objects.
remove lenient builder

Delete the existing Hypergraph interface. We're pretty much 100% sure this is not where we want it in the interface hierarchy, and leaving it there as a public interface isn't helping anyone.
Clean up the implementation of roots() and move it to Graphs. This is part of the effort to delete GraphProperties.java, as discussed earlier. The other method in GraphProperties is isCyclic(), which I'd like to handle separately (e.g. it should handle undirected graphs if it's going to be in Graphs, or maybe moved to labs/).
Fix small javadoc typo in Stopwatch#elapsedMillis.
Add pom.xml files for Guava-Android
Document that we don't forward calls to default methods, Multimap edition.

Change Sources/Sinks to implement Input/OutputSupplier temporarily, to make migration of usages easier (make it possible to change an InputSupplier to a ByteSource without changing an API that takes an InputSupplier at the same time). The getInput/Output methods are @Deprecated since they shouldn't be called directly. Also make public methods for viewing Input/OutputSuppliers as Sources/Sinks.
Disable incorrect @GuardedBy annotations.
Move oppositeNode() from Graphs to Endpoints and rename it otherNode(). Also make a few methods final. It changes the following code:
Eagerly check for an appropriate exceptionClass constructor during calls to Futures.getChecked.
Remove MapMaker.expireAfterWrite(), the expirationQueue, ticker related functionality, and all expirable/evictable related implementation details.
Update Public Suffix data.
Removing unnecessary index bounds check for lazy striped when
Updating putString(String) spec and default implementation, to avoid
Write a more compact ImmutableTable implementation.
Prevent our rollup modules from including any "real" source files from c.g.c subpackages.
Add test in MultisetForEachEntryTester to test multiple copies of a single element.
Updates math utilities to use JDK 6 methods where possible, addressing several TODOs.
Make ordering of Primitives#all{Wrapper,Primitive}Types deterministic
Changes AtomicLongMap#removeAllZeros to use iterator for removals.
Change primitives #toArray to take Collection<? extends Number>
Optimize BigIntegerMath.log10 by using the log2 to get an initial approximation of the log10.
documentation enhancements to Cache, LoadingCache, and CacheBuilder
Optimize ImmutableCollection.toArray(T[]) as per https://shipilev.net/blog/2016/arrays-wisdom-ancients/, the key goal being to avoid the necessity of zeroing a newly created array where possible.
Use callbacks on ListenableFutures to implement invokeAny on AbstractListeningExecutoreService rather than an ExecutorCompletionService.
Add JPMS module name
Move EMPTY to RegularImmutableList.
Tell Travis to wait for Maven to finish.
Push asList() cache down into ImmutableCollection subtypes to avoid holding onto the extra reference in ImmutableList.
Reenable EnumMap tests, which work as of JDK7: http://bugs.java.com/view_bug.do?bug_id=6312706
Discourage people from mocking or otherwise creating custom implementations of ListenableFuture.

- fix @links to point to LoadingCache
Add missing <inherits> to modules.
Add a benchmark comparing CRC32 and Adler32 hashing using the Checksum API directly and using the common.hash API.
Inline remaining usages of Throwables.propagate. We are removing all calls in preparation for deleting the method.
Use diamond for collect tests.
Implement Hashing.weightedConsistentHash().
Add an optimization for CompoundOrdering to avoid iterator allocation.  On my benchmarks, for the common two-comparator case, the speedup is ~30%.
In com.google.common.reflect.Types, implement the TypeVariable interface using a dynamic proxy rather than an explicit implementation.
Adds an addAll(Stats) method to add a Stats object to a StatsAccumulator, and corresponding methods for PairedStats and PairedStatsAccumulator.
Improved the code coverage of OrderingTest and removed an unused constructor.
Add superclass safety check in getSupertype(), added @Beta and @since to TypeToken and Reflection.
Test that finalize deletes the backing file. This required refactoring the model code to make finalize accessible from tests.
Link to JDK Supplier, just as we link to JDK Function and Predicate.
Add missing rejectionPropagatesToOutput tests.
Add tests to the asMap() views of ListMultimap, SetMultimap, and SortedSetMultimap to verify that the asMap().values() are of the correct type (List, Set, SortedSet) at runtime.
Some fixes to java5-compatible compilation
Minor style tweak (doesn't actually change anything, but the better symmetry makes me happy).
Generalize the javadocs on CacheBuilder.ticker()
Return a NavigableSet from TreeMultimap.get
Add CacheStats.plus() similar to minus().
Disable doclint when building under JDK8.


Remove the method Graphs.roots(). “roots” as we’re defining them isn’t really a standard term of art (I can only find references to ROOTED graphs, which have exactly one root). Additional reasons to remove:
Remove methods scheduled for deletion in Guava 21.
Replace custom TestAssertionFailure with JUnit AssertionFailedError.
update artifact names
Remove tests from AbstractSetMultimapTest redundant with tests from SetMultimapPut(All)Tester.
Rollforward [] which was rolled back in [] because it

Roll forward.
Add @CheckReturnValue to Multiset and friends.
Fix serialization of GWT SingletonImmutableBiMap.inverse().
Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java's internal encoding.
Add closeQuietly(InputStream) and closeQuietly(Reader).
Depend on error_prone_annotations 2.1.3.

Use features from GWT 2.6.0:
Make the constructors on Source/Sink classes protected.
Remove all of common.cache from @Beta.

Add Stopwatch#elapsed in prep for migration from elapsedTime() and
Remove unused code.
Use a newer version of Mockito, as necessary for Java 9.
Add asAsyncCallable method to Callables.
Move indexMap to a more logical location.

Improve EqualsTester doc
Graph[Builder].java et al.: fix representation of angle brackets in Javadoc.  *sigh*
For all of //java/com/google/common/... and //javatests/com/google/common/...
Update Guava versions to 23.0-SNAPSHOT.
Annotate Multimap with @CompatibleWith annotations to enforce type-compatibility with keys and values as appropriate.
Strip references to Google-internal Escape module from Guava.
In com/google/common javadoc, add explicit <p> before paragraph text following other block level closing tags (</h*>, </pre>, </table>). Without the <p>, a blank line may not be added between the text and block level elements such as <ul> that follows it.
Mark CartesianList as RandomAccess.
Remove APIs scheduled for deletion in March 2015.
Update Public Suffix data.
eliminate trailing whitespace and tabs
Change toString() methods of returned Predicate instances to consistently use the "code-like" style.
Fix sourceDirectory, restoring compiled serializers to guava-gwt jar.
Fix a tiny mathematical typo in LongMath.
Avoid presizing arrays.

Simplify and organize various Map implementations.  Specifically:
Correct a slightly inaccurate claim in the javadoc of the equals() methods on Stats and PairedStats. If strictfp is not in force, we can't actually guarantee getting equal statistics even for the same values in the same order.
Add c.g.common.base.Optional#presentInstances
Add benchmark for BaseEncoding.
Add simple `closed` and `closedOpen` ContiguousSet factories for int and long.
Complete a TODO to avoid redundant copies of entry arrays in ImmutableMap construction pathways.
Remove a couple of APIs scheduled for removal in January 2018.
Open source c.g.common.hash into Guava 11.0
Address lint identified by https://github.com/lewisd32/lint-maven-plugin
An optimization for Graphs and Networks, inspired by Michael. Introduce "MapIteratorCache" and "MapRetrievalCache". MapIteratorCache is extremely light-weight and optimizes the follow case:
Remove GuavaAsserts, replacing all calls with calls to Assert.
Remove usages of CaliperMain from java_benchmarks targets since the deps for java_benchmarks don't need to (and shouldn't) include CaliperMain anymore.
only read ticker once per operation
Simplify some code in directed graphs. In particular, make removing the incident edges when removing a node more intuitive. Note that removeNode() in undirected graphs currently is O(degree^2) (for multigraphs), but that will be alleviated once we have AbstractIncidenceSetGraph and it moves to this implementation.
Add @CheckReturnValue to entire Optional class.
Add FluentFuture.from(FluentFuture) factory method.
Increase heap.
This CL fixes method calls that incorrectly ignore the return
Remove final switch from CaseFormat.
Override close() in all subclasses of FilterOutputStream to ensure they do not swallow exceptions thrown when flushing the delegate stream.
Change README to README.md and make it reference GitHub locations rather than Google Code.
PredecessorsFunction, SuccessorsFunction: remove @GoogleInternal annotation, now that we've resolved the "what type should the method return?" question.
Deprecate Hasher#hashCode(), implementations of this method return a hashCode of the Hasher object itself and not the hashed data, deprecating this would help warn users of making this mistake.
A few final minor javadoc fixes to close external guava bugs.
Annotate MediaType.toString with @LazyInit and remove volatile (which is
Replace "DirectedIncidentNodes" and "UndirectedIncidentNodes" with a shared "IncidentNodes" class that implements Set. This avoids the call to .asImmutableSet() that the directed graphs were performing, and also makes it so that we are now very close to having an abstract base graph implementation that will almost entirely replace the 4 current implementations.
Prefer hardcoding constant over calculating at runtime.
Add test for the complicated example in Guava issue #1342.
Improve Funnel javadocs about using an enum.
Adding a custom serialization option, when the space overhead of java serialization
Suppress some unused warnings in Eclipse.
Make toImmutableList() and toImmutableSet() collectors singletons.
Cleanup grab bag:
Warn about upcoming deprecation of Multimap static factory methods.
Fix comment to refer to InternetDomainName.isValid instead of deprecated isValidLenient.
- Fix scheduleWithFixed(Delay|Rate). As originally implemented, scheduleWithFixed(Delay|Rate) would submit a Callable/Runnable wrapped in a FutureTask to the delegate ScheduledExecutorService and fail to run more than once due to run-once nature of FutureTask.
Remove "nullness" suppressions added in CL 152864813.
Warnings-related cleanup to c.g.c.base and its tests. Ruthlessly standardizing the comment we use so these can potentially be replaced with string constants one day. In some cases I have actually removed unjustified suppressions.
Annotate Cache with @CompatibleWith
test cleanup
Hide deprecated Stopwatch constructors in Guava.
Use a newer JDK 8 for travis build
Reformat collect.[A-I]* with google-java-format.
Make it more difficult to get StackOverflowErrors from hooking chains of futures together with setFuture
In ImmutableCollection.ArrayBasedBuilder, keep a forceCopy flag to allow builder types to force a copy even if the entire array has not been used.
Give removal date for Stopwatch deprecation.

google-java-format MOST OF THE THINGS.
Change ByteStreams, CharStreams and Files to use Closer.

Add {floor,ceiling}PowerOfTwo as discussed at API review.
Update variable names that referenced old node1/node2 names with new A/B names.
Note that arrays get no special treatment in Objects.hashCode javadoc.
Update Public Suffix List.
Adding Converter<String, String> CaseFormat.this.converterTo(CaseFormat).

Open source Runnables.doNothing().
SuppressWarnings for more tests ignoring return values.
Automated g4 rollback of changelist 112075036.
Super nit: move allowsParallelEdges() above allowsSelfLoops() in the Network interface (this is the order they're presented in NetworkBuilder, as well as the order in the implementing class).
Add sortDescending methods in common.primitives.

Remove Iterator tester infrastructure, which has never had any real tests.
Miscellaneous minor doc fixes.
Open source a few more of the benchmarks.
Replace <br> tags.
Some javadoc improvement of Invokable.
Remove scope=provided for jsr305.
Add Splitter.withKeyValueSeprator(char)
Make GWT logging even quieter for Travis build.
Update Public Suffix List.
Automated g4 rollback of changelist 35980335.
Fold EmptyImmutableSortedMultiset into RegularImmutableSortedMultiset.
Deprecated the old TimeLimiter.callWithTimeout() method now that its replacements have been fully implemented.
Fix @param javadoc for UnsignedInts.parseUnsignedInt() to reflect actual parameter name.
Add @ReflectionSupport to AggregateFutureState, AtomicDouble and InterruptibleTask.
