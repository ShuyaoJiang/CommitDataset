RXTX -> Rxtx for consistent naming convention
Add tests to try to track down some buffer issues
Use lookupAny() instead of lookup()
Don't try to use UnixResolverDnsServerAddressStreamProvider when on Windows.
HTTP Content Decoder Cleanup Bug
DnsNameResolver empty/null hostname missed by a416b79
Implement EventExecutor.parent() in AbstractEventExecutor
Missing release modules in netty-all project
[maven-release-plugin] prepare for next development iteration
Fix set100ContinueExpected(...) jsvadoc
Fix spelling mistake of HttpStaticFileServerHandler.java
Fix more inspector warnings introduced by recent mergences
Overall clean-up on codec-mqtt
Add port to Origin HTTP Header if the port is non default (80/443). See
Move system property access operations to SystemPropertyUtil
Fix the tcnative lib loading problem in OSGi
[#1893] Fix bug in JdkZlibDecoder which did not let it handle large data
HashWheelTimerTest cleanup
HTTP/2 SETTINGS ACK sequencing issue
Optimize space usage of FastThreadLocal (#7861)
ReadOnlyUnsafeDirectByteBuf.memoryAddress() should not throw
Netty BOM inherit from parent and its own dependency management
[#1832] - Channel writability change notifications sometimes fail to fire
Reduce conditionals in AbstractReferenceCounted
http://jboss.org/netty/ to http://netty.io/
Clean up catch blocks
Clarify the appointment of the intermediate collection
Add LineEncoder to append a line separator automatically
Add Channel.type() which tells if stream-oriented or message-oriented
Reduce GC in OioDatagramChannel.doRead/doFlush
Remove the volatile modifiers where they are unnecessary
Add content length and date headers to CORS response
Updated maven-jdocbook-plugin
Add verification for websocket subprotocol on the client side.
System property util might return null
Make ReplayingDecoder.newInboundBuffer/discardInboundReadByte() final for safety
Move methods for decode hex dump into StringUtil
Fix incorrect port range check
Add unit to maxContentLength message javadoc
* Changed all package names to org.jboss.netty.*
Genericize ChannelInitializer
cleanup
Fix the commands cache and hashCode() in SmtpCommand
 Touch a ReferenceCounted while it traverses across a pipeline
Allow to call AbstractDiskHttpData.setContent(Unpooled.EMPTY_BUFFER) multiple times. (#7890)
Refactor the pipeline API to support stacked codecs
* Moved all third party license filed into the 'license' directory
Revert "Fix NoSuchElementException raised by ChannelInitializer"
Added dependencies for container integrations
Rename `ChannelHandlerContext#fireUserEventTriggered()` argument from `event` to `evt` so it matches the `ChannelInboundHandler#userEventTriggered()` argument's name.
Upgrade netty-build to 11
Add methods that add/remove multiple ChannelFutureListeners to ChannelFuture
Change Timeout.cancel() to return a boolean value, true on a successful cancel
Remove flags when running benchmarks. (#8262)
[maven-release-plugin] prepare release netty-3.0.0.CR3
[#107] Add support for closing either input or output part of a channel
Read until all data is consumed when EOF is detected even if readPendâ€¦ (#7961)
SPDY: check if spdyHeadersFrame is null before adding it to out
ObjectCleaner should continue cleaning despite exceptions
Fixed incorrect docbook location
Commit first round of classes to support nio2/async channel api. Still work in progress.. See #396
Allow to cache keymaterial when using OpenSSL
Fix javadocs
Update dependencies
HTTP/2 InboundHttp2ToHttpAdapterTest race condition
* Fixed OSGi manifest file
Reduce memory copies in HttpContentDecoder and so also the risk of memory leaks
microbench: move from Caliper to JMH
Revert "[#1058] Fix incorrect logic to detect if ChannelHandlerContext is writable"
Use Constructor for reflective class instantiation.
Fix build errors
Remove ChannelBuf/ByteBuf.Unsafe
Only send event upstream once the Ssl handshake was completed successfull. See #358
Upgrade h2spec-maven-plugin (#8386)
HttpUtil#is100ContinueExpected clean up (#8740)
Defer HTTP/2 stream transition state on initial write until headers are written (#8471)
[#441] Update HTTP examples so that they understand DecoderResult
Correctly handle ByteBuf implementations which have no memoryAddress when writing to native transport
[maven-release-plugin] prepare for next development iteration
New Javadoc/xref stylesheet
Use sun.misc.Unsafe to access a direct ByteBuffer
Change Timeout.cancel() to return a boolean value, true on a successful cancel
SPDY: fix support for pushed resources in SpdyHttpEncoder
[#2005] Allow to use HttpContentDecompressor in strict mode
Backport ALPN and Mutual Auth SSL
[maven-release-plugin] prepare release netty-4.1.24.Final
Check for NPE and also optimze HashSet allocation
PromiseNotifier does not propagate cancel events
Only add port to HOST header value if needed
Add support for IP_TRANSPARENT socket option
[#706] Fix SpdyHttpResponseStreamIdHandler which was ported incorrectly
Update to jmh 1.2.1 (#8270)
Defined four entities related with Netty
Fix regression introduced by cherry-pick bd224286f5a9fa00432ecfd2291801b417fd4eb4
Updating allowNullOrigin to return 'null' instead of '*'.
enable checkstyle for test source directory and fix checkstyle errors
Replace usage of StringBuilder by AppendableCharSequence for performance reasons
Add 'static' modifier to the methods that don't need to be member methods
Make the flow-controllers write fewer, fatter frames to improve throughput.
Made Bootstrap and ServerBootstrap copy constructors private as suggested
Ensure cancelled scheduled tasks can be GC'ed ASAP
Store NativeDatagramPacketArray directly in the EpollEventLoop
Clean up echo example / Fix a bug where closeFuture is not notified
[#5759] Allow websocket extensions in websocketx example.
Prefer interface to implementation in type declaration
Allow to config read/write timeout for the AIO transport. See #509
Allow to remove pinning of EventExecutor for EventExecutorGroup
Fix data corruption in FileRegion transfer with epoll transport
Add back the removed deprecated methods in SslContext
Fix javadoc issues
Remove remote initiated renegotiation support
Split AbstractNioChannel into two subtypes
Upgrade log4j2 dependency to 2.6.2
Even better promise validation messages
Don't close the connection whenever Expect: 100-continue is missing.
[#2573] UnpooledUnsafeDirectByteBuf.setBytes(int,ByteBuf,int,int) fails to use fast-path when src has array
Fix a few typos
Fix a potential NPE
fix the typos
Fix a bug where SpdyHeaderBlockZlibDecoder fails to decompress
Update tcnative version
When the response exceeds the threshold, it will be compressed
HTTP/2 codec may not always call Http2Connection.onStreamRemoved
Improve HTTP message streaming in decoder, in Master same as #380 submitted fix
Read Only Http2Headers
Add tests to ensure an IllegalReferenceCountException is thrown if set/writeCharSequence is called on a released buffer
Upgrade to netty-tcnative 1.1.33.Fork8
Add support for AIO scattering reads and gathering writes.
Add missing Redis client example
[#4185] SpdyHttpEncoder fails to convert HttpResponse to SpdyFrame
Add missing file
Rename localtime to worldtime so that a user thinks it's a local transport example
Change tabs to spaces. Damn you auto code format!
Consider writerIndex when LzfDecoder writes into a new heap buffer
Expose channel pool configuration to subclasses.
Remove unreachable code
Native EPOLL Library Allows Shading
Support the little endian floats and doubles by ByteBuf
Replace SpdyOrHttpChooser and Http2OrHttpChooser with ApplicationProtocolNegotiationHandler
OCSP stapling support for Netty using netty-tcnative.
[maven-release-plugin] prepare release netty-4.1.19.Final
Add shutdown hooks to SingleThreadEventLoop
Add more test cases to ZlibTest
transport-native-kqueue libraries should not lazy link
RtspVersion does not need to extend HttpVersion at all - it does not add anything to HttpVersion
Fix deprecated Maven expressions usage
[maven-release-plugin] prepare for next development iteration
Further reduce ensureAccessible() overhead (#8895)
Implement flush-future properly / Make channel options type-safe
Ensure we call promise.setUncancellable() before trying to process in DefaultHttp2StreamChannel.
[#962] Read data as soon as it is present in OIO and not wait till it match Buffer.writableBytes()
Resolved issue: NETTY-84 Replace ChannelFactory.getExternalResource() with ChannelFactory.releaseExternalResources()
HTTP/2 Graceful Shutdown Timeout
Resurrected lost comments and section ordering caused by Q4E
Refactor FastThreadLocal to simplify TLV management
[#1533] Introduce ByteBufHolder.duplicate() and make use of it in DefaultChannelGroup.write(...)
Fixed the XML decoder
Fix NPEs in HttpPostRequestEncoder#nextChunk
Remove unused method in SslContext
Remove redundant exception message
Correctly pass ChannelPromise on to the next ChannelOutboundHandler when use CombinedChannelDuplexHandler.
Unhealthy channel is not offered back to the pool.
[#1519] VoidChannelPromise don't fire CancellationException anymore which was incorrect
Fix checkstyle
Add support for ExtensionRegistryLite in ProtobufDecoder
HTTP/2 Unit Test LocalChannel Leaks
Do not keep Runnables for the events that are triggered only once in most cases
Java ALPN provider version update
Read only when requested (read-on-demand)
Fix test
Do not log explicit no unsafe, fixes helper method. (#8111)
1)added sctp echo example 2)refactored sctp channel impl classes
Fixed a bug where ChannelInitializer can trigger the same event twice
Fix checkstyle
Updated the dependency and plugin versions
Make build success with checkstyle violations temporarilly
Dont use ThreadDeathWatcher to cleanup PoolThreadCache if FastThreadLocalThread with wrapped Runnable is used
Correctly handle earlier versions of websockets. See #222
Update the comment of io.netty.buffer.PoolChunk.java (#7934)
Minor improvements in ByteBufOutputStream
Linux EPOLL Channel Configuration test unsupported options
Introduce SingleThreadEventLoop.registeredChannels (#8428)
[maven-release-plugin] prepare release netty-3.0.0.GA
Javadocs cleanup / added
[maven-release-plugin] prepare for next development iteration
HttpHeaders valuesIterator and contains improvements
[maven-release-plugin] prepare for next development iteration
Merge redis codec to master branch. See #201
Use String.getBytes(Charset) wherever possible
prepared merge with upstream
Fix a race where 2 handlers in different threads access the same buffer
Bugfix in channelUDT().
Make Unpooled*ByteBuf public so that ByteBufAllocator implementor can extend it
Record release when enable detailed leak detection
Simplify DefaultChannelGroup.contains(...) and so remove one instanceof check.
Fix unnecessary boxing and incorrect Serializable
Bump Conscrypt version to 1.0.0
Add ByteBuf.isReadOnly()
Fix typo in error message
Make classes public
[#531] Move io.netty.util.Signal to io.netty.util.internal 
Add a possibility to create HttpMessage instances with pre-existing Headers
[#1623] Fix javadocs for ChannelGroup
Deprecate HttpUtil.getCharsetAsString(...) and introduce HttpUtil.getCharsetAsSequence(...).
Added IP_TRANSPARENT option for UDP (#7872)
[maven-release-plugin] rollback the release of netty-4.0.14.Final
Convert X509TrustManager into X509ExtendedTrustManager for Java 7+
Simplify ByteBufProcessor and MessageListProcessor and Add internal component accessors to CompositeByteBuf
Fix typo in ProtobufDecoder comment
Fix Javadoc
Update to netty-tcnative 2.0.8.Final
Skipped SCTP Transport tests in the build (Java SCTP is only available for Linux and Solaris)
Fix documentation for ChannelHandlerContext#fireChannelReadComplete
Eliminate usage of releaseLater(...) to reduce memory usage during tests
[maven-release-plugin] prepare for next development iteration
Adjust tests to also pass when using BoringSSL (#7946)
[#732] [#672] Allow replacing an inbound or outbound buffer of a handler
Fix #3331 Update Javassist from 3.18.0-GA to 3.19.0-GA
[#4892] Make Snappy class public
Fix assert usage. Thanks Trustin for review
EpollDatagramChannel avoid getOption
Do not attempt to compress trailing data that is less than the MIN_COMPRESSIBLE_LENGTH
Fix invalid module name format
Cleanup PlatformDependent* code
Make CookieEncoder and CookieDecoder stateless
Fix style
#722 - Make WebSocketClientHandshakerFactory a static utility class
Update to netty-tcnative 2.0.25.Final to fix possible segfault when openssl < 1.0.2 and gcc is used. (#9038)
Use ChannelException when ChannelConfig operation fails in epoll.
EPOLL SelectStrategy
SPDY: SpdyHeaderBlockDecoder should not discard input data
Correct guard against non SSL data in ReferenceCountedOpenSslEngine
Lazily instantiate HttpServerUpgradeHandler.UpgradeCodec
H2C upgrades should be ineligible for flow control (#7400)
Added a link to the project
Close ObjectInputStream in ObjectDecoder.decode(...)
Move HTTP multipart classes to its own package / Clean-up
Adding 'final' keyword for private fields where possible
Allow for multiple client boss threads.
Remove unused imports
codec-http2: Let users configure per-frame logs
Correctly convert supported signature algorithms when using BoringSSL (#8481)
HTTP/2 Decoder reduce preface conditional checks
Helper method to get mime-type from Content-Type header of HttpMessage
reverting back to the older jdocbook plugin due to weird build problem
Automatically decode DNS domain name to unicode
Fix wording in "Rich Buffer Data Structure" section.
resource leak: Formatter was never closed
IllegalRefCountException in FullHttp[Request|Response].hashCode()
Fixing NPE in StreamBufferingEncoderTest
attach -> register
SPDY: better encapsulation of header encoding/decoding
Document the contract of Attribute.getAndSet(...) and set(...)
[maven-release-plugin] prepare for next development iteration
DefaultHttp2Headers#contains(CharSequence, CharSequence) does not work with String
* SecureChatServerHandler should use ChannelGroup where possible
Use heap buffers for Unpooled.copiedBuffer()
Vastly simplified ByteBufProcessor and MessageListProcessor
Add support for TLSv1.3 (#8293)
Add interopt tests between Conscrypt and OpenSSL SSLEngine implementations. (#8919)
Return the new buffer's capacity is same with the requested capacity
[maven-release-plugin] prepare release netty-4.0.5.Final
Fix covariant return types in ChannelConfig interfaces for method chaining
Move DefaultChannelPipeline.notifyHandlerException() to DefaultChannelHandlerContext / Always trigger exceptionCaught() at the handler that raised an exception
deprecate IntegerHolder for removal (#8339)
Change test names to web socket wire version
Tighten up visibility
Do not deploy an unused test jar
Some optimizations to the http codec
Http2RemoteFlowController stream writibility listener
Fix a problem where source jar is not attached
Accept two ways to start HTTP/2 over clear text
Eliminate noisy logging when using sun.misc.Unsafe and running on pre Java9
Fix handling of FullHttpResponse when respond to HEAD in HttpServerCodec
replace ends -> starts
Allow to get an Iterator over all of the EventExecutor an EventExecutorGroup contains. Beside this allow to get basic stats for the EventExecutor like pendingTasks and executorCount
Upgrade to netty-build 10
Fix release quirks
UnixResolverDnsServerAddressStreamProvider default name server selection and ordering bug
Fix memory leak in DefaultCompositeByteBuf when a component is another CompositeByteBuf / Allow retain() and release() on a derived buffer
[#4834] Fix race in AddressResolverGroup
Log various properties at startup time for easier diagnosis
Fixed cosmetic errors by overriding the default stylesheets
Revert 25c7a783a788b04f148c56f12d6efe1e11d093cd and fix #1064 differently
[#3780] Handle ChannelInitializer exception in exceptionCaught()
[#2168] Eliminate unnessary memory copy for heap buffers in JdkZlibEncoder
Remove unnecessary code from HttpObjectDecoder and re-enable all HTTP tests
Remove all/target/src and all/target/classes after building the all-in-one JAR and Xref
Fix incorrect sizing of temp byte arrays in (Unsafe)ByteBufUtil (#8484)
Http2FrameLogger frame labels incorrect
Fix possible testfailure due not waiting on Channel.close() (introduced by e220c568232fe9b479e3ac7a5b66f5a97dcc2c39)
Add first-class Little Endian support to ByteBuf and descendants
Ensure OpenSslSession informations can be retrieved even after shutdown
AggregatedFullHttpMessage.replace should also copy a decoder result
Rename IpAddresses to NetUtil
Remove the references to the deprecated CookieDecoder
Undeprecate deregister() and chanelUnregistered()
Add missing m2eclipse life cycle mapping
Using public LogLevel for HTTP/2 frame logging.
Only load native transport if running architecture match the compiled library architecture.
Rename ChannelHandlerContext.type() to ChannelHandlerContext.types() as it return a Set
Remove apiviz tags - we are focusing on user guide instead and putting diagrams there
AbstractBootstrap.validate() should return reference to itself
Make ChannelConfig.setAutoRead() triggers Channel.read() if autoRead was previously false
Streamline CompositeByteBuf internals (#8437)
Update snapshots less often
Add Log4J2LoggerFactory and Log4J2Logger
Clean up maven-bungle-plugin warnings
Let OkResponseHandler extend SimpleChannelInboundHandler
Support JDK9-native ALPN
Update license and pom (still Netty out of sync since branch TrafficShaping is not yet part of the official release)
Fixed typo
No need to pass the next BufType to the constructor
* Upgraded APIviz 1.2.5.GA
[maven-release-plugin] prepare release netty-4.0.3.Final
[#539] Potential direct memory leak in HttpContentEn/Decoder
Will release a couple more BETA before CR
Fixing CorsConfigTest failure under Java 8.
Added NioDatagramChannelFactory support to JBossMC integration
Initial incomplete checkin of the event loop API
[maven-release-plugin] prepare for next development iteration
Add MultithreadEventLoopGroup.DEFAULT_EVENT_LOOP_THREADS / Add DefaultThreadFactory
Http2Connection stream id generation to support queueing
[#59] Make ChannelFuture implement Future<Void>
Adds some more test cases
Upgrade maven-javadoc-plugin
[#4284] Forward decoded messages more frequently
Fix up the last logging mishits
Log the time taken for generating the initialSeedUniquifier
[maven-release-plugin] prepare release netty-4.1.5.Final
Use separate query ID space for different DNS servers
Revert "Only call ctx.fireChannelReadComplete() if ByteToMessageDecoder decoded at least one message."
Fix up ChannelPipeline javadocs by add lost "don't "
[#4171] Fix flacky test introduced by previous commit.
Bump up the backlog value
Modify ChunkedInput to not return a chunk. It now read the chunk and directly transfer it. This helps to safe a copy on most cases
SPDY: refactor SpdyHttpDecoder to allow subclasses to access messageMap
Checkstyle
Fix formatting
Initial working version of the echo server example
Remove unused imports and not needed throws declarations.
remove newline from end of .gitingore
MessageToByteEncoder always starts with ByteBuf that use initalCapacity == 0
Allow to detect failed query caused by an Timeout / IO error and also not cache these.
Don't add null to SmtpResponse.details()
Revert "[#1058] Add Channel/ChannelHandlerContext/ChannelPipeline.isWritable()"
Allow to lazy create a DefaultFileRegion from a File
Correctly throw IndexOutOfBoundsException when writerIndex < readerIndex
NETTY-246: adding implementation to netty trunk for the 4.0.0 release. In order to get the tests to pass,
[maven-release-plugin] prepare release netty-3.0.1.GA
Add missing javadocs
Relaxed memory access constraint of ReferenceCounted.refCnt() for potentially better performance / More precise reference counting for MessageBuf
Epoll and Kqueue shouldn't read by default (#8024)
HTTP Chunk, wrong delimiter written
Updated the getting started guide to avoid user confusion on pipeline configuration
Forward-porting SPDY codec
Merge branch 'master' of https://github.com/palmerabollo/netty into WsTests
Replaced deprecated 'sendUnsupportedWebSocketVersionResponse()' with 'sendUnsupportedVersionResponse()'
Fix limit computation of NIO ByteBuffers obtained via ReadOnlyByteBufferBuf.nioBuffer
SPDY: ensure SpdyHeaderBlockRawDecoder always reads entire input
SPDY: allow empty header values in SPDY/3
Replace Channel.Unsafe.setEventLoop() with register()
typo
Correctly build socketaddress string, followup of 8b2badf44f9b43a4ff247ada81f93e486ea9dfbf
Correctly handle the case when no ResourceLeakTracker was created for derived pooled buffers. This was missed in c2f4daa7398a9363fde8e51bf52c0d0323f870a5
Recognizing TLS Extension "HeartBeat" as Valid TLS Packet
Optimized DefaultChannelPipeline.write(...)
Updated 'before getting started'
Removed unnecessary pattern matching during number paring and unnecessary toLowerCase() invocation.
Revamp the core API to reduce memory footprint and consumption
log in PatternLayout (%F:%L)%c.%M
Adding support for Conscrypt (#6271)
Strict thread model / Allow assign an executor to a handler
Add test case for HttpHeaders.equalsIgnoreCase(...)
HTTP/2 support pending data larger than Integer.MAX_VALUE
Added the group package to Misc Javadoc group
Ensure we not try to call `select` when the `AbstractSniHandler` was already removed from the pipeline.
#2177 Adding support for bound host and port for the SOCKS5 command response. Changes are fully backward compatible.
Http2ConnectionHandler and Http2FrameListener cyclic dependency
Use childGroup for accepted AioSocketChannels, children of previously bound AioServerSocketChannel.
Code clean-up
[maven-release-plugin] prepare for next development iteration
Add HttpPostrequestEncoderTest by @igstan
[maven-release-plugin] prepare release netty-4.0.0.CR8
[maven-release-plugin] prepare for next development iteration
Add JBoss Marshalling Encoder/Decoder. See #324
Fix a test failure
Removed the unused dependencies from NOTICE.txt
Make sure HttpVersion checks if the version string is not empty
NullPointerException in Lz4FrameEncoder
Use maven plugin to prevent API/ABI breakage as part of build process (#8904)
[#1450] Fix examples in ReplayDecoder javadocs
Correctly exclude netty-tcnative classes from the all jar.
WebSocket enhancements
[#1041] Fix reference to HttpObjectAggregator
Never expose user.dir to the web on directory listing
Make Bootstrap and ServerBootstrap thread-safe
ID -> Id (#393 Ensure all fields follow our naming convention)
minor gc optimization: better DefaultHttpHeaders.iterator()
DefaultHttp2FrameWriter ping payload size check
Tiny optimizations
Fix varargs parameter logging in LocationAwareSlf4JLogger (#8834)
Propagate full Unsafe unavailability reason in PlatformDependent
DNS move JDK DNS resolution out of DnsServerAddresses static initialization
Fix NPE when using Http2ServerUpgradeCodec with Http2FrameCodec and Http2MultiplexCodec
Do not call static methods via instances
Added a secure WebSocket client example
Clean-up unused imports
Ensure native memory is released when OpenSslServercontext constructor throws exception
Allow to use custom TrustManagerFactory for JdkSslServerContent and OpenSslServerContext
Fix error that causes (up to) double memory usage
Revert "Provide a way to cache the internal nioBuffer of the PooledByteBuffer to reduce GC. (#8593)"
Move methods from ChannelHandler to ChannelStateHandler like proposed in [#1107]
Fix CharSequenceValueConverter.convertToByte implementation for AsciiString (#7994)
Removed unnecessary dependencies
Automatically detect the message types in  MessageToMessageCodec
Clenaup: simplify EpollEventLoop.closeAll() (#8719)
Fixed deployment problem
Share same ThreadLocal for all decoder/encoders to minimize memory usage
Fix JDK 8 compatibility issue with OpenJdkSelfSignedCertGenerator
[#2706] Allow pid up to 4194304
Address @trustin 's comments and also make sure the accept of AIO is only triggered from the event loop. See #71
Fix possible NPE which accour if the inbound/outbound buffer was not lazy allocated yet
Motivation: Resource Leak Detector (RLD) tries to helpfully indicate where an object was last accessed and report the accesses in the case the object was not cleaned up. It handles lightly used objects well, but drops all but the last few accesses.
[#5402] sec-websocket-origin should mention HTTPS
[#1959] Proposed fix to correctly handle timeouts that overflow the ticks in the wheel
Added checkStartsWith option for WebSocketServerProtocolHandler
Revert "[maven-release-plugin] prepare for next development iteration"
Use the original stack trace when translating SocketTimeoutException to ConnectTimeoutException
[#907] Prevent IllegalBufferAccessException which could be triggered if inboundBufferUpdated() was called once the channel was closed
Code clean-up
[#2643] Throw TooLongFrameException instead of using fireExceptionCaught
Use OpenSslClientContext as default if openssl is avaible
[#2390] Minimize memory usage of NioDatagramChannel
Fix enforcer rule for new os detection plugin
Fail fast when DefaultChannelPromise is constructed with null as Channel.
Add GlobalEventExecutor
HttpServerKeepAliveHandler doesn't correctly handle VoidChannelPromise
Move ReferenceCounted and AbstractReferenceCounted to io.netty.util
Prevent unsafe ChannelFutures from being passed to a pipeline
Integrate @timboudreau's SnappyIntegrationTest improvements
Revert bad renaming in ZlibTest
Replace DnsNameResolverContext#trace special code with an implementation of DnsQueryLifecycleObserver
Correctly format cookies. This fix some bug which lead to expiring of cookies to not work. See #426
Fixed indentation
Correctly update internal handshake state on beginHandshake()
[maven-release-plugin] prepare release netty-4.0.0.Alpha8
Use AbstractReferenceCounted to clean up the codes for codec-memcache
Fix examples
Let ChannelGroupFuture extends ChannelFuture and ChannelGroupFutureListener GenericFutureListener
[maven-release-plugin] prepare for next development iteration
Ensure buffer is not released when call array() / memoryAddress()
Only use manual safepoint polling in PlatformDependent0.copyMemory(...) when using java <= 8 (#8124)
Stop calling BIO_write once internal buffer is full.
codec-memcache: fix decoding issue for value parts.
Guard against having NetworkInterface.getNetworkInterfaces() return null
Add support for byte order to LengthFieldPrepender
[#4635] Stop decoding if decoder was removed in ReplayingDecoder
Require RHEL 6.6 to release
ObjectCleanerThread must be a deamon thread to ensure the JVM can always terminate.
Correctly implement SelectedSelectionKeySet.remove(...) / contains(...) again so it works with the NIO Selector.
[maven-release-plugin] prepare for next development iteration
Revert back to depend on netty-tcnative
ByteBridge.flush() does not flush anything if the target buffer is not writable but expandable
Commit first round of classes to support nio2/async channel api. Still work in progress.. See #396
Fix example in CookieDecoder Javadoc
Allow to recover from exception triggered by accept() more easily
Remove duplicate groupId
Improved documentation of SCTP Channel/ServerChannel Interfaces
Fix checkstyle
Switched from tar.gz to tar.bz2
Fix and simplify freeing a direct buffer / Fix Android support
[#1708] Correctly set the writerIndex in ReadOnlyByteBufferBuf if it is constructed with a buffer which has non zero position
Remove sniffer whitelist entries for NIO.2
HTTP/2 Headers Type Updates
Rename SnappyFramedEncoder/Decoder to SnappyFrameEncoder/Decoder
StringUtil cleanup. NewLine char initializing simplified and code in static section simplified.
[#4841] Fix segfault if UnpooledUnsafeHeapByteBuf.getShort(..) is used and UNALGINED access is not possible.
[#2405] Add support for SO_REUSEPORT to EpollDatagramChannel
Propagate pong frames in WebSocketProtocolHandler (#7955)
Use underscore in native library names for consistency.
Update to conscrypt 1.1.2 (#7949)
Add socksx package which supports SOCKS 4/4a/5
Fix broken tests introduced by dc615ecaaf9749edd227413c32c2f288dfc1309e
Adding short-curcuit option for CORS
SPDY: add SPDY/3 support
QueryStringDecoder's javadoc fix
Fix class description of FastLzFrameDecoder
AbstractByteBuf forEach minimize byte code
Simplified container integration by removing unused features
[maven-release-plugin] prepare for next development iteration
Overall code cleanup
Introduce a new interface that specify methods for ChannelConfig that
Do not send Content-Length: 0 on 101 responses.
AbstractScheduledEventExecutor.schedule(...) must accept delay <= 0.
Implement isWritable and ensureWritable on ReadOnlyByteBufferBuf (#7883)
SPDY: SpdyFrameDecoder should buffer unread data when decoding headers
Fixed last-minute problem with OSGi bundle packaging
Beautified JXR report
Add ClientChannelConfig and move connectTimeoutMillis there
Fix incorrectly encoded empty SOCKS5 address (#8292)
tab -> spaces
Updating `ByteBuf` Javadocs to represent actual behaviour. (#8709)
AbstractMethodError with barchart-udt
[maven-release-plugin] prepare for next development iteration
Add null checks before converting to string to avoid NPE.
Add MQTT protocol codec
Fix memory leak in the test
[#995] Replace AtomicReference usage with AtomicReferenceFieldUpdater
Reduce memory copies when using OpenSslEngine with SslHandler
HTTP/2 Allow more time for EventLoopGroup to shutdown in test that use LocalChannel
* Updated all license headers
cleanup, duplicated static final fields
Clarify deprecation docs a bit. (#8226)
Fix PlatformDependent.newAtomic*FieldUpdater type safety
Retrofit ReplayingDecoder with the new API
Do not use unreleaseableBuffer and duplicate
Changed SCM URLs
Make field access via ByteBuf.read/write*() faster by avoiding unnecessary boundary checks
[maven-release-plugin] prepare release netty-4.1.27.Final
Replace constructor calls on UniqueName and its subtypes with valueOf() wherever possible
[maven-release-plugin] prepare for next development iteration
[#5841] Add test-case for mutual auth when using certificate chain
Do not depend on the implementation detail of Unpooled.buffer(int) when accessing backing array. (#8865)
Skip forbidden API check when building with java9 for now
Add javadocs
Provide an Automatic-Module-Name for the netty-all artifact fixes #7644
HTTP/2 HPACK Header Name Validation and Trailing Padding
Remove reference to metrics as it is not used anymore
AppendableCharSequence not to depend upon IndexOutOfBoundsException for resize
Fixed JMH ByteBuf benchmark to avoid dead code elimination
Hide password in exception messages of SocksAuthRequest
Correctly copy existing elements when CodecOutputList.add(index, element) is called. (#7939)
Fix documentation errors
Switch to netty-tcnative 2.0.0 which uses different package names
[maven-release-plugin] prepare for next development iteration
DefaultHttp2Headers should throw exception of type Http2Exception
Get the PID properly on Android
[#1561] Fix Securechat example which was broken because Channel was not flushed
Fix three bugs in CompositeByteBuf (#8773)
KQueue detect peer close without EVFILT_READ
SPDY: remove unused code in SpdyHeaderBlockRawEncoder
[maven-release-plugin] prepare release netty-4.1.9.Final
Add SslHandler.renegotiate()
Upgraded the enforcer plugin and updated the rule
Do not fire outbound exception throught the pipeline when using Http2FrameCodec / Http2MultiplexCodec
kqueue version of 7baef4fbe89559b10fbeed7e17b16f953ff3b7ab
Revert "Add support for SNIMatcher when using SslProvider.OPENSSL* and Java8+"
Don't re-arm timerfd each epoll_wait (#7816)
Fixed overflow in the example
Introduce AddressedEnvelope message type for generic representation of an addressed message
Include testsuite-osgi as part of the build
Replace LocalEventLoopGroup with DefaultEventLoopGroup
Allowed IP_FREEBIND option for UDP epoll (#8728)
Do not use finally to propagate events in AbstractRemoteAddressFilter
Remove unused code
[#1410] Make sure we generate a Http response if the server writes back 200 response with empty body and and close the connection
Simplify CharSequenceValueConverter#convertToBoolean
Avoid register multiple cleaner task for same thread's FastThreadLocal index
[#3592] Flush when writing HttpChunkedInput
Better error when first HTTP/2 frame is not SETTINGS
Update license headers
Fix #405: CookieEncoder should refuse to encode more than one cookie
Added PROXY Protocol TLV support
Use Netty's DefaultPriorityQueue instead of JDK's PriorityQueue for scheduled tasks
Resolved issue: NETTY-300 Conform to JBoss project version convention
Make NioByteUnsafe.read() respect ChannelConfig.maxMessagesPerRead and adjust the default from 16 to 1
Add more compiler plugin options to make compilerArguments works
Remove UTF-8 encoding configuration spread over poms
Forward-port JDK ZlibEncoder patch (#404)
Forward-port the pull request #172 to fix #164
Remove EventExecutor.children
[#2720] Check if /proc/sys/net/core/somaxconn exists before try to parse it
Fix checkstyle
[#1520] Release previous set buffer when setting a new data source
Update CertificateRequestCallback usage to match new tcnative
Match Http2ClientUpgradeCodec to the new upgrade policy
Add @SupressWarnings("deprecation") to ChannelInboundHandlerAdapter and clarify deprecation in ChannelHandler (#9001)
Changed "Gets the" to "Returns the" - Requested by @trustin
Share code that is needed to support shaded native libraries.
Rename from io.netty.transport.* to io.netty.channel.*
Allow to use TLSv1.3 with netty-tcnative withe java versions prior to 11. (#8394)
Check noJdkZlibEncoder before comparing other parameters
Remove workaround for ipv6 link-localaddresses as it not work on most os / jdk versions. See #267 and #295
Free the cleared buffer as early as possible / Better naming
Fixed indentation
Fix a bug in internalNioBuffer() implementations of derived buffers
SPDY codec must check headers are lower case
[#844] [#867] Add UDT transport
merge upstream master
Implement toString() for all HttpMessage implementations
Upgrade JMH to 1.14.1
[#2718] Added private key decryption to JDK SSL server context.
[#2375] [#2404] Fix bug in respecting ChannelConfig.setAutoRead(false) and also fix Channel.read() for OIO
Implementing the Binary Memcache protocol
Fix false-positive leaks
Fix cherry-pick where git was not very smart
Allow to specify tcnative artifactId and verion to allow run tests easily with different tcnative flavors
[#719] Handle http requests without an absolute path the right way when encoding them, which is adding / to it
Generate Xref
Replace sun.net.util.IPAddressUtil usage with own implementation
Fixed a problem where XNIO transport doesn't work for the serverside
Retained[Duplicate|Slice] operations should not increase the reference count for UnreleasableByteBuf
Fix #218: CookieDecoder.decode() throws StackOverflowError
[#2618] Introduce ChannelPromise.unvoid() and ChannelFuture.isVoid()
Do not set 'Content-Encoding' if the target encoding is 'identity'
Allows IP_TRANSPARENT to be set on a redirecting socket
Add 'coverage' profile that generates the test coverage report
Add SystemPropertyUtil.refresh()
Fixed issue: NETTY-342 Small typo in the user guide 
ApplicationProtocolNegotiationHandler failure behavior
HTTP/2 Simplify Headers Decode Bounds Checking
[maven-release-plugin] prepare for next development iteration
Revamp the Http2ConnectionHandler builder API
Use SecureRandom.generateSeed() to generate ThreadLocalRandom's initialSeedUniquifier
Only use the source address to join a multicast group if it was specified. See #216
[maven-release-plugin] prepare release netty-4.0.0.CR6
Clean up the examples
[#1833] Replace ; with & only in the QueryString and not the whole URI
Fix fileChannel not closed, preventing delete to occur correctly
Use correct permission mode for java files
HTTP/2 Make DefaultHttp2HeadersDecoder's Http2Headers object creation extensible
Fixing spammy logging for CoalescingBufferQueueTest
1)implemented defragmenting sctp frame decoder 2)implemented sctp netty testsuite
Revamp channel handler API
Fix concurrency problem in UniqueIpFilter (#8635)
Implement the right interfaces
Ported SCTP Transport
Fix test-failures introduced 325cc84a2ebbf4f5e362ec9ca09202b4647bd100 on Java7
Merge branch 'master' of github.com:netty/netty
Add proxy support for client socket connections
Calls to discardSomeReadBytes() causes the JsonDecoder to get corrupted
Proposal for fix related to 1rst issue of #345
Fix missing version properties of transport-epoll in all-in-one JAR
Ensure native transport is included in all and tarball
Move AbstractBootstrap.ChannelFactory out of AbstractBootstrap and hide AbstractBootstrap from a user
Generate all-in-one source JAR
Ensure LocalChannel fire channelActive after peers's channelRegistered
Add FixedCompositeByteBuf which can be used to write an array of ByteBuf in an efficient way.
Shutting down the outbound side of the channel should not accept future writes
Fix regression introduced by 20e32f62ecc90079d1fe940cc70683617a4b3591
[#1558] Corrects handling of port number in WebSockets handshake header values
[maven-release-plugin] prepare release netty-4.0.12.Final
Remove various unnecessary qualifiers
Fix resource leak in InternalAttribute.setValue()
Add setters and getters back to Http Objects
Moved MapUtil and its test class to org.jboss.netty.bootstrap because it's used only there
[#1853] Optimize gathering writes for CompositeByteBuf that are only backed by one ByteBuffer
Set buildNumber to 'unknown' when built out of git repository
Introduce EventExecutor.shutdownGracefully() that deprecates shutdown()
Fix resource leaks in StompSubframeDecoderTest
Fixed build issues
Enable shutdownOutput for EpollDomainSocketChannel
Comment punctuation cleanup
Use LinkedHashSet
remove AbstractChannel#doPreClose
Provide extra info together with handshake complete event.
[maven-release-plugin] prepare for next development iteration
Change hosts file resolver to be case-insensitive
[maven-release-plugin] prepare release netty-3.1.0.BETA2
Remove io.netty.monitor as discussed in #922
Run full build on Travis CI install
ChannelType -> ChannelBufferType / Optimize DefaultChannelPipeline
Fix a bug where HttpObjectDecoder generates two LastHttpContent consecutively
Add support for RFC7413 on linux for server sockets
Fix typo in test samples
Move VoidEnum to util
ReadTimeoutHandler - missing ) within JavaDoc example (#8645)
Create SimpleUserEventChannelHandler convenience class (#7991)
Ensure we not leave data in the BIO when error happens.
Expose session ticket statistics.
Move exceptionCaught(..) back to ChannelHandler. Related to [#1118]
Fix resource leaks in WebSocketServerProtocol(Handshake)Handler
Make sure only direct ByteBuffer are passed to the underlying jdk Channel.
Include Bundle-NativeCode manifest entry in transport-native-epoll jar.
Revert "[#1442] Make sure closing the channel will not cause an UnsupportedOperationException"
Fix unneccessary use of EventLoop.execute(..) which gives some nice perf boost and also fix [#1064] as we had a race
* Revamped the HTTP tunneling transport
[#1606] Reduce overhead during writes because of ChannelPromise validation
Upgrade netty-tcnative
Fix SpdyHttpHeaders.setScheme setting the wrong header. See #417
[#5239] Allow adding handlers to pipeline with null name.
Moved org.jboss.netty.handler.timeout to org.jboss.netty.channel.timeout because timeout detection will be implemented as a TrafficMonitor
[maven-release-plugin] prepare for next development iteration
[maven-release-plugin] prepare release netty-3.1.0.ALPHA4
Provide a way to cache the internal nioBuffer of the PooledByteBufferâ€¦ (#8603)
Adding support for tcnative fedora flavour in uber jar
[#1007] HttpObjectAggregator should only throw one TooLongFrameException per full HTTP message
SSL connection not closed properly after handshake failure
Cleanup of codec-mqtt
Always consume bytes for closed HTTP/2 streams.
Ensure correct ordering if a ChannelInitializer adds another ChannelInitializer
Use a separate netty-build release
[#1714] Make sure ByteArrayDecoder also works correctly with pooled buffers
Remove channelReadSuspended / Rename messageReceived(Last) to channelRead(Complete)
Documentation and slight internal refactoring of HttpCodecUtil
Also record retain() and release()
Added documentation to websocket classes.
Log only on debug log level in OpenSslEngine
Fixes in QueryStringDecoder
More javadocs
Fix inspector warnings
Fix a bug where HttpContentDecoder emits duplicate HttpMessage or raises NPE
Expose metrics for PooledByteBufAllocator
Correctly add futures to list in test
Fix #1075: DefaultChannelHandlerContext.fireChannelSuspended and fireInboundBufferUpdated do not work correctly if handlers with EventExecutor are added or removed from pipeline.
Fixed wrong name
Non-sticky thread groups in DefaultThreadFactory
Expose new way of setting session keys
Check the bindFuture before writing a DNS query
Fixed ClassCastException in setting min,max sctp streams
Recover from Selector IOException (#8569)
Merge ThrowableUtils into ThrowableUtil.
Make NetUtil.isValidIp4Word() private
Ensure channelReadComplete() is called only when necessary
Add ChannelInboundInvoker and ChannelOutboundInvoker
[maven-release-plugin] prepare release netty-4.0.11.Final
Why don't CI services upgrade to Maven 3.0.5?
Moving KObjectHashMapTest to propert directory
Fix NPE in OpenSslEngine
In (Pooled|Unpooled)UnsafeDirectByteBuf copy memory directly to and from ByteBuffer
Fix a regression in HttpMessageDecoder due to a mistake during yak shaving
Indentation fixes
Merge pull request #105 from mariusaeriksen/master
Reduce memory allocations in StompSubframeDecoder.readHeaders
Make all codecs throw a CodecException
OpenSSL (and so netty-tcnative) should allow to use custom engine. (#8050)
Some javadocs love
Reduce even more garbage by exposing ByteBuf.internalNioBuffer()
Http2ConnectionHandler Builder instead of constructors
Instead of complicated capacity estimation, just use thread local buffers.
Allow to obtain RecvByteBufAllocator.Handle to allow more flexible implementations
[maven-release-plugin] prepare release netty-4.0.15.Final
Make ByteArrayEncoder sharable
Fix buffer leaks during PEM to KeyStore conversion
[maven-release-plugin] prepare for next development iteration
[#980] Automatically trigger a read operation if isAutoRead() == false but we only had a partial decode
Fixing generic <> in documentation to display properly
Adapt to API changes in Conscrypt 1.0.0.RC11
Swap to SslContextBuilder in examples
Run autobahntestsuite as part of the build
Upgrade netty-tcnative to 1.1.33.Fork15
Make PrimitiveCollections generated for all primitive maps.
Generate the default JAR to make oss.sonatype.org happy
Make sure OSGi testsuite runs on 'mvn test'
Trigger channelWritabilityChanged() later to avoid reentrance
Fix misordered 'assertEquals' arguments in tests
[#3883] OpenSSL SSLSession returns incorrect peer principal
[maven-release-plugin] prepare release netty-3.0.0.CR5
[#963] Fix invalid free-up of messages if they are only passed-throught in HttpContentEncoder and HttpContentDecoder
Upgrade to netty-build v6
Fixed build error that version.txt is not generated
Revert "Support 1012, 1013 and 1014 WebSocket status code"
Updated the overview section of the Javadoc
Upgrading HTTP/2 hpack to latest version
[#5486] Not operate on serial execution assumption when using EventExecutor in the DefaultChannelPipeline.
Ensure all methods are correctly override in *LeakAware*ByteBuf implementations
Allow to configure socket option SO_BUSY_POLL (#8268)
Ensure UnreleasableByteBuf does not expose the wrapped buffer to the caller
Rename method to better reflect usage
Adding UniformStreamByteDistributor
Introduce FastThreadLocal which uses an EnumMap and a predefined fixed set of possible thread locals
Upgrade os-maven-plugin to fix the build issue
[maven-release-plugin] prepare for next development iteration
Fixing minor typo in FastThreadLocal javadoc.
[#2339] Reduce memory usage in ProtobufVarint32LengthFieldPrepender
Correctly parse /etc/resolv.conf when contain multiple entries for searchdomain. (#8351)
More convenient inbound stream handler / Smarter inbound buffer cleanup
[#4331] Helper methods to get charset from Content-Type header of HttpMessage
Preparation for porting OpenSSL support in 3.10
Move AutobahnTestsuite to extra module
Make build independent from JBoss.org M2 repository
[#1373] Make SslHandshakeCompletionEvent constructor public
Mention correct order in SimplechannelPool javadocs
[maven-release-plugin] prepare for next development iteration
Motivation:
Add a unit test that reproduces the dead lock described in #1175
Ported Read/WriteTimeoutHandler with simplification
Remove pointless bitwise expressions
Fix get charset from content-type header with multiple parameters (#8286)
Do not trigger inboundBufferUpdated unnecessarily / Fix a bug in WebSocketServerProtocolHandlerTest / Fix a bug in forbiddenHttpRequestResponder()
Use Parameterized to run SslHandler tests with different SslProviders.
[#755] SPDY: fix header block values truncation in decompression
[#1553] Improve performance of encodeInitialLine
Better parsing for STOMP body with no length.
Allow to retrieve the number of active bytes per PoolArena.
Minimize object allocation when calling AbstractByteBuf.toString(..., Charset)
Add dependency management for missing entries
[#1183] Fix BlockingOperationException in ChannelGroup.close().awaitUninterruptibly()
Improve the unit test for #1742
Expose SSL_CTX and SSL pointers
Renamed HttpWebserverClient to HttpClient
Only use KeyManagerFactory in SniClientTest when supported by OpenSSL version. (#8289)
Use ThreadLocalRandom where possible
DuplexChannel to support shutdownInput
Factor out the PendingWrite class and put it in internal package. Make use of it in SslHandler and ChunkedWriteHandler to reduce GC-pressure
Fix DefaultHttpDataFactory cleanup bug
support publishing snapshots from docker based ci (#8634)
renamed to HttpTunnel.....
Add Recycler.Handle.recycle() so that it's possible to recycle an object without an explicit reference to Recycler
[maven-release-plugin] prepare for next development iteration
CompositeByteBuf.isDirect() should return true if its only backed by direct buffers
Try to monkey-patch library id when shading is used and we are on Macâ€¦ (#8210)
Fixed documentation errors
Share code between Unsafe ByteBuf implementations
DelegatingSslContext should also be able to configure the SslHandler
Remove the deprecated methods in SPDY
Ensure NIO transport can be used on Java6 again. (#8168)
Throw correct NotYetConnectedException when ENOTCONN errno is set
[#5029] Fix type of EpollChannelOption.TCP_QUICKACK
Allow to extend the provided tests by the testsuite
Do not log CNFE when tcnative is not in classpath
Add an operation that resets the state of HttpObjectDecoder
LzmaFrameEncoderTest leak due to LzmaInputStream close behavior
Tiny optimization
Correctly include the stream id when convert from Http2HeadersFrame to HttpMessage
Do not deploy the testsuite
Elliminated some buggy behavior when using a KeyManagerFactory with OpenSslServerContext.
Inherited jboss-parent / Used maven-resources-plugin instead of maven-antrun-plugin
Correct usages of internalNioBuffer
Back port HTTP/2 codec from master to 4.1
[#729] Correctly handle urls with empty abs_path in it when issue the websocket handshake
Add XML decoder
Make PooledByteBuf recyclable regardless its maxCapacity
[maven-release-plugin] prepare for next development iteration
Better implementation of AttributeMap and also add hasAttr(...). SeeÂ [#2439]
The SNI extension value is ASCII encoded but Netty uses UTF-8.
ALPN/NPN Examples Not using failure behavior compatible with all SslProviders
Http2DefaultFrameWriter microbenchmark
[#3687] Correctly store WebSocketServerHandshaker in Channel attributes
Use UnpooledByteBufAllocator as default
Correctly mark EpollServerDomainSocketChannel.isActive() as true after bind is complete.]
Add HttpChunkedInput for easier streaming of chunked content
SSLEngineTest issue introduced by d8e6fbb9c3656663f41797a15f38bb25fdcab834
SPDY: fix pushed response NullPointerException
Merge branch 'master' into remove_duplication
[maven-release-plugin] prepare for next development iteration
Revert "Let ProtobufEncoder extend MessageToByteEncoder which makes more sense. Related to [#1222]"
Make LoggingHandler.appendHexDump(..) protected for the subclasses
Don't trim stacktrace for exceptions when running mvn test (#7981)
Updated license information
More stuff in the user guide
Javadoc fixes
[maven-release-plugin] prepare release netty-4.1.0.Beta6
Correct OSGi manifests in source jars
Replace .readable() and .writable() to .isReadable() and .isWritable()
[maven-release-plugin] prepare for next development iteration
Update to conscrypt 1.0.0.CR13
Fix javadoc plugin errors
Adding support for echoing the request origin for CORS.
Remove freeInbound/OutboundMessage(), replaced by ReferenceCounted.retain/release()
Explicitly specified minimum LGPL version in COPYRIGHT.txt
Run tests in random order
Make use of AUTO_READ to not accept traffic before connection is complete
Removed the reference to ChannelPipelineCoverage in the getting started guide.  Beginners should simply start from creating a new instance for every new connection, as shown in the guide and all examples which were revised to avoid confusion.
DefaultHttp2HeadersTest updates
Fix compile error introduced by 32231ee
Fix NPE
Only try to deregister from EventLoop when the native Channel was registered before.
* Updated NOTICE.txt (file -> product)
Change DefaultChannelId visibility to default. Related to [#5053]
HTTP/2 Max Header List Size Bug
Fix a build failure due to missing classifier
[maven-release-plugin] prepare for next development iteration
Allow overriding the default allocator properties and log them / Prettier log
Fail build on warnings in the native transport
fix for issue #149
Fix incorrect code in javadocs of ChannelHandler. (#8115)
Support 1012, 1013 and 1014 WebSocket close status code (#8664)
Allow to recv and send file descriptors when using EpollDomainSocketChannel.
Overall cleanup / Add lost old jzlib headers
Fix checkstyle
SPDY: use java.util.zip for header block decompressor
Make hasUnsafe() return true only when all necessary low level operations are available for reliable direct buffer access
Avoid implicit allocations in Http2FrameLogger when logging is disabled (#7937)
[#4204] Broken support of SCTP_INIT_MAXSTREAMS in *SctpServerChannel
Add support for RFC2385 on Linux
Support SSLSession.getLocalCertificates() and getLocalPrincipal() when using OpenSSL
[#1038] Remove ChannelHandlerContext.replace*Buffer() methods
Fix memory leak
[#4313] ByteBufUtil.writeUtf8 should use fast-path for WrappedByteBuf
[#1089] Correctly offer FullHttpContent if it is used to construct HttpPostRequestDecoder
Make sure ...Decompressor.end() is called even on Exception. See #224 
Merge pull request #241 from veebs/KeepAlive
Share code between retain(...) and release(...) implementations.
Fix IllegalReferenceCountException in DnsNameResolver
Replace Bootstrap with ChannelBuilder and ServerChannelBuilder
Use IntObjectMap to replace Map in EpollEventLoop.
[#795] Fix WebSocketClientHandshaker13 and WebSocketClientHandshaker08 finishHandshake() method.
Remove MultithreadEventExecutorGroup.DEFAULT_POOL_SIZE
[maven-release-plugin] prepare for next development iteration
Use the ByteBufAllocator when possible
[#957] Netty/Transport/RXTX: Add an optional wait time after opening the serial port but before configuration to allow the serial microcontroller to reset itself after opening.
Will release GA
Fix SnappyFramedEncoder/Decoder / Fix Snappy preamble encoding / Add test for #1002
1)refactored sctp server channel config classes 2)added sctp server channel buffer size setter/getters 3)updated sctp examples
Added SCM revision to MANIFEST.MF, user guide, Javadoc, and Xref
[#1958] Use CRC32-C in Snappy as per the spec
Moving to SLF4J
Revert "Disallow setting logger factory twice"
Skip testsuite-osgi-exam tests during release
Mark OIO based transports as deprecated as preparation for removal in Netty 5. (#8579)
Forward-port JDK ZlibEncoder patch (#404)
EPOLL RDHUP and IN at same time
HpackDecoderTest cleanup
Exhaust non-exhaustive switch cases
[#5862] Http2EventAdapter#onUnknownFrame(...) should throw Http2Exception
Selective Message Aggregation (#8793)
Throw if SSLParameters contains settings that are not supported by ReferenceCountedOpenSslEngine
Fix SnappyFramedDecoderTest
[#1352] WebSocketFrameAggregator should only throw TooLongFrameException once per complete frame
SPDY: release headerBlock in SpdyFrameCodec
EDNS Client Subnet is not encoded correctly when source prefix length is not a multiple of 8.
Complete ChannelPromise for Http2WindowUpdateFrames in Http2FrameCodec. Fixes #5530
Pluggable resource leak detector
Add explaination to the javadocs to not call retain() on the request when doing the handshake. Related to [#1508]
AbstractFuture should not wrap CancellationException
[maven-release-plugin] prepare for next development iteration
[maven-release-plugin] prepare release netty-3.2.0.ALPHA1
Update AlpnAgent version
Fix regression in DefaultAttributeMap / Add Attribute.key() / More fine-grained locking
[1575] Correctly parse Content-Type value
Add .gitignore for docker-sync stuff
Make sure the local / remote InetSocketAddres can be obtained. Part of [#2262]
Fix a compilation error
[#1785] Fix incorrect javadocs
Let ChannelPipeline implement Iterable
* Implemented send buffer pooling
Ensure no java.lang.UnsupportedClassVersionError are thrown if running on Java7 and try to check if conscrypt is available.
Do not unwrap a CompositeByteBuf when it is added as a component of another CompositeByteBuf
Add SSLEngineTest to ensure Signature Algorithms are present during KeyManager calls. (#8965)
Ensure PooledByteBuf.init() is not called with null memory
Update JMH to 0.3.2
Add unescapeCsvFields to parse a CSV line and implement CombinedHttpHeaders.getAll
Wrap operations requiring SocketPermission with doPrivileged blocks
Reduce the memory footprint of DefaultChannelPromise even more (part 2)
Auto-generating primitive collections for int and char keys.
* Replaced e-mail addresses into homepage/blog URL anywhere possible
Fix ByteBuf.nioBuffer(...) and nioBuffers(...) docs to reflect reality.
1)replaced all netty link transfer queue by java 7 link transfer queue to avoid high cpu usage 2)optimized selector loop
Automatic diagnosis of resource leaks
Do not write LastHttpContent twice in HttpStaticFileServer example
Log the cause of exceptionCaught event when failed to notify
Move generic code to HttpOrSpdyChooser to simplify implementations
Fix potential buffer leak in AbstractBinaryMemcacheDecoder
Make sure Future get notified before event is fired. See #254
Remove unnecessary empty lines
Let FileRegion extend ReferenceCounted and add ChannelGroup.flush() , ChannelGroup.sendFile(..)
IovArray#add return value resulted in more ByteBufs being added during iteration
Clarify ByteBuf.duplicate() semantics.
Returns after encoding each message not do check following instance types
Fix infinite recursion
Ported all tests in netty-codec to the new embedder
Fix a bug where HttpObjectAggregator fails to send a '100 Continue' response
Cookie name must be case sensitive
Ensure we release the previous retained AddressedEnvelope when we fail to notify the promise.
Adding explicit comment about case statement
Second HTTP overhaul
HTTP/2 Non Active Stream RFC Corrections
Fixed a build problem where the resulting artifact does not contain the legal stuff.
Implemented ExtendedOpenSslSession.getStatusResponses() so it not throws an UnsupportedOperationException. (#8290)
[maven-release-plugin] prepare for next development iteration
LoggingHandler does not override channelReadComplete or channelWritabilityChanged
Forward-port the JBoss Marshalling codec
Skip invalid hostnames when construct default dns servers to use.
Fix possible overflow when calculate in the size of the out buffer in Base64
Make UnpooledHeapByteBuf array methods protected (#8015)
A temporary workaround for MPJDOCBOOK-36 (https://jira.jboss.org/jira/browse/MPJDOCBOOK-36)
Add more constructors to NotSslRecordException
Enable netty-tcnative shading test again (#8492)
Correctly convert empty HttpContent to ByteBuf
[#1830] Add testcase for write to not bound DatagramChannel impls and revert change in OIO as it breaks things as the udnerlying socket lazy binds
Fix compile error
Allow to disable native transport and native ssl support via system property. (#7903)
Use ChannelInboundStreamHandlerAdapter in EchoClientHandler
Update to maven-surefire-plugin 2.22.1 (#8418)
Choose ipv4 or ipv6 google dns servers as default fallback based on the settings for this system / jvm
Merge remote-tracking branch 'upstream/master'
HTTP/2 write of released buffer should not write and should fail the promise
Update to new netty-build version to be able to correctly detect copyright header in property files. (#8967)
Merge branch 'master' of github.com:netty/netty
[#1933] Correctly add the wsencoder before the httpencoder as the httpencoder also handle ByteBuf
Small performance improvements
Update to latest stable jython release (#8667)
[maven-release-plugin] prepare release netty-4.1.6.Final
Split Http2MultiplexCodec into Frame- and MultiplexCodec + Tests. Fixes #4914
Prefer the NIC with global IP address when getting the default machine ID
Correctly handle wildcard address when bind to socket and using native transport
Remove unnecessary 'return's / Clean up QueryStringDecoder
Move SPDY echo tests to testsuite to use AbstractSocketTest
Reduce object allocation by using same ChannelFutureListener instance.
[maven-release-plugin] rollback the release of netty-4.0.9.Final
Move up write spinning from SelectorEventLoop to AbstractChannel
Add comments for ApplicationProtocolConfig
Make sure the Unpooled.EMTPY_BUFFER can not be freed and the capacity can not be changed
Remove redundant dependency version
Add port to Origin if the port is non default (80/443). (#262)
Another round of the new API design
Renamed DefaultReceiveBufferSizePredictor to AdaptiveReceiveBufferSizePredictor
Always follow cnames even if a matching A or AAAA record was found. (#7919)
ByteBuf for Key instead of String for codec-memcache
Port http multipart package. See #709
Correctly return from selector loop one a scheduled task is ready for processing
Fix typo in MessageToMessageDecoder api docs. (#8638)
HTTP/2 remove unnecessary buffer operations
[#1819] Remove HTTP compressor and decompressor from the pipeline after websockets handshake completes
Fix parameter namings + some more
Make SnappyFramedDecoder more robust against corrupt frame
Eliminate unnessary wrapping when call ByteBuf.asReadOnly() in some cases
[#2580] [#2587] Fix buffer corruption regression when ByteBuf.order(LITTLE_ENDIAN) is used
Use the latest Git SCM provider
Merge branch 'sctp_refactoring'
[maven-release-plugin] prepare release netty-4.1.33.Final
A little bit of comments on how version.txt is generated
added support for Protobuf codec nano runtime
Changed "Gets the" to "Returns the" - Requested by @trustin
Use maven-antrun-plugin instead of exec-maven-plugin
Add an Epoll benchmark
Fix reference count issue when using Http2FrameCodec / Http2MultiplexCodec with HttpServerUpgradeHandler
Support preloading of tcnative share lib
[#887] [#866] [#883] Add unified interface for Message oriented protocols and also use direct buffers for them
Revert "Improve the allocation algorithm in PoolChunk"
Fixed a broken link
[codec-memcache] Simplify object hierachy and remove Headers.
Rename DefaultAioChannelFinder to ReflectiveAioChannelFinder
Attach Javadoc
Wrong outputDirectory
Fixed broken optional OSGi Import-Package header (#3424).
[maven-release-plugin] prepare release netty-4.0.0.CR4
Fix buffer leak in AbstractMemoryHttpData
Fix #157: ZlibDecoder does not support preset dictionary
Merge branch 'master' of github.com:netty/netty
[SPDY] Factor out headers into extra class like we did in http and support method chaining where possible
Correctly manage buffer life-cycle in http2 multiplex example
Update to netty-tcnative 2.0.0.Beta4
Allow to get version of available OpenSSL library
Motivation:
ipfilter implementation for netty 4/5 [#2129]
Make sure Channel connected event is not fired on connect failure. See #249
Correctly handle read-only ByteBuf in ByteToMessageDecoder
* Added cross reference to the distribution
Tweak snoop example to send a full HTTP request.
Reorganize imports
remove Travis build file (.travis.yml) (#8128)
Will release 3.1.2.GA as a critical issue has been found
Let ChannelGroupFuture.addListener(..) return itself to make consistent with ChannelFuture
We should be able to use the ByteBuffer cleaner on java8 (and earlierâ€¦ (#8234)
[#4725] Ensure correct cause of handshake error is included in the SSLHandshakeException when using OpenSslEngine.
Overall refactoring of the haproxy codec
Init DnsNameResolverBuilder#nameServerAddresses
Polished all examples
HttpTunnelClientSocket -> HttpTunnelingClientSocket
Add some javadocs
Fix compilation errors
Enable TCP_NODELAY and SCTP_NODELAY by default
Use TrustManager for certificate verification
Fix tarball packaging
[#1833] Add testcase for fix
Ensure that the last bad chunk is LastHttpChunk
Documentation fix
Allow SingleOutboundMessageHandler.beginFlush() to reject the flush request by returning false / Replace PartialFlushException with IncompleteFlushException which is more correct.
[#2305] Fix issue related to decoding post request raized an exception due to a split of information by chunk not correctly taken into account by the decoder
Ensure valid message sequence if channel is closed before receive headers.
cleanup
SPDY: add SPDY/3.1 support
Fix buffer leaks in tests
[#1539] Fix bug in DefaultChannelGroup.close() which was blocking the close() call on ServerChannel
fix grouping for isActive - socket.isBound is almost always true and should not override 'isOpen'
[#1481] Add a JdkZlibDecoder which has no dependencies
Fix checkstyle
Support delegating task when using ReferenceCountedOpenSslEngine. (#8859)
Fix test failure in testsuite-osgi-deps
Remove the concept of pending streams. The close future can only be accessed once a stream is active.
Fix JDK9 direct ByteBuffer cleaner invocation and initialize Cleaner0 when PlatformDependent0 is initialized.
Fix broken testsuite-shading when using with netty-tcnative-boringssl-static (#8404)
Also dissallow null elements on set
Make SocksServer example compatible with `curl --socks5-hostname`
Allow to receive a ChannelGroupFuture that will be notified once all Channels are closed.
Add some of the metrics mentioned in #718
Add LengthFieldPrepender.lengthAdjustment parameter
[#5401] Support -Djdk.tls.ephemeralDHKeySize=num when using OpenSslContext
[#5224] Allow to use Unsafe.reallocateMemory(...) in UnpooledUnsafeNoCleanerDirectByteBuf.
Consolidate flushes even when no read in progress
Added option to do busy-wait on epoll (#8267)
Upgraded to APIviz 1.2.3.GA
[maven-release-plugin] prepare release netty-4.1.30.Final
Make retained derived buffers recyclable
[#1792] PlatformDependent.freeDirectBuffer(..) now respect hasUnsafe()
Disable test as it sometimes fails on the CI
Improve javadocs
[#1058] Fix incorrect logic to detect if ChannelHandlerContext is writable
[maven-release-plugin] prepare release netty-4.1.12.Final
Expose ByteBufAllocator metric in a more general way
Speed up the slow path of FastThreadLocal
Make sure ChannelHandler.handlerRemoved() is invoked while handler methods are not running
Rename (Server)Bootstrap.(child)initializer to (child)handler
Fix missing copyright headers
Move ChannelBufferType to netty-buffers and rename it to ChannelBufType
Change type of X_FRAME_OPTIONS and CONTENT_SECURITY_POLICY to AsciiString as a followup to cc1a2091857b6201337815330c942f52fd60f65c
[#735] Improve the notification of the handshake future
Add includeScope to not include test dependencies for maven-dependency-plugin
Change the WebSocket API to use HttpHeaders instead of Map<String, String> for custom headers / Cleanup
Testing e-mail notification (2)
[#1262] Respect adjustment when using SlicedByteBuf.nioBuffers()
Add LoggingHandler to ServerSocketChannel's pipeline
[#1690] Correctly return first header value on DefaultHttpHeaders.get(..)
[maven-release-plugin] prepare for next development iteration
Remove a method of no use
Mark conscrypt as optional
Correctly handle SocksCmdResponse. Related to #2428
removed unnecessary static holders
Add ChannelHandlerContext.isRemoved() to easily detect the removal of a ChannelHandler while in a method.
[maven-release-plugin] prepare release netty-3.2.0.ALPHA2
* Extracted common entities into custom.dtd
Fix buffer leak in DefaultFullBinaryMemcacheRequest/Response
NioEventLoop should also use our special SelectionKeySet on Java9 and later. (#8260)
Use our own URL shortener wherever possible
Fix handle of ByteBuf with multi nioBuffer in EpollDatagramChannel and KQueueDatagramChannel
Correctly handle non handshake commands when using SniHandler
Implemented LZF compression codec
Fix regression introduced by 08e4b076be6402a4f98a2e082b1a292756c570ff.
Revert "Ensure we only call debugData.release() if we called  debugData.retain()"
Fix unclean backport in InternalLoggerFactory
Reduce performance overhead of ResourceLeakDetector
Fixed default OpenSsl cipher suites
Disallow setting logger factory twice
Use InetSocketAddress wherever possible / Tighten the return type of Channel.parent()
Add a replace(..) method to FrameDecoder and also to ReplayDecoder as it now extend FrameDecoder. This also fix #332
New native transport for kqueue
Update JCTools version
Suppress unchecked cast warnings for config options.
Update tests to not use TestUtils.getFreePort() and so ensure we not try to use a port that is used by the system in the meantime.
Replace the sun.nio.ch.SelectorImpl.selectedKeys with faster one
Merged ChannelFactoryModule and ExecutorModule into NettyModule - advanced users can still assemble providers by themselves
Fix DefaultChannelId MAC address parsing bug
Fix type inference w/ JDK8
Allow to create Unsafe ByteBuf implementations that not use a Cleaner to clean the native memory.
Add docker-sync files to .gitignore
Remove transitive dependency on slf4j in example (#8582)
Merge pull request #339 from fredericBregier/master
#2183 Fix for releasing of the internal cumulation buffer in ByteToMessageDecoder
Fixed OSGi descriptor
Fix checkstyle
Make Epoll ChannelMetadata more consistent with NIO
Bug fix for HttpPostMultipartRequestDecoder part decoding with an invalid charset not reported as an ErrorDataDecoderException
Documentation cleanup
Improve documentation for the two-args formatter in LoggingHandler
Merge buffers for performance reasons if possible when encode http requests/responses.
[#1558] Use correct scheme to detect port. Thanks @golovnin for spotting it.
Fix typo in the assert description in MqttCodecTest
Fire channelRead() event immediately in OIO message channels
copy license info to target/classes
Moved constant classes out of util
Exclude com.sun.nio.* from the generated jar
Fix more checkstyle errors
Respect -Djava.net.preferIPv4Stack when using epoll transport
ReferenceCountedOpenSslEngines SSLSession must provide local certificâ€¦ (#8918)
Add AIO transport to the test suite
More javadocs cleanup
Check if Log level is enabled before creating log statements (#8022)
[#3806] Setting WRITE_BUFFER_LOW_WATER_MARK before WRITE_BUFFER_HIGH_WATER_MARK results in an internal Exception
Fix failing h2spec tests 8.1.2.1 related to pseudo-headers validation
Fix bug in DefaultChannelHandlerContext where ByteBridge does not handle bounded buffers well
[maven-release-plugin] prepare for next development iteration
Deduplicate and simplify code in HttpPostMultipartRequestDecoder
Flush LZ4FrameEncoder buffer when channel flush() is received.
Make headers.set(self) a no-op instead of throwing. Makes it consistent with setAll
Remove memory copies when doing CRC32 processing in JdkZlibDecoder
Adding codeAsText to HttpResponseStatus.
Remove unnecessary loop and indentation in decompressors
Merge branch 'master' of ssh://github.com/netty/netty
Merge pull request #294 from fredericBregier/master
Update Netty to latest netty-tcnative
Do not fail on runtime when an older version of Log4J2 is on the classpath. (#8240)
Not call java methods from within JNI init code to prevent class loading deadlocks.
Do NOT use InternalLogger in examples
[maven-release-plugin] prepare for next development iteration
Added optional pending timeouts counter parameter to HashedWheelTimer constructor and ensured that pending timeouts don't exceed provided max pending timeouts.
AsciiString#indexOf out of bounds (#7866)
JdkSslContext supported cipher suites incorrect
DefaultHttpDataFactory.MINSIZE must be final
[maven-release-plugin] prepare release netty-4.0.6.Final
[#976] Fix exception which will be raised by ChannelInboundHandler.discardInboundReadBytes() and ChannelOutboundHandler.discardOutboundReadBytes() if the handler remove it self from the pipeline
Fix bugs in ZLIB codec where they produce malformed stream or their streams are not flushed on time
Add unit test for HttpObjectDecoder with message split on buffer boundaries
Cleanup ChannelOption.AUTO_CLOSE javadocs
Reduce conditionals in AbstractReferenceCountedByteBuf
Remove some cipher protocol combos for tests due removal in more recent versions of OpenSSL (#8033)
[maven-release-plugin] prepare release netty-4.1.29.Final
Do not treat errors as decoder exception (redux)
Resurrect Channel.id() with global uniqueness
Provide an API for controlling and h2c upgrade response stream in Http2MultiplexCodec (#7968)
Extract common parts from `if` statements (#7831)
Make use of HttpChunkedInput as this will also work when compression is used
Remove unexpected bad text
Only call JNI methods if really needed
Allow to offload / customize key signing operations when using BoringSSL. (#8943)
Revert "Consistent naming style for enum"
Not throw an exception if subprotocol is not supported but just drop the header as stated in the RFC's
Simplify bundle generation / Add io.netty.versions.properties to all JARs
Just a couple of minor javadoc fixes
Make SingleThreadEventExecutor independent from TaskScheduler
Move utility methods in Unpooled to ByteBufUtil
Introduce an alternative IdentityCipherSuiteFilter that defaults to supportedCiphers, close #7655
Skip NPN tests when libressl 2.6.1+ is used.
Forgot to commit this class before. Related to [#1433]
[#1545] Fix ClassCastException by using the correct type for SCTP_INIT_MAXSTREAMS
Revert "http2: Http2StreamChannel now shares options of its parent channel"
Create StringBuilder with saner initial capacity when encoding a Cookie
Merge branch 'master' of github.com:jestan/netty
Clean up and Add missing JavaDoc
We need to keep the old constructor to not break the API.	
Fix #153: Add ChannelFuture.rethrowIfFailed()
Restore of interrupt status after catch of InterruptedException was added
Fixing OsgiBundleTest
Only generate OSGi manifest only at all-in-on sub module to reduce the complexity to the build
Fix NoSuchElementException raised by ChannelInitializer
[maven-release-plugin] prepare release netty-3.1.0.ALPHA3
Extract the builder of CorsConfig to top level
Set readPending to false when ever a read is done
NETTY-386 Support for serial connections using RXTX
Correctly buffer multiple outbound streams if needed. (#8694)
Upgrade client connection after completed response
Reorganize the SPDY example
Added webbit in NOTICE
Rname StreamOioByteChannel to OioByteStreamChannel
fullbuild -> full
Implement cancellation properly for Promise/Future
Use ByteBufAllocator to allocate ByteBuf for FullHttpMessage Motivation: When converting SPDY or HTTP/2 frames to HTTP/1.x, netty always used an unpooled heap ByteBuf.
Remove 'get' prefix from all HTTP/SPDY messages
Mark ChannelHandler.exceptionCaught(...) as deprected.
[#441] Provide a better way to handle decoder failures
[maven-release-plugin] prepare release netty-4.1.21.Final
Add Javadoc to tarball / Upgrade maven-compiler-plugin
Ensure CompositeByteBuf.addComponent* handles buffer in consistent way and not causes leaks
[#473] Fix elevated context switching in SingleThreadEventExecutor
Remove synchronized in SPDY code
Revert file mode
Fix setBytes when source is read-only ByteBuffer and target is pooled buffer
Http2StreamFrameToHttpObjectCodec should handle 100-Continue properly
[maven-release-plugin] prepare release netty-4.0.0.Alpha4
Use the correct osname in the Bundle-NativeCode declaration.
Upgrade to netty-tcnative 2.0.5.Final
Handle the interface name in IPv6 address correctly
Fix test failures and reported leaks
And again javadocs cleanup
[#1025] Allow to add extra headers to the websocket handshake response
Do not prefer empty MAC address
Make MessageBuf bounded
Revert "[#1131] Codecs must not cache next buffer during processing"
[#4289] Use a mock DNS Server for dns tests.
Add documentation and changes to ComposityByteBuf.getBufferFor(index)
Allow modify the config even before the channel is registered to the eventLoop
Allow to run tests with extra commandline arguments
Use common non-magic number for shutdown timeout
Revert "Allow to detect failed query caused by an Timeout / IO error and also not cache these."
Clean maven-bundle-plugin warnings
Use Secure websockets if SslHandler is present in the ChannelPipeline. See #587
Use NIO methods when using Java7+ in the NIO transport
Fix Javadoc issues. Replace Upstream with Inbound and Downstream with Outbound.
Avoid vectored writes for small websocket messages
Increase default bits for SelfSignedCertificate (#9019)
Documentation redone for Cookie
Fix inspector warnings
Skip SSLEngineTests that depend on KeyManagerFactory when this is not supported by the openssl version.
Unify default cipher suites betweek JDK and OpenSSL
Faster memory copy between direct buffer and byte array (part 2)
Enable/Disable sctp tests based on the detected OS
[#275 & #686] Ability to pass a custom parameter to Bootstrap.connect() / Replace Bootstrap.newBootstrap() with duplicate()
Add Snappy compression codec
Correctly implement DefaultByteBufHolder.equals(...) and hashCode()
Cache flush(..) tasks which are used when executing with different EventExecutor to lower GC pressure
Cleanup
EPOLL ET Missed Reads
Clean up the execution mechanism of examples
Update to netty-tcnative 2.0.1.Final
Workaround to have multicast tests work on osx, linux and windows
Little bit of optimization
Upgrading to Conscrypt 1.0.0.RC9. (#7044)
Optimizations for Http2FrameLogger
[maven-release-plugin] prepare release netty-4.1.0.Final
Remove 'get' prefix
Remove the methods related with half-close
Deprecate SocksMessage.encodeAsByteBuf()
Workaround IBM's J9 JVM getSupportedCipherSuites() returning SSL_ prefix cipher names
Remove the irrelevant AIO channel options
Remove unnecessary test resource
Rename future to promise in the ChannelDuplexHandler method arguments.
DefaultHeaders value iterator
Avoid allocations when wrapping byte[] and ByteBuffer arrays as ByteBuf (#8420)
Fix NPE exception when using invalid cipher during building SslContext. (#8171)
Replace ChannelHandlerUtil.unfoldAndAdd() with MessageBuf.unfoldAndAdd() / Remove unused methods in ChannelHandlerUtil
Updates the javadoc of Unpooled to remove mention to methods it does not provide
bad commit
[#1821] Fix IndexOutOfBoundsException which was thrown if the last component was removed but other components was left
Correctly monkey-patch id also in whe os / arch is used within library name. (#8913)
ByteBufs which are not resizable should not throw in ensureWritable(int,boolean)
Add h2spec test suite module to check if netty http2 implementation conforms with the specification
Initial port of SCTP basic classes and interfaces to Netty 4.0
More robust pipeline manipulation while upgrading to WebSocket
Correctly report *LE operations when advanced leak detection is used.
|| -> &&
[#3798] Extract dump method to ByteBufUtil
Fix buffer leaks in XmlFrameDecoderTest
Deprecate PromiseAggregator
Upgraded to APIviz 1.3.1
Another rephrasing
[#1516] Fix resource leakage which was caused by the AbstractDiskHttpData which did not release the buffer after copy to disk
Add ReferenceCounted.touch() / Add missing retain() overrides
Rename fromByte() to valueOf()
changed the visibility of ctx, event in channel event runnable, so execution handler implementers can have a down stream execution handler for SEDA
Retain AbstractBinaryMemcacheDecoder.currentMessage when sending it out and release it when it's not used.
Provide a test for #6548 using the OSGi test suite
Fix #204 - Increate the granularity of connect timeout in NIO
[#3375] Correctly calculate the endOffset when wrap multiple ByteBuffer
Maintain decoder result in HttpObjectAggregator
Allow to obtain informations of used direct and heap memory for ByteBufAllocator implementations
Fix HttpSnoopClient. See #183
[#5566] Ensure using a ChannelInitializer via ServerBootstrap.handler(...) produce correct ordering.
HttpToHttp2ConnectionHandlerTest increase setup timeout
[#5773] AbstractByteBuf.forEachByteDesc(ByteProcessor) starts from wrong index
Correctly init X509Certificate array when testing if we need to wrap the KeyManager due of TLSv1.3 (#8435)
Expose CharSequence version of HttpUtil#getMimeType and HttpUtil#getCharset
Fix resource leak in test introduced by 69070c37baf55e181f9270270f7cbf25958ba9b3
[maven-release-plugin] prepare release netty-4.1.0.CR4
[maven-release-plugin] prepare for next development iteration
DefaultHttp2FrameReader stops reading if stream error
Remove unnecessary parameter in AttributeKey and ChannelOption
Fit every line into 120 columns
Moved org.jboss.netty.group to Bootstrapping utilities group
[#691] Correctly handle SpdyRstStreamFrame
Add more failing tests for Snappy codec
Add javadocs to make contract more clear
[#737] WebSocketClientHandshaker00 should set Content-Length header do workaround problem with proxy
Http2FrameCodec WindowUpdate bug
Remove unnecessary parameters
Copy the resolver configuration when cloning Bootstrap
Allow to run builds with OpenJDK 13. (#8724)
Fix a checkstyle violation
Add MultithreadEventLoop
Mark transport udt as deprecated as barchart-udt is not maintained anymore
Allow to enable client authentication on the OpenSslEngine
* Replaced TimeoutListener with TimerTask
SctpMessageCompletionHandler may leak ByteBuf for fragmented messages. (#7832)
Update to new netty-tcnative release
Fix errors reported by javadoc
Don't double release ByteBuf when parsing of the X509Certificate fails (#8457)
Adding method to assert XML decoder framing works
HTTP/2 Header Name Validation
Add missing parameter when delegate to SSLEngine.
Check if logging level is enabled before log. See #192
Fix a leak in HttpResponseDecoderTest
[#5648] Detect if netty-tcnative is in classpath or just tcnative
Added SCTP OIO Transport
Directly use memory addresses for gathering writes to reduce gc pressure. Part of [#2239]
Refactor Bzip2 tests
Upgraded to APIviz 1.2.1.GA
[#4993] Correctly handle trailing dot in DNS requests and responses for the hostname.
Build fails with java 1.8_u60
Fix a resource leak in StompSubframeAggregatorTest
Respect DNS port that is specified via JNDI
Immediate caching the strings wrapped to AsciiString
SCTP echo client/server multi-homing examples
Work around the JVM crash that occurs when cipher suite uses GCM
fix a typo in RecyclableArrayList
list all release modules explicitly
Revert "Fixed ClassCastException in setting min,max sctp streams"
Set (and override) websocket handshake headers after custom headers (#7975)
Updated the license information in the POM.xml
Correctly update Channel.isWritable() when the write happens from outside the EventLoop in a fast fashion. Fixes [#1697]
Move EmptyHttpHeaders.INSTANCE initialization to inner class.
Better description
Fix leak and corruption bugs in CompositeByteBuf (#8438)
HashedWheelTimer.newTimeout(...) may overflow
Disable caching of PooledByteBuf for different threads.
Updated all examples to use ChannelPipelineFactory instead of the default pipeline
Update os-maven-plugin to 1.6.0 (#7884)
Fix wording in "Interceptor Chain Pattern" section.
HttpResponseStatus object allocation reduction
Ensure test introduced in 5c1c14286d29d57acddf32b227722f7b2e113ed4 also works on Java9
Not attempt to read from fd when channel is closed during read loop. Related to [#5031]
[#3848] Respect EPOLLERR event
Make cookie encoding conform better to RFC 6265 in STRICT mode.
Add a shortcut method for collision-free naming
[maven-release-plugin] prepare for next development iteration
[#929] Implemented multi-homing opertions in SctpServerChannels and SCTP Javadocs cleanup
ReplayingDecoder: keep explicit track of cleanup state.
Http2MultiplexCodec.DefaultHttpStreamChannel.isOpen() / isActive() shoule be false when fireChannelActive() is called
[#5062] Mark MqttEncoder @Sharable
Fix checkstyle errors
Exclude mainframer related files from git
Add UDP_RECEIVE_PACKET_SIZE option for datagram transport
Make all encoder/decoder methods overridable in MessageToMessageCodec
Separate the user guide out of the project.
Fix IndexOutOfBoundsException in HelloWorldHttp2Handler
@Deprecated ChannelOutboundHandler.deregister(...)
Fix a bug where LineBasedFrameDecoder does not handle too long lines correctly
Add xml-maven-plugin to check indentation and fix violations
Rewrite bridge implementation in DefaultChannelHandlerContext
[maven-release-plugin] prepare for next development iteration
Including the setup code in the benchmark method to avoid JMH Invocation level hiccups.
Add WebSocketFrameAggregator which takes care to aggregate fragmented websocket frames
Implement SSLSession.invalidate() and isValid() for OpenSSLEngine.
Prettify APIviz diagrams / Remove an empty package
Merged the HTTP branch into the trunk
Remove unnecessary loop variable from `AsciiString`. (#8711)
Allowing inbound HTTP/2 frames after sending GOAWAY
AbstractByteBuf.setCharSequence(...) must not expand buffer
Remove @Deprecated for primitive WriteWaterMark getters and setters
Fix StompFrame.copy() does not copy headers
Fix race
Revive the deleted methods in HttpDataFactory and deprecate them
Less confusing log messages for system properties
Fix a build problem where javadoc is not attached to the all-in-one JAR
Fix incorrect name encoding/decoding in DNS records
Fix integer overflow in HttpObjectEncoder when handling chunked encoding and FileRegion > Integer.MAX_VALUE
HTTP/2 DefaultHttp2HeadersDecoder weighted average error
Fix infinite loop while handling a client socket / Retrofit EchoClient
We should fail fast if the given PrivateKey or X509Certificate chain is not supported by the used SslProvider. (#9009)
Correctly release message in MemcacheClientHandler that is used in the memcache example. (#8119)
1)set the selector select timout values equals to tcp nio transport
Merged MapUtil to Bootstrap
update to barchart-udt 2.2.6
DefaultPromise make listeners not volatile
Correctly handle connect/disconnect in EpollDatagramChannel / KQueueDatagramChannel
retained[Slice|Duplicate] buffer reference count bug
Revert counter optimization in RoundRobin until better implementation found
Fix OpenSslCertificateException error code validation
Add a handler that makes writing websocket clients much easier
Restore derived buffer index/mark updates
[maven-release-plugin] prepare release netty-3.1.0.BETA3
Ensure we only call debugData.release() if we called  debugData.retain()
Don't release messages before throw UnsupportedOperationException, as the caller method will take care
[maven-release-plugin] prepare release netty-4.0.14.Final
Fix documentation errors
Make sure multicast tests pass on all os'es
Add testcase to ensure NioEventLoop.rebuildSelector() works correctly.
Make netty-transport-native-epoll-*-linux-x86_64.jar working in OSGi
Use FastThreadLocal for CodecOutputList
Added SlicedAbstractByteBuf that can provide fast-path for _get* and _set* methods
Add the tarball module
Workaround for Maven build problem in some M2 versions
use checkPositive/checkPositiveOrZero (#8835)
Fix #202 - Remove Twitter license
KQueueSocket#setTrafficClass exceptions
Print correct invalid character after unwrapping value in CookieEncoder
netty-codec: Manage read-flow explicitly in MessageAggregator
* Added a section about shutting down a netty application
Add more variants of ByteBufAllocator.ioBuffer() / Update Javadoc
Filter DNS results so they only contain the expected type when multiple types are present. (#7875)
[#4635] Stop decoding if decoder was removed
[maven-release-plugin] prepare release netty-4.1.0.CR7
[#1943] Unpooled.copiedBuffer(ByteBuf pooled) should always return unpooled ByteBuf
Start to refactor bootstraps to share more code and allow for reuse
Fix backward compatibility from the previous backport
Rename HTTP upload example classes for disambiguation
Rename class
Fix leak in SniClientTest. (#8324)
NETTY-19 Investigate if there's any copyright issue related with MINA
Reduce the memory copies in JdkZlibEncoder
Make HttpResponse's javadoc a bit easier to read
NativeLibraryLoader should check the result of ClassLoader#getResource method
* Fixed a documentation error in ChannelBuffer javadoc
Fix broken javadocs
Correctly take status into account when compare DefaultHttpResponse (#7965)
Fix sporadic failures in DatagramUnicastTest
Update JCTools to 2.0.1
DefaultPromise make listeners not volatile
* Upgraded Maven plugins
Allow to change if EmbeddedChannel should handle close() and disconnect() different.
Added container support for DefaultLocal(Client|Server)ChannelFactory
* Removed an unnecessary override in MemoryAwareThreadPoolExecutor
add fireInboundBufferUpdated to fix #1085 socksproxy example
Moved ImmediateExecutor and its test class to org.jboss.netty.handler.ssl because it's used only there.  Actually there was another unrelated reference, so I simply forked.
Remove un-used method parameter
 [#2647] Handle IOV_MAX in java code
Replace a variable with a constant wherever possible
[#907] Stop flush if one outboundbuffer was freed and do the same for inboundBufferUpdated if an inboundbuffer was freed
Add ByteBufProcessor and ByteBuf.forEach(...)
Not cache SwappedByteBuf in AbstractByteBuf to reduce memory footprint.
[maven-release-plugin] prepare for next development iteration
Allow to submit a Runnable that get execute in the io-thread. This is
[maven-release-plugin] prepare release netty-3.0.2.GA
Update netty-tcnative
Remove methods overridden but identical with the super implementation / Make constructors of abstract classes protected rather than non-sense public
fix 5868 -fix DefaultHostsFileEntriesResolverTest to pass on windows 7
[#1058] Add Channel/ChannelHandlerContext/ChannelPipeline.isWritable()
Fix a build problem with all-in-one module
Throw ReadOnlyBufferException if unsafe buffer is used and dst is direct
Make clear how to use HTTPS in the helloworld example
[#873] [#868] Split ChannelFuture into ChannelFuture and ChannelPromise
Fix wording in "Universal Asynchronous I/O API" section.
Improve SctpMessage.hashCode method
Use jUnit Assume to "ignore" SCTP tests on non-unix operation systems
Improve WebSocket performance
[#1060] Fix bug in CompositeByteBuf which let the buffer expand in a incorrect way and so result in corrupted data
To detect Android, check the VM property rather than the classpath
Fix bad test name
Fix a bug where DefaultChannelPromise.failure0() always returns false / Revert a bad commit
added support for empty query parameters
Use NetUtil.LOCALHOST4 instead of InetAddress.getLocalHost()
Allow a user to define his/her own length field decoder
[#2262] Fix NPE triggered by unresolveable InetSocketAddress in epoll transport
Fix a race condition in reference counter implementation / Reference count never goes below 0
DatagramPacketEncoder|Decoder should take into account if wrapped handler is sharable
Make sure ChannelFuture of Bootstrap.bind() and connect() notify with the right cause when registration fails
Re-add codec-smtp which was removed by 96455a95584dd4e3bbefefb9c208e5927a8b919f by mistake.
Add DatagramPacketEncoder and DatagramPacketDecoder
Fixed bug where subprotocol not sent by client
[maven-release-plugin] prepare for next development iteration
Adding origins whitelist support for CORS
Consistent naming style for enum
Add PrematureChannelClosureException
Use long for http2 ping payload.
Retain ByteBuf extras when aggregating
[maven-release-plugin] prepare release netty-4.0.0.Beta2
Fix inspector warnings
Require Maven 3.1.1 or above
Make sure successful SslHandshakeCompletionEvent is a singleton
[#529] ByteBuf.ensureWritableBytes() can trigger IllegalArgumentException
Overhaul pipeline implementation for clarity and memory efficiency
NetUtil.bytesToIpAddress bug
Package renaming... (forgot to add 'codec')
Cleanup : String.length() == 0 replaced with String.isEmpty, removed unnecessary assert, class cast
Close FileInputStream after consuming it in SelfSignedCertificate
Make methods 'static' where it possible
SonarQube issues OpenSslEngine
Use ChannelInboundMessageHandlerAdapter
Fix a build error
Http2Headers.iterator() comment correction
Backport header improvements from 5.0
Rewrite SslHandler / Reduce the chance of OIO-OIO dead lock
TCP_NOTSENT_LOWAT socket option support
Updated FindBugs filter
Fix NoSuchElementException raised by ChannelInitializer
Reverting back to Guice 1.0 due to compilation issue with JDK 1.5 
HTTP/2: Fix some errors reported by h2spec.
Call debugData.retain() before we forward the frame to the pipeline
Add a basic unit test that I wrote while porting niosmtp to netty 4
Only try to load conscrypt class in tests when supported.
Rename ChannelBuffer to ByteBuf as discussed before
Add convenient logging methods for logging exceptions quickly
Remove an unused import
Free up all buffers after the tests
Replace UnsafeByteBuf with ByteBuf.unsafe() again
[maven-release-plugin] prepare release netty-3.2.0.ALPHA4
fix race condition in test
Enable verbose:gc only when 'leak' profile is disabled
Use InternalLogger in our code / Use jul in examples
Issue #141: hashdos security vulnerability in QueryStringDecoder and possibly other components
* Excluded non-unit test
Carefully manage Keep-Alive/Close connection headers in all examples (#8966)
Add @Sharable annotation to ChannelInitializer
[#748] Upgrade to yammer metrics 2.1.4
Make osgi testing work with java>=9 by updating to felix framework 5.6.10 (#7923)
Update Javadoc of ByteBufProcessor and MessageListProcessor
[maven-release-plugin] prepare for next development iteration
[maven-release-plugin] prepare release netty-4.0.0.Alpha1
Removed the modules that are not part of 4.0.0.Alpha1
Set the session id context properly to make client authentication work with open ssl provider.
Allow to use oldest Channel out of the Simple / FixedChannelPool on acquire
[maven-release-plugin] prepare for next development iteration
Make sure CompositeChanneBuffer does not throw a UnsupportedOperationException if discardReadBytes() discard the whole content of the buffer. See #325
Allow GOAWAY to be sent from handlers after the Http2MultiplexCodec so that app developers can shed load by issuing GOAWAY
epoll_wait timeout reset when called multiple times
Fix EpollServerSocketConfig.isFreebind()
Correctly handle read-only direct ByteBuffer when wrap them
Strip http 'expect' headers when expectation response is produced
Add support for mutual auth when using OpenSslEngine.
[maven-release-plugin] prepare for next development iteration
- make master an eclipse project
Upgrade to the latest netty-build version
Fix buffer leak in Bzip2EncoderTest
[#1881] Use correct field name in NullPointerException
Fix unnecessary application of Math.abs()
Finish porting the codec package to the new API
Workaround JDK bug that will cause an AssertionError when calling ServerSocketChannel.config().getOptions(). (#8183)
Add developers section to pom.xml
Fix a build problem with JDK 8
Change ReferenceCounted.retain* to return itself and so allow method chaining
HTTP/2 Child Channel and FrameCodec Feature Parity.
[#2003] Generate a io.netty.util.Version class which holds the version
Let ChannelPipeline.set* methods return itself to be more consistent with the reset
HTTP/2 child channel read cycle doesn't respect RecvByteBufAllocator and (#8147)
More robust type parameter detection
Add more convenience methods to Bootstrap and ServerBootstrap
SslHandler and OpenSslEngine miscalculation of wrap destination buffer size
[#1920] Fix IndexOutOfBoundsException when using PooledByteBufAllocator with SCTP and NIO Datagram channels
HTTP/2 Ensure default settings are correctly enforced and interfaces clarified
HTTP/2 Flow Controller interface updates
[#1797] No use internalNioBuffer() in derived buffers as it is not meant for concurrent access
Add missing license header
Make internal class final and package private
Checkstyle cleanup from d59b4840c15d80f34a208aa090054c2e363b4426
Correctly calculate and respect if we can correctly fullfil wrap for alerts. (#7945)
Adding a benchmark for websockets
Fix and add comments to HttpUtil
example: memcache: fix set command
Fix build issues in microbench / Disable tests by default
[maven-release-plugin] prepare for next development iteration
Same fix than in version 3.5 for Master branch (refer to issue #345)
DnsNameResolver should respect /etc/resolv.conf and /etc/resolver
Use byte code generation if Javassist is available.
Use StringUtil.simpleClassName(..) instead of Class.getSimpleName() where necessary
Allow to use native transports when sun.misc.Unsafe is not present onâ€¦ (#8231)
[maven-release-plugin] prepare release netty-3.1.0.ALPHA2
Take readerIndex into account when write to BIO.
[#882] Add a PartialFlushException which will allow to notify the user that the flush/write was only partial succesful
Fixed a minor checkstyle warning
adding memcache codec to netty-all project.
Fix checkstyle
Add missed 'serialVersionUID' field for Serializable classes
Added fix for m2eclipse error "Plugin execution not covered by lifecycle configuration"  in pom.xml.  See issue #87.
HttpScheme class
Use jetty-alpn-agent to simplify pom.xml
Correctly update Channel writability when queueing data in SslHandler.
Fixed documentation errors (thanks Stefan)
Add HttpObjectEncoderBenchmark
[maven-release-plugin] prepare release netty-4.0.0.Alpha2
Add smtp codec (client side only).
IPv6 validation fixes
Add cache for CNAME mappings resolved during lookup of DNS entries. (#8314)
Rename SocketAddresses to NetworkConstants
Formatting
Decouple DnsCache and DnsCacheEntry
Cleanup from fbf0e5f4ddad88a9d593cfb357c5f466c72ae977
Deploy transport-native-unix-common-tests
Clarify Future.removeListener[s] javaDocs
writesBytes as in V3 instead of writeInt (RFC says 0 to 4 bytes)
Upgrade barchart udt bundle
[#3218] Add ChannelPool / ChannelPoolMap abstraction and implementations
Fix buffer leaks in Bzip2DecoderTest
Extends HttpPostRequestEncoder to support all methods except TRACE
HTTP/2 RST_STREAM Regression f990f99
fix typo (#8741)
Implement the ByteBuf methods that should have been overridden
Chrome requires the :version: header in SPDY_SESSION_PUSHED_SYN_STREAM frames otherwise it issues a HTTP_TRANSACTION_SPDY_SEND_REQUEST_HEADERS and a SPDY_STREAM_ERROR saying "HEADERS incomplete headers, but pending data frames."
Use the correct arguments when run with jdk9
[maven-release-plugin] prepare for next development iteration
[#1907] LengthFieldPrepender should better extend MessageToMessageEncoder for less memory copies
Rename HttpDataFactory.*datas to *data. Fixes #2094
Remove ChannelBufferHolder / Add more handler interfaces for type safety
Update to autobahntestsuite-maven-plugin 0.1.4 to support Java9
updated udt and connection test
[#1321] HttpHeaders.removeTransferEncodingChunked(..) must handle the value in case insensitive manner
Change groupId to io.netty / inherit Sonatype OSS
Upgraded to APIviz 1.2.2.GA
[maven-release-plugin] prepare for next development iteration
Support conversion of HttpMessage and HttpContent to HTTP/2 Frames
Ability to extend SniHandler and configure it with arbitrary runtime data
[maven-release-plugin] prepare release netty-4.0.0.Alpha7
Add javadocs to the *ChannelConfig interfaces to make clear which ChannelOptions implementations are expect to support
Add support to suspend reads. See #71
[maven-release-plugin] prepare for next development iteration
Fixed FingerprintTrustManagerFactory constructor
Only flush on channelReadComplete(...) in http2 hello world examples.
[#1023] WebSocketClientHandshaker00 now also work with non heap buffers
Fix a memory leak in AbstractCompositeByteBufTest
Merge branch 'master' of git@github.com:netty/netty.git
Upgrade to netty-tcnative 2.0.4.Final
Optimize AbstractByteBuf.getCharSequence() in US_ASCII case (#8392)
Fixed|SimpleChannelPool.close() should only return after complete. (#7927)
[#3419] Only use SecureRandom to generate initialSeed if requested
Fixes NPE in ClientCookieDecoder
Fix ChannelOutboundHandlerAdapter javadoc
[#1454] Fix IndexOutOfBoundsException which was thrown if last component of a CompositeByteBuf was removed
Remove unnecessarily qualified static access
[#1284] Fix bug which can cause in infinity-loop triggered by a handler removal
Upgrade to netty-tcnative-1.1.32.Fork1
Add support for directly decoding/encoding DNS PTR Records
Add more failing tests to SnappyIntegrationTest
Merge SPDY support from 3.2 branch. See #176
Typo
Support running Netty in bootstrap class loader
Updated the broken first statement in the preface.
Fix version numbering
Change minimum JDK version for compilation to 1.8
No more annoying daily plugin version check (hopefully)
Merge pull request #633 from jestan/master
Http2FrameLogger Updates
Use ByteBufUtil.BYTE_ARRAYS ThreadLocal temporary arrays in more places (#8464)
[maven-release-plugin] prepare release netty-4.0.0.Alpha5
HTTP/2 to HTTP/1.x headers conversion more accessible
Wrote the first section of the architecture chapter
Remove reference to akka code and ArrayDeque which is not part of netty anymore
[#5833] Ensure direct memory is released when DirectPoolArena is collected
Fixed a typo [testEquansIgnoreCase() --> testEqualsIgnoreCase()]
Upgrade to netty-build-16
Ensure X509KeyManager methods are called on the correct time when using server-side and support more methods of ExtendedSSLSession. (#8283)
Made the documentation in HttpMessage a bit easier to understand
[#1723] invoke close in eventloop
Merge SpdyOrHttpChooser and SpdyHttpResponseStreamIdHandler into master. See #626
[#2485] Use RecvByteBufAllocator for all allocations related to read from Channel
Upgrade to netty-build-4
[maven-release-plugin] prepare release netty-4.0.0.Beta1
[maven-release-plugin] prepare release netty-3.1.4.GA
Optimize AbstractChannel and related classes
Remove @author and @version / Remove COPYRIGHT.txt
DNS Resolver visibility into individual queries
[maven-release-plugin] prepare release netty-4.1.0.Beta7
DatagramPacket should be final
Merge ByteBuf.hasNioBuffer() and hasNioBuffers()
Replace keySet() + unnecessary map lookup with entrySet()
Make ByteBuf dynamic / Introduce an interface for composite buffers
Minimize reference count checks in SlicedByteBuf
Upgrade Conscrypt to 1.0.0.RC11
[#1202] Fix javadoc
Tighten visibility
Transport: Clarifying the role of AbstractBootstrap#bind()
Moved timer utility classes to org.jboss.netty.util
[#840] Generate the tarball with top level directory
An unit test to ensure that cipher suites don't break/disappear between releases. (#8225)
SPDY: use jdk 1.7 java.util.zip instead of jzlib
Add dev-tools dependency for commons (#7858)
Upgrade depepdencies to the latest versions
Allow to create SslContext from existing PrivateKey / X509Certificate
SingleThreadEventExecutor ignores startThread failures
Fixed a problem where tarball doesn't include a guide
When null origin is supported then credentials header must not be set.
Remove usage of ObjectCleaner (#8064)
Fix example for Http Upload
epoll_wait produces an EINVAL error since 4.1.30 (#8350)
Renamed org.jboss.netty.group org.jboss.netty.channel.group
More javadoc fixes
Make OIO/NIO/EPOLL autoReadClear consistent
Update JCTools version, fixes #7117
[#916] Only access Cleaner if it is really present to prevent errors on android
Allow non-default Http/2 server initial settings
Make CompatibleMarshallingDecoder discard the inbound buffer once TooLongFrameException is raised
Move non socket specific stuff out of the socket package, part 2
Reduce the perceived time taken to retrieve initialSeedUniquifier
Fixed documentation error
[#3443] Fix IllegalStateException which could be triggered when the channel goes inactive during the eventloop processing
This PR fixes an issue with the PROXY protocol where the reader index of a consumed byte array was not set correctly.
fixed written bytes count in sctp send buffer pool
Allow to build netty when sun.misc.Unsafe is not avaible or -Dio.netty.noUnsafe=true is used.
Clean before installation in Travis CI
Add setRefCnt(int) method to AbstractReferenceCounted(ByteBuf)
Support private key encrypted with empty password
Better OSGi integration - Netty will use OSGi LogService when it's running on top of an OSGi framework
OpenSslEngine writePlaintextData WANT_READ with no data in BIO buffer unit test
added UDT Client-Server Test
Allow negative memoryAddress when calling PlatformDependent0.newDirectBuffer(...)
HTTP/2 shutdown cleanup miss
Delegate to the actual encoder/decoder if possible
Fix test failures due to recent changes with codec exceptions
Ensure the tests complete on java7 and java9 as well.
Check for errors without object allocation
Do not deploy testsuite
Documentation fix
Correct JavaDoc
Future compatibility with TLS ALPN
Remove a unused import

Revert as it should be in nio2 branch "Commit first round of classes to support nio2/async channel api. Still work in progress.. See #396"
Improve the logic around acquire channel function is improved.
Merge IPUtil and NetworkConstants into IpAddresses and also make naming of methods consistent
basic support for socks5 codec
Also record retain() and release()
Avoid unnecessary char casts for CookieEncoder (#8827)
Fix a bug where fireInboundBufferUpdated() and flush() swallow the event too early
Add package-info.java for the Stream API / Print maven version on travis CI
Allow to customize NIO (channel) select strategies.
Resolved issue: NETTY-97 Google Protocol Buffer codec
[maven-release-plugin] prepare for next development iteration
[#1500] Remove @deprecated methods
Fix checkstyle problems
Revert SslEngineWrapperFactory api breakage introduced by 4448b8f42f599e79db1744cd8f5fdfee702c195e.
Fix build errors due to missing dependency
Retrofit the socket channel API with the new API
[#1797] Throw IllegalArgumentException if AbstractByteBuf.skipBytes(...) is used with a negative value
Update netty-tcnative native library names to use underscores.
Checkstyle fix from 56694eb
Add support for server-side renegotiation when using OpenSslEngine.
Correcting Maven Dependencies (#8622)
Fix missing ResourceLeak.close() in AbstractDnsMessage
[#5639] Ensure fireChannelActive() is also called if Channel is closed in connect promise.
Also remove the id from the DnsQueryContextManager if query fails due parent Channel activation error.
Add OrderedDownstreamThreadPoolExecutor which can be used when using the
Add support for KeyManagerFactory when using SslProvider.OpenSsl.
Fix another buffer leak in XmlFrameDecoderTest
Tabs to spaces
Overhaul - Split ChannelHandler & Merge ChannelHandlerContext
Split DiscardHandler into DiscardClientHandler and DiscardServerHandler for easier understanding
@deprecated all methods which are related to deregister as it will be removed in 4.1.0.Final
Remove --add-opens=java.base/java.nio=ALL-UNNAMED when running tests as it is not needed anymore since a long time (#8934)
Update to conscrypt 1.0.1
MqttEncoder build failure
Implement RoundRobin logic in RoundRobinInetAddressResolver#resolveAll
[#1707] More efficient implementation of ChannelHandlerContext.writeAndFlush(..)
Add RedisEncoderBenchmark
[maven-release-plugin] rollback the release of netty-3.0.0.CR1
Port ReadTimeoutHandler
Fix a bug in PoolArena and PoolSubpage where subpage pools are not updated correctly
Revert "remove AbstractChannel#doPreClose"
Excluded examples from the JAR
Correctly return a retained slice if called SwappedByteBuf.retainedSlice(...)
[maven-release-plugin] prepare for next development iteration
Proper handling of epoll_ctl errors
Added a build option 'attach-distribution' 
Fix buffer leaks in Bzip2Decoder(Test)
Fixing generic <> in documentation to display properly
Fix invalid memory access in AIO writes
Refactor LzfDecoder to use proper state machine
Update ChannelConfig.java
Make it possible to schedule upstream events to get fired later in the
Fix more memory leaks in buffer tests
[maven-release-plugin] prepare release netty-4.0.13.Final
Fail build when unused c code is detected
PemPrivateKey.toPem(...) should throw IllegalArgumentException when Pâ€¦ (#8253)
Do not allow suspendIntermediaryDeallocations() after free()
Issue #283 - Support max frame length for web socket to limit chance of DOS attack
Make DelegatingChannelPromiseNotifier use Vararg overload
NetUtil valid IP methods to accept CharSequence (#7827)
[#527] Add a new property to HttpMessage to help clarify its transfer encoding
Fix buffer leak in EmptyByteBufTest introduced by aa2f16f3143e46412e3c043b097e0f70f5026196
HttpRequestEncoder consistency with master branch
Use InetSocketAddress(0) if no localAddress is specified for connect() operation in UDT
Retrofit/overhaul the NIO transport with the new API
HTTP/2 Headers Code Using String instead of AsciiString
Fix packagine issues in all-in-one JAR
[#1876] Make use of proper state machine in WebSocket08FrameDecoder for performance reasons
Allow to also write FileRegion and ChunkInput when using HTTP chunked. Fixes [#1693]
Use CoalescingBufferQueue to merge data writes on a stream in HTTP2 instead of CompositeByteBuf
Deprecate ChannelOption.newInstance(...) (#8997)
First round of remove the boss-thread. See #240
ID -> Id (#393 Ensure all fields follow our naming convention)
Outbound bridge is flushed only when its handler also implements ChannelInboundHandler
Typo
Added SwitchableInputStreamTest
[maven-release-plugin] prepare release netty-4.0.0.CR1
Correctly handle ChannelInputShutdownEvent in ReplayingDecoder
Fix build of all-in-one jar
Split AbstractChannel.doFlush() into two variants for simpler user impl
[maven-release-plugin] prepare for next development iteration
Avoid repeating the same field and hiding it (#8335)
Add tests for Http2MultiplexChannel close promise completion consistency with AbstractChannel
Upgraded to APIviz 1.3.0
Fixed a typo in the User Guide code
Simplify exec-maven-plugin configuration
Add profile to be able to compile on java12 (#8321)
Removed unused imports
Port fix for #433
Add support to wrap an existing filedescriptor when using native kqueue transport
e24a5d8 compile error
[#1036] Add special ConnectTimeoutException which is thrown if a connection failed because of a timeout
Fix h2spec test 4.3 about invalid header block
[#2436] Unsafe*ByteBuf implementation should only invert bytes if ByteOrder differ from native ByteOrder
Proposal to fix issue #3768 (3.10)
Remove EventExecutor.parent(), which is of no use
Add HTTP Status code 308 in HttpResponseStatus.java
Allow InputStreams for key/trust managers in SslContextBuilder
Updated Javadoc group list
Remove APIviz doclet
Fix handling of non-auto read for ByteToMessageDecoder and SslHandler
Split AbstractChannel into AbstractOioChannel and AbstractNioChannel
Fix inspector warnings introduced by recent mergences
Mention the HttpObjectEncoder's state in the message of the IllegalStateException (#7996)
Just some tiny javadoc fixes
Allow to validate sni hostname with underscore (#8150)
Code clean-up based on IntelliJ code analysis
Fix typo in warning message.
[#4244] Convert urlencoded uri to http2 path correctly
[#1100 ] Fix SPDY codec to work again in 4.x
HttpConversionUtil does not account for COOKIE compression
[maven-release-plugin] prepare for next development iteration
Tighten up contract of PromiseCombiner and so make it more safe to use (#8886)
Fixed the oversized architecture diagram in the PDF
[maven-release-plugin] prepare for next development iteration
[#1656] Fix IndexOutOfBoundsException in MessageToMessageException
[maven-release-plugin] prepare release netty-4.0.0.Alpha3
Move QueryStringDecoder.decodeHexByte into ByteBufUtil
More javadoc fixes
Ignore "geany" files
Lazy initialize NativeDatagramPacketArray and IovArray in EpollEventLoop (#8160)
EPOLL RDHUP processing
Always use EmptyByteBuf when a user attempts to construct a buffer with 0 maxCapacity / Make EmptyByteBuf remember the allocator it came from / Optimize EmptyByteBuf a little bit
Apply advanced JVM options to benchmarks / Fix duplicate uploads
Take advantage of the new method in ChannelInboundStreamHandlerAdapter
Prevent adding newline if Base64 buffer encoded ends directly on MAX_LINE_LENGTH
Fix some warnings at generics usage
fundamental - basic
Extract SocketAdress logic from NameResolver
Revamp DNS codec
Fixed build failure in Windows
Update dependencies to the latest stable versions
ByteBuf#ensureWritable(int, boolean) should not throw
DefaultChannelConfig maxMessagesPerRead default not always set
Only write the header as it should be
Adding support for tcnative uber jar
fixed word - issue #4469
SPDY: code cleanup
Allow to write CompositeByteBuf directly via EpollDatagramChannel. Related to [#2719]
Build all-in-one JAR on non-fullbuild.
Revert "DefaultPromise make listeners not volatile"
Motivation: If there are no readable bytes, it's unnecessary to go through javaChannel().write().
SSLEngineTest should not depend on OpenSsl* class.
Replace and merge DetectionUtil and DirectByteBufUtil into PlatformDependent and PlatformDependent0
[maven-release-plugin] prepare for next development iteration
Not wakeup the EventLoop for writes as they will not cause a flush anyway
Use the clearer parameter names that indicate the address is for Internet connections
Added SCTP Codec
Unless the Connection: keep-alive header is present in the HTTP response, apache benchmark (ab) hangs on keep alive connections.
Http2MultiplexCodec now propagates SETTINGS and GOAWAY frames in pipeline.
Add HTTP/2 local flow control option for auto refill
Split HttpPostRequestDecoder into HttpPostStandardRequestDecoder and HttpPostMultipartRequestDecoder / Add HttpData.maxSize
Don't swallow intermediate write failures in MessageToMessageEncoder (#8454)
Reduce memory copies in spdy compression implementation.
[#1071] Remove Attribute from map after Attribute.remove() was called
Improve localhost / local interface detection mechanism in NetUtil
Add ChannelGroup.deregister()
Close channel when needed and optimize force() position after multiple writes not at each step
[#4793] Correctly add newlines when encode base64
Better buffer leak reporting
 Start to refactor oio transport to share more code. See #186
Make ByteBuf an abstract class rather than an interface
Guard against NoClassDefFoundError when trying to load Unsafe.
Guard against possible segfault when OpenSslContext is gc'ed and user still hold reference to OpenSslSessionContext / OpenSslSessionStats
[#1735] Disable usage of JdkZlibDecoder by default, will be enabled in 4.1.0.Final
Fix Assume.assumeTrue(...) checks in *UnssafeNoCleanerDirectByteBufTest
[codec-memcache] Avoid NPE on channelInactive.
Inserted Google Analytics code
use Promise instead of CallbackNotifier
Kill the cruft
Fix IllegalBufferAccessException in the UDT message examples
[#2376] Add support for SO_REUSEPORT in native transport
Fix flacky test introduced by af2f343648f4cb3deca5314174e0e579f9fec846
Implement correct handling of recursive DNS
readme.md -> README.md
Add InternetProtocolFamily and use it with NioDatagramChannel
Use a heap buffer from the allocator because it doesn't seem to cause OOME anymore
Update os-maven-plugin again to address an IDEA integration issue
* Updated APIviz tags
[maven-release-plugin] prepare release netty-4.0.0.CR9
PooledByteBuf.capacity(...) not enforces maxCapacity()
Allow to allign allocated Buffers
Reduce object creation for for unwrap/wrap if no ByteBuffer[] is used.
[#1595] Fix IllegalStateException thrown by HttpObjectEncoder when an empty HttpContent was written
codec.mqtt: password and willMessage field types should be byte[]
Removed the first paragraph
Publicize default `explicitFlushAfterFlushes` count. (#8683)
Make it more clear in the javadocs that you should use *Later methods to
Make uninitialization code in DefaultChannel easier to understand
Use ConcurrentHashMapV8 wherever possible
Recycle PooledByteBuf partially
netty-1597: Rewrite ByteBufInputStream.readLine() to avoid IndexOutOfBoundsException and to behave more correctly for lines ending in '\r'.
Lz4FrameEncoder incorrect usage of internalNioBuffer
CipherSuiteConverter NPE
HttpContentDecoder must continue read when it did not produce any mesâ€¦ (#8922)
Merge remote branch 'upstream/master'
[#907] Prevent IllegalBufferAccessException which could be triggered if inboundBufferUpdated(), flush(..), write(..) was triggered after the channel was closed
Makes LengthFieldBasedFrameDecoder::decode inlineable
updated version string in docbook
Remove double spacing
More copyright updates
CorsHandler should release HttpRequest after processing preflight/error.
Reduce bytecode size of PlatformDependent0.equals.
Remove the notion of ByteBufAllocator.bufferMaxCapacity()
ByteBufUtilTest test failure
Implement NIO.2 multicast options
Update on the previous documentation effort
Add max frame length for web socket to limit chance of DOS attack (#283)
Introduce TextHeaders and AsciiString
Add OpenSslClientContext to allow creating SslEngine for client side
Clean src and target directory before making netty-all package
Fix memory leak in AbstractCompositeByteBufTest
Update to Conscrypt 1.3.0 (#8296)
[#1648] Make sure trailing headers are not dropped during content encoding/decoding
Allow to parse hosts file which is stored in a different encoding then the default system encoding. (#8211)
removed google analytics
[maven-release-plugin] prepare for next development iteration
[#1925] Only expose sub-region of ByteBuf on nioBuffer(...)
Handle only those http requests that equal to adjusted websocket path
[maven-release-plugin] prepare release netty-4.0.0.Alpha2
Optimize the way messages are added from one MessageList to another one
Remove ChannelHandlerInvoker
[#576] UDP socket bind to specific IP does not receive broadcast on Linux
[maven-release-plugin] prepare release netty-3.1.5.GA
Resolved conflicts in SctpData/SctpMessage refactoring
ByteBuf.readBytes(...) should use the allocator of the buffer to create the new buffer. Related to [#5093]
Ensure ChannelHandlerContext.attr(...) and ChannelHandlerContext.hasAttr(...) has no semantic change
[maven-release-plugin] prepare for next development iteration
ByteBufUtil.writeUtf8 not consistent with String.getBytes(Charset)
Build tarball only
[#1363] Make sure ChannnelConfig.setAutoRead(false) will stop read from socket directly
CompositeByteBuf.decompose(...) does not correctly slice content. (#8403)
More javadocs fixes
[maven-release-plugin] prepare for next development iteration
Fix memory leak in OpenSslEngine
[#1317] Allow to use VoidPromise for flush(...), write(...) and sendFile(...)
Improve the allocation algorithm in PoolChunk
Moved timer classes to org.jboss.netty.handler.timeout
Correctly detect if protocol is enabled when using netty-tcnative (#7940)
Update netty-build to version 20
Merge pull request #36 from veebs/master
[#2308] Use SelectorProvider.open*() to open NIO channels and so remove condition when create new NIO channels.
SPDY: remove frame size limit in frame decoder
Merge branch 'master' into suspend_feature
HTTP/2 SimpleChannelPromiseAggregator don't fail fast
Currently the system variable to chose which type of zlib decoder is being negated
Reset the contentExpected flag when RSET is written
[maven-release-plugin] prepare release netty-4.1.0.Beta8
Let ProtobufEncoder extend MessageToByteEncoder which makes more sense. Related to [#1222]
Introduce new utility class calles ReferenceCountUtil and move utility methods from ByteBufUtil to it.
Remove the verbose:gc flag from the build
Fix hash function and hash table size in Snappy
Use Unsafe to read ByteBuffer.address field to make it work on Java9 as well.
Make WebSocket codec also work when HttpClientCodec and HttpServerCodec is used.
Fix maven-bundle-plugin life cycle mapping in Eclipse
Add 32 bytes overhead per header entry when calculating headers length in HPackDecoder
HTTP/2 HelloWorld clear text NPE
Port #446 (Fix for #444 - HTTP compression error)
Fix a compilation error
Fix a NPE in DefaultChannelPipeline.write(...)
[#3378] Automatically increase number of possible handled events
Generate all-in-one javadoc
Fix failures in testsuite-osgi-deps
OpenSsl tests incomplete check for supporting key manager
Log more details if notification of promise fails in PromiseNotifier and AbstractChannelHandlerContext
[#2234] Use QueryStringDecoder.decodeComponent to decode url-encoded data instead of Java's URLDecoder.
Servers should not send duplicate intermediate certificates.
* POM cleanup
Improve the allocation algorithm in PoolChunk
Use optimized write and read calls if memoryAddress is present. Part of [#2239]
[#5014] Correctly encode / decode zero-length names when encoding DnsRecords.
Add support for SCTP 'unordered' flag.
Added COPYRIGHT.txt to the JARs
Simplify native library resolution using os-maven-plugin
[#452] CompactObjectInputStream fails to resolve interfaces
Use _set* in AbstractByteBuf.write*()
Add support for EC Keys when using SslServerContext
Updated find bugs filter to ignore more false positives
Fix incorrect parameter validation in DefaultFileRegion
[#4235] Ensure OpenSslEngine.unwrap(...) / wrap(...) correctly return HandshakeStatus.FINISHED
[#5770] Use heapbuffers by default when using LocalChannel and LocalServerChannel.
minor documentation cleanup
[maven-release-plugin] prepare for next development iteration
[maven-release-plugin] prepare for next development iteration
DNS Resolver Search Domain Bugs
Fix checkstyle
[#1668] Remove synchronized usage in JZlibEncoder and JdkZlibEncoder
[maven-release-plugin] prepare for next development iteration
OpenSSL CHACHA20 CipherSuiteConverter updates
Minor idiomatic changes to java docs
[#1875] Correctly check the readerIndex when try to read a byte from AbstractByteBuf
ReferenceCountException -> IllegalReferenceCountException
Make CookieEncoder and CookieDecoder stateless
Update enforcer rules and project URL
Allow to get details of the Thread that powers a SingleThreadEventExecutor.
Fixed incorrect parameter name
Correct the return type of MultithreadEventLoopGroup.newChild()
Fix header and initial line length counting
DNS Resolver should be more consistent with JDK resolution
Fix checkstyle warning
more javadocs
Add ChannelHandlerContext.invoker()
Http2 draft 17
Fix compiler warnings
Proper shutdown of HTTP2 encoder when channelInactive
Fix test failures
Improve the performance of copying header sets when hashing and name validation are equivalent.
Fix checkstyle
Made sure the OSGi bundle is loaded even when there's no LogService available
Rename WebSocketServerHandshakeHandler to WebSocketServerProtocolHnadshakeHandler and also make it public. See #587
Correctly throw SSLPeerUnverifiedException if peers identity has not been verified
* Renamed ChannelTimeoutException to TimeoutException
Move generic unix classes/interfaces out of epoll package
HTTP/2 Connection Preface User Event
EmptyHeaders get with default value returns null
Merge pull request #225 from netty/workerpool
* Added more shortcut entities
Remove unused variable in DefaultHttp2StreamChannel
Add back jzlib license file and notice
trivial javadoc fixes
Deprecate ApplicationProtocolNegotiator and its implementation as people should use ApplicationProtocolConfig
Simplify the acquisition of Cleaner
[maven-release-plugin] rollback the release of netty-4.1.0.CR7
Fix the detection of encrypted data. See #655
Correctly set the alert type depending of the CertificateException
SCTP association shutdown cleanup
Add more convenient methods to ChannelPipeline
[#4347] Remove not needed write operation from example.
NioServerSocketChannel.isActive() must return false after close() completes. (#9030)
Return an ExtendSSLSession whenever possible to allow more strict checking when using OpenSSL (#8281)
Fix wording in "Summary" section.
Fix javadocs for ChannelPipeline
Fix inspection warnings related with JUnit usage
SPDY: add support for pushed resources in SpdyHttpDecoder
Fix IllegalStateException triggered by a successful connection attempt
Clean up
Test against AutoBahn WebSocket testsuite. Work in progress
Update javadocs to highlight that derived buffers will not increment the reference count.
[#5308] Ensure InetSocketAddressResolver.close() will close the wrapped NameResolver.
#7695 no need to manually release chunk during upload (#7696)
Cleaning up the initialization of Http2ConnectionHandler
Updated the copyright information
Comment out compiler options to work around MRELEASE-715
Do not try to init TrustManagerFactory if trustCertChainFile is null.
Faster and more memory efficient headers for HTTP, HTTP/2, STOMP and SPYD. Fixes #3600
[#5763] DefaultEventLoopGroup doesn't expose ctor variant that accepts custom Executor
org.jboss.netty -> io.netty
Fix minor spelling issues in javadocs (#8701)
Fix IndexOutOfBoundsException for CompositeByteBuf #4679
Fixes #7566 by handling concatenated GZIP streams.
Don't spin from malformed dns packets containing loops
Add validateHeaders and headersToLowerCase options for SPDY
Fix typo in param name
Excluded unwritten chapters temporarilly
Not use InternalThreadLocalMap where access may be done from outside the EventLoop.
Simplify ByteBufInputStream.readLine() logic (#8380)
HpackUtil.equals performance improvement
Make Channel*Invoker package private
Clear disabled SSL protocols before enabling provided SSL protocols
Dereference when calling PooledByteBuf.deallocate()
Optimizing user-defined stream properties.
Fix memory leak in AbstractEmbeddedChannel
Fix checkstyle
Make reads work like expected with AOI. See #396
Correctly not write any body when 1xx, 204 or 304 is used as response status code.
Add ThreadLocalRandom back because it's used by ForkJoinPool now.
Revamp HttpContentEncoder
[maven-release-plugin] prepare release netty-3.1.0.BETA1
Ensure leak aware buffers correctly close the ResourceLeakTracker
[#1244] Support ChannelTransferPromise for sendFile
[#1210] Allow to use derived buffers with DefaultBufferHolder and so fix broken SpdySessionHandler
[786] Fix possible corruption of first WebSocketFrame caused by WebSocketServerHandshaker*
Fix resource-leak which was reported as a result of commit 69070c37baf55e181f9270270f7cbf25958ba9b3
Replace infinite Iterable/Iterator with dedicated types
No need for volatile
Add javadocs and cleanup
Fixed various inspector warnings
[maven-release-plugin] prepare release netty-3.0.0.CR2
Do not replace System.err during Slf4JLoggerFactory construction
cleanedup the sctp notification handler
Added dav: prefix to the distribution url
Add missing sanity check for DefaultChannelHandlerContext.write(...)
Add support for SNIMatcher when using SslProvider.OPENSSL* and Java8+
Fix resource leaks in the tests
Use bitwise operations to choose next EventExecutor if number of EventExecutors is power of two
Also allow to override how direct ByteBuffers are freed
Merge branch 'master' of github.com:netty/netty
merged with master
Limit the number of bytes to copy per Unsafe.copyMemory()
Just some tiny javadocs optimizations
Add CompositeByteBuf.consolidate()
Add unit test on DefaultHttp2FrameReader
Correctly handle 205 Reset Content response with transfer-encoding
HTTP Content Encoder allow EmptyLastHttpContent
HTTP/2 remove PriorityStreamByteDistributor
Add an important notice about future migration issue in SimpleChannelInboundHandler.
Use href in WebSocketServer javadoc
[maven-release-plugin] prepare release netty-4.0.0.Alpha2
Add support for UDP multicast in NIO. See #216
[maven-release-plugin] prepare release netty-4.0.0.Alpha6
[#965] Allow to adjust the SO_TIMEOUT on the fly
Updated copyright information
Allow to inject RejectedExecutionHandler for different EventLoops and EventExecutors
Ensure SslUtils and so SslHandler works when using with Little-Endian buffers.
Fix race
Http2ConnectionHandler: allow graceful shutdown to wait forever
Fixed issue: NETTY-172 Let user choose the I/O thread names
Apply missing changes in the branch '3'
Allow specifying 0 as the default number of threads when instantiating an EventLoopGroup
[maven-release-plugin] prepare for next development iteration
[maven-release-plugin] prepare release netty-4.1.0.CR6
[maven-release-plugin] prepare for next development iteration
Don't update state of PromiseCombiner when finish(null) is called (#8843)
[#1729] Let StringEncoder extend MessageToMessageEncoder and so safe a memory copy
Fix checkstyle
Added test cases for NetUtil methods, if we can`t convertAddress we return null
Fix another leak in HttpObjectAggregatorTest by removing redundant code
Remove Channel.id completely / Use 64-bit hashCode internally to reduce the chance of collision in compareTo()
Merge pull request #80 from netty/OMATPE-refactoring
Use jUnit Assume to "ignore" SCTP tests on non-unix operation systems
Remove bottleneck while create InetSocketAddress in native transport
Construct LOCALHOST4 and LOCALHOST6 object with hostname "localhost"
[#1309] Make sure ReplayDecoder respect isSingleDecode()
http2: count pad length field toward flow control. Fixes #5434
Do not use hard-coded handler names in HTTP/2
Fix sharable check logic
Fix typos in docs.
Merge pull request #244 from netty/thread_model_refactor
[maven-release-plugin] prepare release netty-3.2.0.BETA1
Add proper Openssl.SSLSession.getId() implementation
RedisDecoder infinite loop
Fix a bug where first websocket frame is discarded (#332)
SslHandler benchmark and SslEngine multiple packets benchmark
Add advanced leakdetection for methods introduced by [#4842]
Add some logging for easier diagnosis in NetUtil
[#3724] HTTP/2 Headers END_STREAM results in RST_STREAM
http2: Http2StreamChannel now shares options of its parent channel
[#1061] Add workaround to not use PooledUnsafeDirectByteBuf when running on latest OpenJDK6 because of missing Unsafe method
Implement Bootstrap.toString() and use it in the testsuite
Fixed pom error
PlatformDependent static initialization ExceptionInInitializerError
make deregister protected in ThreadPerChannelEventLoop
Updated the dependencies and build plugins to the latest version except for XNIO, which needs additional work
Fix buffer leaks in DnsResponseDecoder and DnsResponseDecoderTest
HTTP/2 Thread Context Interface Clarifications
Finish work on http2 child channel implementation and http2 frame api.
Adding support for specifying preflight response headers.
Fix broken test after change the maximal value of the pid. Part of [#2706]
AbstractCoalescingBufferQueue addFirst void promise handling
org.jboss.netty -> io.netty
Avoid unnecessary boxing/unboxing
Prettier web socket log messages
Use threadsafe setter on Atomic Updaters
Remove the memory option previously added to avoid OOME
Add ByteBuf.order(ByteOrder) method to simplify little endian access
Port ChunkedWriteHandler
Now supports UDP :)
Correctly implement CharSequenceValueConvert.convertTimeMillis
Add common tests for ByteBufAllocator / AbstractByteBufAllocator implementations.
Fix #397: Allow all cookie names that conform to the RFC
Fix checkstyle
[maven-release-plugin] prepare for next development iteration
Adding a Cross Origin Resource Sharing (CORS) handler.
Merge branch 'master' of github.com:netty/netty
[maven-release-plugin] prepare release netty-3.2.0.CR1
Update HttpStaticFileServer example / Fix bugs related with progress notification
Change the contract of ResourceLeakDetector.open() so that unsampled resources are recycled
HTTP/2 limit streams in all states
Update to netty-tcnative 2.0.20.Final (#8561)
[#5629] Ensure direct ByteBuffer are wrapped in as direct ByteBuf.
[maven-release-plugin] prepare release netty-4.1.0.Beta3
Enable per origin Cors configuration (#7800)
[#2598] Add Epoll.isAvailable() which allows to check if epoll can be used.
[maven-release-plugin] prepare release netty-4.0.1.Final
[#960] Fix calculation of writerIndex() which was incorrect and so result in truncated DatagramPackets when using NIO
[maven-release-plugin] prepare release netty-4.1.8.Final
Make ChannelOutboundMessageHandlerAdapter similar to ChannelInboundMessageHandlerAdapter
Automated code clean-up
Add tests for the Conscrypt based SSLEngine. (#7950)
Ensure tests added in 91f050d2ef6b22b7aec187aa1cf4593955dcea82 work with different openssl installations
Introduce  EpollSocketChannelConfig.setTcpKeepCnt as replacement for setTcpKeepCntl.
Add ACCESS_CONTROL_EXPOSE_HEADERS
Use the same buffer type in ByteBridge as the context
Ensure Bootstrap.connect(...) not throw IllegalStateException when registration is delayed.
Fix a bug where AbstractConstant.compareTo() returns 0 for different constants
Use FastThreadLocal in more places
Add IPv6 multicast test to testsuite (#9037)
Preparing to write some real guide ...
[#1800] [#1802] Correctly expand capacity of ByteBuf while preserve content
Correctly implement SSLSession.getLastAccessedTime() for OpenSSLEngine
 Add an HTML5 encoder mode for HttpPostRequestEncoder
Upgrade and Connection header must be matched in a case-insensitive manner in WebSocket 08 and 13. See #278
Base64 reduce byte manipulation operations
Fix parent version number used by d67d639f5f4de11f32dc15abcd0e18bad5a24a21
Bring back ChannelGroup.find(id)
SPDY: refactor frame codec implementation
Add HTTP/2 Netty tiles example
Fix HTTP/2 test cleanup with LocalChannel
OpenSslEngine encrypt more data per wrap call
Fix all remaining checkstyle violations
(Nio|Epoll)EventLoop.pendingTasks does not need to dispatch to the EventLoop  (#8197)
Ensure CombinedChannelDuplexHandler can not be shared.
Updated license information (NETTY-106 Add missing license files to the distribution)
[maven-release-plugin] prepare release netty-4.1.22.Final
[maven-release-plugin] rollback the release of netty-4.1.0.Beta1
Remove unnecessary instantiation of HttpResponseStatus
Cleanup PoolChunk and PoolArena
Fix a build bug where javadoc is generated twice
Remove freeInboundBuffer() and freeOutboundBuffer() which has no value
Remove Bootstrap operations that require a promise and add various ad-hoc bind() and connect() operations
Handle an empty ByteBuf specially in HttpObjectEncoder
AbstractHttp2ConnectionHandlerBuilder validateHeaders cannot be set with encoder/decoder
IllealRefCountException should be IllegalReferenceCountException, fix typos
Clearify when you need to call retain()
Merge remote branch 'upstream/master'
Make sure that HttpObjectDecoder decodes the last HTTP message without 'Content-Length' header
[#2254] Fix regression in handling autoRead and Channel.read()
Correctly handle user home directory with spaces when construct javaagent argument
fix example missing break statement in ReplayingDecoder
Allow to access memoryAddress of wrapped ByteBuf for ReadOnlyByteBuf
NioDatagramChannel invalid usage of internalNioBuffer
Deprecate ByteBufIndexFinder
Fix a runtime type cast exception when calling RxtxChannel.local/remoteAddress()
Updated dtd definition
[#1513] Use the correct names when add the websocket decoder and encoder
- undo eclipse project stuff
Use a single array in SelectedSelectionKeySet
Obtain MessageDigest via FastThreadLocal
Added COPYRIGHT.* to the assembly
Fix race condition in the NonStickyEventExecutorGroup (#8232)
Fix HTTP/2 dependency tree corruption
Use a single queue in UniformStreamByteDistributor
Fix buffer leak introduced by 693633eeff106febf4403208f9eed2117931f45a
DnsNameResolver search domains support
Fix wording in "Advanced Components for More Rapid Development" section.
Make EventExecutor.shutdownGracefully() return Future
Add javadoc warning on SslContext#newHandler client-side
[maven-release-plugin] prepare for next development iteration
[maven-release-plugin] prepare release netty-3.1.1.GA
[maven-release-plugin] prepare release netty-4.1.7.Final
[#1788] Correctly decode CRC32 and ISIZE when using JdkZlibDecoder
Correctly detect which protocols are supported when using OpenSSL
Add unit test that shows LineBasedFrameDelimiter correctly splits line.
Fix a bug where timeout handlers sometimes generate events too early
Renamed NioUdpWorker to NioDatagramWork
[#4533] Ensure replacement of decoder is delayed after finishHandshake() is called
Optimize LoggingHandler using lookup tables
Add a Example for Memcache Binary Codec
3.0 -> 3.1
Ensure that at least 4 bytes are remaining in input buffer when compiling our hash table in search of duplicates, and restrict encoded frame sizes to 32,767 bytes (2^15 - 1)
Added debug logging with effective value for io.netty.leakDetection.acquireAndReleaseOnly property
Optimizing KObjectHashMap hashIndex()
Merge remote-tracking branch 'upstream/master'
DefaultHttpHeader.names().toArray(...) may throw ArrayStoreException
STOMP Headers Name Comparator
Fixed buffer leaks in DefaultSocks5CommandResponseTest
Increase timeouts in Http2ConnectionRoundtripTest
Split AbstractOioChannel into its subtypes
Use double-checked locking idiom + volatile optimization
Use Math.min(...) and Math.max(...) as these are intrinsics.
Add CompositeByteBuf.addComponent(boolean ...) method to simplify usage
Fix #218: CookieDecoder.decode() throws StackOverflowError
[#1135] Fix endless loop which will get triggered when an exception is thrown during freeHandlerBuffersAfterRemoval
Allow to do async mappings in the SniHandler
Allow to free direct buffers on java9 again
[#964] ByteBuf.readLine() must return null when no more data is available in ByteBuf
[#1327] Fix javadoc diagram for new api
Move "fallthrough" statement to where fall actually happens Motivation: Static analysis looks for error prone switch case statements. Accidental fall through is one such case, but it is sometimes intentional. To indicate this, the "//fallthrough" comment can be added before the fall.
[maven-release-plugin] prepare for next development iteration
Reduce GC produced by native DatagramChannel implementations when in connected mode. (#8806)
Motivation:
Replace codec embedder with EmbeddedChannel which can test any handlers
Log the current channel in Http2FrameLogger
HTTP/2 DataCompressionHttp2Test test complete race condition
Simplify the exception handling of ChannelOutboundHandler.write()
Use OneTimeTask where possible to reduce object creation
OpenSslEngine.getSupportedCipherSuites() must return java names as well.
Builder to construct DomainNameMapping.
Do not use unreleased checkstyle rules
Ensure tarball pom is updated during release:prepare
Ensure the HttpResponseEncoder is always placed before the HttpObjectAggregator. Part of [#2219]
Make Bootstrap and ServerBootstrap implement Cloneable and rename duplicate() to clone()
Document and generalize `PromiseCombiner`
Fix resource leak in tests introduced by 69070c37baf55e181f9270270f7cbf25958ba9b3.
Fix memory leak in DefaultHttp2Headers
Upgrade to netty-build-19
Http2ConnectionHandler Http2ConnectionPrefaceAndSettingsFrameWrittenEvent propagation
Fill/flush bridges only when necessary
Use unbounded queues from JCTools 2.0.2
Remove optional dependency on javassist
Remove Rfc6265 prefix from cookie encoders and decoders
HttpConversionUtil TE filtering robustness
Remove some dead code
Fix failing tests
Fix IndexOutOfBoundsException when FixedCompositeByteBuf is constructed with an empty array.
Add *UnsafeHeapByteBuf for improve performance on systems with sun.misc.Unsafe
Implement OpenSslEngine.getSupportedCipherSuites() and get/setEnabledCipherSuites()
Upgrade JMH to 0.4.1 and make use of @Params.
OpenSslEngine with no finalizer
[maven-release-plugin] prepare for next development iteration
Fixed NPE in WebSocket00FrameDecoder if end couldn't be found in text frame
[#2088] Introduce sendUnsupportedVersionResponse(...) methods which allows to use the ChannelFuture/ChannelPromise to get notified once the response was send.
Do not try to be unsafe when told not to be unsafe
Ensure uncompressed ByteBuf is released when an exception happens during decoding.
Finish javadocs for common module
Fix decoding null bulk string of RedisDecoder
fixed checkstyle build failures
Add EventExecutor.children() in favor of iterator()
[#1532] Remove @deprecated ByteBufIndexFinder and all methods that take it as argument
Make Bootstrap and ServerBootstrap fully overridable
Ported IdleStateHandler / Forward-ported the UptimeClient example
Fix possible leak when a write is rejected
Remove unnecessary 'return' statement.
Added easymock to the test scope dependency
Make PlatformDependent work with the platforms without unaligned access support
Deprecate CombinedChannelDuplexHandler in favor of ChannelHandlerAppender
Fixes a bit of javadoc that was broken by a failed merge
Added -link options to Javadoc plugin
[maven-release-plugin] prepare for next development iteration
Merge the attribute map of ChannelHandlerContext into Channel
[#2665] Continue writing on IOException when using DatagramChannel
IPv6 address to string rfc5952
[#1879] Correctly validate close frame
Fix a bug where timeout handlers sometimes generate events too early
Correct SslContextBuilder javadocs
Add port to 'Origin' if the port is non default (80/443) (#262)
[maven-release-plugin] prepare release netty-3.1.0.GA
Fix memory leaks
[maven-release-plugin] prepare release netty-4.1.0.CR2
Remove deprecated ByteBufUtil.release(..) and ByteBufUtil.retain(..) methods and its usage. Also fix a problem where an object would have been released two times.
Merge package private interfaces into public ones. Related to [#1989] and [#1991]
Add ChannelInboundMessageHandlerAdapter
Small improvement in SimpleChannelInboundHandlerAdapter javadoc
Move drain logic to OutputMessageBuf and optimize it as far as possible
Use progress + total instead of delta
No need to use a concurrent Queue with out new thread-model. See #626
removed eclipse project files
[#4754] Correctly detect websocket upgrade
[maven-release-plugin] prepare for next development iteration
ReadOnlyHttp2Headers.contains always ignores case for values
Remove outdated UML / Fix image URL / etc
HTTP/2 Closed Streams Conditional Priority Tree Removal
Fix a bug where CookieDecoder sets the default maxAge to -1
Correctly propagate channelInactive even if cleanup throws
Backport HTTP encoding / decoding optimizations which were introduced by #2007.
Optimize PooledUnsafeDirectByteBuf.newInternalNioBuffer()
Fix UDP Multicast writes. See #237
[#4351] Add warnings for Attribute.remove() and Attribute.getAndRemove()
[maven-release-plugin] prepare release netty-3.0.0.CR4
Accept ';' '\\"' in the filename of HTTP Content-Disposition header
Don't send a RST on close of the stream may not have existed (#8086)
Fix typo missed in f46cfbc590263ee2bfe0a16e0bdfb6d6d603f621
Added an option to use websockets without masking
Improve performance of Base64.decode and encode methods.
Take advantage of buffering in HttpSnoopServer
Fixed issue: NETTY-105 Update the project description in pom.xml
HTTP/2 goaway connection state update sequencing (#8080)
DnsNameResolver should not bind locally. Fixes #5457 Motivation: Dns resolution failures happen when using the DnsNameResolver and the JVM is not authorized to bind datagram channels. The current DnsNameResolver binds locally a DatagramChannel which is not necessary (and not always permitted).
Fix ref-counting when CompositeByteBuf is used with retainedSlice() (#8497)
Finish support for UDP Multicast in UDP. See #216
Fix another bad xml
FIX: force a read operation for peer instead of self (#7454)
Correctly filter out native tcnative lib
Make sure we handle outbound messages of type ByteBuf special
Removed outdated XNIO transport - it needs to be rewritten in the next major feature release.
[#2542] HTTP post request decoder does not support quoted boundaries
[maven-release-plugin] prepare for next development iteration
[maven-release-plugin] prepare release netty-3.0.0.CR1
Use offset finding eol avoid repeated scaning.
Fix DatagramChannel javadoc
HTTP/2 UniformStreamByteDistributor negative window shouldn't write
Small code improvements
Correctly respect isAutoRead() and make it consistent across OIO/NIO
[#2428] Proper fix of incorrect port range check
Merge SnappyChecksumUtil into Snappy and make calculateChecksum() public / Overall clean up
netty-1616: Adding a 'last' check to SpdyHttpEncoder.
Fix checkstyle error introduced by 52cb55d3887034df778575799fdd00f174495809
[maven-release-plugin] prepare release netty-4.1.17.Final
Start to refactor nio transport to share more code. See #186 
Improve the randomness of ThreadLocalRandom for all platform
Check if Epoll is avaible when construct EpollEventLoopGroup
Optimize DefaultChannelPipeline in terms of memory usage and initialization time
Fix length calculation in AsciiString.indexOf(...) and so eliminate ArrayIndexOutOfBoundsException. (#8116)
Fix all Xlint:unchecked warnings
Add more HttpHeaders values
Correctly take position into account when wrap a ByteBuffer via ReadOnlyUnsafeDirectByteBuf
Makes `EmptyByteBuf#hashCode` and `AbstractByteBuf#hashCode` consistent (#7870)
ByteBufUtilTest bug
Add UnpooledUnsafeDirectByteBuf and use it when low-level access is available
Remove unnecessary traversal of pipeline which occurs when a Channel is closed
ByteBufAllocator API w/ ByteBuf perf improvements
[maven-release-plugin] prepare for next development iteration
DefaultFileRegion.transferTo with invalid count may cause busy-spin (#8885)
[#2589] LocalServerChannel.doClose() throws NPE when localAddress == null
Fix bugs in ZlibDecoder / Port the factorial example
Add DatagramChannel.isConnected()
Added test for multi header, HttpObjectDecoder performance improvement for multi header, removed empty else block.
HostsFileParser should allow both IPv4 and IPv6 for a given host
Format and partially describe Gitignore
Let PoolThreadCache work even if allocation and deallocation Thread are different
Upgrade to new netty-build and com.puppycrawl.tools 8.18 (#8980)
Headers set/add/contains timeMillis methods
[maven-release-plugin] prepare for next development iteration
Ported most examples
Add ChannelFutureFactory & removeClosureListener()
Clean-up d9cccccbb3344997e016e6a3603126ce65705c4d
[#5892] Correct handle HttpMessage that is EOF terminated
removed bin from .gitignore
Remove explicit flushes from HTTP2 encoders, decoders & flow-controllers
Add uber-staging and uber-snapshot profile that can be used to generate uber all jars.
file -> product
Use a default resolver with bootstrap.resolver(null).
Add organization info
findNextPositivePowerOfTwo out of bounds
retainSlice() unwrap ByteBuf
Rename flushAndWrite() to writeAndFlush()
Tighten access modifier of encode/decode()
[#999] Refactor UDT transport to make use of the ServerChannel interface
Make EventLoop a ScheduledExecutorService
[maven-release-plugin] rollback the release of netty-4.0.0.CR9
Configures HTTP2 pipeline with more proper way
ChannelInitializer may be invoked multiple times when used with custom EventExecutor. (#8620)
Optimize and clean up LoggingHandler
Fix #5590 QueryStringDecoder#path should decode the path info
Relax Maven version requirement
Replace toArray(new T[size]) with toArray(new T[0]) to eliminate zero-out and allow the VM to optimize. (#8075)
Skip OSGi testsuite if 'no-osgi' profile is active
[example-memcache] fix formatting introduced by the memcache examples.
Exclude sun.nio.ch.DirectBuffer from animal-sniffer check
Fix external Javadoc url
Optimistically update ref counts
Explict always call ctx.read() when AUTO_READ is false and HTTP/2 is used. (#8647)
Set result for decoded request and add test for #8721 (#8721)
Prevent Unpooled.EMPTY_BUFFER from being stored in the composite buffer due to a zero length slice, which causes reference counting problems on subsequent discardReadBytes.
HTTP/2 Writes GO_AWAY on channelInactive
Add ThreadPerChannelEventLoopGroup and ThreadPerChannelEventLoop to enable a user to write a new thread-per-channel transport easily
HTTP/2 Prevent modification of activeStreams while iterating
Also use realloc when shrink the buffer.
ByteBufInputStream is always allocating a StringBuilder instance (#8347)
[#1384] Cache HttpHeaderDateFormat in ThreadLocal
Make Native loading work better with Java 8
[maven-release-plugin] prepare release netty-4.1.0.Beta1
Remove backports of JDK8 classes
Implement Thread caches for pooled buffers to minimize conditions. This fixes [#2264] and [#808].
Add unit test that shows LineBasedFrameDelimiter correctly handles fragmented data.
User-definable thread model via ChannelHandlerInvoker
Ensure the same ByteBufAllocator is used in the EmbeddedChannel when compress / decompress. Related to [#5294]
Fix DN resolution when ndots is greater than 1
Nio|Epoll|KqueueEventLoop task execution might throw UnsupportedOperationException on shutdown. (#8476)
Move encode of chunked content to an extra method, this allows for inline. Related to #1812
Fix incorrect delegate in overriden method in JdkOpenSslEngineInteroptTest
Update compiler options
fix one java doc issue: extra }
[#4355] OpenSslServerContext reinitializes the provided TrustManagerFactory with the key cert chain.
Make the build not fail in JDK8 until we fix Javadoc
Fixed issue: NETTY-232 NoSuchMethodError when decoding Google Protocol Buffers 2.2.0 messages
[#846] Tighten up visibility
ignore .idea/ folder
Add startTls parameter to SslContextBuilder
Upgrade to javassist 3.18.0-GA
Merge pull request #210 from netty/threading_fix
codec-http: Document the semantics of HttpResponseStatus equality and comparison
Port fix for #433
Update dependency versions
Correctly calculate checksum when using GZIP. Part of [#2168]
[#1710] Add missing duplicate() overrides in interfaces
Correctly write MessageList which contains more then one message
[maven-release-plugin] prepare for next development iteration
HTTP to HTTP/2 tranlation errors
Attach Javadoc to sync with the central repo
Simpler method naming in Timeout
pom.xml: adding suuport for AARCH64 architecture in Netty/Transport/Nâ€¦ (#7933)
Ensure we null out the previous set InetAddress on java.net.DatagramPacket when using OioDatagramChannel.
Fix compiler warnings
[maven-release-plugin] prepare for next development iteration
Fix for Issue #3308 related to slice missing retain
Generate Expires attribute along MaxAge one so IE can honor it, close #1466
ReadOnlyHttpHeaders
Add unified NextProtoNego extension support to SslContext
Allow to generate a jmh uber jar to run benchmarks easily from cmdline with different arguments. (#8264)
Add missing SslContextBuilder.forServer(KeyManagerFactory)
Custom stylesheet for prettier Javadoc
Allow to create Epoll*Channel from FileDescriptor
Issue #60: Make the project multi-module
CleanerJava9 should be able to do its job even with a SecurityManager installed. (#8204)
Don't fail the deregistration promise in Http2MultiplexCodec
Only run OpenSslEngineTests if OpenSsl is installed. Related to [#3732]
Port ChannelOutboundBuffer and related changes from 4.0
Make sure the inbound/outbound buffer of the ChannelHandlerContext is only modified within the EventLoop
[#710] flush() requests made before SSL handshake completion are not executed after completion
Fixed various buffer leaks in FixedCompositeByteBufTest
Possible leak in AbstractDiskHttpData
Update the checkstyle rules
Exclude scpt from the build for now until it is moved to an extra
Revert "Added UDP multicast (with caveats: no ipv6, getInterface, getNetworkIâ€¦ (#9006)"
SslHandler aggregation of plaintext data on write
HTTP/2 LifecycleManager and Http2ConnectionHandler interface clarifications
[#5297] Ensure calling NioEventLoop.pendingTasks() and EpollEventLoop.pendingTasks() will not produce livelock
Add back Channel(Inbound|Outbound)(Message|Stream)HandlerAdapter
Not add inboundStreamHandler for outbound streams created by Http2MultiplexCodec.
Revert "Fix unnecessary boxing and incorrect Serializable"
[maven-release-plugin] prepare release netty-4.1.0.Beta5
OpenSslEngine skip ALPN tests if OpenSsl version doesn't support ALPN
Fix a memory leak in HttpObjectAggregatorTest
Remove memory copy when checksum non heap backed ByteBuf implementations using Snappy
[#2215] DefaultChannelHandlerContext tasks needs to be volatile to ensure every thread only see full initialized instances
Merge MessageBufs and ByteBufs into Unpooled
EpollEventLoop ensures that all submitted tasks are executed immediately.
Removed HeapByteBuffer address field check.
Tests for web sockets hybi-00 and hybi-10
Grammar
Use smaller number of boss threads in the example
[maven-release-plugin] prepare for next development iteration
Correctly skip OpenSsl* tests if OpenSsl.isAvailable() is false.
Reduce overhead by ByteBufUtil.decodeString(...) which is used by `AbstractByteBuf.toString(...)` and `AbstractByteBuf.getCharSequence(...)` (#8388)
More complete OpenSslEngine SSLSession implementation
DefaultChannelHandlerContext.removed doesn't need to be volatile
Ensure that a user implements flush() or inboundBufferUpdated()
* Split the buffer section to a separate chapter
Use ByteBuf.readSlice(...).retain() to minimize memory copies.
Correctly include native modules
Drop broken DefaultCookie name validation, close #4999
Enable a user specify an arbitrary information with ReferenceCounted.touch()
Add missing @Override annotation
[#2353] Use a privileged block to get ClassLoader and System property if needed
Fix a bug where DefaultCompositeByteBuf.nioBuffers() fails when its component's nioBufferCount() is greater than 1
Remove or de-prioritize RC4 from default cipher suites
PoolChunkList not correctly move PoolChunks when these are moved.
Add PooledSlicedByteBuf and PooledDuplicatedByteBuf
Optimize native transport for gathering writes
Fix premature cancelation of pending frames in HTTP2 Flow Control.
Fix for issue #2765 relative to unstable trafficshaping test procedure
[#1065] Provide Future/Promise without channel reference
Directly receive remote address when call accept(...)
[#5372] Ensure OpenSslClientContext / OpenSslServerContext can be garbage collected
Fix infinite recursion when transferring data between different type of buffers / Add ByteBuf.hasMemoryAddress/memoryAddress()
Include correct dependencies for testsuite-shading on windows. (#8491)
Remove a method of no use
Remove HpackDecoder.maxHeaderListSizeGoAway (#7911)
Excluded container integration classes from Javadoc
Remove memory copy when extract frame in LengthFieldBasedFrameDecoder
Remove fixed TODO
[#4836] Enforce 64bit JDK when build netty.
Fix a bug where ChunkedWriteHandler stalls
Update license notices and dependencies
[#917] Move transport depending ChannelOption to the specific transport to make it consistent
Fix offset calculation in PooledByteBufAllocator when used
Use sun.misc.Unsafe to access a direct buffer if possible
Deprecate UniqueName and its subtypes' constructors / Add valueOf() for easier future migration.
Fixed typo in LzmaFrameEncoder constructor
More graceful registration failure
Remove usage of own Atomic*FieldUpdater in favor of JDKs
Allow to extend IdleStateHandler and so provide more details for IdleStateEvents
AutoClose behavior may infinite loop
Http2MultiplexCodec should propagate unhandled Http2Frames down the pipeline
Allow to enable/disable protocols on the OpenSslEngine
Fix buffer leak introduced by #2462
Ensure Unsafe buffer implementations are used when sun.misc.Unsafe is present
Fix 'unsupported address type error' in UDP tests / Fix checkstyle
[#1374] Allow users to all all subprotocols by using * as wildcard
Correct fail write with NotYetConnectedException when OioDatagramChannel is not connected yet.
Proper assertion instead of blindly clearing the OutputMessageBuf
[#1644] Fixed IndexOutOfBoundException when calling copy() on a empty CompositeByteBuf
Merge remote-tracking branch 'upstream/master'
[#2599] Not use sun.nio.ch.DirectBuffer as it not exists on android
Add a lot of javadocs to make usage more clear
Prevent possible ClassCastException
Related issue: NETTY-69 IoC container integration
Fix checkstyle
Fix #208 - SslHandler does not use ChannelBufferFactory to create a new buffer
Forking Twitter's hpack
Revert workaround in test for Java 11 as it produces a connection-reset as expected now. (#7951)
HttpPostMultipartRequestDecoder should decode header field parameters
[#2252] Fix bug where AppendableCharSequence private constructor does not set correct position
Introduce MessageAggregator and DecoderResultProvider
[#2651] Fix possible infinite-loop when cancel tasks
[#3623] CompositeByteBuf.iterator() should return optimized Iterable
PlatformDependent0 should enforce array index scale for byte[] explicitly
Load Conscrypt method via reflection only once
Added Automatic-Module-Name for native modules to support Java 9 modules
Rename class
Update dependencies to the latest stable versions
Http2DefaultFrameWriter direct write instead of copy
Add constructor parameters that do not perform type parameter auto-detection for the languages without type parameters
Remove netty-metrics-yammer as it does not exist anymore
Generate Javadoc with APIviz
Fix checkstyle
OioServerChannel Default Max Messages Per Read Too High
Update Default Cipher List
Add logLevel property to enable different log levels for the examples.
Fix a bug in the SecureChat example where greeting is generated too soon
Make flow-controller a write-queue for HEADERS and DATA
[#3376] Use IllegalArgumentException as replacement for NPE as stated in javadocs
Use build-helper-maven-plugin instead of messy hack
Fix SnappyFramedEncoderTest & SnappyFramedEncoder
Added more Javadocs to the 'replace' methods, see Netty issue 756.
FIX endless loop in ByteBufUtil#writeAscii
Rename TaskScheduler to ChannelTaskScheduler
Move haproxy codec to a separate module
Better explanation of what Netty is
Synchronized between 4.1 and master again
[maven-release-plugin] prepare release netty-4.1.23.Final
SslHandler promise completion incorrect if write doesn't immediately
Fix check to clear READ_OP and EPOLLIN. Part of [#2254]
Mark transport-rxtx as @deprecated
[#3899] Fix javadoc to use netty 4 API.
Added DuplicatedAbstractByteBuf that can provide fast-path for _get* and _set* methods
[maven-release-plugin] prepare release netty-4.1.26.Final
Add io.netty.noJdkZlibEncoder system property
[maven-release-plugin] prepare release netty-4.1.14.Final
Expose DefaultThreadFactory.threadGroup to sub-classes
Provide a way to cache the internal nioBuffer of the PooledByteBuffer to reduce GC. (#8593)
No HTTP/2 RST_STREAM if no prior HEADERS were sent
[#5760] Do not change writerIndex when decode DnsPtrRecord
Add new ChanelFuureListener impl that mimic the old behavior of Netty 3 and so allow to also call fireException for outbound operations
Do not return Access-Control-Allow-Headers on Non-Preflight Cors requests
Rename MessageToMessageEncoder.freeInboundMessage() to freeOutboundMessage()
SocksCmdRequest and SocksCmdResponse are trying to convert host from IDN for the non-DOMAIN address types
Only do priming read if there is no space in dsts buffers.
Remove reference to 5.0 release.
Fix a compilation error
Generate non-test JAR for netty-testsuite
Allow ndots=0 in DnsNameResolver and search domains - fixes #5570
ReferenceCountedOpenSslEngine SSLSession.getLocalCertificates() / getLocalPrincipial() did not work when KeyManagerFactory was used. (#8560)
Have hosts file support for DnsNameResolver, close #4074
Include frame-pointer to improve epoll flamegraph tracing
Improve SctpMessageCompletionHandler
Added FindBugs preferences
Replace free() with reference counting / Fix SlicedByteBuf.unsafe()
Change ByteBufAllocator.buffer() to allocate a direct buffer only when the platform can handle a direct buffer reliably
Add javadocs in the oio package and also fix some intellij warnings
* Updated PDF XSL
EPOLL SO_LINGER=0 sends FIN+RST
Correctly reset MessageDigest before reusing it.
Remove unused classes in util.internal
Add I/O ratio parameter to NioEventLoop
Null out references to tmpNioBuf and chunk to allow quicker collecting
Add ByteBuf.maxWritableBytes()
Fix typo in BufType javadoc
Change the thread model slightly for new/freeInbound/OutboundBuffer() for future improvement
Update dependency versions to the latest versions
Upgrade to netty-tcnative-1.3.33.Fork6
Explicit allow to enable / disable session cache
Modify HttpContentDecoder to writeInbound and readInbound from its internal decoder
Fix indentation
Enable/Disable sctp tests based on the detected OS
[maven-release-plugin] prepare release netty-4.0.7.Final
Trying out an older version of release plugin
[maven-release-plugin] prepare for next development iteration
Change HttpServerUpgradeHandler.UpgradeCodec to allow aborting upgrade
Fix broken OSGi version range for NPN and ALPN dependency
More javadoc fixes
[#2650] Allow to disable http header validation in SpdyHttpDecoder and SpdyHttpCodec
Fix closing handshake and run against Autobahn V0.4.3
HpackDecoder treats invalid pseudo-headers as stream level errors
Update ALPN boot version
Always return a real slice even when the length is 0
Merge remote branch 'upstream/master'
Merge pull request #411 from Massive-Dynamics/update-dependencies
disable debugging output during test
Added support for SSL Server Name Indication.
Skip execution of Channel*Handler method if annotated with @Skip and â€¦ (#8988)
Optimize AbstractByteBuf.adjustMarkers()
Optimized event implementation to reduce memory footprint and improve performance somewhat
Merge pull request #32 from normanmaurer/master
Fix a dead lock in ServerBootstrap as described in #1175
Mark sun.nio.ch as optional
[#1012] Replace forked jzlib with official jzlib and add a test.
Handle null "origin" header in "Old Hixie 75 handshake" as proper bad request. (#8864)
Enable assertions only for Netty classes
MQTT encode doesn't complain if password is set but username not
Retry deployment if failed
[#1607] Make use of gathering writes for WebSocket encoders, to minimize memory copy
HTTP/2 Weighted Fair Queue Byte Distributor
Update hpack Decoder CTOR to allow for overflow in maxHeaderList size, as we do when we apply our ack'ed settings
make the http2 codec void promise ready.
Make FailedChannelFuture and SucceededChannelFuture final
Reuse previous created HttpHeaders by HttpObjectAggregator
* Added the new shiny architecture diagram
Add benchmarks for UnpooledUnsafeNoCleanerDirectByteBuf vs UnpooledUnsafeDirectByteBuf
Initialization of PlatformDependent0 fails on Java 9
[#712] Fix parsing dates in the past bug in CookieDecoder
[#2604] Not try to use sun.misc.Cleaner when on android
Upgrade connection after completed response
Javadocs cleanup
Hide RecyclableArrayList from sub-classes
[#1851] EmptyByteBuf.isWritable(..) and isReadable(...) should not throw IndexOutOfBoundsException
HTTP/2 Child Channel reading and flushing
Remove workaround in tests for TLSv1.3 bug in Java11 as it was fixed in 11.0.1 (#8409)
Fix checkstyle
Expose a callback in HttpObjectAggregator to handle oversized messages
Remove unnessary memory copy when doing Bzip2 encoding
[#3438] Throw pre-instanced IOException on connection reset
Rename get/setDecodeResult() to get/setDecoderResult()
[#744] Port fixes from Akka to HashedWheelTimer
Do not expose @author and @version
Update pom.xml
Fix a bug where discardReadBytes() doesn't adjust markers
Ensure lazily instantiated outbound buffers are instantiated from the event loop
[#2261] Correct javadoc of ChunkedInput
[#2377] Implement epoll based DatagramChannel
Improve AttributeKey.toString()
HttpObjectDecoder ignores HTTP trailer header when empty line is receâ€¦ (#8799)
* Renamed Concurrent*Weak*HashMap to Concurrent*WeakKey*HashMap to avoid confusion
Issue #250. Implement web socket close frame status code and reason text.
Add more profiles for newer JDK versions
More precise calculate the maximum record size when using SslProvider.OPENSSL* and so decrease mem usage.
serverID -> serverId (#393 Ensure all fields follow naming convention)
Trying to avoid redundant deployment on release
Tighten up visibility
[#5088] Add annotation which marks packages/interfaces/classes as unstable
Fix for issue #456 related to payload using 2 differents RANDOM while only one should be used
Add support for ObjectSizeEstimator
Raise a meaningful exception instead of NPE
Do not auto-start read operation
Make DefaultEventExecutor usable by users.
Make all mutable fields in WebSocketClientHandshaker volatile
Documentation cleanup
Minor typo in exception message
Retrofit the codec framework with the new API (in progress)
Merge branch 'master' of github.com:netty/netty
[maven-release-plugin] prepare for next development iteration
[maven-release-plugin] prepare for next development iteration
Remove MessageList.remove(*) , MessageList.set(*) and MessageList.add(i,*)
Support long Expires dates and commas in cookie values (#96)
fixed sctp package compilation errors
Add UptimeServer and adjust UptimeClient's code style.
Use int instead of long for maxFramePayloadLength
#751 - Added support for legacy websocket v7 in order to pass SocksJS tests
Consistency between pooled/unpooled derived buffers
Update FullHttpMessage.java
HttpObjectEncoder and MessageAggregator EMPTY_BUFFER usage
Parent pom inconsistent between baselines
Verify error stack is empty after each operation when using ReferenceCountedOpenSslEngine. (#7943)
Introduce a native transport for linux using epoll ET
Ensure all pending SSL data is written before closing channel during handshake error.
Checkstyle
Some more cleanup
[#2653] Remove uncessary range checks for performance reasons
Added a Javadoc group for the container package
Fixed Javadoc generation
Small checkstyle fixes
Auto-detect Log4J2 for logging if on the class-path (#8109)
Fixed broken SCM URL in pom.xml
Remove ContinuationWebSocketFrame.aggregatedText()
Make IntObjectHashMap extend Map
Use predefined HttpResponseStatus constant instead of hardcoded 101 code
Changed SCM URLs
cleanup comments
Add support for sendmmsg(...) and so allow to write multiple DatagramPackets with one syscall. Related to [#2719]
Only enable validation of headers if original headers were validating as well.
Make methods 'static' where it missed
[maven-release-plugin] prepare release netty-4.1.4.Final
Add an example client for codec-redis
Use latest centos/redhat version to verify against when release.
Merge branch 'master' of ssh://github.com/netty/netty
[#441] Provide a better way to handle decoder failures
Add HttpStatusClass
Fix checkstyle
Allow to create a JdkSslContext from an existing JDK SSLContext. Related to [#5095] and [#4929]
Fix a memory leak in AbstractCompositeByteBufTest
Fix incorrect name validation in AbstractHttpData
codec-http2: Better keep track of nameLength in HpackDecoder.decode
Remove volatile on two fields that don't need it
Not fail the promise when a closed Channel is offered back to the ChannelPool
Restore add(Promise) and addAll(Promise...) methods to PromiseCombiner.
Tighten up visibility as the user should use Channel.new*Future
Simplify JUnit assertions
Optimize to minimize volatile reads to access next buffer in codec framework
Upgrade to netty-tcnative-1.1.33.Fork13
Use standard syntax for logging HTTP/2 stream ID.
Allow MessageAggregator to disallow non-empty content
HTTP/2 RST_STREAM in IDLE
copy all sliced buffers, fixes #1848
Support the usage of SocketOption when nio is used and the java versiâ€¦ (#8085)
[#3789] Correctly reset markers for all allocations when using PooledByteBufAllocator
Remove redundant no-arg constructors
Fix Native EPOLL Build Failure
Javadoc
Change client id validation range in codec-mqtt
Remove redundant throws clauses / Suppress inspections for some false positives
Make ChannelUp/DownstreamEventRunnable non-final / Move the classes in execution.filter to execution
[#2622] Correctly check reference count before try to work on the underlying memory
Fix class-cast exception which is a regression introduces in 256c931db20fbfaf597e501b74a34fd850c7f948
Slight rephrasing
http-proxy: attach headers to connection exception (#8824)
Backport the HttpPostRequestEncoder fixes by @igstan
[maven-release-plugin] prepare release netty-4.0.0.Alpha6
Uncomment logging in EchoClient
Corrected inconsistencies in the Javadoc.
Added `isText` to validate if a ByteBuf is compliant with the specified charset.
Improve performance of encodeHeader
Fix test failures introduced by 78d8f05c218cab107255c4dc1a1344aef138d379
InternalThreadLocalMap#stringBuilder: ensure memory overhead
Implement codec-redis
[maven-release-plugin] prepare for next development iteration
Renamed the OSGi bundle activator implementation
Limit the number of bytes to use to copy the content of a direct buffer to an Outputstream (#7813)
[maven-release-plugin] prepare release netty-4.1.18.Final
Move validation of arguments out of synchronized block
Allow to disable reference count checks on every access of the ByteBuf
Added Version.java to .gitignore because it's generated during the build
Let EventExecutorGroup extend ScheduledExecutorService as it shares quite some semantic
Fix IndexOutOfBoundsException raised by JZlibEncoder.encode()
[maven-release-plugin] prepare release netty-4.1.20.Final
Fix dependency issues with hamcrest
Fix #6969: Do not reset the states while streaming Json array
Use value types for class and type in DNS entries to make them immune to parameter order bugs
Include error code and message in GOAWAY events.
Make a member field final wherever possible
HTTP/2 Flow Controller should use Channel.isWritable()
Not fail tests when running on JDK9+ and init of MarshallingFactory fails
[#2396] Allow to set TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT in native transport
Revamp io.netty.handler.codec.socksx
[#1101] Fix NPE which accour when send a 100-continue response and using the HttpContentDecoder
Fix another buffer leaks in JsonObjectDecoderTest
Fix a NoSuchElementException when WebSocketClientHandshaker is used with HttpRequestEncoder
Remove volatile from field as its not needed.
added separate bind method in client bootstrap, to support multi homing in sctp
HexDumpProxy should log hex dump.
Fix build errors with m2e
[#1293] Fix IllegalBufferAccessException in HttpPostRequestDecoder
Correctly throw IndexOutOfBoundsException when dst.remaining() is too big.
SPDY: fixed session status (internal error misdocumented)
Validate cookie name and value characters Motivation:
[#4936] NetUtil can prevent using Netty due to SecurityManager denial
Allow a user specify the byte order of the length field for LengthFieldBasedFrameDecoder
Fix test failure in SlicedByteBuf / Add tests for built-in ByteBufProcessor impls
Simplify DefaultChannelPromise
Fix performance regression which was caused by calling the fireInboundBufferUpdated() a way to often
Fix a bug in NetUtil.createByteArrayFromIpAddressString()
Moved sctp transport classes from io.netty.channel.socket.sctp to it's own subpackage io.netty.channel.sctp
Fix another buffer leak in BinaryMemcacheDecoderTest
[#2572] Correctly calculate length of output buffer before inflate to fix IndexOutOfBoundException
Optimize derived buffers' forEachByte(...) implementation
Replace usage of System.currentTimeMillis() with System.nanoTime()
Check if message is supported before cast. See #678
Remove unused imports
Add the URL of the wiki for easier troubleshooting
Use ByteBufAllocator used by the ReferenceCountedOpenSslEngine when build key-material. (#7952)
Add port to Origin HTTP Header if the port is non default (80/443). See
Share code between ReadTimeoutHandler and IdleStateHandler
* More compact distribution files
Enable configuring available processors
Made the documentation in HttpMessage a bit easier to understand
Just tiny optimization to avoid object creation
Improved Client/ServerBootstrapTest to run with both oio and nio socket transport
Use build-helper-maven-plugin instead of messy hack
Share code between Heap ByteBuf implementations
Preparing to release Netty 3.1.0.CR1
Port HttpContentEncoder/Decoder to use EmbeddedStreamChannel / Cleanup
Add test for correctly handling SSLSessionBindingEvent when acting on thâ€¦ (#8649)
Fix overly-strong type casts
Use a forked exec-maven-plugin instead of maven-antrun-plugin
Fix NPE in OioByteStreamChannel
Fix possible JavaDoc error in QueryStringEncoder. Type mismatch. See
Fix buffer leak in test which was introduced while implement ZLIB_OR_NONE support. Related to [#2269]
[#4327] Ensure toString() will not throw IllegalReferenceCountException
Allow to get existing ChannelOption / AttributeKey from String
Fix inefficient loop in QueryStringDecoder.decodeComponent()
Use InetSocketAddress.getHostName() instead of getHostString()
[maven-release-plugin] prepare release netty-4.0.0.CR3
Refactor integration tests of compression codecs
HTTP to HTTP/2 translation errors (round 2)
Run the WebSocketClientHandshaker08Test on the 08 implementation (#7974)
Ensure we always encode all data in JdkZlibEncoder. (#8305)
PlatformDependent#getClassLoader fails in restrictive classloader environment
[#1297] Make sure ResourceLeakDetector.open(...) is only used after constructing was successful
Remove duplicate range check in AbstractByteBuf.skipBytes()
Faster memory copy between direct buffer and byte array
ByteString introduced as AsciiString super class
No need to use NioSocketChannel.class directly
[#1728] Recycle list after done with it in ReplayingDecoder/ByteToMessageDecoder channelInactive(..)
Fix a build problem with all-in-one module
SPDY example app
Fix checkstyle
[#4386] ByteToMessage.decodeLast(...) should not call decode(...) if buffer is empty.
HTTP/2 DefaultHttp2RemoteFlowController Stream writability notification broken
Fix visibility warnings from the inspector.
Remove content-length header leniency
Use system property to detect if root is running the program
Fix InternalAttribute.equals
Leak detection combined with composite buffers results in incorrectly handled writerIndex when calling ByteBufUtil.writeAscii/writeUtf8 (#8153)
Fix API documentation on the usage of AttributeKey
Update to netty-tcnative 2.0.9.Final which fixes a memory leak (#8026)
Trivial javadoc fixes in ChannelHandlerContext
Remove old internal code that is not used anymore after removing usage of ObjectCleaner (#8956)
Ensure tests pass when sun.misc.Unsafe is not present
Fix AbstractDiskHttpData int conversion from long
server handler wasn't working due to field being overwritten in subclass
Merge pull request #465 from izstas/master
Additional configuration for leak detection
SPDY Protocol HTTP Layer. See #184
Fix typo for max leak records system property
Use the correct alert depending on the CertificateException when using OpenSslEngine
Return correct type on retain(..)
Finish support of NIO UDP multicast. This also change the methods to
Reduce array allocations during CompositeByteBuf construction
Rewrite misleading Note in FingerprintTrustManagerFactory javadoc
Make DefaultFutureListeners package private
Add generic versions of PromiseAggregator and PromiseNotifier.
HTTP2: Close encoder and decoder on channelInactive and initialize clientPrefaceString on handlerAdded.
StringUtil not closing Formatter
Fix incoherence in WebSocket example
Add support for 'charset' property for multipart boundaries
HttpObjectEncoder buffer size estimation
Make DnsAddressResolverGroup easier to extend
Set the Transfer-Encoding header instead of adding
Provide an optimized AtomicIntegerFieldUpdater, AtomicLongFieldUpdater and AtomicReferenceFieldUpdater
ID -> Id (#393 Ensure all fields follow our naming convention)
Fix typo in FingerprintTrustManagerFactory docs
Update to netty-tcnative 2.0.12.Final (#8073)
Update to netty-tcnative 2.0.0.Beta2
Update netty-build to the latest version
Remove duplicated declaration of dependency
Trim optional white space in CombinedHttpHeaders values
[maven-release-plugin] rollback the release of netty-4.0.14.Final
[#1535] Remove Channel.id() and so fix the possible leakage of the previous used Channel id map
Improve performance of HttpRequestEncoder.encodeInitialLine(...)
[#1294] Make sure ByteBuf is released once written to channel
Replaced obsolete cryptographic primitive with a modern/secure one. (#8450)
[#1385] Fix NPE which was triggered if a write was executed but the HeadHandler not init yet
Move the methods that's only used by DefaultChannelPipeline to DefaultChannelPipeline
Adding ability to start spdy server/client using maven.
NetUtil IPv6 bugs related to IPv4 and compression
Update jUnit version to 4.12
[maven-release-plugin] prepare release netty-4.1.0.CR5
Fixed compilation error resulted by the recent dependency upgrade
Use LinkedTransferQueue for OMATPE
[#803] Make sure the right EventExecutor is used after re-register a Channel to another EventLoop
Add a constant for Cookie "undefined maxAge"
ChannelInitializer: change propagation of channelRegistered event
Update NetUtilBenchmark (#7826)
[maven-release-plugin] prepare for next development iteration
OioWorker failed to fire channelConnected event for OioAcceptedSocketChannel which is fixed now. This also fix a race which can could lead to missing events. See #287
Make UnpooledDirectByteBuf, UnpooledHeapByteBuf and UnpooledUnsafeDirectByteBuf constructors public.
Reset markers when obtain PooledByteBuf.
Check for latest centos release version when doing a release
Only call System.nanoTime() if no read batch is ongoing. Related to [#3808]
Fix a test failure in DnsQueryTest
Cleanup Log4J2Logger (#8245)
[#973] Use static IdleStateEvents to reduce GC pressure
[#1657] Log content of ByteBufHolder
SPDY: allow subclassing of SpdyFrameCodec
Use MessageBuf instead of Queue wherever possible in channel API
Add java-doc for implemented methods of io.netty.util.concurrent.Future#cancel(boolean mayInterruptIfRunning)
Fix checkstyle
Fix SctpMessage.duplicate() behavior
started to write the second chapter finally
OpenSslEngine writePlaintextData WANT_READ with no data in BIO buffer
Ignore ipv6 multicast test that was added in 778ff2057eb5e585097155ab9b23a3813e57d5cd for now
[maven-release-plugin] prepare release netty-4.1.31.Final
Correctly include all modules during build
Use SystemPropertyUtil to access system properties
Retrofit the NIO transport with the new API / improve the new API
Correctly detect if KeyManagerFactory is supported by OpenSSL even when sun.security.x509.* can not be accessed and bouncycastle is not on the classpath. (#8415)
Ensure to release the component when it's removed from CompositeByteBuf / Add tests for reference counting of CompositeByteBuf
Using distinct aliases when building the trust manager factory, and renamed trustCertChain into trustCertCollection.
Add ChannelMetadata and remove unnecessary disconnect() impls
Revert "Returns after encoding each message not do check following instance types"
Correct comment for allowMaskMismatch parameter
Motivation: Sonar points out an equals comparison, where the types compared are different and don't share any common parent http://clinker.netty.io/sonar/drilldown/issues/io.netty:netty-parent:master?severity=CRITICAL#
Add full JdkSslContext public constructor, close #8384 (#8389)
Add tests for HttpObjectDecoder related to limits
Fixed a compilation error in the example
CompositeByteBuf optimizations and new addFlattenedComponents method (#8939)
Added comments to XML files
Update license header / Remove JBoss style
Add CharSequence operations to ByteBuf
Simplify if
Fix checkstyle errors
Remove code duplication
remove some dead code
Add EventLoop implementation for the local transport
Respect ctx.read() calls while processing reads for the child channels when using the Http2MultiplexCodec. (#8617)
Redid documentation for WebSocketUtil
Adjust Content-Length header when encoding Full Responses
Add ZLIB_OR_NONE support to JdkZlibDecoder [#2016]
NIO/EPOLL readPending set to false incorrectly
No need to make CaseIgnoringComparator public
Disable IPv6 address lookups when -Djava.net.preferIPv4Stack=true
[#5718] Result of ByteBufUtil.compare(ByteBuf a, ByteBuf b) is dependent on ByteOrder of supplied ByteBufs
Fix resource leaks in ByteArrayEncoderTest
[##1064] Fix problem where the LastHttpContent was changed to HttpContent and so the end was never detected
Catch exceptions from PlatformDependent#getSystemClassLoader
Fix more inspection warnings + compilation errors
Removed PMD and Cobertura plugin from the pom.xml - IDE will take care of them
Correctly fix problem in ByteToMessageDecoder and ReplayingDecoder which could let to have a released buffer passed to the decode methods.
Improvement: simplified AbstractConstant compareTo.
[#4794] Support window size flag by default if ZlibCodecFactory supports it.
Add and correct javadocs
Prefer "str".equals(var) to var.equals("str") / Add proper null checks
Cipher suite conversion between Java and OpenSSL
[#5882] Ensure we even process tasks if processing of ready channels throws an Exception in event loop.
Update to netty-tcnative 2.0.14 which does correctly handle shading (#8218)
Reduce http2 buffer slicing (#8598)
Implemented FastLZ compression codec
Moved WriteMessageQueue to the util package
Allow to set max capacity for task queue for EventExecutors and EventLoops
SPDY: remove deprecated data compressed flag
[maven-release-plugin] prepare for next development iteration
[maven-release-plugin] prepare release netty-3.2.0.ALPHA3
Fix the error message in ReferenceCounted.release (#7921)
[#1222] Correctly handle the case when a MessageToMessageEncoder encodes to ByteBuf and the next outbound buffer is of type ByteBuf
Use jndi-dns to obtain default name servers
Cleanup transport-native-epoll code.
Some javadocs fixed to remove dead links
Add OpenSslX509KeyManagerFactory which makes it even easier for peoplâ€¦ (#8084)
Make Http2StreamFrameToHttpObjectCodec truly @Sharable (#8482)
typo: Skelton
codec-memcache: removed println in test case.
[#624] Add varargs constructor to MessageToByteEncoder, MessageToMessage(Encoder|Decoder|Codec) to implement default isEncodable/isDecodable()
Ensure we only add OpenSslEngine to the OpenSslEngineMap when handshake is started
HttpObjectDecoder configurable initial buffer size
Add ChannelConfig.maxMessagesPerRead and ChannelOption.MAX_MESSAGES_PER_READ
[#1293] Fix handling of chunked requests in HttpPostRequestEncoder and the multipart examples
Fix an inspector warning in JsonObjectDecoder
[#1442] Make sure closing the channel will not cause an UnsupportedOperationException
Disable SSLv3 to avoid POODLE vulnerability
EpollRecvByteAllocatorHandle doesn't inform delegate of more data
Mark IdleStateEvent as final and add javadocs
Simplified EventLoop implementation names
Adding client auth to SslContextBuilder
export sun security packages as optional
Fix a bug in shutdownOutput() implementations where wrong ChannelFuture is notified
Reorder PlatformDependent.isRoot() check
1)implemented sctp socket options 2)refactored SctpChannel,SctpServerChannel & sctp factory impls
Remove id from DnsQueryContextManager whenever the promise is fullfilled.
Some javadocs
Let ChannelPromiseAggregator take a vararg of ChannelPromises and rename method
SslContext to support TLS/SSL protocols
Throw a special SSLException if a non SSL/TLS record was detected. See #437
Add supported for X509ExtendedTrustManager when using OpenSslEngine
HTTP/2 codec missing from all/pom.xml
Slip in DefaultOioSocketChannelConfig (setAllowHalfClosure used to ignore argument)
Exclude com.sun.nio.* from the generated jar
[#4755] Make WebSocketClientCompressionHandler @Sharable
[#986] DefaultChannelHandlerContext.fireUserEventTriggered(...) uses correct ChannelHandlerContext now
corrected sctp channel exception messages
Add ByteBuf.Unsafe.discardSomeReadBytes() to reduce discardReadBytes()
Fix NPE that was encounter by debugger (will never happen in real code). (#8992)
cleanup: fix indent (#8734)
Fix compilation errors
Use ByteProcessor.FIND_LF to find end of line
Prettify APIviz / Tighten visibility / Move subclasses to top level / Remove unused UnknownSocksMessage
Stop ThreadLocalRandom's initial seed generation immediately on interruption
Use StringUtil.simpleClassName(..) instead of Class.getSimpleName() where necessary
[#1358] Fix Encoding of multipart attribute names and filenames for non ASCII  chars
use checkPositive/checkPositiveOrZero (#8803)
StreamID -> StreamId (#393 Ensure all fields follow naming convention)
Moved SwitchableInputStream and its test class to org.jboss.netty.handler.codec.serialization because it's used only there.
Add @SafeVarargs to PromiseAggregator#add and PromiseNotifier#(...) https://github.com/netty/netty/issues/3147
NoClassDefFoundError on Android platform when try to use DefaultDnsServerAddressStreamProvider. (#8656)
Fix a bug in suspend read. See #71
Have Http2LocalFlowController.consumeBytes indicate whether a WINDOW_UPDATE was written
Not try to compresses HttpMessage if IDENTITY header value is set.
fix #1234 - duplicate package-info.java errors in eclipse requires release of netty-build v 19 and netty-parent update.
Added UDP multicast (with caveats: no ipv6, getInterface, getNetworkIâ€¦ (#9006)
Copy the Javadoc resources
Move the testsuite classes back to src/test
Rewrite HTTP encoder to use gathering writes
Do not enforce arbitrary max header list size in HpackEncoder (#7853)
DnsNameResolver.resolve*(...) never notifies the Future when empty hostname is used.
[#5174] Expose Bootstrap getter methods and add some additional ones
Eclipse SPDY docs moved
HttpResponseStatus reasonPhrase equals usage
Improvement : allocate less object during multipart form parsing.
Use bitwise operation when sampling for resource leak detection.
issues/4909 - Adding paxexam version
Update release options
Fix type in class name
Call setHandshakeComplete() before the handler replacement (#332)
Http2ConnectionDecoder remove localSettings setter method
Reduce the number of unnecessary Selector.wakeup() / Fix a bug where channelReadSuspended() generates garbage
small performance fixes : unnecessary unboxing operations removed
Fix setBytes on read-only ByteBuffer
[#1507] Fix buffer leak in WebSocket08FrameDecoder
Renamed org.jboss.netty.internal.ChannelFactoryResources to org.jboss.netty.internal.ResourceFactory
Add a EventLoopGroup.register(ChannelPromise)
Move some logic from DefaultChannelPipeline to DefaultChannelHandlerContext
Do not send duplicate DNS queries when the same query is in progress already
Expose Helper to obtain the "best" mac address.
Added the second chapter to the master
Implement the local transport
Increase test timeout (#8385)
ce6931e0e51096c5b6f1fc23ac939fb95ee70bc1 buffer leak in EpollSocketChannelTest
More correct fix for using ChannelInitializer with custom EventExecutor. (#8633)
Enforce the release is performed only from RHEL 6.5 or equivalent
Add DomainNameMapping.entries to allow retrieving the domain match lists
Finished writing the chapter 2
[maven-release-plugin] prepare for next development iteration
[maven-release-plugin] prepare for next development iteration
Enforce sane upper limit for TTL in DefaultDnsCache. (#7907)
Remove unnecessary this, parenthesis, and semicolons
Renamed TimingTestUtil to TestOptions
Fix checkstyle errors
Ignore NetworkChannel class. See #396
Add ChannelMetadata and remove unnecessary disconnect() impls
Remove the condition which is always true when reached
More brief somaxconn logging
Add missing license headers
Fix some inspector warnings
Same fix than other for correct import
Refactor sctp to share code with nio
Access autoRead via an AtomicIntegerFieldUpdater.
Carefully manage Keep-Alive connections in HttpStaticFileServer (#8914)
Add more tests to EmptyByteBufTest
* Added 'State Management' chapter (just a placeholder for now)
[maven-release-plugin] prepare for next development iteration
More logging
Fix an infinite exception storm triggered by DefaultChannelHandlerContext.invokeInboundBufferUpdated()
Always return SliceByteBuf on slice(...) to eliminate possible leak
[maven-release-plugin] prepare release netty-4.0.0.CR7
Fix the leak in the WebSocketClientProtocolHandshakeHandler
[#661] WebSocketClientHandshaker is broken.
fix #360, add check for empty buffer; also add unit test for this scenario
Fix #405: CookieEncoder should refuse to encode more than one cookie
Fix AppendableCharSequence.subSequence(...) where start == end. (#8798)
Fix context and window sizes sides. (#8395)
Set default CONTENT_TYPE when it is absent in multipart request body
Allow to use EmbeddedChannel.schedule*(...)
Relates issue: NETTY-80 Compression codec
HttpObjectAggregator doesn't check content-length header
Fix a compilation error with the SCTP module in Mac
Fixed issue: NETTY-371 OSGi Manifest requires Bundle-BuddyPolicy for
Fixed indentation
Not log notify failure for DelegatingChannelPromiseNotifier when promise is VoidChannelPromise
[#1865] Only use internalNioBuffer when one of the read* or write* methods are used. This is neccessary to prevent races as those can happen when a slice or duplicate is shared between different Channels
HttpObjectDecoder performance improvements
Prevent NPE from StringUtil.simpleName(..)
Only use Mockito for mocking.
Fixed issue: NETTY-33 (CompositeChannelBuffer.copy() does not respect the byte order.)
[#3652] Improve performance of StringUtil.simpleClassName()
Remove unsafe char[] access in PlatformDependent
HTTP/2 Example Needs FullHttpRequest
Metrics exposed by PooledByteBufAllocator needs to be correctly synchronized
Cleanup SSL test. (#8301)
Move all the microbenchmark code into one directory.
Removed custom split method as it is not effective anymore.
Overall refactoring of the STOMP codec
Make HttpRequest's documentation easier to read
Fix #239: IdleStateHandler starts two timers
Related issue: NETTY-240 Upgrade the dependencies to the latest versions
Make sure ChannelFutureListeners are invoked from an event loop thread
ChannelBuffers -> ByteBufs / Add MessageBuf & ChannelBuf
Fix StompSubframeEncoderTest failure
Update to netty-tcnative 2.0.10.Final as 2.0.9.Final did not contain all native libs for boringssl. (#8031)
Another rephrasing
AbstractNioWorker -> SelectorEventLoop
Fix checkstyle
Change Http2Settings to use char keys.
[#1369] Move ImmediateEventExecutor to common and let it access via a static public field
Add maven profile to run tests with -Dio.netty.noUnsafe=true
update pom due to alpn provided
InternalThreadLocalMap.arrayList should create a reusable ArrayList only if arrayList field is NULL.
Provide a way to implement an ChannelInbound/OutboundMessageHandler conveniently without extending an adapter class
Add javadocs to methods that user may override and make the others final
Revert "CorsHandler to respect http connection (keep-alive) header."
AbstractByteBuf readSlice bound check bug
Add proper boundary / freeness check on ByteBuf impls
Simplify two-args message formatter in LoggingHandler
Add TODO
HTTP/2 enforce HTTP message flow
[#4041] Added sessionPresent to MqttConnAckVariableHeader
Upgrade commons-compress to 2.0.18 (#8416)
Added a skeletal docbook generation
Support SSL_ prefixed cipher suites in addition to TLS_ prefixed ones.
Zlib decoder calls reduction and index fix
Notify http2 error handler before closeStreamLocal on HEADERS write failure (#8332)
Don't check accessible in the #capacity method (#7830)
Merge ChannelInboundConsumingHandler into SimpleChannelInboundHandler
Fix javadoc links and tags
Add regression tests for FullMemcacheMessageRequest and FullMemcacheMessageResponse
[#1212] Fire handshake status events to notify the user about handshake states
Add headers to MqttMessage returned by MqttDecoder in case of DecoderException (#8219)
Throw NoSuchBufferException instead of returning null
Make sure SslHandler also works if SslBufferPool use non heap ByteBuffers. See #329
Use I/O buffer whenever possible now that our direct buffers are as fast as heap buffers
Remove DocBook from build
Fix resource leaks in StompSubframeAggregatorTest
[#787] Move the socks package to the right place
Port SSL echo test
Skip empty buffers and not pass these to BIO_write
Update links from code.google.com to github.com
Document the correct default value of SOMAXCONN
Add javadocs and some small cleanups
[#3373] Rename class to match naming scheme
EmptyByteBuf allows writing ByteBufs with 0 readable bytes
Forgot to commit 
Prevent unnecessary allocations in the `StringUtil#escapeCsv`
Build all-in-one JAR on non-fullbuild.
Throw exceptions outside the native code
Remove in favor of IOStreamChannelFactory
[maven-release-plugin] rollback the release of netty-4.0.0.Beta1
Cleanup
Remove redundant 'else' branches.
Determine CompositeByteBuf implementation by using ByteBufAllocator
Better exception message
Fix assertion error when closing / shutdown native channel and SO_LINGER is set.
Ensure examples are runnable in the ide
Fires -> Sends
* Added ConcurrentReferenceHashMap (will be used to implement NETTY-85 Global Channel registry)
Remove Channel(Inbound|Outbound)HandlerAdapter which does nothing
Ensure Netty is usable on Java7
Accept over 2^31-1 MAX_HEADER_LIST_SIZE
Add SniCompletionEvent which allows to easily retrieve the hostname that was used to select the SslContext.
@Deprecate a method as it's not needed anymore
Prevent NPE when attempting to set client key material with no alias (#8378)
Adding basic benchmarks for IntObjectHashMap
[#3654] Synchronize on PoolSubpage head when allocate / free PoolSubpages
[#1273] Fix resource leaks in test
Http/2 Priority on CLOSED stream
Ignore frames for streams that may have previously existed.
Remove direct usage of JKS and SunX509
Reduce the memory requirement of heap dump compression
[#1369] Move ImmediateEventExecutor to common and let it access via a static
Validate MQTT CONNECT reserved flag in variable header
Do not use String.format() for log message generation
fix the discardedBytes counting on LineBasedFrameDecoder
Revert "[#5028] Fix re-entrance issue with channelWritabilityChanged(...) and write(...)"
Fixed bug where subprotocol not sent by client
[maven-release-plugin] prepare for next development iteration
Use the release version rather than the snapshot version when tagging
Split ByteBuf.forEachByte() into forEachByte() and forEachByteDesc()
Fix checkstyle
Renamed introduction to getting started
Allow specifying `SelectorProvider` when constructing an NIO channel #2311
Use less memory during writes when using SslHandler with SslProvider.OpenSsl
Update the version to 4.1.0.Alpha1-SNAPSHOT
Escape a colon in protocol names
Multiple optimizations in the HttpObjectDecoder
SniHandler reference count leak if pipeline replace fails
Fix all-in-one JAR artifactId
ChannelConfig operations should wrap ClosedChannelException if Channel was closed before.
Update jetty-alpn-agent version
disabling leak detection micro benchmark
Fix a NoSuchElementException when WebSocketClientHandshaker is used with HttpRequestEncoder. This time for real
Fix code styles on MQTT codec classes
Fix buffer leaks in BinaryMemcacheEncoderTest
Fix the incorrect snapshot version number
Small performance improvements
Ensure cascaded derivation of a buffer does not result in an infinitely nested buffer.
Take the architecture into account when loading netty-tcnative
[maven-release-plugin] prepare release netty-4.1.2.Final
Fixed NETTY-263 (Build fails with unzipped distribution)
Introduced MqttMessageBuilders to fluently create MQTT messages
Fixing CorsHandler response Content-Length
DefaultHeaders / CharSequenceValueConverter should treat boolean consistently.
Move calculateNewCapacity(...) to ByteBufAllocator
Mark ChannelHandlerAdapter.exceptionCaught(...) as @deprecated. (#8826)
Mark flaky test as @Ignore (#9010)
Add support for splice(...)
Fix types in javadocs
Ported multicast test / Fixed bugs in NioDatagramChannelConfig 
Use MACOSX_DEPLOYMENT_TARGET=10.6 when compile native transport on MacOS (#8379)
Remove condition in ChannelHandlerAdapter.isSharable() by caching the result of the annotation lookup.
Move non socket specific stuff out of the socket package
PlatformDependent0 should be able to better detect if unaligned access is supported on java9 and later. (#8255)
[#441] Provide a better way to handle decoder failures
Http2FrameCodecTest increase timeout
[maven-release-plugin] prepare release netty-4.0.0.Beta3
Replace internal class usage to make it compile on java9. This was missed in f332a00.
[#3896] Unpooled.copiedBuffer(ByteBuffer) and copiedBuffer(ByteBuffer...) is not thread-safe.
Correctly format cookies. This fix some bug which lead to expiring of cookies to not work. See #426
Fix a problem with M2E plugin
Reduce memory usage of SslHandler when OpenSslEngine is in use
[maven-release-plugin] prepare release netty-4.0.0.CR2
Introduce a new ChannelOption called DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION. Related to [#1830]
Fix NPE while decoding authority section of a DNS response
Update the Javadoc of ChannelHandler and ChannelHandlerContext
Add support for ALPN when using openssl + NPN client mode and support for CipherSuiteFilter
Split a JSON byte stream into JSON objects/arrays. Fixes #2536
[#1798] Correctly handle skipping of too big frames
Fix various Javadoc issues / Do not use argN parameter names
Added org.jboss.netty.util.Version for easier runtime version identification
Fix a build error related with NPN version and JDK8
Fix a typo in ObjectEchoClientHandler
Use the recommended maven-release-plugin version
HTTP/2 Warnings Cleanup
Checkstyle
[maven-release-plugin] prepare release netty-3.0.0.CR1
FileDescriptor writev core dump
Ported the HTTP snoop example to the new API
[maven-release-plugin] prepare for next development iteration
Mark ChannelHandler.exceptionCaught(...) as deprecated in preparation to move to ChannelInboundHandler. Related to [#1808]
Remove special handling of Object[] in codec framework (a.k.a unfolding)
More efficiently allocate header buffer.
Reduce the execution time of maven-antrun-plugin
Ensure we not sent duplicate certificates when using OpenSslEngine
Merge seda implementation with "generic" Executor. See #111
Allow to use WebSocketClientHandshaker and WebSocketServerHandshaker with HttpResponse / HttpRequest
Improve the API design of Http2OrHttpChooser and SpdyOrHttpChooser
Revert "[maven-release-plugin] prepare release netty-4.0.0.Alpha6"
[maven-release-plugin] prepare release netty-4.1.32.Final
Issue #222. Remove WebSocketHttpResponseDecoder hack.
Log the correct line-number when using SLF4j with netty if possible. (#8258)
Rename ByteBufUtil to BufUtil and move ChannelHandlerUtil.freeMessage() there / Remove ChannelHandlerUtil
[#1976] Fix IndexOutOfBoundsException when calling CompositeByteBuf.discardReadComponents()
Cleanup code and so eliminate warnings.
Updated the ChannelGroup JavaDoc by removing b.releaseExternalResources();
Fixing logging of ping acks in Http2OutboundFrameLogger
Removing a SeekAheadNoBackArrayException to avoid exception handling
HttpServerKeepAliveHandler 204 response with no Content-Length should keepalive
Ensure 'mvn clean' removes the src directory
forgot 1 more change
Merge pull request #490 from jfallows/master
[maven-release-plugin] prepare for next development iteration
[#2525] Use VoidChannelPromise in MessageToMessageEncoder when possible
[#2605] Use SO_REUSEADDR on EpollServerSocketChannel to match defaults of java.nio.ServerSocketChannel impl
Jetty ALNPN and NPN updates plus backport
Add isDecodable/isEncodable() to codecs to support stacked codecs
Relicensed to Apache License v2
[maven-release-plugin] prepare for next development iteration
Fix the failing HttpObjectAggregatorTest.testInvalidConstructorUsage()
[#1131] Codecs must not cache next buffer during processing
codec-memcache: prefix abstract classes with Abstract.
Fixing 2 typos in codec documentation.
various errorprone fixes.
Update conscrypt to 1.1.3 which fixes some NPEs during tests when using conscrypt. (#8001)
Fixes #3362 (Possible wrong behavior in `HttpResponseDecoder`/`HttpRequestDecoder` for large header/initline/content)
Fix a build failure due to a dependency problem / Fix checkstyle errors
Fix build errors and warnings
[#1390] Make sure RxtxChannel does not block forever when reading
Motivation:
Add RxtxChannelConfig and tighten up visibility. Also support method chaining
Enforce writeSpinCount to limit resource consumption per socket (#7478)
Wrote another section of the second chapter
Upgrade to netty-tcnative-1.1.33.Fork16
1)refactored sctp server channel config 2)removed unsupported sctp socket options
Make #211 work with Java 5
Allow customization of LocalChannel instances that are being created by LocalServerChannel.
Fix a bug where HttpObjectDecoder produces LastHttpContent after entering BAD_MESSAGE state
DNS Resovler tests should be more explicit about ndots
[#486] Make NoSuchBufferException give more useful message.
Added SCTP Codec Handlers + minor refactoring
Centralize internal reference counting logic (#8614)
Fix broken tests
Fix memory leak in UnpooledTest
Support IPv4 default route in ipfilter.
Initial STOMP protocol work from @sskachkov
[maven-release-plugin] prepare release netty-4.1.3.Final
[#5171] Ensure NioDatagramChannelConfig can be instanced on android
[maven-release-plugin] prepare for next development iteration
* Added alternative implementations of ConcurrentHashMap and replaced existing references to java.util.concurrent.ConcurrentHashMap with them
We need to set the exception on each MessageEvent. See #293
Optimize Hpack and AsciiString hashcode and equals (#8902)
HttpServerUpgradeHandler shouldn't wait for flush to reshape pipeline
Remove unnecessary parameters and fields / Clean-up
[#2254] Correctly handle Channel.read() and ChannelHandlerContext.read()
XmlFrameDecoder is corrupt
Fix UDP Multicast writes. See #237
Fix spelling in javadocs and field name.
Typo
Fix possible ByteBuf leak when CompositeByteBuf is resized (#8946)
A little bit of rephrasing
Fixing exception in StreamBufferingEncoderTest.
Revamp InboundHttp2ToHttpAdapter builder API
[#5218] Zero out private key copied to ByteBuf before release.
[maven-release-plugin] prepare for next development iteration
Organized imports.
de-duplicate plugin versions
Fix all leaks reported during tests
Handle the possibility of HTTP/0.9 with a better error message
Correctly handle multiple calls to DefaultHttp2StreamChannel.Unsafe.close(...)
DnsNameResolver: makes possible to define additional records in DNS query
Cleanup : outdated code removed and unnecessary static section and variables
[#1709] Correctly detect that Unsafe.copyMemory is missing
Implement connect timeout
Allow to specify a custom EventExecutorChooserFactory. Related to [#1230]
Upgrade to netty-build-15 to fix build issues
Fix infinity loop and timing issues
EventLoop.schedule with big delay fails (#7402)
Add PooledByteBufAllocator + microbenchmark module
Ensure backward-compability with 4.0
AsciiString optimized hashCode
Introduce DnsCache API + DnsResolver extensibility
Travis CI configuration
Optimize HPACK usage to align more with Netty types and remove heavy object creations. Related to [#3597]
[maven-release-plugin] prepare for next development iteration
Removed the license files for unused dependencies
Upgrade to netty-tcnative 1.1.30.Fork2 to support Windows
Remove confusing ChannelState/OperationHandlerAdapter.inboundBufferUpdated/flush() implementation
Move io.netty.logging to io.netty.internal / Move Signal out of internal because we use it in Channel*MessageAdapters
Use 'x' over "x" wherever possible / String.equals("") -> isEmpty()
Cache underlying ByteBuffers and count in ChannelOutboundBuffer.Entry to reduce object creation and so GC pressure
Remove codec-snappy from the module list
Replace UniqueName with Constant and ConstantPool
Added Main-Class property to the manifest for easier version check
[#1711] Allow to use ChannelOption for set / get MessageSizeEstimator
fix SpdyHttpDecoder
Retested Websockets with Autobahn v0.4.10.
Make jzlib dependency avaible in example for zlib
* Updated to the latest version of jdocbook plugin and jbossorg styles
Allow per-write promises and disallow promises on flush()
Improve flexibility of EmbeddedChannel ID
Fix typo
Fix buffer leaks in BinaryMemcacheDecoderTest
deprecate own ConcurrentSet for removal (#8340)
Reduce exception instantiation overhead in SslHandler / Reduce unnecessary empty array creation
Use correct generics for TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT in EpollChannelOption. Part of [#2396]
Use (fromIndex, toIndex) instead of (index, length) for ByteBuf.forEachByte(...)
Fix failing tests
Use the length of MAC address as the last property to compare to get the best MAC address
Upgrade netty-build to 12
Fix HttpHeaderValues.IDENTITY equals usage
Fix compiler warning
Remove unnecessary trailing newline
minor gc optimization: better DefaultSpdyHeaders.iterator()
[maven-release-plugin] prepare for next development iteration
Fix unbalanced quotes in Bundle-NativeCode manifest header
Modernize InternalLogger API and enable logging framework autodetection
Let SniHandler accept Mapping as well as DominaNameMapping
Add a HttpPostRequestDecoder.destory() method which should be used to destroy the decoder and free up resources
Fix HttpPostMultipartRequestDecoder.splitMultipartHeader() String index out of range: -1 with empty header
Fix variable name
Add profile to easily run testsuite against netty-tcnative-boringssl-static (#8436)
Correctly release all buffers in UnpooledTest
Update twitter hpack version
Fix naming of class. Thanks Trustin for review
[maven-release-plugin] prepare release netty-4.0.8.Final
Update jetty-alpn-agent to support latest JDK releases.
Refactor of HttpUtil and HttpHeaderUtil
Add a replace(..) method to FrameDecoder and also to ReplayDecoder as it now extend FrameDecoder. This also fix #332
Add an OpenSslEngine and the universal API for enabling SSL
Not force to run autoconf and compile multiple times
Use 198.51.100.254 as BAD_HOST for tests.
Skip tests that use KeyManagerFactory if not supported by OpenSSL version / flavor (#8662)
Updated the getting started guide which is simpler thanks to the recent changes in SimpleChannelHandler
Add javadocs and also some parameter checks in DefaultFileRegion
Require RHEL/CentOS 6.7 for releasing Netty
Simplify DefaultChannelPipeline
Remove unnecessary logging handler - ByteLoggingHandler and MessageLoggingHandler / Extensible log message formatiing
Added container support for OioDatagramChannelFactory
ByteBufUtil#decodeHexDump
Improve DateFormatter parsing performance (#8821)
Add a reusable ArrayList to InternalThreadLocalMap
[#902] Remove usage of generics for output of Encoder/Decoder to make them more flexible again
[maven-release-plugin] prepare for next development iteration
Make NoSuchBufferException message more useful
Deprecate Bootstrap.shutdown() and use EventLoopGroup.shutdown() wherever possible
Add -verbose:gc option for test runs
Add static modifier where static member is just enough.
Update tcnative package names
Next round of javadocs cleanup and fixes. Also limit the visibility of FailedChannelFuture
Rename HTTP snoop example classes for disambiguation
[#677] Overhaul HTTP codec
Upgraded to APIviz 1.2.0.GA
[#847] Let CompressionException extend CodecException
Update DatagramPacket.recipient() to return the actual destination IP (#7879)
DefaultDnsCache should store more then one Entry per hostname. (#7906)
Fix NPE problems
[#5553] SimpleChannelPool#notifyConnect() may leak Channels
Fix a bug where AbstractByteBuf.order() doesn't return a swapped buffer if capacity is 0.
Remove unused classes in util.internal
DefaultDnsCache should expire all records per hostname when one TTL is reached.
No need to check instanceof everytime to find the next inbound / outbound context
Change arena to thread cache mapping algorithm to be closer to ideal.
Adding an execute burst cost benchmark for Netty executors (#8594)
Fix m2e errors in Eclipse
* Renamed HttpCookie to Cookie
Fix a regression where writing a ByteBuf are discarded
MQTT unknown message type isn't handled as decoding error
Allow to set the context for which sessions can be used.
Port the changes in SpdyHeaderBlockZlibEncoder to master & 4.0
added cookie v1 and v2 decoding support
Remove unnecessary null check before equals()
Add KDevelop project files to the gitignore file
Synchronized between 4.1 and master again (part 2)
Resolver package is unstable
Make JCtools available (provided scope) for tests and optional OSGI, issue #5383
Use supertype HttpObject instead of HttpMessage + HttpChunk where possible
[#3784] Support hostname verification when using OpenSSLEngine
Share some code, related to [#1707]]
Send full response for unsupported websocket versions
Fix handling of non direct backed PemEncoded.
Merge pull request #155 from jrask/android_unsafe_fix
[maven-release-plugin] prepare for next development iteration
Allow to change epoll mode
Introduce the JdkChannel interface and implementation. This will allow
Do not eagerly initialize the logger factory
Implement reference counting
[#977] Stop processing messages/bytes in a loop when the handler was removed from the ChannelPipeline
Cleanup : for loops for arrays to make code easier to read and removed unnecessary toLowerCase()
Make codec-dns can support build a dns server, reply answer from client.
Fix checkstyle violations / Renaming RXTX -> Rxtx
[#2090] Correctly format DefaultHttpRequest#toString()
Throw a PrematureChannelClosureException if the channel was closed before all responses were received for the sent requests. See #256
Fix a problem where source jar is not attached
Minimize buffer allocation as it is expensive if no pooled buffers are used
Get the executor of the context earlier if possible.
Replace usage of QueueFactory with ConcurrentLinkedQueue and LinkedBlockingQueue. See #477
Implement OpenSSL Engine tests for NPN / ALPN.
Use the index-based AsciiString constructor instead of substring()
Apply appropriate methods for writing CharSequence into ByteBuf
Simpler toString() for ByteBufAllocators
Adjust ChannelPipeline to support method-chaining in a consistent way
Add microbench to the module list
[maven-release-plugin] prepare release netty-4.1.0.Beta1
Fixed illegal reflective access by not relying on a sun.net.dns class. (#8318) (#8319)
Make HttpHeadersEncoder.encodeHeader package private to match class visibility.
Fix FixedCompositeByteBuf handling when copying to direct buffers and streams
Headers Performance Boost and Interface Simplification
UnknownHostException mentions hostname with search domain added
Merge pull request #338 from fredericBregier/master
Misc clean up
Fix typo in javadoc
WebSocketClientHandshaker.rawPath(URI) should use the raw query
Increase the default maxMessagesPerRead of  AbstractNioByteChannel to 16
Correctly handle errors when using OpenSSL
Merge pull request #177 from cgbystrom/websocketx-chunkaggregator-fix
Trigger user event when H2 conn preface & SETTINGS frame are sent
Fix Java9SslEngine implementation of ApplicationProtocolAccessor and so fix ApplicationProtocolNegationHandler
Cleanup example to use local variable. (#8976)
Lz4FrameDecoder should reduce memory copies whenever possible
Upgrade to JUnit 4.10
Scoring loopback addresses as 0 in DefaultChannelId
Fix compilation issue due to jdk bug Inference fails for type variable return constraint, see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6302954
Correctly handle DNS redirects for NS servers that have no ADDITIONAL record (#8177)
[maven-release-plugin] prepare release netty-4.0.2.Final
Ensure netty builds with java9 (build 9+181)
Prefer isEmpty() over size() == 0 or length() == 0
Fix build errors
We should try to load netty-tcnative before using it in OpenSslCertificateException. (#8202)
Add test for HttpClientCodec that tests handling of missing responses. See #256 amd #259
fix links to github issues in javadoc
DefaultHttp2ConnectionEncoder#writeHeaders shouldn't send GO_AWAY if stream is closed
Allow to obtain the Worker that was used to serve the IO of a Channel
section -> chapter
Make all InternalLoggerFactory implementations be singletons
Consolidating HTTP/2 stream state
Added exact utf8 length estimator and exposed writeUtf8 with custom space reservation on destination buffer
Fix NPE when remote address can not be obtained
Updated Find Bugs configuration
Fix compile errors which were introduced by #338
Revert "Set readPending to false when ever a read is done"
Rewrite ChannelOutboundBuffer
asm 6.0_BETA was released so we should use it when building on java9
Fix buffer over-run in Snappy codec when emitting a copy that leaves < 4 bytes remaining
Make ChannelGroup.write(..) retain the message
Renamed TestOptions to TestUtil
* NETTY-240 Upgrade the dependencies to the latest versions
Fix checkstyle
[#3531] Create SslContext.Builder
Cleanup buffer tests.
HTTP/2 DefaultHttp2Connection NPE
ensure getRawQuery is not null before appending
FixedCompositeByteBuf should allow to access memoryAddress / array when wrap a single buffer.
Add null-check to Htt2FrameCodec#consumeBytes. (#7899)
Clean up SnappyIntegrationTest / Fix checksum encoding
Add missing @Override annotation
[#679] Netty 3.5.8 breaks app on startup with NPE
Pull #625 from @CruzBishop selectively
Perform cross-tests between NIO and epoll transport
Add the NOTICE of the forked portion of Apache Harmony
Merge branch 'master' of ssh://git@github.com/netty/netty.git
Fix incorrect assert in Http2MultiplexCodec caused by 9f9aa1a. (#8639)
Allow to set Expires attribute
[#2053] Do not allow < 1 on AppendableCharSequence init.
Enforce a release is made with JDK 1.7 (and not w/ 1.8+)
Reduce object allocation during wrap/unwrap while handshake is in progress
[#1874] WebSocket08FrameDecoder may leak memory if channel is closed before the full frame was received
Fix incorrect log level in NetUtil
Moved CombinedIterator to org.jboss.netty.channel.group because it's only used there
Build property cleanup
Add a test case to check sub strings' AsciiString hash code
Merge branch 'master' of git@github.com:netty/netty.git
Fixes a bit of javadoc that was broken by a failed merge
Replaced HttpClient example with more generic wget style one
[#6141] OpenSSLContext Mutual Auth does not announce acceptable CAs
Allow specifying a custom charset for a multipart Attribute
Add a log message on deletion failure
Remove Erroneous imports
Upgrade to new os-maven-plugin
Method to check if a Http2 header is present and has a given value
Add missing license header
Fix bad xml
Correctly update writability state of Http2StreamChannel created by Http2MultiplexCodec.
Fix IllegalArgumentException when release a wrapped ByteBuffer on Java9
Fix inspector warnings
Change AbstractChannel#doRegister return type from Runnable to void.
Overall clean-up of the initial SniHandler/DomainNameMapping work
Fix #1435 and #1436 by reverting 7f7bf304b0b43a1445e68c15ee6f6403c7ca5b9e
Rename DecodeResult to DecoderResult
Fix release of buffers in ByteToMessageCodec and MessageToMessageCodec
Fix buffer leaks in Bzip2DecoderTest
Remove netty-metrics-yammer from example dependencies
We actually need Xref for source browsing. We just don't need it for example browsing.
EPOLL ET AutoRead
Add ChannelInboundConsumingHandler
Fix AssertionError from AsyncSocketChannel.beginRead()
Fix SnappyFramedDecoder issues
Merge forwardBufferContent and setRemoved()
Explicit thread group on DefaultThreadFactory.
:Correctly handle interestedOps changes
Print out the actual cause when an assertion failure happens during DatagramUnicastTest.testSimpleSendWithConnect
Optimize PoolChunk
Correctly detect if Ocsp is supported
Fix examples
Backport the additional AsciiString/TextHeader changes from master
Add maven-gpg-plugin to sync with the central repo
Adds port to the host header value. Due to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23 the port should be added if it differs from the default port. To simplify the code we just always add the port.
Fix the dead lock described in #1175
[#561] [#912] Add Rxtx transport
DnsAddressResolverGroup to use pluggable DnsNameResolverBuilder (#7793)
[#1852] Fix bug in UnpooledDirectByteBuf.nioBuffer(...) implementation
Use SOMAXCONN as the default backlog if possible
Typo
SelfSignedCertificate configurable valid dates
Allow to compile and run tests with different java versions
Improve Bzip2BitReader/Writer
deprecated old loggers
Directly init refCnt to 1 (#8274)
Revert as it should be in nio2 branch "Commit first round of classes to support nio2/async channel api. Still work in progress.. See #396"
More fixes to snappy: * Make Snappy.decode stateful instead of relying on the uncompressed length being equal to the compressed length * Correctly handle copies where offset < length * Take copies from the output buffer in decoding * Make the maximum encoded chunk size 32kB for compressed data
ByteBuf Input Stream Reference Count Ownership
Correctly implement SelectedSelectionKeySet iterator(), contains(...) and remove(...) (#8244)
Clean up the new WebSocket package
Allow to detect failed query caused by an Timeout / IO error and also not cache these.
Clarify SnappyFramedDecoder javadoc to make it as clear as possible regarding the default settings
Ensure BIO is only used one time
OkResponseHandler should return a FullHttpResponse.
[#942] Add an option to disable decoding of chunked transfer encoding in HttpObjectDecoder
Fix the incorrect usage/value of 'Connection: upgrade'
Fail build when Illegal reflective access is detected (#8933)
More javadoc fixes
Renamed ChunkStream to ChunkedInput
Upgrade to netty-tcnative-1.1.33.Fork19
Set maxAge to Integer.MIN_VALUE by default. See #534
[#3127] Allow to write with VoidPromise to Channels in ChannelGroup
Upgrade to protobuf 2.5 and take advantage of MessageLite.getParserFromType()
Correction on StringBuilder default init size
Remove usage of releaseLater(...) that was missed in 0bc30a123e88bc7b038e0c260937581097a903f7
Add junit timeout listener to print the full thread dump on test timeout
RFC6265 cookies support
upgrade to maven 3.0.5
HttpUtil class for Http specific utilities
Improve performance of AsciiString.equals(Object).
Merge pull request #381 from fredericBregier/master
Fixed some checkstyle errors
Fix false-positives when using ResourceLeakDetector.
HTTP/2 outbound event after receiving go_away forces sending a go_away (#8069)
Fix compilation errors in ChannelGroup and its related types
Fix misleading example in ByteBuf
Mention WebSocket
AUTO_CLOSE should not be marked as deprecated. (#7967)
http2.HttpConversionUtil :authority conversion error
Revert "Check that eventloop's were setup correctly. See #396"
Format code
SPDY: add SETTINGS_MINOR_VERSION
Dissallow adding null elements into RecyclableArrayList
Generate all-in-one JAR
[#5455] Clarify ChannelPool javadocs
[#3987] Remove RC4 from default ciphers.
Use shaded dependency on JCTools instead of copy and paste
Fix duplicate invocation of same plugins due to needless fork of maven-source-plugin
SocksCommonUtils cleanup
[#4937] [#4935] Correctly valid domain name length and convert to ASCII.
Guard against calling malloc(0) when create ByteBuffer. (#7948)
Merge remote branch 'upstream/master'
Allow to disable validation of HTTP headers which shows a 5k perf improvement here when disabled
Access the Constructor of the Channel in the constructor of ReflectiveChannelFactory. (#8718)
Updated the license information
[maven-release-plugin] prepare for next development iteration
Cleanup Http2MultiplexCodec by removing out-dated TODO
Use the correct murmur3 C1 value
Fix inconsistent code in the doc
Rename verify -> testsuite-osgi / Ensure testsuite-osgi runs without ~/.m2/settings.xml changes
Disable NioUdtMessageRendezvousChannelTest.basicEcho()
Correctly decode URI in QueryStringDecoder. See #189
Unused paramters introduced by https://github.com/netty/netty/pull/4257
* Renamed ExecutorShutdownUtil to ExecutorUtil
Fix the potential copyright issue in SocksCommonUtils
Remove duplicate code in ConstantPool class
Refactor AIO Transport to allow to use Bootstrap without the ugly hack
[#575] Sending EMPTYBUFFER via NIO-UDP results in spaming the socket
HTTP/2 WeightedFairQueueByteDistributor Bug
Checkstyle
Upgrade os-maven-plugin to fix an issue with IntelliJ IDEA on Windows
SSLEngineTest cleanup
Assuming that @trustin will want this changed :)
Make netty build work on Java9
Suggestion for supporting single header fields.
Add ProtocolDetectionResult and use it in HAProxyMessageDecoder for allow detect HAProxy protocol.
Ensure ByteToMessageDecoder.Cumulator implementations always release in buffer. (#8325)
Log used native library by netty-tcnative
Add HttpServerKeepAliveHandler
Add EventLoopFactory and make MultithreadEventLoop use it
Better handling of streaming JSON data in JsonObjectDecoder (#7821)
Fix the build issues found in the previous release process
HTTP/2 relax test timeouts
Attach Javadoc (it really works this time)
Fixed build issues
[maven-release-plugin] prepare for next development iteration
Fix false-positive leak detection report when ReferenceCountedOpenSslEngine constructor throws.
[#3112] Add supprt for TCP_INFO when using EpollSocketChannel
[maven-release-plugin] prepare release netty-4.0.0.Final
KObjectHashMap probeNext improvement
Correctly handle responses with status 205 and payload. (#7891)
[maven-release-plugin] prepare release netty-4.1.0.CR7
Also move the replacement of the decoder to the ChannelFutureListener for the websocket upgrade. See #586
Exclude native transport related test and dependency when not running under Linux, close #4409
added scm.url
Remove TCP_MD5 from EpollServerChannelConfig.
Mqtt -> MQTT
Update npn and alpn dependencies
Add DecoderResult.UNFINISHED to represent the case where a decoder generated a message that was not decoded completely / Remove partial failure in DecoderResult which is not very useful but confusing
codec module is only used by tests
[#3377] Faster overflow guard when generate nextId in EpollEventLoop
[maven-release-plugin] prepare release netty-4.1.25.Final
[maven-release-plugin] prepare release netty-4.1.0.CR1
Add very simple httpserver example which just respond with Hello World
Fix h2c upgrade failure when multiple connection headers are present in upgrade request (#8848)
Improvement : constant pool now less concurrent
UnorderedThreadPoolEventExecutor consumes 100% CPU when idle
Add more tests to KQueue and Epoll testsuites. (#8851)
Zero length data frames should apply flow control.
Implement NIO datagram transport with the new API
Ensure Javassist is loaded when running an example from an IDE
Use Sec-WebSocket-Origin instead of Origin (#264)
Fix a compilation error
Renamed ChunkedFile to ChunkedOioFile.  ChunkedFile will be added again as an interface
[#1195] Fix Unpooled.wrappedBuffer(..) with non-direct read-only ByteBuffer
ChannelHandler.handlerRemoved() must be invoked *after* the handler has been removed completely and its buffers should be inaccessible.
[#5514] Fix DiskFileUpload and MemoryFileUpload equals(...) method.
[#3297] Fix race while resolve remote address that can cause NPE
Correctly implement SelectedSelectionKeySet.Iterator remove()
Fix over-sensible testcase
Support Redis inline commands
Clean up example execution
Merge pull request #26 from veebs/master
Added configurable ByteBuf bounds checking (#7521)
Convert Http2Error.STREAM_CLOSED to ClosedChannelException when using child channels
[#5391] DnsNameResolver does not resolve property A+CNAME answer
Compress the heap dump after tests are finished
Add AUTO_CLOSE option
Remove unnecessary parameter
Defer channelInactive and channelUnregistered events in Http2MultiplexCodec (#8021)
Ported the QOTM example to the new API
Fix naming
EPOLL Shutdown and Half Closed
HTTP/2 defines using String instead of CharSequence
[maven-release-plugin] prepare release netty-4.1.13.Final
Allow to automatically trim the PoolThreadCache in a timely interval (#8941)
Remove duplicated code in AcceptorChannel classes.
SPDY: replace exception in SpdyHeaderBlockZlibEncoder with EMPTY_BUFFER
Catch Throwable
Ported codec-http to the new API
Implemented LZ4 compression codec
Include more detail why Unsafe is not available
Added Javadoc linkage to XNIO
fix UnixChannelUtil#isBufferCopyNeededForWrite
SPDY: update object hierarchy
Make HttpResponse's javadoc a bit easier to read
Fix HttpUtil.isKeepAlive to behave correctly when Connection is a comma separated list (#8924)
[#1007] Make sure the current message is only reset on LastHttpContent
Remove a version clause added by mistake
Fix race condition of DefaultChannelGroup by introducing a closed flag.
[maven-release-plugin] prepare for next development iteration
Fixed build failure
Cleaning up HTTP/2 method names for max_concurrent_streams
Dont fire an SslHandshakeEvent if the handshake was not started at all.
Correct expect header handling
[maven-release-plugin] prepare for next development iteration
[#2212] Skip autobahntestsuite when using -DskipTests
OpenSsl should use _ instead of -
[#1012] Cleanup
Cleanup : removed unnecessary 'continue', explicit array creation, unwrapping
The constants calculation in compile-time
[#1805] Fix example in javadocs of SimpleChannelInboundHandler
[#1295] Make sure retain(..) returns the correct WebSocketFrame type
Only use jboss-marshalling when using Java 10 (#7929)
http2: Make MAX_HEADER_LIST_SIZE exceeded a stream error when encoding.
Refactor tests for compression codecs
[#1461] Correctly handle DefaultChannelGroup.write(..) of ByteBuf and ByteBufHolder
[maven-release-plugin] prepare release netty-4.0.4.Final
* Renamed ConvertUtil to ConversionUtil
Allow ChunkedInput to provide the progress of its transfer
[#1683] Mark unused ChannelOption @deprecated, to prepare for removal in 4.1.0.Final
PlatformDependent String char[] optimization
[maven-release-plugin] prepare release netty-4.1.0.Beta4
[maven-release-plugin] prepare for next development iteration
[#4265] Not allow to add/set DefaultHttpHeaders to itself.
Make netty-build independent from netty-parent
[#1236] Fix problem where adding a new ChannelHandler could block the eventloop
Change AbstractChannel#doDeregister return type from Runnable to void.
Let DnsNameResolver constructor use a default value for searchDomains
[maven-release-plugin] prepare release netty-4.0.0.CR9
Simplify Bzip2 tests
Add IllegalBufferAccessException and checks on MessageBuf impls
Fix parameter order in SctpOutboundByteStreamHandler.
Get uploaded size while upload is in progress
* Proper DTD declaration
[#819] Allow for easy method-chaining in ChannelConfig and its sub-types
Optimize ByteBufUtil.writeUsAscii(...) when AsciiString is used.
[#1521] Fix performance issue in AbstractHttpData
Fix IllegalStateException triggered while shutting down ThreadPerChannelEventLoopGroup
Refresh DNS configuration each 5 minutes. (#8468)
[#5831] HttpServerCodec cannot encode a respons e to HEAD
minor refactoring
Ensure we only call ReferenceCountUtil.safeRelease(...) in finalize() if the refCnt() > 0
Move ChannelFutureFactory.newVoidFuture() to Channel.Unsafe() / Cleanup
[maven-release-plugin] prepare for next development iteration
Adds a method to get the buffer for a specific index in CompositeByteBuf
Update compression dependencies
Compress the heap dump generated by TestUtils.dump()
UNSAFE.throwException null arg crashes JVM
Add support for method chaining to ByteBuf
* Reverted back recent changes
Remove MessageList from public API and change ChannelInbound/OutboundHandler accordingly
Add cause to thrown exception in SelfSignedCert
Add test that we handle thread.interrupt() in NioEventLoop (#7917)
CompositeBytebuf.copy() and copy(...) should respect the allocator
[#1730] Correctly release resources in MixedFileUpload after switching from Memory to Disk
Add content-security-policy and x-frame-options to HttpHeaderNames
Add more utility methods to check the availability of the epoll transport
Fix StompSubframeDecoder.readHeaders produce not any notification when parsed line that contains multiple colon
Added Version.main() for easier version identification
Fix #378 again
Replace ChannelBuffer.toByteBuffer() with hasNioBuffer() and nioBuffer()
Let OpenSslContext take pre-encoded pkcs#8 private key/cert bytes
Add support for SNIMatcher when using SslProvider.OPENSSL* and Java8+
Allow to set/get an attachment on a Channel without the need of
HTTP/2 Frame Writer Microbenchmark Fix
Add methods with position independent FileChannel calls to ByteBuf
[#884] Split SCTP transport into extra module
Add JVM crash logs to .gitignore
1)tested sctp with IBM JDK 7 2)fixed NPE on sctp notification event constructor 3)added maven exec plugin
Simplification of boolean expression
Add the tarball module
Revert "Ensure channelReadComplete() is called only when necessary"
Fix typo in the comment
Added IntelliJ specific files to .gitignore
No need to use an unreleasable buffer - just wrap an array
Update to new checkstyle plugin (#8777) (#8780)
Consume tcnative options update
Server returns status 431 on header size errors
Add DnsNameResolver.resolveAll(DnsQuestion) (#7803)
Small performance improvements for RTSP
Upgrade JACOCO to the latest version
Fix javadoc to correctly explain how ChannelDuplexHandler.deregister(...) works. (#8577)
Backport the pull request #174 to fix #163
Always upstream full memcache messages.
* Extracted common code from various ChannelConfig implementations to DefaultChannelConfig and DefaultServerChannelConfig
Fix test failures due to incorrect validation
Use Sec-WebSocket-Origin in WebSocketClientHandshaker08 as replacement for Origin. See #264
Merge pull request #422 from Massive-Dynamics/http-doc
Correctly release inbound data in example. (#8105)
Add TCP_FASTOPEN_CONNECT epoll option
[maven-release-plugin] prepare release netty-4.0.14.Final
[#4017] Implement proper resource leak detection for CompositeByteBuf
Add generic utility for enqueuing buffers with promises and dequeueing them in arbitrary byte ranges.
Second round of new channel handler API design
Adhere to our getter/setter naming rules
Make JsonObjectDecoder discard everything after stream corruption
Update to latest netty-tcnative release
Handle the backslash with double quote in JsonObjectDecoder
Update to netty-tcnative 2.0.0.Beta6
Epoll flush/writabilityChange deadlock
[maven-release-plugin] prepare release netty-3.2.1.Final
ByteToMessageDecoder#handlerRemoved may release cumulation buffer prematurely
Testing e-mail notification
Prevent cross-site scripting
Add support for boringssl and TLSv1.3 (#8412)
Added NioDatagramChannelFactory support to Spring integration
HttpRequestEncoder should append '/' to absolute path requests only when needed
EPOLL exception processing feedback loop
Let EventExecutor return our Future to allow the user to work also with FutureListener here. Also add a special ScheduledFuture that extends our Future for this purpose.
Upgrade twitter hpack dependency
[#5507] SingleThreadEventExecutor should reject call invoke*() from within the EventLoop.
[#1517] Only fire the exception throught the pipeline if the channel is registered when using VoidChannelPromise
[maven-release-plugin] prepare for next development iteration
Rename flushAndWrite() to writeAndFlush()
FlushConsolidationHandler remove conditional
Add IPv4 and IPv6 specific localhost constants to NetUtil
[maven-release-plugin] prepare for next development iteration
Fix a race condition where local channel's closeFuture is notified early
Add DetectionUtil which replaces UnsafeDetectUtil / Improve SpdyHeaderBlockJZlibDecompressor
[maven-release-plugin] prepare for next development iteration
Add @Deprecated when the javadoc says its deprecated
maxBytesPerRead channel configuration
Supply a builder for Http2Codec
Overall clean-up of ipfilter package
Correctly respect readerIndex of buffer when dumping.
Implemented LZMA frame encoder
[maven-release-plugin] prepare release netty-4.1.1.Final
Fix NoClassDefFoundError when netty-tcnative is unavailable
Run all tests in SSLEngineTest with heap, direct and mixed buffers
[#5861] HttpUtil.getContentLength(HttpMessage, long) throws unexpected NumberFormatException
PoolChunkList.allocate(...) should return false without the need to walk all the contained PoolChunks when the requested capacity is too big.
Fix APIviz panic
DefaultDnsRecordDecoder compression and index decode bug
Adjustable size of DefaultHeaders array
Add WebSocketClientHandshaker.close()
Add a property to disable osgi testsuite run
[#6134] Do not limit the PID to be <= 4194304
Support for handling SSL and non-SSL in pipeline
Make build pass on Java 10 (#7922)
[#1654] Remove AbstractChannel.doPreClose() and notify close future on register failure. Based on patch of @jpinner
Rename (Server)ChannelBuilder to (Server)ChannelBootstrap
Log outbound buffer
Add test for caching failed queries in DefaultDnsCache. (#7909)
[#107] Add support for closing either input or output part of a channel
UnixResolverDnsServerAddressStreamProviderTest failure
Set-Cookie headers should not be combined (#8611)
OpenSSL ByteBuffer BIO
Remove ByteBuf.readBytes(int) calls when possible
Fix most inspector warnings
[#5028] Fix re-entrance issue with channelWritabilityChanged(...) and write(...)
Add support for TCP_DEFER_ACCEPT and TCP_QUICKACK
Reduce the memory footprint of DefaultChannelPromise
Add back missing HttpTunnelingServlet. See #148
Consistent exception messages
Fix a buffer leak in JsonObjectDecoderTest
[#2768] Correctly duplicate buffer for CloseWebSocketFrames
We should prefer heap buffers when using the OIO transport to reduce memory copies.
Merge pull request #420 from Massive-Dynamics/fix-failed-javadoc
Loosen bounds check on CompositeByteBuf's maxNumComponents (#8621)
Add getters for the specified timeout values. See #418
[#2523] Fix infinite-loop when remove attribute and create the same attribute again
Accept all ready sockets for the SelectionKey. See #240
Adjust testsuite-osgi to resolve bundles from local build (#8944)
AbstractByteBuf.ensureWritable(...) should check if buffer was released
Allow to schedule tasks up to Long.MAX_VALUE (#7972)
Fix flacky multipart test introduced by 08748344d852a07011be6e74bb5ddc6dcf221c45.
Correctly convert between openssl / boringssl and java cipher names when using TLSv1.3 (#8485)
Adding support for whitespace in resource path in tests (#8606)
Improvement : WebSocketServerProtocolHandshakeHandler.getWebSocketLocation now applies concat optimization and WebSocket path check moved to separated method.
Not skip first cert when using OpenSslClientContext
Correct release buffers in RedisEncoderTest
[#5866] HttpToHttp2ConnectionHandler / InboundHttp2ToHttpAdapter ignores STREAM_DEPENDENCY_ID and STREAM_WEIGHT.
Change 64 to 63 in Snappy.decodeLiteral
Enable AUTO_CLOSE opton by default for backward compatibility / Deprecare AUTO_CLOSE option because it's gone in 5.0.
Add more javadocs
HTTP/2 StreamByteDistributor improve parameter validation
[#5762] HTTP/2: SETTINGS_HEADER_TABLE_SIZE should be an unsigned int
Introduce ChannelGroupMatcher which can be used to only apply operations of a ChannelGroup on matching Channels.
Porting BufferingHttp2ConnectionEncoder from gRPC
Reduce permissions needed for process ID
EPOLLRDHUP infinite loop
[#740] Fix WebSocketClientHandshaker00.finishHandshake() validations
[#502] Split EventLoop/EventExecutor into parent and children
Fix more memory leaks in the buffer tests
ByteBufUtil.isText method should be safe to be called concurrently
Fix and clearify javadocs
Update the instruction for running SPDY examples
Use Triple DES in JdkSslContext cipher suite list.
Allow to skip autobahntestsuite by specify property skipAutobahnTestsuite
[maven-release-plugin] prepare release netty-4.0.10.Final
UnixResolverDnsServerAddressStreamProvider should allow for empty /etc/resolver dir
Only increment the counter if the encode did not fail. See #256
Fix method naming / Make super method final
Add ServerBootstrap.group() that takes a single group
Update Http2SecurityUtil cipher suites
Propagate all exceptions when loading native code
Make NIO and EPOLL transport connect errors more consistent with the JDK
SPDY: introduce SpdyControlFrame tag interface
Integrate non-blocking XML parser as Netty codec (#2806)
* Fixed too frequent plugin update
Upgraded to APIviz 1.2.4.GA
4.0 requires Java 6 or above
[#1259] Add optimized queue for SCMP pattern and use it in NIO and native transport
Rename IOStream example / Code cleanup
Fix a buffer leak in BinaryMemcacheObjectAggregatorTest
Remove extra conditional check in retain
Clean up abstract ChannelHandler impls / Remove ChannelHandlerContext.hasNext*()
Very small fix (readUnsigned while in optimized version it was signed but should be unsigned)
Buffer Leaks in Compression Tests
Add ChannelHandlerContext.hasNext(In|Out)bound(Byte|Message)Buffer
Allow to wrap another SslContext implementation and do extra init steps on the SSLEngine.
Simplify the validation logic proposed in 25f96b164498988439c38baf6ff4c57763464824
Add testcase for epollWait(...) with negative timerfd values. (#8447)
Added http status codes from RFC 6585
Use array initializer expression
Optimize SlicedByteBuf a little bit
Fix capacity check bug affecting offheap buffers
Remove DefaultChannelHandlerContext.needsLazyBufInit which is used only by the head handler
Add SslCloseCompletionEvent that is fired once a close_notify was received
Netty force encodes already encoded responses
Revert "Set source java version to 1.7 where needed. See #312" as it breaks the build
DefaultHttp2Connection.close Reentrant Modification
Cleanup ChannelId handling of basic methods
Fix inconsistent module name
Remove hexdump option in LoggingHandler and dump always
SPDY: fix NullPointerException in SpdyFrameDecoder
Reorder channel state changes in Http2MultiplexCodec child channel
Renamed Logger and LoggerFactory to InternalLogger and InternalLoggerFactory to state that these classes for internal use only explicitly
Fix GOAWAY logic in Http2Encoder and Http2Decoder.
Better promise validation messages
fix typo
Rename ChannelGroupMatcher to ChannelMatcher
[#2744] Fix flakey HashedWheelTimerTest.testExecutionOnTime()
[#3457] Proper fix for IllegalStateException caused by closed file descriptor / channel
HttpProxyHandler generates invalid CONNECT url and Host header when address is resolved
Set source java version to 1.7 where needed. See #312
Only call ctx.fireChannelReadComplete() if ByteToMessageDecoder decoded at least one message.
[#2297] Correctly close all registered Channels on EpollEventLoop.closeAll()
Use maven-dependency-plugin instead of assemblies
[maven-release-plugin] prepare for next development iteration
Optimizations in QueryStringEncoder
Optimize / Cleanup QueryStringDecoder / QueryStringEncoder
Add integration test for shading native libraries. (#8123)
Use ByteBuf.*LE methods for write and read LE
[maven-release-plugin] prepare for next development iteration
Add ByteBuf.asReadOnly()
Remove unnecessary throws clauses for unchecked exceptions
[maven-release-plugin] prepare release netty-3.1.0.CR1
HTTP/2 Remove Http2FrameStream#CONNECTION_STREAM
TODO for the method with typo in name
[#3709] Ensure all data is read from socket when EPOLLRDUP is received
Made websocket maxFramePayloadSize configurable from WebSocketServerProtocolHandler.
Related issue: NETTY-69 IoC container integration
Combine flushes in DnsNameResolver to allow usage of sendmmsg to reduce syscall costs (#8470)
Add benchmarks for SSLEngine implementations
Add ! to allowed cookie value chars
Abstract classes' names should start with 'Abstract'
Synchronized between 4.1 and master (part 3)
MessageFormatter improvements
HTTP/2 HelloWorld Client Example Bug
Fix ClassCastException and native crash when using kqueue transport. (#8665)
New organization name
Add examples to Xref
[#982] [#977] [#858] Allow to transfer the content a ChannelHandlers inbound/outbound buffer on removal/replacement
SslHandler aggregation prefer copy over CompositeByteBuf
HTTP/2 CompressorHttp2ConnectionEncoder bug
Add a line-based frame decoder with good performance.
[maven-release-plugin] prepare for next development iteration
Add JVM options for faster test runs
merged conflicts
Exploit PlatformDependent.allocateUninitializedArray() in more places (#8393)
[maven-release-plugin] prepare for next development iteration
SwappedByteBuf.unwrap() should return null
[#858] Merge ChannelPipeline.replaceAndForward into replace and removeAndForward into remove
Revert "Minor refactoring in variable naming in sctp stream config"
Allocate buffer from ByteBufAllocator in ChunkedFile
Fix chunk type for stream identifier
Fix memory leak in DefaultChannelHandlerContext
Http/2 RST_STREAM frame robustness
Two tests are missing `@Test` annotations
Use smaller connect timeout to speed up tests.
Trim thread local string builder if large
Fix buffer leak in test which was introduced while implement ZLIB_OR_NONE support. Related to [#2269]
Add the 'nextBufferType' parameter to ByteArrayEncoder like did to StringEncoder / Consistent parameter order
Throw FileNotFoundException when connecting to a missing UDS path
Ensure setting / getting the traffic class on an ipv4 only system works when using the native transport.
Revert "Dereference when calling PooledByteBuf.deallocate()"
OpenSslEngine should respect hostname verification
Add missing udp option
Unify {Epoll,KQueue}EventLoopGroup initialization.
Reduce the memory footprint of DefaultChannelPromise even more
Fix a bug where HttpContentEncoder generates an empty chunk even if it's not the last chunk
Introduce allocation / pooling ratio in Recycler
Update links for actual Protobuf repo and documentation
Reverting back recent changes related with TrafficMonitor
[#4198] Fix race-condition when allocate from multiple-thread.
Fix a problem where all classes are compiled again
[#1906] Use a ByteBuf allocator from the ByteBufAllocator when encode Strings
Remove usages of deprecated methods group() and childGroup().
Make HttpRequest's documentation easier to read
codec-http2: Improve h1 to h2 header conversion
Fix a problem where DefaultChannelId prevents Netty 5 from running on Android
Upgrade to new barchart-udt-bundle
[maven-release-plugin] prepare release netty-3.1.3.GA
[#1430] Fixed byte order problem on little endian platforms that support Unsafe but not unaligned memory access.
Remove get*() from the methods to match the rest of our method signatures
Fix ServerCookieEncoder javadoc, close #7115
Fixed wrong license file name
[#4828] OpenSslContext throws UnsupportedOperationException when Unsafe not available
Allow to write Http2UnkownFrame when using Http2FrameCodec / Http2MultiplexCodec (#7867)
Add FileRegionEncoder which will take care of encode the FileRegion to
Fix NPE when creating DomainNameMapping via a builder
Rename CodecOutput to RecyclableArrayList and move it to internal package.
Fix try to delete file while it does not exist anymore (see #2102 and #1713) in reference to this issue
[maven-release-plugin] prepare release netty-4.1.15.Final
Introduce bypass buffer and use it in LoggingHandler
Removing debugging change from unit test.
added initial version of sctp transport
Ensure FlowControlled data frames will be correctly removed from the â€¦ (#8726)
Synchronized between 4.1 and master
Add compiler options to find unchecked/deprecated code
Handle partially decoded elements while streaming Json array
Merge remote-tracking branch 'upstream/master'
SPDY: remove SPDY/2 support
Add optimized version of setZero(...) / writeZero(...) for Unsafe*ByteBuf implementations
Support 1012, 1013 and 1014 WebSocket status code
[maven-release-plugin] prepare for next development iteration
Make sure Channel connected event is not fired on connect failure. See #249
Improve the utilization of subpage pools
[#1359] Fix incorrect response when 100-continue is needed
Allow HTTP2 frame writer to accept arbitrarily large frames
Decouple Unix from Linux in Native Transport
Fix inspector warnings
[#1637] Check for null parameters
Set SNI servernames in OpenSSL engine when created in client mode (#8178)
Let Http2ServerUpgradeCodec support Http2FrameCodec
Introduce UniqueName, UniqueKey, and Signal
Increase the timeout of LocalTransportThreadModelTest to 1 minute
Deprecate IncompleteFlushException as its not used anymore
Ensure Netty can be build with Java 11 (#7926)
Make sure ChannelHandler.handlerRemoved() is always invoked
Correctly reset offset when fail lazy because of too long frame. (#8257)
Update jetty-alpn-agent for latest java8 release.
Will release 3.0.1.GA first and then 3.1.0.Alpha1
ByteBridge.flush() does not flush anything if the target buffer is not writable but expandable
[#4212] Backport WebSocket Extension handlers for client and server.
[#5541] Ensure failing a Promise in SimpleChannelPool will not result in stack overflow.
Lazy compute SSLSession creation time.
Make AbstractMemoryHttpData generate less garbage
Ensure we null out cumulation buffer before fire through the pipeline in handlerRemoved(...)
Make inByte/MsgBuf final
Correct filling an `origin` header for WS client
Fixes for compression codecs
Remove code duplication in OIO transport / Make concrete unsafe final
Added QueryStringDecoder.rawPath() and rawQuery()
Update to OpenJDK 12 ea22 (#8618)
Fixes a LoggingHandler#format method with two arguments
Remove @deprecated constructor. See #283
Fix regression in QueryStringEncoder
Reduce the fallback SOMAXCONN value
[#3654] No need to hold lock while destroy a chunk
Issue #250. Implement web socket close frame status code and reason text.
HttpObjectDecoder resetRequested not updated after reset
Use getHeader() instead of getHeaders()
Remove unused or unmaintainable internal classes
Small fixes and improvements
Close connection for CorruptedFrameException (#8705)
Performance improvement for HttpRequestEncoder. Insert char into the string optimized.
ServerBootstrap.handler(...) will add handler before Channel is registered.
Give a handler more control over how its buffers' read bytes are discarded.
Adjust ChannelGroup to behave the same like a Channel in terms of write and flush
Remove some dead-code and cleanup
Fix typo
Throw exception if KeyManagerFactory is used with OpenSslServerContext
Fix a bug where HttpObjectAggregator doesn't always produce FullHttpMessage
Make ReplayingDecoder extend StreamToMessageDecoder
Issue #65: Provide distribution stats for HashedWheelTimer
Enforce java8 for compilation
Merge pull request #321 from veebs/WsSubprotocol
[#2173] Fix regression that let HttpRequestDecoder fail if the websocket response and a websocketframe are send in one go
Make sure we use the same Worker in the client during its lifetime. See
Add missing license headers
Support preloading of native epoll lib
[#521] Encode URI using UTF-8 charset
Upgrade to new version of autobahntestsuite maven plugin. (#8668)
Use recyclable write task to reduce GC pressure
Move the reusable classes in netty-testsuite to main/java/src and deploy them
Add TCP_USER_TIMEOUT
Fix hashCode() in Http2StreamChannelId
Fix checkstyle
Correct typo in artifactId of dependency in bom pom.xml
Ensure PooledByteBuf.initUnpooled(...) correctly set the allocator
Excluded unnecessary dependencies
Add GCC optimization flag when compile native transport
Moved bit-level read operations from Bzip2Decoder to the new Bzip2BitReader
Rename ChannelBuf to Buf and ChannelBufType to BufType
Allow to load PrivateKey via OpenSSL Engine (#8200)
Fix possible NPE introduced by a137291ad161c970259d9a5d7cc206c026f08ee7 when using SslProvider.OPENSSL and init via files or OpenSslX509KeyManagerFactory (#8126)
[#540] Add a variant of ByteBuf.ensureWritableBytes() which does not throw an exception
Do not pre-populate cipher suite conversion table
Change the return type of EmbeddedChannel.read*() from Object to an ad-hoc type parameter
HTTP/2 Decoder validate that GOAWAY lastStreamId doesn't increase
Tighten up visibility
Use ByteBuf#writeShort/writeMedium instead of writeBytes
Remove unused import
Add a 'bill of materials' project for Maven users
Rename classes as result of descussion on #594
Upgrade os-maven-plugin to fix a build issue on windows-x86_32
Add support for Client Subnet in DNS Queries (RFC7871)
Remove cruft
[#910] Make use of ByteBufHolder in SPDY, HTTP multipart and WebSockets to allow for buffer pooling
Fix documentation error in ByteBuf
Fix IllegalReferenceCountException when using Http2MultiplexCodec and a DefaultHttp2GoAwayFrame with a non empty ByteBuffer is received. (#7894)
Ensure ObjectCleaner will also be used when FastThreadLocal.set is used.
[maven-release-plugin] prepare release netty-4.1.0.Beta2
Set the length fields of memcache messages automatically
Javadocs update
Update OSGI Test Suite.
Minor refactoring in variable naming in sctp stream config
Adapt Http2ServerDowngrader to work with clients
JdkZlibDecoder and JZlibDecoder consistency
DNS Resolve ambiguity in which DNS servers are used during resolution
SPDY: handle too large header blocks
Motivation:
Rename methods of EmbeddedChannel and mark old ones as @deprecated
Add supporting MQTT 3.1.1
Remove ChannelFutureProgressListener
Fix compile error
Revert the bad commit from maven-release-plugin
[#5893] Ensure we not close NioDatagramChannel when SocketException is received.
Mark Recycler.recycle(...) deprecated and update usage.
Created RTSPEncoder and RTSPDecoder which are now common for both requests and responses to be able to handle both types of messages on the same channel.
replaced broken &lt with &lt; and same for gt
Remove deprecated usage of Mockito methods
[#2065] Fix NPE in AbstractOioByteChannel during write to the socket
HTTP/2 revert Http2FrameWriter throws API change
Upgrade to the latest maven-checkstyle-plugin
Add unit test for DefaultHttp2FrameWriter
Add support for SNIHostName when using Java8+
Allow a user use any type as a ReplayingDecoder state / AIO cleanup
[maven-release-plugin] prepare for next development iteration
Simplify the echo client example
Test output should include GC details
Fixed various compiler warnings
Add missing methods to Http2ConnectionHandlerBuilder
Update to the latest checkstyle rules
Fix compilation error introduced by 7f907e8c2aa2284ea8e48953ec5d3b5f13ed9435
* Removed AbstractServerChannel.getLocalAddress() to enforce the use of covariant return types in its subclasses
Simplify
Removed unnecessary empty lines in the program listing
Use the configured ByteBufAllocator in SpdyFrameEncoder
Remove left-overs. See #396
[#2705] Call fireChannelReadComplete() if channelActive(...) decodes messages in ReplayingDecoder / ByteToMessageDecoder
SslHandler should call beginHanshake once for the initial handshake
At last but not least
Automatic clean-up with Eclipse
SocketRstTest fails due to exception message check
Travis CI branch whitelisting
Replace dynamic regular expressions with precompiled Patterns or new StringUtil.split()
[#4746] Support SNI when using OpenSSL
* Forgot to update the pom.xml
Add javadocs
[#154] [#727] Use maven-plugin-plugin to generate OSGi manifest
Move tests to the appropriate packages / Remove unnecessary tests
Fixed wrong plugin order
Make configurable the initial and max size of InternalThreadLocalMap#stringBuilder
Map HTTP/2 Streams to Channels
Merge remote-tracking branch 'upstream/master'
Fix bad updatePolicy string
Update to latest netty-tcnative (#8246)
Added a test for oversized HTTP responses
Revert "Add PooledSlicedByteBuf and PooledDuplicatedByteBuf"
[maven-release-plugin] prepare for next development iteration
Fix the life cycle mapping problem with m2e
[maven-release-plugin] prepare release netty-3.2.0.Final
Fix a problem where flush future is set more than once
Merge pull request #544 from CruzBishop/testcases-1
Add CharsetUtil.encoder/decoder() methods
Ported OIO socket/datagram transport to the new API
Added comments to LineBasedFrameDecoder, JsonObjectDecoder and XmlFrameDecoder that they are only compatible with UTF-8 encoded streams. (#8651)
Introduce ObjectCleaner and use it in FastThreadLocal to ensure FastThreadLocal.onRemoval(...) is called
Removing direct access to HTTP/2 child streams.
[#2732] HttpRequestEncoder may produce invalid uri if uri parameters are included.
[maven-release-plugin] prepare for next development iteration
MessageAggregator Potential Leak
Move snappy codec to netty-codec
fix header to out
Replace 'Stream' with 'Byte'
CorsHandler to respect http connection (keep-alive) header.
Make sure all resources of a ByteBridge and MessageBridge are released
DNS codec for Netty which is based on the work of [#1622].
Add FlushConsolidationHandler which consolidates flush operations as these are expensive
Break the decode loop if decoder raises an exception to give a chance to close the connection to a user handler
[maven-release-plugin] prepare for next development iteration
Make sure WebSocketFrameAggregator and HttpObjectAggregator don't leak ByteBufs
Optimize DefaultChannelId.equals
Throw a special SSLException if a non SSL/TLS record was detected. See #437
[#5720] Static initializers can cause deadlock
Optimize DefaultHeaders#toString and implement HttpHeaders#toString
* Added XNIO dependency (optional)
[#1947] Handle RejectExecutionException graceful for outbound operations
Mark initialization of unsafe as privileged
Optimizations in NetUtil
Fix a checkstyle error
[#1069] Snappy decoding fixes
CompatibleObjectEncoder cached ObjectOutputStream backed by release buffer bug
Limit future notification stack depth / Robost writeCounter management
Add 'io.netty.tryAllocateUninitializedArray' system property which allows to allocate byte[] without memset in Java9+
Use the ByteBufAllocator when copy a ReadOnlyByteBufferBuf and so also be able to release it without the GC when the Cleaner is present.
[#3539] Correctly handle EPOLLRDHUP
[#1344] Fix race condition in DefaultChannelPromise / DefaultChannelProgressivePromise which could lead to listeners that are not notified
Upgrading Jetty alpn-api version
Skip osgi testsuite on JDK11. (#8733)
Fix javadoc link
Add support for SSLParameters.setCipherSuiteOrder() when using Java8+
Move shared methods to the AbstractEmbeddedChannel class and add javadocs
Improve docstrings for and of
Remove double comparing of content out of the DefaultHttp2GoAwayFrame.equals()
Added developers section
Add ReferenceCountUtil.releaseLater() to make writing tests easy with ReferenceCounteds
[#6023] Ensure LastInboundHandler correctly handle different events / data
Use a non-volatile read for ensureAccessible() whenever possible to reduce overhead and allow better inlining. (#8266)
Rename HandshakeCompletionEvent to SslHandshakeCompletionEvent
Fix a buffer leak in BinaryMemcacheEncoderTest
[#559] Fix SocketSuspendTest.testSuspendAccept()
Automatic messageType detection for ChannelInboundMessageHandlerAdapter
Fix one checkstyle and one compile error caused by the last commit
Unpooled and Wrapped Buffer Leak
Specified the sourceclasspath option explicitly
Simplify code
Readability / Fix inception year
Remove synchronized (ReferenceCountedOpenSslContext.class) blocks
Do not call inbound event methods directly
[#4079] Fix IllegalStateException when HttpContentEncoder is used and 100 Continue response is used.
Introduce CodecOutputList to reduce overhead of encoder/decoder
Fixed some 120-character line checkstyle problems.
Allow to explicit disable usage of KeyManagerFactory when using OpenSsl
Update proxy example to show to implement a proxy with manual read operations for optimal memory usage
[maven-release-plugin] prepare for next development iteration
Removed the license files for unused dependencies
HTTP/2 HEADERS stream dependency fix
Add UnsupportedMessageTypeException
Optimize PooledByteBufAllocator
DefaultHttp2FrameWriter reduce object allocation
Require Maven 3.0.5 to stop users from using insecure 3.0.4
Replace TransferFuture(Listener) with (Channel)ProgressiveFuture(Listener)
Allow overriding JVM options for tests
Explicit specify hostaddress during tests to ensure testsuite pass on docker (mac)
Cleanup: replaced deprecated ctx.attr() and ctx.hasAttr() methods usage with ch.attr() and ch.hasAttr().
Add support for abstract domain sockets
Add AbstractDatagramTest / Port unicast test / Ignore 'Socket closed'
Make CoalescingBufferQueueTest properly release all buffers including the composites removed from the queue.
Fire exceptionCaught before exception-caused close for WebSockets.
[#1414] Use gathering writes in AbstractMemoryHttpData if the buffer is backed by multiple ByteBuffers
Fix possible IllegalStateException caused by closeNotifyTimeout when using SslHandler
[maven-release-plugin] prepare for next development iteration
Cleanup
Reflective setAccessible(true) will produce scary warnings on the console when using java9+, dont do it
Fix a buffer leak in StreamBufferingEncoderTest
[#5645] Allow to create ByteBuf from existing memory address.
LzmaFrameEncoderTest double release
#6657 do not throw ClassCastException when rule subnet version doesn't match remote IP version
Improved documentation in SCTP Transport classes
Add unit tests for HTTP and SPDY headers
Introduce ThreadDeathWatcher
Added webbit license and credits
* Merged Andy's Local transport
[#4658] Fix encoding of pom.xml file
Support ALLOW_HALF_CLOSURE channel option on Unix domain socket. (#8932)
[#5013] Fix typo in DefaultStompFrame.toString() method.
Test TLS renegotiation with explicit cipher suite change
Set readPending to false when EOF is detected while issue an read
Update codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java
Clean up the pipeline implementation / Ensure Embedded*Channel does not run pending tasks immediately
Simplify handler invocations in DefaultChannelHandlerContext
Fixed NETTY-376 Manifest not present in the first entry of the zip
[maven-release-plugin] prepare for next development iteration
Allow to override how wrapped direct ByteBuffer are allocated to make it easier to extend
Set some StackTraceElement on pre-instantiated static exceptions
Add combined codec classes and related utility method
Name resolver API and DNS-based name resolver
Adding stable JDK9 module names that follow reverse-DNS style
Set the destroyed flag at the correct time and fix a the httpupload example to release all resources
[#5597] Not try to double release empty buffer in Unpooled.wrappedBuffer(...)
[#864] Switch to single decoding mode on the protocol upgrade to prevent races
Update to netty-tcnative 2.0.0.Final
[#1579] Fix resource leakage in WebSocketUtil.base64(...)
Ensure backward compatibility
[maven-release-plugin] prepare for next development iteration
Added .gitignore
Fixing #378, when path or domain are null in both this and that, equals and compareTo return false even when the cookies are equal.
Moved the chapter 3 to the package description of org.jboss.netty.buffer.  User guide will focus on bigger pictures
Fix regression introduced by 0364265f4692b2f2f28ab36037c4ab6f3c242eae which could lead to corrupt attribute values
Fix AsciiString.contentEqualsIgnoreCase
[maven-release-plugin] prepare release netty-4.0.0.Final
Not try to write more then Integer.MAX_VALUE / SSIZE_MAX via writev
Allow numBytes == 0 when calling Http2LocalFlowController.consumeBytes.
Ensure flowController().writePendingBytes() is triggered when writing response in example
Disallow usage of maven 3.1.x (and higher) because of non compability with plugins
Optimize encoding of websocket frames by merge if possible
Let CombinedChannelDuplexHandler correctly handle exceptionCaught. Related to [#4528]
renamed servlets
[#1940] Add javadoc to explain how the FileChannel is closed when using DefaultFileRegion
Make sure OpenSslEngine is tested against transport-native-epoll
[#3869] Add unit test to ensure adding null header values is not allowed.
Stop decoding after protocol upgrade / Do not use singleDecode option
Post-overhaul fixes / Split LoggingHandler into three
fix #6066 Support optional filename in HttpPostRequestEncoder
Upgrade jacoco-maven-plugin to the latest version
Netutil IPv6 bugs
[#1704] Make sure SwappedByteBuf.readSlice(..) returns ByteBuf with correct ByteOrder
Replace DomainNameMapping.entries() with asMap()
Correct bom entry for netty-transport-native-unix-common
(Kind of) skip autobahn testsuite on -DskipTests
Some javadocs love
Do not use a pseudo random for tree traversal
Fix PoolChunkList.minUsage() and maxUsage() for head and tail
RtspMethod does not need to extend HttpMethod at all - it does not add anything to HttpMethod
Prefer {@code ...} to <code>...</code> / Fix deprecation warnings
Ensure multiple shaded version of the same netty artifact can be loaded as long as the shaded prefix is different (#8207)
[maven-release-plugin] prepare for next development iteration
Build all-in-one JAR, xref, javadoc only on full build & release
Raise an exception when the specified cipher suite is not available
FastThreadLocal#set remove duplicate isIndexedVariableSet call
* Replaced callout-bug with simple co tags
Font embedding
Improve Javadoc of ChannelPipeline
[maven-release-plugin] prepare for next development iteration
Redid documentation for WebSocketUtil
Remove 'get' prefix
[maven-release-plugin] prepare release netty-4.0.14.Beta1
Include Http 1 request in error message
[#532] HttpStaticFileServer should generate an index page
Remove some casting. See #186
Ensure EpollSocketChannel.localAddress() returns correct address after connect(...) call.
Support WebSocket data chunked transfer
Enable SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER when using OpenSslContext
Add missing 'operation(args, future)' for 'operation(args)'
Cleanup
ability to use Executor instead of ThreadFactory
Fix various inspection warnings
V4.1 Fix "=" character in HttpPostRequestDecoder
Respect ClientAuth set via OpenSslEngine constructor
Correctly handle IPV6 in HttpProxyHandler
Expose RoundRobinInetAddressResolver

Throw exception if KeyManagerFactory is used with OpenSslClientContext
Apply checkstyle to the build
[#983] Force the user to implement an actual ChannelInboundHandler or ChannelOutboundHandler
* Moved internal utility classes to org.jboss.netty.util.internal
Saner toString() implementation for EmbeddedSocketAddress
Finish the refactoring of bootstrap
Correctly discard messages after oversized message is detected. (#9015)
[#539] Potential direct memory leak in HttpContentEn/Decoder
AdaptiveRecvByteBufAllocator should ramp up while reading
Case-insensitive matching for Upgrade and Connection header (#278)
HttpProxyHandler: allow setting headers
Remove JXR plugin
[#921] Fix NPE which can be thrown on bad-timing when using WebSocketClientHandshaker07
[maven-release-plugin] prepare for next development iteration
We should re-use the same handler instance as its sharable in the example
Correctly delete SelfSignedCertificate once done with it.
Removed @version tags and did some documentation
Updated author information. I want to get messages about Netty in my gmail account.
Fix bug in memory-based HTTP data content initialization with input stream, add test (port from branch 3).
HTTP/2 limit header accumulated size
Fix buffer leaks
Prefer MessageBuf over Queue where possible
CorsHandler to respect http connection (keep-alive) header.
NIO read spin event loop spin when half closed (#7801)
Fixed several issues with HttpContentDecoder
Limit the maximum size of the allocated outbound buffer to MAX_ENCRYPTED_PACKET_LENGTH
Introduce HashedWheelTimer.pendingTimeouts()
Copies from read-only heap ByteBuffer to direct ByteBuf can avoid stealth ByteBuf allocation and additional copies
Fix checkstyle
StreamBufferingEncoderTest leak
Remove the StringCache option which was removed in JDK8
Correctly clear the error stack in all cases when using ReferenceCountedOpenSslEngine. (#7941)
Add explicit message when `noexec` prevents library loading.
Implemented a Bzip2Encoder
Fix sendNumbers logic
[#2058] Use correct MANIFEST.MF file for source jars
Faster event processing when epoll transport is used
[#4972] Remove misleading argument from HttpServerUpgradeHandler.UpgradeCodec.upgradeTo
Store reference to IovArray in the EpollEventLoop to reduce thread local access.
Http2LifecycleManager.onException rename
Remove static imports and inner class imports for disambiguation
Fix cookie date parsing, close #6016
HttpContentDecompressor should change decompressed requests to chunked encoding. Fixes issue #5428
Use finer grained type parameter in SPDY
[#1880] Use ByteBufAllocator when read bytes into new chunks
[#4722] Ensure the whole certificate chain is used when creating SslContext for client mode and SslProvider.OPENSSL is used
WebSocket client handshaker to support "force close" after timeout (#8896)
Test that CompositeByteBuf releases its components
Fix a compilation error
Correctly handle DefaultStompFrame.retain(increment)
Require Maven 3.0.4
Use higher maxQueriesPerResolve and make exception message more clear.
Fix #397: Allow all cookie names that conform to the RFC
CDATA support
CorsHandler.write(...) should not cause a flush. (#7839)
HTTP/2 Flow Controller required memory reduction
*ChannelBuffer* -> *ByteBuf* and ChannelBuffersTest -> UnpooledTest
Microbench doesn't need to be an OSGi bundle
* Forked JZlib to support GZIP format
HttpObjectEncoder#isContentAlwaysEmpty cannot be overridden by subclasses
[#2939] Fix SslContext usage in the examples for client side
Preserve the host name of address when parsing /etc/hosts file
Clean up 000d3a55c5b771b7ed8b71f54b44de72a85306c0
[#5202] Correctly throw ErrorDataDecoderException when invalid encoded form parameters are present.
Simplify hello world content generation
UnsafeByteBufUtil errors and simplification
SPDY: remove deprecated methods
Add JBoss Marshalling Encoder/Decoder. See #324
Add more javadocs and replace some abstract methods with noops as we often implemented them as noops
Add netty-tcnative dependency to netty-example
Allow non-standard HTTP/2 settings
[#735] Make sure the handshake ChannelFuture is notified after the right encoder is present in the ChannelPipeline
Correctly handle unsigned int values returned from TCP_INFO
Add missing @Override annotations
Support aggressive round-robin dns
Use higher maxMessagesPerRead as default for ServerChannels
Rename SPDY header block (de)compressor classes
UnknownHostException should mention search domain if used
Uncomment logging in EchoServer
Add codec-smtp to all jar.
Upgrade dependencies
AbstractHttp2ConnectionHandlerBuilder support for HPACK huffman decoder initial size
1 Rename package name "rendzvous" to "rendezvous" 2 Add bytes stream rendezvous example
Simplify the construction of multi-threaded selector event loop
h2childchan: Ability to open outbound/local streams. Fixes #4913
Enfore upper limit for minTtl when using DefaultCacheEntry. (#7920)
Fix intermittent infinite loop in AbstractOioByteChannel.doRead()
Merge pull request #132 from veebs/WebSocketVersion
Add test for HttpPostRequestDecoder: validate '\r' symbols in the end of binary stream are parsed correctly.
Fix a bug in AbstractByteBuf.writeZero() where the capacity is not auto-expanded
Update dependencies and plugins to latest possible versions.
SCTP: Reduce object allocation overhead and fix receive buffer allocation
Replace reflective access of Throwable#addSuppressed with version guarded access
Allow to override how headers are encoded
[#4637] More helpful exception message when a non PKCS#8 key is used.
fixed "sensative" typo to read "sensitive"
HttpObjectAggregator adds 'Connection: close' header if necessary
Epoll.isAvailable() must return false if sun.misc.Unsafe is not present.
Calculate correct count for tiny/small/normal allocation
EpollSocketChannelConfig.getOptions() must not throw if TCP_FASTOPEN_CONNECT is not supported
Replace DomainMappingBuilder with DomainNameMappingBuilder
[#1197] Add Unpooled.unreleasableBuffer(...) to create a unreleasable view on a ByteBuf)
Reduce code duplication
:Correctly handle interestedOps changes
Support composite buffer creation without array alloc and copy
Include the original Exception that caused the Channel to be closed in the ClosedChannelException (#8863)
Accept all ready sockets for the SelectionKey. See #240
[maven-release-plugin] prepare for next development iteration
Fix nioBuffer implementation for CompositeByteBuf
Only add / to uri if really needed.
Remove ChannelHandlerContext.types() which is barely useful / Remove ChannelHandlerType together
Various performance optimizations in OpenSslEngine
Finished the first chapter
Correctly handle hostnames with and without trailing dot in the DefaultDnsCache and use it for searchdomains. (#8181)
[maven-release-plugin] prepare for next development iteration
[#2187] Always do a volatile read on the refCnt
[#1010] Add verify module to check osgi bundles
Update jetty-alpn-agent version to support latest JDK 8 release. (#8402)
HTTP/2 Sending a GO_AWAY with an error code should close conneciton
[maven-release-plugin] prepare for next development iteration
Merge pull request #261 from CruzBishop/logger-usage
No need to do a memory copy to verify snappy identifier
Add ApplicationProtocolConfig.DISABLED
Clean up the exception messages
Fix performance issue in OioSocketChannel since previous refactoring
Fix checkstype
Fix javadocs for ObjectUtil methods.
[#3785] Correctly handle connection refused with native transport
[#952] Allow to switch to single message decoding mode on the fly
[#1422] ReadOnlyByteBuffer.isWritable() should return false
Correctly support SSLSession.getId() when using OpenSslEngine
Upgrade dependencies to versions which use ASM 6.0.0+
Correctly handle byte shifting if system does not support unaligned access.
[maven-release-plugin] prepare release netty-4.1.10.Final
Rename FastLzFramed* to FastLzFrame*
[#4505] Correctly handle whitespaces in websocket uri's.
Support compiling netty with Java9
Update to netty-tcnative 2.0.0.Beta7
Fix IllegalReferenceCountException which occurs when multipart data is stored in memory
Some changes to the examples to show the usage of @Sharable
Simplified DefaultChannelPipeline by making its list head final
Remove OSGi import of JCTools since it is shaded.
[maven-release-plugin] prepare release netty-4.1.0.CR3
Fix checkstyle warning
Add ChannelPipeline.first/lastContext() / Cleanup
Fix NPE in OpenSslEngine
Do not call System.nanoTime() in ReadTimeoutHandler.channelRead()
Added TRACE level to Internal Logger
Have microbenchmarks produce a deployable artifact. Fix some minor miscellaneous issues.
Documentation redone for Cookie
[#2544] Correctly parse Multipart-mixed POST HTTP request in case of entity ends with odd number of 0x0D
[#1692] Allow to set WRITE_BUFFER_HIGH_WATER_MARK and WRITE_BUFFER_LOW_WATER_MARK via ChannelOption
Fix Snappy decoding of large 2-byte literal lengths and copy offsets
Remove multiple calls to recordLeakNonRefCountingOperation() in AdvancedLeakAwareByteBuf.forEachByteDesc
Allow to set Http2HeaderEncoder.SensitivityDetector in the Http2ConnectionHandler
Add unescapeCsv to StringUtil
Remove unused configuration properties and their related classes
[maven-release-plugin] prepare release netty-3.1.2.GA
Fix SslContextBuilder swapping client and server
[#5059] Deprecate method with typo and introduce a new one without typo
[#1628] Fix bug in ReadOnlyByteByteBufferBuf where get operations threw ReadOnlyBufferException
Convert fields to the local variable when possible
Reorder methods / Move buffer expansion logic in OIO
Correctly check if cipher is supported for each SslProvider before trying to run test and fix buffer leaks in test. (#8247)
Fixed rfc violation about sending extension frame in the middle of headers
Keep channel's outbound buffer in AbstractChannel
* Upgraded dependencies
Respect MAX_MESSAGES_PER_READ in LocalChannel / LocalServerChannel. (#7885)
Upgraded to Google Protobuf 2.3.0
LocationAwareSlf4jLogger does not correctly format log message. (#8595)
Don't trigger IOException at ChunkedStream.isEndOfInput()
Begin 4.0
Make DatagramChannel impls .isActive() return true when the underlying Channel is open. This also fixes [#1830]
Added a link to the Servlet API Documentation
[maven-release-plugin] prepare release netty-4.0.0.CR5
Hide the constructors of ChannelOption to force using dedicated option type
[maven-release-plugin] prepare release netty-4.1.16.Final
[#5598] Ensure SslHandler not log false-positives when try to close the channel due timeout.
DefaultSocks5CommandRequest incorrectly rejects SOCKS5 commands with dstPort=0
Maven compiler plugin 3.8.0 (#8417)
Updated the eclipse plugin
Fix possible NPE in HttpCunkedInput if wrapped ChunkedInput.readChunk(...) return null.
EpollEventLoopGroup support Executor
SPDY: fix for mozilla firefox bug 754766
Add DatagramChannel.isConnected()
Add test for shading netty-tcnative. (#8157)
Fixed all SPDY echo tests / Handle closed old I/O channels correctly
[#2280] Correct logic in Native.finishConnect. Fix use of optval parameter in c getOption function. In epoll event loop, check that channel is open before processing event.
IovArray.add(...) should check if buffer has memory address.
Minor ClientCookieDecoder improvements
[#1515] Add WebSocketFrameEncoder and WebSocketFrameDecoder interfaces and let our impls implement it
Potential fix for the release problem
Add support for IP_FREEBIND when using native transport
Use the source frame's allocator instead of the unpooled allocator
Enable resource leak detection during test
Add javadocs to AIO and also fix a few warnings
Move logging classes from internal to internal.logging
[#3680] Enabled SecurityManager results in ClassNotFoundError during io.netty.util.NetUtil initialization
Upgrade to apiviz 1.3.2.GA. See #676
[maven-release-plugin] prepare release netty-4.0.14.Final
Use Short.MAX_VALUE, as it accurately represents what we're trying to limit ourselves to
[#1682] HttpVersion.valueOf(...) should not convert to uppercase
Upgrade to Karaf 3.0.0.RC1
[#1878] Fix leak of ByteBuf when masked payload is used
Use SSL.setKeyMaterial(...) to test if the KeyManagerFactory is supported (#8985)
Add exceptions for CONNACK's return code for MQTT 3.1 specification
ByteBufUtil.writeUtf8 Surrogate Support
Clean up following #6016
SPDY: fix regression in SpdyFrameDecoder.decodeHeaderBlock()
Set memory for compiler as otherwise it sometimes fails here
Cleanup : removed unused empty arrays and simplified initialization
Allow to access uri of QueryStringDecoder. Related to [#2896]
[#1201] Correctly handle mix of not compressed and compressed requests
Add support for Unix Domain Sockets when using native epoll transport
Moved http tunnel implementation into org.jboss.netty.channel.socket.http package, replacing the original implementation.
Re-add Unsafe.voidPromise() which can be used for Unsafe operations for which no notification should be done [#1375]
Made the echo example easier to understand by splitting EchoHandler into EchoClientHandler and EchoServerHandler
Clean up netty-metrics-yammer pom.xml
[maven-release-plugin] prepare release netty-4.1.11.Final
Don't require HttpChunkAggregator to be present in pipeline for Web Sockets.
OpenSslEngine option to wrap/unwrap multiple packets per call
Don't enforce JZlibDecoder on JDK7+, close #4707
Cleanup code in ssl package.
OpenSslEngine remove unecessary rejectRemoteInitiatedRenegation call
ByteString arrayOffset method
Updated NOTICE.txt and added COPYRIGHT.txt following the JBoss.org guideline
Fix SnappyFramedDecoder checksum validation and add a pair of suitable unit tests
Fixes NPE in Corshandler for unauthorized prefligt requests (#7865)
Issue â„–6802. Not specified field in MQTT codec (#6807)
[#2692] Allows notify ChannelFutureProgressListener on complete writes
[#2653] Remove unnecessary ensureAccessible() calls
Handle handshake failure in Websocket Client example
Deprecation cleanup for HTTP headers
[#5313] Correctly catch errors during bootstrap.
Correctly support SO_TIMEOUT for OioDatagramChannel
Support for FireFox websockets. They use window.MozWebSocket rather than window.WebSocket.
Remove call to SSL.setHostNameValidation(...) as it is done in the TrustManager (#8981)
Moved CaseIgnoringComparator to org.jboss.nety.handler.codec.http because it is used only by the classes there
Next round for async channel api support a.k.a nio2. See See #396
Checks accessibility in the #slice and #duplicate methods of ByteBuf (#7846)
HTTP/2 move internal HPACK classes to the http2 package
Implement a Bzip2Decoder
Correctly let Http2UnkownFrame extend HttpStreamFrame and so be usable with Http2MultiplexCodec. (#7976)
Add back support for FileRegion. See #668
Better exception message to tell the user why it is not supported
Motivation: (#7848)
Allow rejection of remote initiated renegotiation
Implement ProgressivePromise notification in NIO byte channels and ChunkedWriteHandler
Revert "Fix #1075: DefaultChannelHandlerContext.fireChannelSuspended and fireInboundBufferUpdated do not work correctly if handlers with EventExecutor are added or removed from pipeline."
Allow for method chaining
HTTP/2 Don't Flow Control Iniital Headers
Include mvn wrapper to make setup of development env easier
* Reorganized HTTP examples (will add file server example later)
When System property is empty use def value.
Remove TaskScheduler and ImmediateEventExecutor that requires TaskScheduler
More robust automatic messageType detection for ChannelInboundMessageHandlerAdapter and MessageToMessageDecoder
Simplify the logic for updating OP_WRITE in the NIO transport
Merge pull request #421 from Massive-Dynamics/websocket-util-doc
Adding check for zero readable bytes in WebSocket08FrameDecoder decode.
Fix random number generators in WebSocketUtil
fullbuild -> full
Add a pax-exam based OSGi test suite
Support using an Executor to offload blocking / long-running tasks whâ€¦ (#8847)
Support Unicode filenames and spaces in directory listing
[maven-release-plugin] prepare release netty-3.1.0.ALPHA1
Allow easier use of AIO transport via bootstrap. Related to [#725]
Cleanup HTTP/2 tests for Http2FrameCodec and Http2MultiplexCodec (#8646)
Lz4FrameEncoder should prefer direct buffers for its output.
Fix checkstyle
Backport the tests in ReentrantChannelTest
Fix a buffer leak in BinaryMemcacheObjectAggregatorTest
[maven-release-plugin] prepare for next development iteration
[#1650] Make it possible to override isSharable() to simplify things for clojure users
Warn about not-supported ChannelOption when bootstrap Channels.
Make use of ByteBufProcessor for extract initial line and headers
Merge pull request #586 from sprsquish/fix-websocket-teardown
Allow to enable session cache when using OpenSsl
Only run PemEncodedTest if OpenSsl.useKeyManagerFactory() returns false.
Make sure ChunkedInput.close() is not called before the write is complete. See #303
fix writability callback
UnsafeDetectUtil also checks that the Unsafe class has the field theUnsafe to make it work on Android platform.
Cleanup buffer tests.
Avoid unnecessary string conversion where possible
Determine the default allocator from system property
OpenSslEngine support unwrap plaintext greater than 2^14 and avoid
Rename formatUserMessage to formatSimple and use it in two-args formatter in LoggingHandler
Prefer JDK ThreadLocalRandom implementation over ours.
Add sonatype-oss-release profile
Removed links to the source code in JavaDoc
HTTP/2 DefaultHttp2ConnectionEncoder data frame size incorrect if error
Overall clean-up on socksx package
Add NonStickyEventExecutorGroup
Fix SelectableChannel support in NioEventLoop (#8344)
Correctly handle non IOException during read in NioServerSocketChannel
Let OpenSslEngine.wrap(...) / OpenSslEngine.unwrap(...) behave like stated in the javadocs.
More javadocs
Add user possibility to skip the evaluation of a certain websocket exâ€¦ (#8910)
[maven-release-plugin] prepare for next development iteration
[maven-release-plugin] prepare for next development iteration
codec-memcache: No need to allocate a buffer if no extra is used.
ApplicationProtocolNegotiationHandler doesn't work with SniHandler
Overall clean-up of HttpObjectAggregator / Handle oversized response differently
Fix #2275 %s WebSocket version %s server handshake
[#1136] Fix possible IllegalBufferAccessException when remove itself from the pipeline
[maven-release-plugin] prepare for next development iteration
Remove the constructors that uses ImmediateEventExecutor from DefaultChannelGroup
Code cleanup
HTTP/2 GOAWAY Reference Count Issue
[#4010] Correctly handle whitespaces in HttpPostMultipartRequestDecoder
Update to latest jmh version
Fix UDP Multicast writes. See #237
Allow to specify the used buffer type for ChannelInboundByteBufHandler and ChannelOutboundByteBufHandler by configuration. As default it tries to use a direct ByteBuf
Rename the artifact 'netty' to 'netty-all' and make it non-OSGi
Respect validateHeaders when duplicate/copy the response/request
ChunkedInput.readChunk parameter of type ByteBufAllocator
Override and so delegate all methods in OpenSslX509Certificate (#8472)
[maven-release-plugin] prepare for next development iteration
[#870] Convert all modules into osgi bundles
Fix example
Add test cases for HttpContentCompressor
Check if the remoteAddress is null before set it on DatagramPacket to prevent IllegalArgumentException. See #615
Fix compilation errors
Remove unused import
Rewrite HttpObjectDecoder to make use of proper state machine
Add 'is' prefix to boolean getters if their meaning is ambiguous
Leak Detector disclosing when records dropped
Use tcnative's new setVerify modes
* Renamed AbstractLocalChannel to DefaultLocalChannel
Move ChannelInputShutdownEvent to socket package as this is where it belongs to. Also added some javadocs
Provide more control over DnsNameResolver.query() / Add NameResolver.resolveAll()
Auto-generate the handler name when null is specified as a name

Unify KQueue and Epoll wait timeout approach
1)renamed sctp payload to sctp frame 2)added sctp codec, handler classes
Make sure writing to a closed channel does not trigger an UnsupportedOperationException
Update Groovy to 2.4.8 for Java 9-ea+154 support.
Fix for a newly intrduced bug in #5377
Fix resource leak in LengthFieldBasedFrameDecoderTest
Fix issue where the bytes/messages are forwarded to the wrong handler
Provide helper methods in ByteBufUtil to write UTF-8/ASCII CharSequences. Related to [#909]
Http2FrameLogger avoid hex dump of the ByteBufs when log disabled
use barchardt-udt 2.3.0 release. This fixes #1290 and 1329
SwappedByteBuf.unwrap() should return wrapped buffer.
[#1626] Use static fields for default values
Port the changes in SpdyHeaderBlockRawDecoder to master & 4.0
Harden ref-counting concurrency semantics (#8583)
Update for netty-tcnative API changes
Deprecate Unpooled.unmodifiableBuffer(ByteBuf...) (#8096)
Fix the last value in AsciiString.trim
The handshake handler should not handle the exception and simply close the socket. The exception should be propagated to the WebSocketServerProtocolHandler to send the appropriate response and then close the socket.
Reduce the time taken by NetUtil and DefaultChannelId class initialization
Almost finish javadocs for codec module
Replace TypeParameterFinder with TypeParameterMatcher
Compare HttpMethod by reference (#8815)
[maven-release-plugin] prepare release netty-4.1.28.Final
[maven-release-plugin] prepare release netty-4.1.34.Final
Fix checkstyle
Remove duplicated code
Updating user guide
Bump up version to reflect correct one
Add logging configuration to pom.xml
Use constant string instead of user provided file name for DiskFileUpload temp file names.
Send a websocket close frame with status code when receiving invalid frames
Upgrade dependencies
Fixed issue: NETTY-162  directBuffer cannot create buffer with LITTLE_ENDIAN endianness
Optimize and minimize bound checks
Typo
